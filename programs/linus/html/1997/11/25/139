    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/11/24/64">First message in thread</a></li><li><a href="/lkml/1997/11/24/72">Jes Degn Soerensen</a><ul><li><a href="/lkml/1997/11/25/134">"Theodore Y. Ts'o"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/1997/11/25/148">"Adam D. Bradley"</a><ul><li><a href="/lkml/1997/11/25/152">(H. Peter Anvin)</a></li><li><a href="/lkml/1997/11/26/50">(Richard Masoner)</a><ul><li><a href="/lkml/1997/11/27/33">Rik van Riel</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 25 Nov 1997 16:47:48 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: TTY changes to 2.1.65</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 25 Nov 1997, Theodore Y. Ts'o wrote:<br />&gt; <br />&gt;    Another thing I would like to see in the generic code is an interface<br />&gt;    to register serial drivers instead of the current approach where every<br />&gt;    serial driver is assigned its own major.<br />&gt; <br />&gt;    I see no reason for wasting all these majors on this and IMHO it is a<br />&gt;    lot better to use dynamic allocation of serial devices, thus if one<br />&gt;    replaces a serial board with a different brand it is not necessary to<br />&gt;    go and change the entire software setup. <br />&gt; <br />&gt; It's something to think about, but doing this in a way that doesn't<br />&gt; break compatibility with either (a) existing systems' /dev directories<br />&gt; and (b) all of the existing tty device drivers will be a wee bit<br />&gt; challenging.  It'll probably be a while before I get to this one,<br />&gt; actually. <br /><br />I don't actually think we should do this the way Jes implies. <br /><br />I _do_ think that we should have an added level of indirection between the<br />devices and the device numbers, though. Every time larger device numbers<br />come up, the added indirection also tends to come up. <br /><br />In short, I think it makes sense to have a better mapping from device<br />numbers to actual devices, and I _don't_ think that this mapping should be<br />done by the device layer, it should be done at a higher level. A better<br />mapping gives us:<br /><br /> - binary compatibility. Imagine a platform where you want to support<br />   different device numbering schemes by different systems. You may want<br />   to make the device numbers more "virtual", in that they might depend on<br />   the type of process you're running.<br /><br /> - sharing majors between devices. Right now this is rather painful, and<br />   we have this "misc" device for a specific subset of this (mice and<br />   other random devices that tend to need only one minor number). But if<br />   we again had this mapping done in a more generic way, we could for<br />   example have two different SCSI device drivers that wouldn't have any<br />   common ground, and instead of having the SCSI driver figure out what<br />   the major means, we'd have the device mapper just do it at a higher<br />   level so that the devices really could be totally independent. <br /><br /> - IO request queues. Right now the IO requests are done according to<br />   major number, but if we had a better internal representation we could<br />   make the IO request queues be per-device (or per-driver, depending on<br />   how the driver wants them). Again, the reason why we queue them per<br />   major is not because we want to, but because we want to do the queuing<br />   at a higher level that doesn't know about driver internals. If we had a<br />   "mapper" level for device numbers, we could do much better queueing. <br /><br /> - performance. 16-bit device numbers are actually _bad_ for performance,<br />   because on many architectures (including intel, although less so than<br />   with some others), accessing and comparing 16-bit entities is slower<br />   than using pointers or other more "native" data structures. Using<br />   another format internally may be advantageous. <br /><br /> - backwards compatibility - when device numbers change, the drivers<br />   themselves wouldn't need to worry, only the mapper would be implicated<br />   (this is kind of the same issue as binary compatibility). <br /><br />and <br /><br /> - the above case: we could much more easily pack different drivers to use<br />   the same "major" because the drivers themselves wouldn't even know. <br /><br />In short, I'd actually like an approach where kernel internals use a<br />opaque "device ID" - that doesn't have a minor or a major associated with<br />it at all. <br /><br />As mentioned, this has been talked about before, and I think Andries<br />Brouwer actually had patches to do some of it (the "device ID" being a<br />pointer to a device block). <br /><br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
