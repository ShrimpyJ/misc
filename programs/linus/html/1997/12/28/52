    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/12/28/7">First message in thread</a></li><li><a href="/lkml/1997/12/28/38">(Alan Cox)</a><ul><li><a href="/lkml/1997/12/28/43"> kwrohrer&#64;enteract ...</a><ul><li class="origin"><a href="/lkml/1997/12/29/22">(Linus Torvalds)</a><ul><li><a href="/lkml/1997/12/29/22"> kwrohrer&#64;enteract ...</a><ul><li><a href="/lkml/1997/12/29/42">(Linus Torvalds)</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/1997/12/28/52/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.1.76, nfs client, and memory fragmentation</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">29 Dec 1997 03:10:03 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;199712282349.RAA00548&#64;jadrek.kwr&gt;,  &lt;kwrohrer&#64;enteract.com&gt; wrote:<br />&gt;And lo, Alan Cox saith unto me:<br />&gt;&gt; &gt; However, permanently non-freeable blocks should be rare, temporarily locked<br />&gt;&gt; &gt; blocks should be uncommon, and relocatable (= swappable) blocks should <br />&gt;&gt; &gt; abound.  And with a defragmenter available, especially one which can<br />&gt;&gt; No - alas not. Also for 32K chunks you only need 1 of the 8 pages to be <br />&gt;&gt; touched to be tied down. <br />&gt;You're right; the locked blocks themselves are somewhat rare but the higher-<br />&gt;order blocks they lock down multiplies that by up to the maximum order...<br /><br />Note that if people want to test alternatives, here's an old one that<br />I've done a long time ago and just re-implemented for 2.1.76.  I haven't<br />even rebooted this kernel to test that it works at all, but it used to<br />work.  I don't know if it is any better than what is there now, but it<br />might well be.. <br /><br />What this does is to essentially get rid of the old "minimum number of<br />free pages" policy, and instead makes it a "minimum allocation order<br />with an entry" policy.  The code will refuse to use up the last entry of<br />some allocation order for normal allocations - and the maximum allowable<br />order depends on the type of allocation. <br /><br />It might need some tweaks (and some bugfixes for all I know), but it<br />might be worth testing out if you have problems with or simply don't<br />like the current scheme. <br /><br />		Linus<br /><br />----<br />--- v2.1.76/linux/mm/page_alloc.c	Mon Jun 16 16:36:01 1997<br />+++ linux/mm/page_alloc.c	Sun Dec 28 18:59:51 1997<br />&#64;&#64; -161,11 +161,13 &#64;&#64;<br /> 	change_bit((index) &gt;&gt; (1+(order)), (area)-&gt;map)<br /> #define CAN_DMA(x) (PageDMA(x))<br /> #define ADDRESS(x) (PAGE_OFFSET + ((x) &lt;&lt; PAGE_SHIFT))<br />-#define RMQUEUE(order, dma) \<br />+#define RMQUEUE(order, maxorder, dma) \<br /> do { struct free_area_struct * area = free_area+order; \<br />      unsigned long new_order = order; \<br />-	do { struct page *prev = memory_head(area), *ret; \<br />-		while (memory_head(area) != (ret = prev-&gt;next)) { \<br />+	do { struct page *prev = memory_head(area), *ret = prev-&gt;next; \<br />+		while (memory_head(area) != ret) { \<br />+			if (new_order &gt;= maxorder &amp;&amp; ret-&gt;next == prev) \<br />+				break; \<br /> 			if (!dma || CAN_DMA(ret)) { \<br /> 				unsigned long map_nr = ret-&gt;map_nr; \<br /> 				(prev-&gt;next = ret-&gt;next)-&gt;prev = prev; \<br />&#64;&#64; -176,6 +178,7 &#64;&#64;<br /> 				return ADDRESS(map_nr); \<br /> 			} \<br /> 			prev = ret; \<br />+			ret = ret-&gt;next; \<br /> 		} \<br /> 		new_order++; area++; \<br /> 	} while (new_order &lt; NR_MEM_LISTS); \<br />&#64;&#64; -196,11 +199,23 &#64;&#64;<br /> <br /> unsigned long __get_free_pages(int priority, unsigned long order, int dma)<br /> {<br />-	unsigned long flags;<br />-	int reserved_pages;<br />+	unsigned long flags, maxorder;<br /> <br /> 	if (order &gt;= NR_MEM_LISTS)<br />-		return 0;<br />+		goto nopage;<br />+<br />+	/*<br />+	 * "maxorder" is the highest order number that we're allowed<br />+	 * to empty in order to find a free page..<br />+	 */<br />+	maxorder = order + NR_MEM_LISTS/3;<br />+	switch (priority) {<br />+	case GFP_ATOMIC:<br />+		maxorder = NR_MEM_LISTS;<br />+		/* fallthrough - no need to jump around */<br />+	case GFP_NFS:<br />+		maxorder += NR_MEM_LISTS/3;<br />+	}<br /> <br /> 	if (in_interrupt() &amp;&amp; priority != GFP_ATOMIC) {<br /> 		static int count = 0;<br />&#64;&#64; -211,19 +226,13 &#64;&#64;<br /> 		}<br /> 	}<br /> <br />-	reserved_pages = 5;<br />-	if (priority != GFP_NFS)<br />-		reserved_pages = min_free_pages;<br /> repeat:<br /> 	spin_lock_irqsave(&amp;page_alloc_lock, flags);<br />-	if ((priority==GFP_ATOMIC) || nr_free_pages &gt; reserved_pages) {<br />-		RMQUEUE(order, dma);<br />-		spin_unlock_irqrestore(&amp;page_alloc_lock, flags);<br />-		return 0;<br />-	}<br />+	RMQUEUE(order, maxorder, dma);<br /> 	spin_unlock_irqrestore(&amp;page_alloc_lock, flags);<br />-	if (priority != GFP_BUFFER &amp;&amp; try_to_free_page(priority, dma, 1))<br />+	if (priority != GFP_BUFFER &amp;&amp; priority != GFP_ATOMIC &amp;&amp; try_to_free_page(priority, dma, 1))<br /> 		goto repeat;<br />+nopage:<br /> 	return 0;<br /> }<br /> <br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
