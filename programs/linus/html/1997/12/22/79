    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/12/22/33">First message in thread</a></li><li><a href="/lkml/1997/12/22/59">Linus Torvalds</a><ul><li><a href="/lkml/1997/12/22/76">"Stephen R. van den Berg"</a><ul><li class="origin"><a href="/lkml/1997/12/22/80">(Linus Torvalds)</a><ul><li><a href="/lkml/1997/12/22/80">(Linus Torvalds)</a><ul><li><a href="/lkml/1997/12/22/96">Ricky Beam</a></li><li><a href="/lkml/1997/12/23/27">MOLNAR Ingo</a></li><li><a href="/lkml/1997/12/29/54">mlord</a></li></ul></li><li><a href="/lkml/1997/12/22/98">"Stephen R. van den Berg"</a><ul><li><a href="/lkml/1997/12/23/52">Gerard Roudier</a></li></ul></li></ul></li><li><a href="/lkml/1997/12/22/103">"Stephen R. van den Berg"</a><ul><li><a href="/lkml/1997/12/24/3">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Race conditions galore (2.0.33 and possibly 2.1.x)</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">22 Dec 1997 22:04:20 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;19971222214619.45376&#64;cuci.nl&gt;,<br />Stephen R. van den Berg &lt;srb&#64;cuci.nl&gt; wrote:<br />&gt;<br />&gt;But, to get back to the matter at hand:<br />&gt;1. I had a 2.0.33+ kernel, programs where hanging at times; all<br />&gt;   in buffer.c.  Rebooting did not help.<br />&gt;2. I patched buffer.c with the shown patch.  Rebooted and this time<br />&gt;   *one* program hung again.  This time in filemap.c.<br />&gt;3. Patched filemap.c the same as buffer.c.<br />&gt;4. Rebooted, hang-free for 19 hours up till now and still counting.<br />&gt;<br />&gt;No other changes.  Nor in the kernel, nor in userland.<br /><br />Clear enough.  However, the change in question still is only an ordering<br />change, and one that should not make any difference what-so-ever (it<br />re-orders the setting of "current-&gt;state" only across things that don't<br />actually _care_ about the state).  So we have it pinpointed to a (very<br />small) function, but I still don't like the fact that we haven't<br />pinpointed a cause.. <br /><br />The fact that this happens on an AMD K5 makes me wonder - does anybody<br />have an errata sheet for the AMD chips? There might be out-of-order<br />issues or something else strange going on that is K5-specific. <br /><br />It's not that I don't want to apply your patch - the patch is no worse<br />than the current code.  But I _do_ want to know why it makes any<br />difference for you, when it so patently shouldn't make any difference at<br />all.. <br /><br />&gt;BTW, I checked the hung processes with kdebug.  I did find that the<br />&gt;buffer they where hanging on was:<br />&gt;1. *NOT* locked anymore.  The buffer state was 0x9, the locked mask is 0x2<br />&gt;   I believe.<br /><br />Actually, it's bit #2, ie 0x4.  But you're right: 0x9 is certainly not<br />locked (it's "Uptodate+Touched", which is pretty much normal). <br /><br />&gt;2. We were still in its wait queue (first on the list), but we were not the<br />&gt;   only one.  If I recall correctly there was at least one other entry,<br />&gt;   if not more (I did not know yet at that point that the wait_queues<br />&gt;   where circular).<br /><br />Maybe the bug is that something marked the buffers as not locked without<br />waking anything up? Then your change in ordering might make a<br />difference, if the buffer has been touched multiple times. <br /><br />&gt;Hmmm...  Just thinking aloud here, so bear with me...<br />&gt;Looking at wake_up_process() I see that it indeed writes over p-&gt;state <br />&gt;in any case.  What's p-&gt;next_run?  When is that set?<br />&gt;Could it be that p-&gt;next_run is set and about to be cleared without<br />&gt;adding the task to the runqueue (in a different part of the kernel)?<br /><br />No, if we forgot to add the process to the run-queue, it would still<br />have been marked as TASK_RUNNABLE - even though it would never have been<br />actually run.  And you said that the stuck processes are always stuck in<br />disk wait according to "ps"...  So wake_up_process() was never called at<br />all. <br /><br />&gt;One more thing...   What if schedule() is being invoked with<br />&gt;current-&gt;state == TASK_RUNNING ?<br /><br />This is normal, and happens all the time. In particular, it happens<br />after any process has used up its time-slice..<br /><br />&gt;What if someone changes current-&gt;state while schedule() is running<br />&gt;(that *should* not be possible, considering that most of it runs<br />&gt;with interrupts disabled)?<br /><br />Nothing but the task itself can ever set "state" to anything but<br />runnable (ie you can only wake a task up from another task, you can<br />never try to force it to sleep).<br /><br />&gt;&gt;I wonder whether gcc might be changing the ordering here. That would<br />&gt;&gt;explain why your patch would make a difference..<br />&gt;<br />&gt;Possibly, but not in the parts where I patched.  Maybe there are parts<br />&gt;in sched.c which are being reordered?<br /><br />The scheduling is safe - I've looked at that code after the compiler has<br />munged it often enough, and it's been looked at by lots of people. <br /><br />&gt;&gt;In fact, the more I think about it, the more your patch makes sense<br />&gt;&gt;considering what gcc might do to the sources. Do you by any chance use<br />&gt;&gt;egcs or a recent snapshot of gcc? <br />&gt;<br />&gt;Sorry, no.   gcc version 2.7.2.1  (from a recent Debian distribution).<br /><br />Ok, 2.7.2.1 definitely doesn't do those kinds of re-ordering<br />optimizations (it would require memory alias analysis for correct code<br />generation, something that 2.7.x won't do). Hmm.. That leaves me with<br />two possibilities:<br /> - something clears the locked state without waking people up.  Do you<br />   use "md" or anything else that plays around with buffers?<br /> - really strange K5 bug<br /><br />Can anybody else come up with any ideas?<br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
