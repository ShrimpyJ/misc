    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/3/6/20">First message in thread</a></li><li><a href="/lkml/1997/3/6/20">Luca Lizzeri</a><ul><li class="origin"><a href="/lkml/1997/3/7/79">Linus Torvalds</a><ul><li><a href="/lkml/1997/3/7/79">Bob Taylor</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 6 Mar 1997 10:07:37 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Reading from socket: recv works read doesn't. Why ?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 6 Mar 1997, Luca Lizzeri wrote:<br />&gt; <br />&gt; I am porting a motif application from SunOs to Linux.<br />&gt; <br />&gt; I have two processes communicating over unix domain sockets.<br />&gt; <br />&gt; On the Sun everything works fine (apart from permitting double freeing a<br />&gt; memory area and the like :), on Linux I have a problem with read():<br />&gt; <br />&gt; socketpair(PF_UNIX, SOCK_STREAM, , 0, [8, 9]) = 0<br />&gt; fork()                                  = 380<br />&gt; close(9)                                = 0<br />&gt; oldselect(1024, [8], NULL, NULL, {3600, 0}) = 1 (in [8], left {3598, 910000})<br />&gt; read(8, 0xbffff67c, 4096)               = -1 EFAULT (Bad address)<br />&gt; <br />&gt; read() returns EFAULT whether the read buffer is allocated on the stack<br />&gt; or is malloc'ed (both of size 4096).<br /><br />At least in the above example the kernel is certainly correct: you should<br />get an EFAULT, because you certainly have _not_ allocated 4096 bytes of<br />space on the stack (the buffer address of the read is 0xbffff67c, and the<br />stack ends at 0xbfffffff, so you only have about 2.5kB worth of buffers<br />for it).<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
