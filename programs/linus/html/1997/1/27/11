    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/1/26/64">First message in thread</a></li><li><a href="/lkml/1997/1/26/64">Ion Badulescu</a><ul><li><a href="/lkml/1997/1/26/77">Trevor Johnson</a><ul><li><a href="/lkml/1997/1/27/2">Ion Badulescu</a></li></ul></li><li class="origin"><a href="/lkml/1997/1/28/5">Linus Torvalds</a><ul><li><a href="/lkml/1997/1/28/5">Ion Badulescu</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 27 Jan 1997 11:00:49 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Small fixes for 2.1.23</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 26 Jan 1997, Ion Badulescu wrote:<br />&gt; <br />&gt; Hi everyone,<br /><br />Hi there,<br /><br />&gt; The following patch, relative to 2.1.23, corrects the following<br />&gt; bugs/features:<br /><br />Ok, the rest of these look ok, but I'm not applying it because of the<br />"poll" buglet..<br /><br />&gt; - the binfmt_script bug which prevents killall from working on scripts<br />&gt; - the softdog bug which prevents a new daemon from opening the device if<br />&gt;   NO_WAY_OUT is defined and the old daemon is killed (e.g. when changing<br />&gt;   initlevels)<br />&gt; - the floppy bug - duplicated MODULE_PARM(floppy, "s") - which prevents<br />&gt;   floppy.c from compiling<br />&gt; - updates for drivers/sound/* (select-&gt;poll)<br />&gt; - finally, my own /proc/swaps patch updated for 2.1.23<br /><br />The select-&gt;poll changes make the source compile, but do not actually do<br />quite the right thing. The poll changes weren't only a matter of naming<br />changes, but also changed semantics somewhat (I don't do naming changes<br />just to change names usually: there is a reason why I didn't want<br />unmodified code to compile - it needs to get subtly fixed first). <br /><br />Anyway, I should have made the changes clear in my announcement of 2.1.23,<br />but I was too lazy. The changes in the poll behaviour can be broken down<br />into four different sub-areas:<br /><br /> - name change: "select" -&gt; "poll" on the VFS layer<br /> - argument change: only "struct file *" and "poll_table *"<br /> - return change: instead of returning 0/1, it returns a bitmask of POLL<br />   events. The old select code was called three times (once for SEL_IN,<br />   once for SEL_OUT and finally once for SEL_EX), while poll() is called<br />   just once, and returns a bitmask of all active events.<br /> - calling change: we don't call the function twice (like we used to),<br />   instead the function is supposed to add the wait entry to the<br />   poll_table _first_ before doing the tests (so that any change in state<br />   will wake up up correctly without any races - calling the function<br />   twice used to do that for us, but was inefficient) <br /><br />The changes can best be explained by showing a trivial example of a<br />select function that got changed:<br /><br />	static int aux_select(struct inode *inode, struct file *file,<br />		int sel_type, select_table * wait)<br />	{<br />	        if (sel_type != SEL_IN)<br />	                return 0;<br />	        if (aux_ready)<br />	                return 1;<br />	        select_wait(&amp;queue-&gt;proc_list, wait);<br />	        return 0;<br />	}<br /><br />the above got changed to:<br /><br />	static unsigned int aux_poll(struct file *file,<br />		poll_table * wait)<br />	{<br />	        poll_wait(&amp;queue-&gt;proc_list, wait); <br />	        if (aux_ready)<br />	                return POLLIN | POLLRDNORM;<br />	        return 0;<br />	}<br /><br />Note the differences: calling arguments changed, but most notably the<br />return values changed. Also, the select_wait() _used_ to be last (and only<br />done if we return zero), but in the poll version it is done first and done<br />regardless of what we return (that avoids a race condition - the way linux<br />does wakeups is so subtle to be almost impossible to explain without a<br />whiteboard. Very clever, but subtle).<br /><br />The above is just a trivial example, and it gets a bit more complex when<br />the old select code used to check for all of SEL_IN/SEL_OUT/SEL_EX<br />(because then the return bitmask becomes more complex to calculate), but<br />it shows the most important changes..<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
