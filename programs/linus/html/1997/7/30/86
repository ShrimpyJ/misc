    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/7/29/68">First message in thread</a></li><li><a href="/lkml/1997/7/30/55">Linus Torvalds</a><ul><li><a href="/lkml/1997/7/30/82">Martin von Loewis</a><ul><li><a href="/lkml/1997/7/30/84">Bill Hawes</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/1997/7/31/18">Mike Jagdis</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Jul 1997 16:23:23 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.1.47 oops (crash)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 31 Jul 1997, Martin von Loewis wrote:<br />&gt; <br />&gt; You've probably noticed it: some of the oopses were related to amd<br />&gt; umounting some file system, which then would case a negative d_count<br />&gt; on some totally unrelated dentry.<br />&gt; <br />&gt; Also, there was the report of ext2 inodes surviving an umount and<br />&gt; suddenly re-appearing on another file system.<br /><br />Ahh, you're right.<br /><br />&gt; Something is wrong with unmounting. Here's a theory:<br />&gt; <br />&gt; - iput removes the inode from the hash list only if nlink is zero<br />&gt; - iget, if the inode is not found, invokes get_new_inode<br />&gt; - get_new_inode, under certain circumstances, searches the hash list<br />&gt; - find_inode on the hash list searches for identical superblock and<br />&gt;   inode number<br /><br />I just found it - when we're invalidating inodes at unmount time, we do<br />not invalidate any inode that has a non-zero "i_nrpages". But we really<br />REALLY should do that.<br /><br />We do actually want to leave inodes with a non-zero i_nrpages alone under<br />normal circumstances, but unmounting is definitely not a normal<br />circumstance. <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
