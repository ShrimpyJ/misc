    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/7/12/1">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 11 Jul 1997 21:51:44 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Patch to improve fs/ext2/truncate.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 12 Jul 1997, Theodore Y. Ts'o wrote:<br />&gt; <br />&gt; Enclosed please find a patch which improves how files are deleted in<br />&gt; ext2.  This patch causes ext2 to *not* zero the data blocks in indirect<br />&gt; block, doubly indirect blocks, etc.  As discussed before, this makes it<br />&gt; easier to recover from accidentally deleted files, and it also speeds up<br />&gt; deletions since we don't needlessly write out metadata blocks that we<br />&gt; don't need to write out.<br />&gt; <br />&gt; Also, I've collapsed the swab32 variants back into a the main functions,<br />&gt; which reduces the kernel size by over 1k, for free.<br /><br />The "ininode" boolean could probably be removed by just _not_ ever<br />changing the block numbers in the inode to the CPU byte order: that way<br />all block numbers (whether they are in the inode or in a indirect block)<br />would always be in little-endian order. Then it wouldn't need any extra<br />code at all..<br /><br />There really isn't any reason to change to a CPU byteorder in the inode,<br />it doesn't actually win us anything "bmap()" will become infinitesimally<br />slower on big-endian machines, but that has never been a cycle-critical<br />function. <br /><br />I'll apply this patch, but if somebody would try out the above suggestion<br />and send me patches (relative to this patch), I'd be very interested..<br /><br />	Thanks,<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
