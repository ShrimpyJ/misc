    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/7/15/60">First message in thread</a></li><li class="origin"><a href="/lkml/1997/7/16/8">Linus Torvalds</a><ul><li><a href="/lkml/1997/7/16/8">linux kernel account</a><ul><li><a href="/lkml/1997/7/16/18">(Alan Cox)</a><ul><li><a href="/lkml/1997/7/16/22">"Russell Coker - mailing lists account"</a></li></ul></li></ul></li><li><a href="/lkml/1997/7/16/12">Edward Welbon</a><ul><li><a href="/lkml/1997/7/16/23">NIIBE Yutaka</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Jul 1997 21:10:58 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: dentries and a few other things.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />[ Cc'd to linux-kernel, as this is a valid concern  ]<br /><br />On Tue, 15 Jul 1997, David Kastrup wrote:<br />&gt; <br />&gt; I'd be interested in a few details about the new dentries.  I<br />&gt; understand that they will be used to speed up operations with SMP, and<br />&gt; they cannot really significantly lower the performance the way they<br />&gt; appear to me in the patches.<br /><br />The primary reason is _not_ to improve SMP performance in particular: the<br />primary reason for the new dentry setup is to improve performance on a<br />more general scale.<br /><br />The fact that the new code also has been written with SMP in mind makes it<br />a lot easier to do name lookups on multiple CPU's without having to get<br />the global kernel lock, but that's not so much because the stuff was<br />designed for SMP as simply because I'm so much more SMP-aware these days<br />when my main machines are multi-CPU boxes. <br /><br />So in essence the basic stuff is no UP- or SMP-specific, the basic idea is<br />just to make name lookups a lot faster. <br /><br />&gt; What I'd be interested in if there are file operations on single<br />&gt; processor machines for which their use might actually speed up things?<br />&gt; Somthing like directory searches perhaps?  Don't bother digging in<br />&gt; details, btw.<br /><br />The new dcache essentially makes inode lookup from a filename a lot<br />faster. The way it does this is:<br /><br /> - keep a direct pointer to the inode in the dcache. There was a very<br />   limited form of lookup caching in 2.0.x too, but it essentially only<br />   kept the inode number in the cache, so even if you got a cache hit you<br />   still had to actually look up the inode itself.<br /> - do a better job of hashing the names, so that we get fewer hash<br />   collisions. Also, keep a 32-bit hash around to avoid doing compares on<br />   strings: we end up doing a lot fewer string compares because the new<br />   hashes are so good that we almost never get a hash collision.<br /><br />The above said, being faster is only a small part of the charm of the new<br />dcache: the much more important issue is that the way the new dcache is<br />laid out, it allows us to do things that used to be impossible. Only one<br />of these is the reverse mapping from inodes to names, that UNIX<br />traditionally cannot do (getting the current working directory name is a<br />special case of this, but the dcache is much more general than just that). <br /><br />The original reason for the dcache was for Thomas Schoebel to do on-line<br />mirroring of filesystems which required a generalized way of getting the<br />file names from the inode. That has actually been disabled in the newer<br />test-kernels, but that's not because it's a bad feature: I just wanted to<br />make sure that I had the basics working really correctly before the new<br />extra features are added back in. <br /><br />Having the dcache also actually allows various low-level filesystems to do<br />things that they couldn't do before. For example, the dcache keeps track<br />of all parent&lt;-&gt;child relationships, so thanks to the new dcache you can<br />write a filesystem that has no "." or ".." entry on-disk at all, yet "."<br />and ".." will work for the user.<br /><br />(Omitting the special files "." and ".." from the on-disk filesystem can<br />potentially make many operations much easier to do). <br /><br />NOTE NOTE NOTE! For various reasons the current test-images have not<br />generally been faster for real-world applications than previous kernels: <br />the main reason for the slowdowns has been that the code has had various<br />memory leaks and bad garbage collection, so physical memory was wasted<br />that would have been better used for user processes or disk caching.<br /><br />Right now it _looks_ like pre-2.1.45-7 has most of these problems fixed,<br />but I've been wrong before..<br /><br />&gt; Am I right in guessing that the various file system drivers wil all<br />&gt; need to be updated for dentries?<br /><br />Yes. The work isn't too onerous, but it does take some time doing. Right<br />now only ext2/isofs/proc/NFS/autofs are supported, and both NFS and autofs<br />have some problems because the current dcache is way too good at caching<br />data that in some cases should be invalidated. <br /><br />I don't expect this to be a major problem, most traditional filesystems<br />are pretty trivially converted, and once I write the support routines to<br />allow NFS to time out the dentries it wants to, the rest will also be<br />trivial. <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
