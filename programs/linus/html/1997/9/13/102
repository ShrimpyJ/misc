    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/9/13/102">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 13 Sep 1997 10:48:28 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: patch for 2.1.55 pre-1 minix/sysv/affs</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 13 Sep 1997, Andi Kleen wrote:<br /><br />&gt; Linus Torvalds &lt;torvalds&#64;transmeta.com&gt; writes:<br />&gt; <br />&gt; &gt; Actually, I suspect that what made goto's impopular among some computer<br />&gt; &gt; scientists was not the code itself, but the bad compilers of the day. They<br />&gt; &gt; just blamed it on "spagetti code". But take it from me: it's a damn lot<br />&gt; &gt; easier to create bad code by overusing "good" features like exceptions and<br />&gt; &gt; overloading than it is by using "goto". <br />&gt; <br />&gt; It's a lot easier to write a good optimizing compiler for languages<br />&gt; that disallow goto. Just open the Dragon Book and compare the complexity<br />&gt; of the algorithms that work on reductible graphs (that are the programs<br />&gt; with no goto) with the ones that work on arbitary graphs.<br /><br />The dragon book is what, 20 years old now? It's a good book, no doubt<br />about it, but it is still aimed at a rather simple compiler setup. <br /><br />The fact is that any good compiler has to be able to handle goto-like<br />behaviour anyway these days. You can make a _simple_ compiler without it,<br />but you can't make a good compiler.<br /><br />To make a language really simple to optimize, you also have to disallow<br />"break"  and "continue": any loops must have only one exit point (defined<br />by the language), and you must have only one point of return from<br />subroutines. <br /><br />Which is pretty much what Pascal does. <br /><br />But don't kid yourself that Pascal does this for any altrusitic reasons<br />like "goto is bad for you". Pascal just gives you a straightjacket that<br />makes it easier for the compiler, but it makes it harder for the<br />programmer. And anybody who seriously thinks that having just one return<br />point is a _good_ language feature needs a brain transplant. <br /><br />Straightjackets are for crazy people. "It's for your own best", indeed.. <br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
