    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/6/2/47">First message in thread</a></li><li><a href="/lkml/1997/6/2/47">(H.J. Lu)</a><ul><li class="origin"><a href="/lkml/1997/6/2/46">Linus Torvalds</a><ul><li><a href="/lkml/1997/6/2/46">"David S. Miller"</a><ul><li><a href="/lkml/1997/6/2/57">(H.J. Lu)</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 2 Jun 1997 13:12:46 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: A small patch?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 2 Jun 1997, H.J. Lu wrote:<br />&gt; <br />&gt; I just took another look at the code. Does this patch for<br />&gt; __add_wait_queue () look ok?<br /><br />This should never happen, your patch shouldn't make any difference to the<br />behaviour (except make things a teeny bit slower due to the new test).<br /><br />&gt; Index: include/linux/sched.h<br />&gt; ===================================================================<br />&gt; RCS file: /home/work/cvs/linux/linux/include/linux/sched.h,v<br />&gt; retrieving revision 1.1.1.12<br />&gt; diff -u -r1.1.1.12 sched.h<br />&gt; --- sched.h	1997/05/24 01:39:23	1.1.1.12<br />&gt; +++ sched.h	1997/06/02 20:02:49<br />&gt; &#64;&#64; -505,6 +505,8 &#64;&#64;<br />&gt; <br />&gt;  	if (head)<br />&gt;  		next = head;<br />&gt; +	if (!next)<br />&gt; +		next = wait;<br />&gt;  	*p = wait;<br />&gt;  	wait-&gt;next = next;<br />&gt;  }<br /><br />next cannot be NULL at that point, unless somebody has passed<br />add_wait_queue a bad pointer. The code looks like<br /><br />	extern inline void __add_wait_queue(struct wait_queue ** p, struct wait_queue * wait)<br />	{<br />	        struct wait_queue *head = *p;<br />	        struct wait_queue *next = WAIT_QUEUE_HEAD(p);<br />	<br />	        if (head)<br />	                next = head;<br />	        *p = wait;<br />	        wait-&gt;next = next;<br />	}<br /><br /><br />Note that "next" is initialized to WAIT_QUEUE_HEAD(p), which cannot be<br />NULL unless "p" is a totally invalid pointer (in which case you'd get a<br />fault at the *p assignment anyway). And the "next = head" assignment<br />obviously only happens if head is non-NULL, so next cannot become NULL<br />there either. <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
