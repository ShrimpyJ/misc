    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/5/29/52">First message in thread</a></li><li><a href="/lkml/1997/5/29/52">Chris Evans</a><ul><li><a href="/lkml/1997/5/29/94">Evan Jeffrey</a><ul><li class="origin"><a href="/lkml/1997/5/30/68">(Linus Torvalds)</a><ul><li><a href="/lkml/1997/5/30/68">(Matthias Urlichs)</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/1997/5/30/8/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.0.30 (and pre-2.0.31) OOPS - repeatable, reliable, disgraceful :-)</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">30 May 1997 05:00:16 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;199705300035.TAA00585&#64;eliot213.wuh.wustl.edu&gt;,<br />Evan Jeffrey  &lt;ejeffrey&#64;eliot213.wuh.wustl.edu&gt; wrote:<br />&gt;&gt;<br />&gt;&gt;May 29 14:54:45 ferret kernel: general protection: 0000<br />&gt;...<br />&gt;&gt;Methinks this should be fixed.... patches cc: to this address please,<br />&gt;&gt;since we're about to reboot after a memory upgrade....<br />&gt;<br />&gt;I posted about this in 2.1.38, in which case it locks the system rock solid<br />&gt;for approximately 5 minutes, at which point I get the segfault and<br />&gt;everything contiunues normally.  I can confirm that it still happens in<br />&gt;2.1.41, and in addition, a very interesting property:  the lock is VERY<br />&gt;hard, ie my clock is now 10 minutes slow (I just did it twice...)  I have no<br />&gt;idea if this is normal or not, but I thought it was interesting.<br /><br />Oops.<br /><br />The reason for the lock is because the later 2.1.x had a delay loop in<br />the panic prinout routine.  And that delay loop is "kind of" long.  It<br />was supposed to be for something like 20 seconds on a 200MHz PPro, I can<br />well imagine that it takes ten minutes on a slower machine. <br /><br />Fix: just delete the two _long_ while-loops in arch/i386/kernel/traps.c<br />(die_if_kernel()). That was just a debugging aid that was never supposed<br />to be released but which I didn't notice in my diffs ;)<br /><br />&gt;May 29 19:22:31 eliot213 kernel: general protection: 0000<br />&gt;May 29 19:22:31 eliot213 kernel: CPU:    0<br />&gt;May 29 19:22:31 eliot213 kernel: EIP:    0010:[&lt;c01095f6&gt;]<br />&gt;May 29 19:22:31 eliot213 kernel: EFLAGS: 00010282<br />&gt;May 29 19:22:31 eliot213 kernel: eax: 00000000   ebx: 0805ba78   ecx: 0805baa8   edx: 00000000<br />&gt;May 29 19:22:31 eliot213 kernel: esi: 0805baa8   edi: bffffd3a   ebp: bffffc28   esp: c0329fec<br />&gt;May 29 19:22:31 eliot213 kernel: ds: 002b   es: 002b   ss: 0018<br />&gt;May 29 19:22:31 eliot213 kernel: Process vmlinux (pid: 429, process nr: 41, stackpage=c0329000)<br />&gt;May 29 19:22:31 eliot213 kernel: Stack: c0100000 00000023 00000282 bffffbb4 0000002b<br />&gt;May 29 19:22:31 eliot213 kernel: Call Trace: [&lt;c0100000&gt;]<br />&gt;May 29 19:22:31 eliot213 kernel: Code: cf 89 f6 8d bc 27 00 00 00 00 f7 44 24 30 00 00 02 00 54 75<br />&gt;<br />&gt;&gt;&gt;EIP: c01095f6 &lt;ret_with_reschedule+25/2f&gt;<br />&gt;Trace: c0100000 &lt;startup_32&gt;<br /><br />This is a pretty harmless panic in itself - it's just the delay loop<br />which makes it bothersome.  The return to user mode is returning with a<br />EIP that is out of range for the code segment.  It's not pretty, but it<br />is totally harmless (it is caused by the fact that the "initial eip" for<br />the kernel image is outside the normal user space address space, and the<br />kernel doesn't actually check it in execve() because it knows the thing<br />will be caught later). <br /><br />This patch should fix it (NOTE! Do NOT EVER apply this patch to the<br />2.0.x tree: it's a major security hole in the 2.0.x series.  It only<br />works on 2.1.x due to the new user level access scheme). <br /><br />Totally untested, of course,<br /><br />		Linus<br /><br />----- Apply to 2.1.x ONLY -----<br />diff -u --recursive --new-file v2.1.42/linux/arch/i386/kernel/head.S linux/arch/i386/kernel/head.S<br />--- v2.1.42/linux/arch/i386/kernel/head.S	Tue May 13 22:41:00 1997<br />+++ linux/arch/i386/kernel/head.S	Thu May 29 21:52:23 1997<br />&#64;&#64; -532,8 +532,8 &#64;&#64;<br /> 	.quad 0x0000000000000000	/* not used */<br /> 	.quad 0x00cf9a000000ffff	/* 0x10 kernel 4GB code at 0x00000000 */<br /> 	.quad 0x00cf92000000ffff	/* 0x18 kernel 4GB data at 0x00000000 */<br />-	.quad 0x00cbfa000000ffff	/* 0x23 user   3GB code at 0x00000000 */<br />-	.quad 0x00cbf2000000ffff	/* 0x2b user   3GB data at 0x00000000 */<br />+	.quad 0x00cffa000000ffff	/* 0x23 user   4GB code at 0x00000000 */<br />+	.quad 0x00cff2000000ffff	/* 0x2b user   4GB data at 0x00000000 */<br /> 	.quad 0x0000000000000000	/* not used */<br /> 	.quad 0x0000000000000000	/* not used */<br /> 	.fill 2*NR_TASKS,8,0		/* space for LDT's and TSS's etc */<br />diff -u --recursive --new-file v2.1.42/linux/arch/i386/kernel/traps.c linux/arch/i386/kernel/traps.c<br />--- v2.1.42/linux/arch/i386/kernel/traps.c	Tue May 13 22:41:01 1997<br />+++ linux/arch/i386/kernel/traps.c	Thu May 29 21:45:21 1997<br />&#64;&#64; -191,8 +191,6 &#64;&#64;<br /> 	spin_lock_irq(&amp;die_lock);<br /> 	printk("%s: %04lx\n", str, err &amp; 0xffff);<br /> 	show_registers(regs);<br />-do { int i=2000000000; while (i) i--; } while (0);<br />-do { int i=2000000000; while (i) i--; } while (0);<br /> 	spin_unlock_irq(&amp;die_lock);<br /> 	do_exit(SIGSEGV);<br /> }<br />----- Apply to 2.1.x ONLY -----<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
