    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1997/10/13/9">First message in thread</a></li><li><a href="/lkml/1997/10/13/9">Richard Henderson</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Oct 1997 08:37:34 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: vfs changes for pread/pwrite</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 13 Oct 1997, Richard Henderson wrote:<br />&gt;<br />&gt; Single Unix adds two new system calls, pread and pwrite, that take<br />&gt; an extra argument for the location to do the I/O.  The "p" stands<br />&gt; for "positioned" I guess.<br /><br />This is something that I've wanted for other reasons for a long time: <br />async IO. When doing aio with threads rather than with special aio system<br />calls the thread must not change the file position in the parent, so we<br />need the pio versions regardless of any single-UNIX issues. <br /><br />&gt; I've got patches partly done, but it is a lot of work changing things<br />&gt; up, and I thought I'd run things by folks before I finish.  I've <br />&gt; changed the VFS read/write functions to be<br />&gt; <br />&gt;   ssize_t (*read)(struct file *file, char *buf, size_t n, loff_t *ppos)<br />&gt; <br />&gt; and similar for write.  In the normal case ppos==&amp;file-&gt;f_pos, and<br />&gt; for pread, ppos points to a stack variable.  This is also how non-<br />&gt; seekable files know to return -ESPIPE.<br /><br />Fair enough.<br /><br />&gt; Note the actual use of the posix types.  Is there any reason why <br />&gt; we weren't using these before?  I've found quite a number of places<br />&gt; so far that the code doesn't even use long, but int.  True, it isn't<br />&gt; going to be every day that someone writes more than 2GB in one syscall,<br />&gt; but it seems Wrong in any case.<br /><br />There's nothing wrong with the POSIX types, it just wasn't ever very high<br />on my priority of things to fix. The above looks fine.<br /><br />&gt; Oh, one last thing.  Am I right in assuming that file-&gt;f_dentry-&gt;d_inode<br />&gt; is always there?  You'll notice I got rid of the inode argument like<br />&gt; many of the other VFS functions have recently.<br /><br />Yes. This was a cleanup that needed to be done eventually anyway.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
