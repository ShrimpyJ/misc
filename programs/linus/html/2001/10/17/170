    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/17/47">First message in thread</a></li><li><a href="/lkml/2001/10/17/47">Robert Cohen</a><ul><li><a href="/lkml/2001/10/17/46">Marcelo Tosatti</a></li><li><a href="/lkml/2001/10/17/50">Andreas Dilger</a></li><li><a href="/lkml/2001/10/17/56">John Stoffel</a></li><li><a href="/lkml/2001/10/17/71">"M. Edward Borasky"</a></li><li><a href="/lkml/2001/10/18/6">Robert Cohen</a></li><li class="origin"><a href="/lkml/2001/10/17/152">(Linus Torvalds)</a><ul><li><a href="/lkml/2001/10/17/152">Leo Mauro</a><ul><li><a href="/lkml/2001/10/18/19">James Sutherland</a></li></ul></li><li><a href="/lkml/2001/10/18/188">Roger Larsson</a><ul><li><a href="/lkml/2001/10/18/193">George Greer</a><ul><li><a href="/lkml/2001/10/19/5">Roger Larsson</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bench] New benchmark showing fileserver problem in 2.4.12</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Oct 2001 16:44:49 +0000 (UTC)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;3BCD8269.B4E003E5&#64;anu.edu.au&gt;,<br />Robert Cohen  &lt;robert.cohen&#64;anu.edu.au&gt; wrote:<br />&gt;<br />&gt;Factor 3: the performance problems only happens for I/O that is due to<br />&gt;network traffic, not I/O that was generated locally. I realise this is<br />&gt;extremely strange and I have no idea how it knows that I/O is die to<br />&gt;network traffic let alone why it cares. But I can assure you that it<br />&gt;does make a difference.<br /><br />I'll bet you $5 AUD that this happens because you don't block your<br />output into nicely aligned chunks. <br /><br />When you have an existing file, and you write 1500 bytes to the middle<br />of it, performance will degrade _horribly_ compared to the case of<br />writing a full block, or writing to a position that hasn't been written<br />yet. <br /><br />Your benchmark probably just does the equivalent of<br /><br />	for (;;) {<br />		int bytes = read(in, buf, BUFSIZE);<br />		if (bytes &lt;= 0)<br />			break;<br />		write(out, buf, bytes);<br />	}<br /><br />am I right? The above is obvious code, but it happens to be bad code. <br /><br />Now, when you read from the network, you will NOT get reads that are a<br />nice multiple of BUFSIZE, you'll get reads that are a multiple of the<br />packet data load (~1460 bytes on TCP over ethernet), and you'll end up<br />doing unaligned writes that require a read-modify-wrtie cycle and thus<br />end up doing twice as much IO. <br /><br />And not only does it do twice as much IO (and potentially more with<br />read-ahead), the read will obviously be _synchronous_, so the slowdown<br />is more than twice as much. <br /><br />In contrast, when the source is a local file (or a pipe that ends up<br />chunking stuff up in 4kB chunks instead of 1500-byte packets), you'll<br />have nice write patterns that fill the whole buffer and make the read<br />unnecessary. Which gets you nice streaming writes to disk.<br /><br />With most fast disks, this is not unlikely to be performance difference<br />on the order of a magnitude.<br /><br />And there is _nothing_ the kernel can do about it. Your benchmark is<br />bad, and has different behaviour depending on the source.<br /><br />In short, fix your program. Change the loop to be something like<br /><br />	unsigned int so_far = 0;<br />	for (;;) {<br />		int bytes = read(in, buf+so_far, BUFSIZE-so_far);<br />		if (bytes &lt;= 0)<br />			break;<br />		so_far += bytes;<br />		if (so_far &lt; BUFSIZE)<br />			continue;<br />		write(out, buf, BUFSIZE);<br />		so_far = 0;<br />	}<br />	if (so_far)<br />		write(out, buf, so_far);<br /><br />which will act the same for partial and full reads, and I bet you'll see<br />the same difference for local and networking I/O (modulo the speed<br />difference in the _source_, of course).<br /><br />Oh, and I bet you that once you do something like the above, you won't<br />see much difference between a 8kB buffer and a 256kB buffer.  The<br />smaller buffer will generate more system calls, but it won't much matter<br />(and sometimes the smaller buffer performs better due to better data<br />cache locality and better overlapping IO - system calls under Linux<br />aren't slow, other factors can easily dominate). <br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
