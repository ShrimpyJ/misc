    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/3/240">First message in thread</a></li><li><a href="/lkml/2001/10/4/120">(Eric W. Biederman)</a><ul><li><a href="/lkml/2001/10/13/63">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/2001/10/13/92">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/13/92">Rik van Riel</a></li><li><a href="/lkml/2001/10/13/108">Pablo Alcaraz</a><ul><li><a href="/lkml/2001/10/13/118">Jamie Lokier</a></li></ul></li><li><a href="/lkml/2001/10/13/120">Jamie Lokier</a><ul><li><a href="/lkml/2001/10/13/86">Linus Torvalds</a></li><li><a href="/lkml/2001/10/13/168">(Linus Torvalds)</a></li><li><a href="/lkml/2001/10/13/210">Jamie Lokier</a></li></ul></li><li><a href="/lkml/2001/10/14/61">(Kai Henningsen)</a></li><li><a href="/lkml/2001/10/14/129">"Mark H. Wood"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 13 Oct 2001 10:13:17 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Security question: "Text file busy" overwriting executables but not shared libraries?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sat, 13 Oct 2001, Jamie Lokier wrote:<br />&gt;<br />&gt; I can think of an efficiency-related use for MAP_COPY, and it has<br />&gt; nothing to do with shared libraries:<br />&gt;<br />&gt;  - An editor using mmap() to read a file.<br /><br />No, you're thinking the wrong way.<br /><br />Trust me, MAP_COPY really _is_ stupid, and the Hurd is a piece of crap.<br /><br />People who think MAP_COPY is a good idea are people who cannot think about<br />the implications of it, and cannot think about the alternatives.<br /><br />In particular, you claim that you could use "mmap()" for "read()", and<br />speed up the application that way. Ok, fair enough.<br /><br />Now, somebody who _isn't_ stupid (and that, of course, is me), immediately<br />goes "well, _duh_, why don't you speed up read() instead?".<br /><br />The fact is, all the problems that "MAP_COPY" has just go away if you<br />instead of thinking about a mmap(), you think about doing a "read()" and<br />just marking the pages PAGE_COPY if they are exclusive.<br /><br />In short: MAP_COPY is braindamaged, because it doesn't have enough<br />information at the right level to do a reasonable job of it. What people<br />want to use it for is really to emulate "read()" efficiently using mmap,<br />and _nothing_ else. That is the only reason for it ever existing, and the<br />fact is, that clearly shows just how _stupid_ the whole thing is.<br /><br />You migth as well just do a read() in the first place.<br /><br />Your arguments are<br /> - read() implies a memcpy()<br /> - read() dirties pages and causes more memory pressure<br /><br />but you don't actually _question_ those arguments.<br /><br />I will tell you that doing a read() that _acts_ like the MAP_COPY you so<br />want is a LOT easier than doing MAP_COPY in the first place.<br /><br />Why?<br /><br /> - a read() call doesn't have any "history" - it doesn't leave (bogus)<br />   VM data around like MAP_COPY does. MAP_COPY says "I want these pages to<br />   have the contents they did _when_I_did_the_mapping_", which is a<br />   temporal shift that just doesn't make sense in any sane VM model, and<br />   which inherently implies versioning.<br /><br /> - a read() can fairly easily just do the optimization<br /><br />	(a) if we're reading a large area<br />	(b) if the offset and the destination are page-aligned<br />	(c) if the page is exclusive (ie no existing other owners)<br />		then<br />	just do the page move instead of the copy, and mark the page as<br />	PAGE_COPY<br /><br />   Every other use of the page that can change it (ie a shared writable<br />   mapping, or a "write()" call) will now check the PAGE_COPY bit on the<br />   _page_, and just say "ok, I'll allocate a new page, and atomically<br />   switch the ones, and leave the old page untouched and remove it from<br />   the page cache"<br /><br />   (And the swap-out logic has to turn a PAGE_COPY page into a swap-cache<br />   page - this is the real downside, because it implies that we will have<br />   to write it out to swap if we're low on memory, unlike a real mmap)<br /><br />Notice? Same as MAP_COPY, but without any global state.<br /><br />And notice how this is actually conceptually much closer to what you<br />actually _want_ to use MAP_COPY for.<br /><br />Could we implement MAP_COPY as such a read()? Yes, sure. But that's just<br />confusing the issue - why call it a mmap() at all, when it isn't. The day<br />when Hurd is so common that we want to emulate its braindamages is not<br />going to be in my life-time, I suspect.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
