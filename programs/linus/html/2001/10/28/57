    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/24/6">First message in thread</a></li><li><a href="/lkml/2001/10/28/72">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/28/67">Alan Cox</a><ul><li class="origin"><a href="/lkml/2001/10/28/43">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/28/43">Alan Cox</a></li><li><a href="/lkml/2001/10/28/90">(Linus Torvalds)</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 28 Oct 2001 10:46:19 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: xmm2 - monitor Linux MM active/inactive lists graphically</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sun, 28 Oct 2001, Alan Cox wrote:<br />&gt;<br />&gt; &gt; In contrast, the -ac logic says roughly "Who the hell cares if the driver<br />&gt; &gt; can merge requests or not, we can just give it thousands of small requests<br />&gt; &gt; instead, and cap the total number of _sectors_ instead of capping the<br />&gt; &gt; total number of requests earlier"<br />&gt;<br />&gt; If you think about it the major resource constraint is sectors - or another<br />&gt; way to think of it "number of pinned pages the VM cannot rescue until the<br />&gt; I/O is done".<br /><br />Yes. But that's a VM decision, and that's a decision the VM _can_ and does<br />make. At least in newer VM's.<br /><br />So counting sectors is only hiding problems at a higher level, and it's<br />hiding problems that the higher level can know about.<br /><br />In contrast, one thing that the higher level _cannot_ know about is the<br />latency of the request queue, because that latency depends on the layout<br />of the requests. Contiguous requests are fast, seeks are slow. So the<br />number of requests (as long as they aren't infinitely sized) fairly well<br />approximates the latency.<br /><br />Note that you are certainly right that the Linux VM system did not use to<br />be very good at throttling, and you could make it try to write out all of<br />memory on small machines. But that's really a VM issue.<br /><br />(And have we have VM's that tried to push all of memory onto the disk, and<br />then returned Out-of-Memory when all pages were locked? Sure we have. But<br />I know mine doesn't, don't know about yours).<br /><br />&gt;		 We also have many devices where the latency is horribly<br />&gt; important - IDE is one because it lacks sensible overlapping I/O. I'm less<br />&gt; sure what the latency trade offs are. Less commands means less turnarounds<br />&gt; so there is counterbalance.<br /><br />Note that from a latency standpoint, you only need to have enough requests<br />to fill the queue - and right now we have a total of 128 requests, of<br />which half a for reads, and half are for the watermarking, so you end up<br />having 32 requests "in flight" while you refill the queue.<br /><br />Which is _plenty_. Because each request can be 255 sectors (or 128,<br />depending on where the limit is today ;), which means that if you actually<br />have something throughput-limited, you can certainly keep the disk busy.<br /><br />(And if the requests aren't localized enough to coalesce well, you cannot<br />keep the disk at platter-speed _anyway_, plus the requests will take<br />longer to process, so you'll have even more time to fill the queue).<br /><br />The important part for real throughput is not to have thousands of<br />requests in flight, but to have _big_enough_ requests in flight. You can<br />keep even a fast disk busy with just a few requests, if you just keep<br />refilling them quickly enough and if they are _big_ enough.<br /><br />&gt; In the case of IDE the -ac tree will do basically the same merging - the<br />&gt; limitations on IDE DMA are pretty reasonable. DMA IDE has scatter gather<br />&gt; tables and is actually smarter than many older scsi controllers. The IDE<br />&gt; layer supports up to 128 chunks of up to just under 64Kb (should be 64K<br />&gt; but some chipsets get 64K = 0 wrong and its not pretty)<br /><br />Yes. My question is more: does the dpt366 thing limit the queueing some<br />way?<br /><br />&gt; Well I'm all for making dumb hardware go as fast as smart stuff but that<br />&gt; wasn't the original goal - the original goal was to fix the bad behaviour<br />&gt; with the base kernel and large I/O queues to slow devices like M/O disks.<br /><br />Now, that's a _latency_ issue, and should be fixed by having the max<br />number of requests (and the max _size_ of a request too) be a per-queue<br />thing.<br /><br />But notice how that actually doesn't have anything to do with memory size,<br />and makes your "scale by max memory" thing illogical.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
