    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/31/85">First message in thread</a></li><li><a href="/lkml/2001/10/31/85">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/31/157">Andrew Morton</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2001/11/1/50">Neil Brown</a><ul><li><a href="/lkml/2001/11/1/128">Andrew Morton</a><ul><li><a href="/lkml/2001/11/1/114">Chris Mason</a></li><li><a href="/lkml/2001/11/2/13">Helge Hafting</a></li><li><a href="/lkml/2001/11/4/199">Pavel Machek</a><ul><li><a href="/lkml/2001/11/4/192">Daniel Phillips</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Oct 2001 11:06:32 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.4.14-pre6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Wed, 31 Oct 2001, Andrew Morton wrote:<br />&gt;<br />&gt; But it's actually quite seductive to take a huge amount of data and<br />&gt; just chuck it at the request layer and let Jens sort it out. This<br />&gt; usually works well and keeps the complexity in one place.<br /><br />Fair enough, I see your point. How would you suggest we handle the latency<br />thing, though?<br /><br />I'm not against making the elevator more intelligent, and you have a<br />good argument. But I've very much against "allow the queues to grow with<br />no sense of latency".<br /><br />&gt; One does wonder whether everything is working as it should, though.<br />&gt; Creating those 100,000 4k files is going to require writeout of<br />&gt; how many blocks?  120,000?  And four minutes is enough time for<br />&gt; 34,000 seven-millisecond seeks.  And ext2 is pretty good at laying<br />&gt; things out contiguously.  These numbers don't gel.<br />&gt;<br />&gt; Ah-ha.  Look at the sync_inodes stuff:<br />&gt;<br />&gt; 	for (zillions of files) {<br />&gt; 		filemap_fdatasync(file)<br />&gt; 		filemap_fdatawait(file)<br />&gt; 	}<br />&gt;<br />&gt; If we turn this into<br />&gt;<br />&gt; 	for (zillions of files)<br />&gt; 		filemap_fdatasync(file)<br />&gt; 	for (zillions of files)<br />&gt; 		filemap_fdatawait(file)<br /><br />Good catch, I bet you're right.<br /><br />&gt; kupdate runs this code path as well. Why is there any need for<br />&gt; kupdate to wait on the writes?<br /><br />At least historically (and I think it's still true in some cases),<br />kupdated was also in charge of trying to write out buffers under<br />low-memory circumstances. And without any throttling, blind writing can<br />make things worse.<br /><br />However, the request throttle should be _plenty_ good enough, so I think<br />you're right.<br /><br />Oh, one issue in case you're going to work on this: kupdated does need to<br />do the "wait_for_locked_buffers()" at some point, as that is also what<br />moves buffers from the locked list to the clean list. But that has nothing<br />to do with the fdatawait thing.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
