    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/29/248">First message in thread</a></li><li><a href="/lkml/2001/10/30/98">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/30/114">Benjamin LaHaise</a></li><li><a href="/lkml/2001/10/30/137">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2001/10/30/130">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2001/10/30/138">Victor Yodaiken</a><ul><li><a href="/lkml/2001/10/30/115">Cort Dougan</a></li><li><a href="/lkml/2001/10/30/123">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/30/312">Victor Yodaiken</a></li></ul></li><li><a href="/lkml/2001/10/30/135">Troy Benjegerdes</a></li><li><a href="/lkml/2001/10/30/199">Paul Mackerras</a><ul><li><a href="/lkml/2001/10/30/217">Victor Yodaiken</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Oct 2001 09:41:56 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: please revert bogus patch to vmscan.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 30 Oct 2001, Benjamin Herrenschmidt wrote:<br />&gt;<br />&gt; Well, I lack experience to state which scheme is better, but there is<br />&gt; definitely overhead intruduced by our hash management in linux on ppc,<br />&gt; since we have to evicts pages from the hash as soon as we test&amp;clear<br />&gt; PAGE_ACCESSED or PAGE_DIRTY.<br />&gt; That means we keep flushing pages out of the hash table, which seems<br />&gt; to be defeat the purpose of that big hash table supposed to hold the<br />&gt; PTEs for everybody out there more/less permanently.<br /><br />Exactly. The problem with the hash chains is that they were designed for<br />_large_ jobs. For physicists that run a few copies of the same _huge_ load<br />over and over, where the jobs take minutes, hours or even days to<br />complete.<br /><br />These jobs also have a very noticeable memory footprint (and thus TLB<br />component), and benchmarks like this sell systems.<br /><br />And hash chains work _wonderfully_ for them - they are basically an<br />almost infinitely sized TLB, and the fact that cache locality is crap for<br />them doesn't matter because you use a LOT of entries and you have a LOT of<br />cache.<br /><br />However, most people don't use their machines that way. Unix is pretty<br />much built up around running small, quick processes, and in _most_ normal<br />usage patterns (sorry, physicists ;), the cost of tearing down and<br />building up mappings is quite noticeable - often more so than the TLB<br />misses themselves.<br /><br />In fact, I bet that for many apps, the number of TLB misses and the number<br />of faults to populate the VM space are not different by more than an order<br />of magnitude or so. They come, they eat, they go.<br /><br />And in that kind of schenario, where mappings don't have lifetimes on the<br />order of minutes and hours at a time, hash chains suck. They make for<br />horrible cache behaviour, and building them up and tearing them down more<br />than makes up for any dubious win they had at TLB miss time.<br /><br />And I stress _dubious_. A tree-based TLB lookup has a lot better cache<br />behaviour, and you can do a tree-based lookup in hardware quite<br />efficiently.<br /><br />Yeah, if you didn't guess already, I despise hash chains. I'll take a<br />bigger on-chip secondary TLB and proper address space identifiers any day<br />over stupid hash chains. I think the Athlon does the former, but obviously<br />you can't do the latter with Intel-compatibility.<br /><br />&gt; Since we can't (AFAIK) have linux use larger PTEs (in which case we<br />&gt; could store a pointer to the hash PTE in the linux PTE), We could<br />&gt; instead layout an array of pointer (one for each page) that would<br />&gt; hold these.<br /><br />You can make Linux use any size PTE you wish - the Linux VM (including the<br />page tables) is entirely software-driven (with the current limitation of<br />having three levels of lookup - we'll probably change that when 42 bits<br />of virtual user space gets tight and there are enough machines out there<br />to matter, which is about another five years, I suspect).<br /><br />So storing a pointer to the hardware hash table if you want to is<br />certainly possible. It has memory overhead, though, and decreased cache<br />compactness etc, so...<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
