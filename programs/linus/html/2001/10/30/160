    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/30/39">First message in thread</a></li><li><a href="/lkml/2001/10/30/292">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/30/179">Andrea Arcangeli</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2001/10/30/192">Andrea Arcangeli</a><ul><li><a href="/lkml/2001/10/30/161">Linus Torvalds</a></li><li><a href="/lkml/2001/10/30/167">Andrea Arcangeli</a><ul><li><a href="/lkml/2001/10/30/162">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Oct 2001 10:28:29 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: need help interpreting 'free' output.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 30 Oct 2001, Andrea Arcangeli wrote:<br />&gt; &gt; delete it. So the logic might be something like<br />&gt; &gt;<br />&gt; &gt; 	remove = 0;<br />&gt; &gt; 	if ((vm_swap_full() &amp;&amp; (remove = exclusive_swap_cache_delete())) ||<br />&gt; &gt; 	    only_swap_user()) {<br />&gt;<br />&gt; I preferred the previous exclusive_swap_page logic. It couldn't race<br />&gt; because we had the lock on the page, it's equivalent<br /><br />It is _not_ equivalent.<br /><br />Think for five seconds about what you just wrote..<br /><br />   "It couldn't race because we had the lock on the page.."<br /><br />In short: the old code needed to get the page lock. In fact, it needed to<br />get the page lock even for reads that don't need it at all - only because<br />there could be a write from another process that shared the swap page.<br /><br />Ie we optimized for the very very uncommon case. Sharing swap pages is<br />uncommon in itself, and it only happens when they _really_ aren't accessed<br />over a fork() etc. In short, writing the code to deal with that by default<br />is the wrong optimization.<br /><br />Now, the _common_ case is that the page is truly exclusive, and you don't<br />want to lock the page - because locking the page means that you can pause<br />for a _long_ time waiting for the page to be written out when there is IO<br />pending.<br /><br />This is especially true since we need to get the swap device lock<br />_anyway_, so locking the page is (a) inefficient and (b) overkill.<br /><br />The new re-org gets no new locks, and drops the page lock, allowing people<br />to do the optimization without holding the page locked, which in turn<br />means that you don't need to wait for potential IO to complete just to<br />read a value from a page that you already have in memory.<br /><br />&gt; if we remove all write-swapins from the swap cache those pages cannot be<br />&gt; in flight,<br /><br />What?<br /><br />The page is busy being written out by another process - the page is locked<br />but up-to-date. We have _no_ reason to not give it immediately.<br /><br />This is something we do for all page cache pages - go read<br />filemap_nopage() etc. They don't wait for data that is up-to-date.<br /><br />&gt; So I don't see how an anonymous page can be in flight.<br /><br />It's being swapped out. What's so hard to see about that? Look at<br />mm/vmscan.c: writepage-&gt; swap_writepage().<br /><br />The page is up-to-date but locked (it's obviously up-to-date, or we<br />wouldn't be able to write it out). It won't be unlocked until the IO has<br />completed, which is, under heavy swap load, easily half a second. Why do<br />you want to wait for that?<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
