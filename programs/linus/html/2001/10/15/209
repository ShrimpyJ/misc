    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/15/190">First message in thread</a></li><li><a href="/lkml/2001/10/15/190">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/34">Anton Blanchard</a></li><li><a href="/lkml/2001/10/15/208">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/15/164">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/6">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/16/8">Alexander Viro</a></li></ul></li><li><a href="/lkml/2001/10/16/56">Chris Wedgwood</a></li></ul></li><li class="origin"><a href="/lkml/2001/10/16/18">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/16/18">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/194">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Oct 2001 20:52:03 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [CFT][PATCH] large /proc/mounts and friends</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Mon, 15 Oct 2001, Linus Torvalds wrote:<br />&gt;<br />&gt; (In other words: with a structured approach you can make guarantees about<br />&gt; the stability of each entry - you just can't necessarily guarantee that<br />&gt; all entries are shown or that some entries might not be duplicated..)<br /><br />Note that this can actually be important, with suid applications that<br />trust /proc. It is a GoodThing(tm) to have a read() that never returns<br />"mixed" output from different lines, ie even if a mount/umount happens in<br />parallel with reading /proc/mounts, you never get the filenames wrong..<br /><br />Some stuff definitely wants more than 1 page per entry (/proc/mount<br />happens to be the only one I can think of - it can have the pathname<br />already be PAGE_SIZE-1, with the options being another PAGE_SIZE), so some<br />interface like<br /><br /> - "proc_read_data" data structure:<br /><br />	struct proc_read_data {<br />		struct semaphore sem;<br />		int (*fillme)(struct proc_read_data *);<br />		unsigned long this_index;<br />		unsigned long next_index;<br />		unsigned int buffer_len;<br />		char buffer[0];<br />	};<br /><br /> - allocate it on /proc open, de-allocate it on close, save it away in<br />   filp-&gt;f_private_data or whatever...<br /><br /> - read ends up looking something like<br /><br /><br />	/* Max 4 pages per entry */<br />	#define INDEX_SHIFT (PAGE_SHIFT + 2)<br />	#define EOF_INDEX   (0xffff)<br /><br />	..<br />	/* We don't do 'pread()' */<br />	if (pos != &amp;file-&gt;f_pos)<br />		return -EPIPE;<br />	struct proc_read_data *prd = file-&gt;f_private_data;<br />	down(&amp;prd-&gt;sem);<br />	index = file-&gt;f_pos &gt;&gt; INDEX_SHIFT;<br />	offset = file-&gt;f_pos &amp; ((1UL &lt;&lt; INDEX_SHIFT)-1);<br />	if (index == prd-&gt;this_index) {<br />   repeat:<br />		if (index == EOF_INDEX)<br />			goto out;<br />		/* copy the rest of the buffer.. */<br />		if (offset &lt; prd-&gt;buffer_len) {<br />			int nr = prd-&gt;buffer_len - offset;<br />			if (nr &gt; count)<br />				nr = count;<br />			copy_to_user(buffer, prd-&gt;buffer + offset, nr);<br />			offset += nr;<br />			count -= nr;<br />			if (!count)<br />				goto out;<br />		}<br /><br />		/* Jump to "next" */<br />		index = prd-&gt;next_index;<br />	}<br />	offset = 0;<br />	prd-&gt;this_index = index;<br />	prd-&gt;fillme(prd);<br />	goto repeat;<br /><br />   out:<br />	file-&gt;f_pos = (index &lt;&lt; INDEX_SHIFT) | offset;<br />	up(&amp;prd-&gt;sem);<br />	return retval;<br /><br />.. and that's it (except for "fillme()", which is obviously the hard part,<br />and which has to fill in not only the buffer with the data for the right<br />index, it also has to fill in "prd-&gt;next_index" and "prd-&gt;buffer_len".<br /><br />Al, do you see any problems in this?  I bet a lot of /proc files will fit<br />this model, and need only a fairly simple "fillme()" function..<br /><br />Also note that because we cache _one_ entry, we absolutely _guarantee_<br />that a user that just does consecutive "read()" calls will never _ever_<br />see inconsistent lines, regardless of what his size of the read buffer is.<br />And if you use "lseek()", it will work as expected within reason (trivial<br />caution: "fillme()" has to be careful to not trip on bogus indexes, but<br />return an error or zero and just set next_index to something sane).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
