    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/10/15/190">First message in thread</a></li><li><a href="/lkml/2001/10/15/190">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/34">Anton Blanchard</a></li><li class="origin"><a href="/lkml/2001/10/15/164">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/15/164">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/6">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/16/8">Alexander Viro</a></li></ul></li><li><a href="/lkml/2001/10/16/56">Chris Wedgwood</a></li></ul></li><li><a href="/lkml/2001/10/15/209">Linus Torvalds</a><ul><li><a href="/lkml/2001/10/16/18">Alexander Viro</a><ul><li><a href="/lkml/2001/10/16/194">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Oct 2001 20:01:56 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [CFT][PATCH] large /proc/mounts and friends</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Mon, 15 Oct 2001, Alexander Viro wrote:<br />&gt;<br />&gt; 	See comments in fs/seq_file.c for description of interface - I<br />&gt; hope they are clear enough.<br /><br />Al, I understand why you'd like the seq interface, but quite frankly, I<br />would personally much prefer a different approach: namely making the file<br />position be a "structured" thing instead, and have (for example) the low<br />12 bits be the character index, and the upper 52 bits be various "field<br />indexes" depending on what file it is.<br /><br />If you have a character sequence number, that means that you _always_ have<br />to re-generate the whole file up to the new read-point. That simply does<br />not scale. Sure, it works well enough when the user usually reads the<br />whole file, but it's still a silly design.<br /><br />File positions do not have to be consecutive, especially for /proc files<br />that already confuse things like "less" by not having a well-defined<br />length etc.<br /><br />You have 64 bits to play with, and you can pretty much organize them any<br />way you want. For example, for many things it might be:<br /><br /> - low 12 bits are "offset in entry string"<br /> - next X bits are "hash index"<br /> - next Y bits are "position on hash chain"<br /><br />which tends to work pretty well with things that are hashed (it mounts,<br />sockets, etc) and that don't necessarily have a good cardinal ordering.<br /><br />Can it get confused when people insert/remove entries at the same time we<br />read /proc? Sure. That's pretty much unavoidable with the /proc interface,<br />as we can't hold any locks across user-mode system calls. But using a<br />structured approach may make it _much_ more likely that the user doesn't<br />get data where a entry is cut off in the middle, though - especially if<br />you make the read routine be eager to return partial reads rather than<br />cutting things off in the middle..<br /><br />(In other words: with a structured approach you can make guarantees about<br />the stability of each entry - you just can't necessarily guarantee that<br />all entries are shown or that some entries might not be duplicated..)<br /><br />This approach is actually already used for some things - the "readdir()"<br />thing with "FIRST_PROCESS_ENTRY", for example. But also see a better<br />example in "proc_pid_read_maps()" with the high bits being the "line<br />number", and the low bits being the offset within the line.<br /><br />Final note: another _extremely_ useful thing for performance is to have a<br />special "EOF" value for f_pos, because all normal applications end up<br />having to always do at least two reads: first to get the data (usually<br />the user buffer is larger than the amounf of data generated), the second<br />to just get the "0" for EOF. If the second read can be done without any<br />data generation or lock handling, that often speeds up /proc accesses by<br />a noticeable amount.<br /><br />The special EOF value fits very well with the "structure" approach.<br /><br />For example, it's quite common to know that each individual entry is<br />limited in size (with PAGE_SIZE being a nice common max size for any<br />entry), and the thing that makes the whole /proc file potentially large is<br />that there are many entries. I'd rather have that kind of helper routines:<br />a helper routine where there would be a "print out entry X" routine, and<br />then common routines to turn that "print out entry X" into a full<br />proc_xxx_read() function.<br /><br />Al?<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
