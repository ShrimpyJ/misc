    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/11/17/14">First message in thread</a></li><li><a href="/lkml/2001/11/17/114">Linus Torvalds</a><ul><li><a href="/lkml/2001/11/17/67">Jan Hubicka</a><ul><li class="origin"><a href="/lkml/2001/11/20/53">Linus Torvalds</a><ul><li><a href="/lkml/2001/11/20/53">Richard Henderson</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 17 Nov 2001 18:48:22 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: i386 flags register clober in inline assembly</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sun, 18 Nov 2001, Jan Hubicka wrote:<br />&gt; &gt;<br />&gt; &gt; Well, you _can_ spill it, but you need to use "pushfl/popfl" to<br />&gt; &gt; spill/restore.<br />&gt;<br />&gt; I know, I can, but we are speaking about sollution how to get programs faster,<br />&gt; not slow down them to scrawl.<br /><br />Agreed, which is why I suggested the "spill the _comparison_, not the<br />actual cc0 register" approach.<br /><br />That way, if you have to spill, you'll end up at worst with the same code<br />we already have to have, ie the code will end up something like<br /><br />	lock ; decl mem<br />	seta %al		&lt;- spill comparison to %al<br />	..<br />	testb %al,%al		&lt;- re-do comparison test later<br />	jne ..<br /><br />&gt; Actually what can be feasible is to make asm statement set flags and follow<br />&gt; it by store flag instruction that will be used in the conditional. Later<br />&gt; the combine pass should be able to get it connected.<br /><br />That sounds pretty ideal - have some way of telling gcc to add a "seta<br />%reg", while at the same time telling gcc that if it can elide the "seta"<br />and use a direct jump instead, do so..<br /><br />&gt; The design of asm statements should be IMO re-tought.  I think it has been<br />&gt; mistake to make them so low level and allow user to write constraints directly,<br />&gt; so perhaps we can think about big change for future gcc...<br /><br />I don't see many alternatives. The fact is, asm's end up being used<br />exactly when gcc simply doesn't know what to do, so gcc doesn't know what<br />the constraints are either.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
