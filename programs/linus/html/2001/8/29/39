    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/8/28/173">First message in thread</a></li><li><a href="/lkml/2001/8/28/173">Andreas Bombe</a><ul><li><a href="/lkml/2001/8/28/164">Linus Torvalds</a></li><li class="origin"><a href="/lkml/2001/8/29/97">Linus Torvalds</a><ul><li><a href="/lkml/2001/8/29/97">Andreas Bombe</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2001/8/29/39/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 29 Aug 2001 06:48:26 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] yenta resource allocation fix</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Wed, 29 Aug 2001, Andreas Bombe wrote:<br />&gt;<br />&gt; I have no idea why the 0xfff was in place.  Or, on second thought, this<br />&gt; might be to allocate memory space behind official end as slack?  This<br />&gt; would defy the end &gt; start check then, anyway.  Linus?<br /><br />I've looked more at the issue.<br /><br />0xfff is definitely right for memory windows and is generally right for<br />PCI-PCI bridges too - they cannot have IO or memory windows that are<br />anything but 4kB aligned.<br /><br />But it turns out that the Yenta specification actually expanded on the<br />PCI-PCI bridge window specs for IO space - a Yenta bridge is supposed to<br />be able to handle IO windows at 4-byte granularity, not the 4kB a regular<br />PCI bridge does.<br /><br />Does this alternate patch work for you?<br /><br />		Linus<br /><br />------<br />diff -u --recursive --new-file pre2/linux/drivers/pcmcia/yenta.c linux/drivers/pcmcia/yenta.c<br />--- pre2/linux/drivers/pcmcia/yenta.c	Wed Aug 29 06:20:01 2001<br />+++ linux/drivers/pcmcia/yenta.c	Wed Aug 29 06:13:40 2001<br />&#64;&#64; -702,6 +702,12 &#64;&#64;<br /> 	u32 start, end;<br /> 	u32 align, size, min, max;<br /> 	unsigned offset;<br />+	unsigned mask;<br />+<br />+	/* The granularity of the memory limit is 4kB, on IO it's 4 bytes */<br />+	mask = ~0xfff;<br />+	if (type &amp; IORESOURCE_IO)<br />+		mask = ~3;<br /><br /> 	offset = 0x1c + 8*nr;<br /> 	bus = socket-&gt;dev-&gt;subordinate;<br />&#64;&#64; -715,8 +721,8 &#64;&#64;<br /> 	if (!root)<br /> 		return;<br /><br />-	start = config_readl(socket, offset);<br />-	end = config_readl(socket, offset+4) | 0xfff;<br />+	start = config_readl(socket, offset) &amp; mask;<br />+	end = config_readl(socket, offset+4) | ~mask;<br /> 	if (start &amp;&amp; end &gt; start) {<br /> 		res-&gt;start = start;<br /> 		res-&gt;end = end;<br />diff -u --recursive --new-file pre2/linux/mm/vmscan.c linux/mm/vmscan.c<br />--- pre2/linux/mm/vmscan.c	Wed Aug 15 02:37:07 2001<br />+++ linux/mm/vmscan.c	Wed Aug 29 06:02:46 2001<br />&#64;&#64; -818,10 +818,12 &#64;&#64;<br /> #define GENERAL_SHORTAGE 4<br /> static int do_try_to_free_pages(unsigned int gfp_mask, int user)<br /> {<br />-	/* Always walk at least the active queue when called */<br />-	int shortage = INACTIVE_SHORTAGE;<br />+	int shortage = 0;<br /> 	int maxtry;<br /><br />+	/* Always walk at least the active queue when called */<br />+	refill_inactive_scan(DEF_PRIORITY);<br />+<br /> 	maxtry = 1 &lt;&lt; DEF_PRIORITY;<br /> 	do {<br /> 		/*<br />&#64;&#64; -872,7 +874,8 &#64;&#64;<br /> 			break;<br /> 	} while (shortage);<br /><br />-	return !shortage;<br />+	/* Return success if we're not "totally short" */<br />+	return shortage != FREE_SHORTAGE | INACTIVE_SHORTAGE | GENERAL_SHORTAGE;<br /> }<br /><br /> DECLARE_WAIT_QUEUE_HEAD(kswapd_wait);<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
