    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/8/24/123">First message in thread</a></li><li><a href="/lkml/2001/8/30/220">Ion Badulescu</a><ul><li><a href="/lkml/2001/8/31/7">Linus Torvalds</a></li><li><a href="/lkml/2001/8/31/158">Jamie Lokier</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 31 Aug 2001 06:54:13 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [IDEA+RFC] Possible solution for min()/max() war</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 31 Aug 2001, Jamie Lokier wrote:<br />&gt;<br />&gt; While I agree with Linus that the above line is ugly, there is a problem<br />&gt; with the original line:<br />&gt;<br />&gt;     if (len &lt;= sizeof(short) || len &gt; sizeof(*sunaddr))<br />&gt;<br />&gt; The problem?  Thinking this is natural, suppose you decide you only need<br />&gt; to check len against sizeof(short), perhaps here, perhaps copying this<br />&gt; idea to another part of the program:<br />&gt;<br />&gt;     if (len &lt;= sizeof(short))<br />&gt;<br />&gt; _This_ code has a bug.<br /><br />I agree.<br /><br />The difference is subtle, and maybe too subtle.<br /><br />The fact is, that _ranges_ are "stable" in different types. If a value "x"<br />is in the range [a,b] in type A, then it will also be in range [a,b] in<br />type B (assuming, of course, that 'a' and 'b' are valid values in both<br />types).<br /><br />This is why range comparisons are different from normal comparisons.<br /><br />But C doesn't have the notion of a range, which is why you can't write<br />(while lots of people have _tried_ to write, including in the kernel)<br /><br />	a &lt; x &lt; b<br />or<br />	x in [a,b]<br /><br />or similar. So you end up having to use a more "complex" setup, where the<br />individual parts might not be safe even though the totality is safe.<br /><br />In fact, if gcc never becomes good enough to do that kind of range<br />checking, I won't be _too_ unhappy. I selected a special example on bad<br />grounds - it's not actually the most common case of range checking, and<br />the most common case by far tends to be something like<br /><br />	if (len &lt; 0)<br />		return -EINVAL;<br /><br />	if (len &gt; sizeof(buffer))<br />		len = sizeof(buffer);<br /><br />	copy_from_user(buffer, ..., len);<br /><br />where the operation is safe for _another_ range check reason, namely the<br />fact that we check that "len" is within the domain of the second check.<br /><br />Right now gcc will complain about the second comparison, exactly because<br />gcc does not do range analysis.<br /><br />Now, the good news is that gcc people have already worked on range<br />analysis, because it is very useful for other things too (not the least of<br />which is optimization). So I bet gcc _will_ be able to do a much better<br />job of this in the future, and if we have to help it by hand in only a few<br />places, then that will be a good thing.<br /><br />However, right now gcc complains _way_ too much about perfectly valid and<br />good code. If it was a few small cases, I'd be happy to fix them in the<br />kernel. But last time I tried -Wsign-compare, the false positives were<br />just too damn numerous.<br /><br />(Now, we may have fixed some of them anyway, and I haven't tried it in a<br />_loong_ time. If somebody decides to try to see what happens if you try to<br />clean them up, that would probably not be a bad idea per se. Proving me<br />wrong is always a good sport ;)<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
