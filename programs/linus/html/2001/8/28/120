    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/8/24/123">First message in thread</a></li><li><a href="/lkml/2001/8/28/190">Linus Torvalds</a><ul><li><a href="/lkml/2001/8/28/47">Roman Zippel</a><ul><li class="origin"><a href="/lkml/2001/8/28/73">Linus Torvalds</a><ul><li><a href="/lkml/2001/8/28/73">"Henning P. Schmiedehausen"</a><ul><li><a href="/lkml/2001/8/28/71">Alan Cox</a></li></ul></li><li><a href="/lkml/2001/8/28/76">Russell King</a></li><li><a href="/lkml/2001/8/28/192">Roman Zippel</a><ul><li><a href="/lkml/2001/8/28/158">Mike Castle</a></li></ul></li><li><a href="/lkml/2001/8/28/201">Daniel Phillips</a><ul><li><a href="/lkml/2001/8/28/174">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2001/8/28/93">Roman Zippel</a></li><li><a href="/lkml/2001/8/28/103">"Bill Rugolsky Jr."</a></li><li><a href="/lkml/2001/8/28/114">Roman Zippel</a></li><li><a href="/lkml/2001/8/28/189">Andreas Schwab</a><ul><li><a href="/lkml/2001/8/28/110">"Richard B. Johnson"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Aug 2001 08:14:50 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [IDEA+RFC] Possible solution for min()/max() war</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 28 Aug 2001, Roman Zippel wrote:<br />&gt;<br />&gt; Linus Torvalds wrote:<br />&gt;<br />&gt; &gt; The problem with signed compares is not just comparing a signed entity<br />&gt; &gt; against a unsigned one. It's quite common to have signed quantities on<br />&gt; &gt; both sides, but _intending_ a unsigned comparison or vice versa.<br />&gt;<br />&gt; Then it's a bug that should _not_ be fixed in the min macro. Unsigned<br />&gt; values should be hold in unsigned variables. If it's that common, please<br />&gt; show me a sane and realistic example.<br /><br />I'll show you a real example from drivers/acorn/scsi/acornscsi.c:<br /><br />	min(host-&gt;scsi.SCp.this_residual, DMAC_BUFFER_SIZE / 2);<br /><br />this_residual is "int", and "DMAC_BUFFER_SIZE" is just a #define for<br />an integer constant. So the above is actually a signed comparison, and<br />I'll bet you that was not what the author intended.<br /><br />Now, this_residual is hopefully never negative, so it doesn't matter.<br /><br />But how many security bugs have you seen where people just didn't even<br />_think_ of the user giving invalid values?<br /><br />Think of code like<br /><br />	#define BUFFER_SIZE (10)<br /><br />	char buf[BUFFER_SIZE];<br /><br />	len = min(user_len, BUFFER_SIZE);<br />	if (copy_from_user(buf, user, len))<br />		return -EFAULT;<br /><br />which is not all that broken. Sure, maybe you _should_ have marked<br />BUFFER_SIZE explicitly unsigned, but face it, how many people actually do<br />that?<br /><br />So "BUFFER_SIZE" is actually a signed value (never mind that it is<br />obviously positive), and if "user_len" is signed too the above doesn't<br />actually do what the programmer obviously _meant_ to do.<br /><br />Does code like the above happen? Sure it does. The input can be signed<br />because often the user interfaces are defined outside the kernel (think of<br />the arguments to "bind()" or "setsockopt()", and realize that "socklen_t"<br />is "int" - the programmer may not even SEE the signedness of the arguments<br />exactly because they are typedefs).<br /><br />And did you realize, for example, that of the existing "min()"<br />implementations, some were inline functions that implicitly cast their<br />arguments to "int" (and one to "unsigned int")? This way we could also<br />maintain those kinds of local conventions - where the programmer had<br />originally (at least in the case of the unsigned int) on purpose made all<br />"min()" functions unsigned.<br /><br />That, together with different pieces of code really wanting different<br />semantics. Let me quote something that got removed:<br /><br />&lt;include/net/sock.h&gt;:<br /><br />-static __inline__ int min(unsigned int a, unsigned int b)<br />-{<br />-       if (a &gt; b)<br />-               a = b;<br />-       return a;<br />-}<br />-<br /><br />&lt;net/khttpd/prototypes.h&gt;:<br /><br />-/* the TCP/IP stack defines a __BROKEN__ set of min/max functions !! */<br />-/* So we better define our own.                                      */<br />-<br />-/* Broken means: working on unsigned data only, which is not acceptable<br />-                for kHTTPd and probably a lot of other functions. */<br />-<br />-#undef min<br />-#undef max<br />-#define min(a,b)  ( (a) &lt; (b) ? (a) : (b) )<br />-#define max(a,b)  ( (a) &gt; (b) ? (a) : (b) )<br /><br />Now, just _imagine_ the set of bugs implicit in the fact that part of<br />networking wants "min()" to be unsigned, while another part (that _uses_<br />the code that depends on the unsigned "min()") re-defines min() to be<br />"whatever the arguments are".<br /><br />Now isn't it better to have a nice macro that _can_ be used for all of<br />this, and that _does_ explicitly handle the issue of signedness that<br />different parts of the code has very different opinions on, and that<br />clearly encodes the assumptions that you have at the exact point of use?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
