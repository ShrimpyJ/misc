    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/8/24/123">First message in thread</a></li><li><a href="/lkml/2001/8/28/3">(Linus Torvalds)</a><ul><li><a href="/lkml/2001/8/28/1">Alexander Viro</a><ul><li class="origin"><a href="/lkml/2001/8/28/31">Linus Torvalds</a><ul><li><a href="/lkml/2001/8/28/31">Alan Cox</a><ul><li><a href="/lkml/2001/8/28/154">(John Alvord)</a></li><li><a href="/lkml/2001/8/28/186">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 27 Aug 2001 22:51:05 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [IDEA+RFC] Possible solution for min()/max() war</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 28 Aug 2001, Alexander Viro wrote:<br />&gt;<br />&gt; &gt; The problem with putting the "type" in the name of the function/macro<br />&gt; &gt; is/was that<br />&gt; &gt;<br />&gt; &gt;  - there's a _lot_ of types. David actually had a version for this, and<br />&gt; &gt;    there were separate versions for everything ranging from "int" to<br />&gt; &gt;    "uint", to "s32" to "u32", to "size_t" etc etc.<br />&gt;<br />&gt; Ugh. I have a serious feeling that most of them would be redundant, but...<br />&gt; OK, I guess that somebody might want "unsigned max of x and y % 256" (x<br />&gt; being unsigned char and y - unsigned long).<br /><br />It doesn't matter if the two things are of a different type - there is<br />always just one type that the comparison is done in, anyway (and returning<br />any other type doesn't make any sense to me, at least).<br /><br />And yes, they _are_ redundant in the sense that "size_t" is obviously the<br />same as "unsigned int" or "unsigned long" on just about all architectures:<br />but we obviously don't know that on a source level, so you do end up<br />needing various different versions.<br /><br />You could, of course, just always do the type expansion, and really boil<br />it all down to just "large enough" types, the obvious ones being "unsigned<br />long" and "signed long". However, that implies either depending on a smart<br />compiler or accepting an extra type expansion in the resulting binary, and<br />it also wouldn't work on 64-bit quantities (which NTFS actually _does_<br />use, for example), so you'd still have to have at least<br /><br /> - umin()/umax()/smin()/smax() - for "long" and shorter<br /> - u64min()/u64max()/s64min()s64max() - for "long long" and "u64/s64"<br /><br />to make sure that the min/max operations do not truncate any bits. Even<br />so, I'd really want to make sure it gets truncated down too - I'd be<br />nervous about doing "umax()" on two "char" entities: it's MUCH more clear<br />what you get from<br /><br />	x = max(unsigned char, char, char)<br /><br />than if you have signed chars that are expanded to unsigned long's and<br />then compared (the compare gets the same result, but how is the final<br />result of "min()" then expanded, if at all?). It gets worse if one of the<br />sides is unsigned and the other signed, at which point the "extend to a<br />larger type" approach doesn't work at all.<br /><br />In short, I really think you want to have the exact types. And a quick<br />grep of the 2.4.9 diff shows that at least for "min()" we have at least<br />the following types already being used: "int" "long" "s64" "u32" "unsigned<br />int" "unsigned long".<br /><br />So that's at _least_ 6 different versions of "min()" if you want to make<br />them different functions.<br /><br />Or, with the 2.4.9 approach, it's just a single macro (well, and another<br />one for "max()"). And when somebody needs a new type, he doesn't have to<br />worry about creating a new instantiation of the macro.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
