    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/8/28/5">First message in thread</a></li><li><a href="/lkml/2001/8/28/5">Marcelo Tosatti</a><ul><li><a href="/lkml/2001/8/28/108">Daniel Phillips</a><ul><li class="origin"><a href="/lkml/2001/8/29/92">Linus Torvalds</a><ul><li><a href="/lkml/2001/8/29/92">Daniel Phillips</a></li><li><a href="/lkml/2001/9/3/68">Marcelo Tosatti</a><ul><li><a href="/lkml/2001/9/4/69">Jan Harkes</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Aug 2001 11:17:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: page_launder() on 2.4.9/10 issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 28 Aug 2001, Daniel Phillips wrote:<br />&gt; On August 28, 2001 05:36 am, Marcelo Tosatti wrote:<br />&gt; &gt; Linus,<br />&gt; &gt;<br />&gt; &gt; I just noticed that the new page_launder() logic has a big bad problem.<br />&gt; &gt;<br />&gt; &gt; The window to find and free previously written out pages by page_launder()<br />&gt; &gt; is the amount of writeable pages on the inactive dirty list.<br /><br />No.<br /><br />There is no "window". The page_launder() logic is very clear - it will<br />write out any dirty pages that it finds that are "old".<br /><br />&gt; &gt; We'll keep writing out dirty pages (as long as they are available) even if<br />&gt; &gt; have a ton of cleaned pages: its just that we don't see them because we<br />&gt; &gt; scan a small piece of the inactive dirty list each time.<br /><br />So? We need to write them out at some point anyway. Isn't it much better<br />to be graceful about it, and allow the writeout to happen in the<br />background. The way things _used_ to work, we'd delay the write-out until<br />we REALLY had to, which is great for dbench, but is really horrible for<br />any normal load.<br /><br />Think about it - do you really want the system to actively try to reach<br />the point where it has no "regular" pages left, and has to start writing<br />stuff out (and wait for them synchronously) in order to free up memory? I<br />strongly feel that the old code was really really wrong - it may have been<br />wonderful for throughput, but it had non-repeatable behaviour, and easily<br />caused the inactive_dirty list to fill up with dirty pages because it<br />unfairly penalized clean pages.<br /><br />You do need to realize that dbench is a really bad benchmark, and should<br />not be used as a way to tweak the algorithms.<br /><br />&gt; &gt; That obviously did not happen with the full scan behaviour.<br /><br />The new code has no difference between "full scan" and "partial scan". It<br />will do the same thing regardless of whether you scan the whole list, as<br />it doesn't have any state.<br /><br />This did NOT happen with the old "launder_loop" state thing, but I think<br />you agreed that that code was unreliable and flaky, and caused basically<br />random non-LRU behaviour that depended on subtle effects in (a) who called<br />it and (b) what the layout of the inactive_dirty list was.<br /><br /><br />&gt; &gt; With asynchronous i_dirty-&gt;i_clean movement (moving a cleaned page to the<br />&gt; &gt; clean list at the IO completion handler. Please don't consider that for<br />&gt; &gt; 2.4 :)) this would not happen, too.<br />&gt;<br />&gt; Or we could have parallel lists for dirty and clean.<br /><br />Well, more importantly, do you actually have good reason to believe that<br />it is wrong to try to write things out asynchronously?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
