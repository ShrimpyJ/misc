    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/9/29/54">First message in thread</a></li><li><a href="/lkml/2001/9/29/54">Tobias Ringstrom</a><ul><li class="origin"><a href="/lkml/2001/9/29/63">(Linus Torvalds)</a><ul><li><a href="/lkml/2001/9/29/63">Rik van Riel</a><ul><li><a href="/lkml/2001/9/29/60">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2001/9/29/70">Tobias Ringstrom</a></li></ul></li><li><a href="/lkml/2001/9/29/77">Sebastian Benoit</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.4.10 VM, active cache pages, and OOM</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 29 Sep 2001 18:36:50 +0000 (UTC)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;Pine.LNX.4.33.0109291645260.16885-100000&#64;boris.prodako.se&gt;,<br />Tobias Ringstrom  &lt;tori&#64;ringstrom.mine.nu&gt; wrote:<br />&gt;<br />&gt;I assume that the difference between a buf size of 512 and 4096 is that<br />&gt;for the 512-byte case, each page is touched more than once, and that's why<br />&gt;the system think the pages are active.  This is a very wrong decision,<br />&gt;since I'm doing a sequential read.<br />&gt;<br />&gt;Fixing that particular problem will get rid of my problem, but I'm<br />&gt;guessing that it would only hide another real problem, which is that<br />&gt;2.4.10 has a huge problem freeing pages from the list of active pages,<br />&gt;even if they are clean, and thus making a wrong decision on the<br />&gt;availibility of free(able) pages.<br /><br />Absolutely right.<br /><br />It's probably worth fixing the "sequential accesses of &lt; pagesize count<br />as 'active'" problem too, but the real issue is that if you get into a<br />situation with _many_ more active pages than inactive, the plain 2.4.10<br />VM doesn't age the active list nearly fast enough.<br /><br />That's fixed in Andrea's VM tweaks, but if you want to look into this,<br />the basic problem is in mm/vmscan.c, shrink_caches(), which in plain<br />2.4.10 does<br /><br />        /* Do we want to age the active list? */<br />        if (nr_inactive_pages &lt; nr_active_pages*2)<br />                refill_inactive(nr_pages);<br /><br />which doesn't take into account just _how_ imbalanced the active list<br />is. So if the active list is huge, it will still just scan a small fixed<br />percentage of it (and to make matters worse, the small part of it is<br />proportional to the size of the _inactive_ list, so if the inactive list<br />is small, that just makes the problem worse.<br /><br />What Andreas fix does is to make the refill rate be proportional to the<br />sizes of the lists, which should fix this problem for you. <br /><br />However, I'd also like to fix generic_file_read() to only mark the page<br />accessed when we're touching it for the first time, and notice<br />sequential accesses automatically. That way the use-once logic doesn't<br />depend on the read size - which is a totally independent problem.<br /><br />If you want to test, the fix for _that_ is in mm/filemap.c:<br />do_generic_file_read(), where the code does:<br /><br />		...<br />                ret = actor(desc, page, offset, nr);<br />                offset += ret;<br />                index += offset &gt;&gt; PAGE_CACHE_SHIFT;<br />                offset &amp;= ~PAGE_CACHE_MASK;<br /><br />                mark_page_accessed(page);<br />		...<br /><br />and it would be interesting to hear if the behaviour improves with the<br />above mark_page_accessed() logic moved a bit and changed to:<br /><br />		...<br />                ret = actor(desc, page, offset, nr);<br />		if (!offset || !file-&gt;f_reada)<br />			mark_page_accessed(page);<br />                offset += ret;<br />                index += offset &gt;&gt; PAGE_CACHE_SHIFT;<br />                offset &amp;= ~PAGE_CACHE_MASK;<br />		...<br /><br />(which basically says: we only mark the page accessed if we read the<br />_beginning_ of the page, or if we just did a seek to it)<br /><br />Btw, if you test the above change out and confirm that it fixes te<br />behaviour, please send me an acknowledgement email - I've not done it in<br />my own tree yet, and unless I get a "yes, that works well" email I won't<br />be doing it..<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
