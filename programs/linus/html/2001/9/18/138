    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/9/17/151">First message in thread</a></li><li><a href="/lkml/2001/9/18/47">Alexander Viro</a><ul><li><a href="/lkml/2001/9/18/218">Andrea Arcangeli</a><ul><li><a href="/lkml/2001/9/18/46">Alexander Viro</a></li><li><a href="/lkml/2001/9/18/57">Andrea Arcangeli</a><ul><li><a href="/lkml/2001/9/18/61">Alexander Viro</a></li></ul></li><li><a href="/lkml/2001/9/18/63">Helge Hafting</a></li><li><a href="/lkml/2001/9/18/78">Andrea Arcangeli</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Sep 2001 10:02:55 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.4.10-pre11</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 18 Sep 2001, Andrea Arcangeli wrote:<br />&gt; &gt;<br />&gt; &gt; What are you going to use as mapping-&gt;host for it?<br />&gt;<br />&gt; the only info we'd need from the host is the host-&gt;i_rdev, so why can't<br />&gt; we get it from the file-&gt;f_dentry-&gt;d_inode-&gt;i_rdev?<br /><br />No, just allocate a real inode as part of "struct block_device"<br />allocation. This is basically what socket etc stuff does - and it's<br />actually easiest to do it the other way, exactly like sockets do (ie<br />_embed_ "struct block_device"  inside a struct inode as if "block_device"<br />was just another filesystem), and then just allocate one inode and get the<br />"struct block_device"  allocation for free.<br /><br />This works really well for sockets, and has worked for a long time. See<br />how the socket is hidden in "inode-&gt;u.socket_i", and how it's trivial to<br />convert from one to the other.<br /><br />And the fact is, a block_device _is_ a simple filesystem if you squint<br />just the right way. Admittedly it's a fairly flat and _boring_ filesystem,<br />but hey, that's the point of them, after all ;)<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
