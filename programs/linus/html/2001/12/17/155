    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2001/12/15/32">First message in thread</a></li><li><a href="/lkml/2001/12/17/141">Linus Torvalds</a><ul><li><a href="/lkml/2001/12/17/190">Rik van Riel</a><ul><li class="origin"><a href="/lkml/2001/12/17/200">Linus Torvalds</a><ul><li><a href="/lkml/2001/12/17/200">Davide Libenzi</a><ul><li><a href="/lkml/2001/12/17/211">Davide Libenzi</a></li></ul></li><li><a href="/lkml/2001/12/17/218">David Lang</a></li><li><a href="/lkml/2001/12/18/65">Alan Cox</a><ul><li><a href="/lkml/2001/12/18/51">Mike Kravetz</a></li><li><a href="/lkml/2001/12/18/72">John Heil</a></li><li><a href="/lkml/2001/12/18/82">Linus Torvalds</a></li><li><a href="/lkml/2001/12/18/269"> degger&#64;fhm ...</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2001/12/17/194">Davide Libenzi</a><ul><li><a href="/lkml/2001/12/17/248">Linus Torvalds</a><ul><li><a href="/lkml/2001/12/17/169">Davide Libenzi</a></li><li><a href="/lkml/2001/12/17/216">Benjamin LaHaise</a><ul><li><a href="/lkml/2001/12/17/185">Linus Torvalds</a></li><li><a href="/lkml/2001/12/18/37">Benjamin LaHaise</a></li><li><a href="/lkml/2001/12/17/217">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Dec 2001 18:35:54 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Scheduler ( was: Just a second ) ...</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Mon, 17 Dec 2001, Rik van Riel wrote:<br />&gt;<br />&gt; Try readprofile some day, chances are schedule() is pretty<br />&gt; near the top of the list.<br /><br />Ehh.. Of course I do readprofile.<br /><br />But did you ever compare readprofile output to _total_ cycles spent?<br /><br />The fact is, it's not even noticeable under any normal loads, and<br />_definitely_ not on UP except with totally made up benchmarks that just<br />pass tokens around or yield all the time.<br /><br />Because we spend 95-99% in user space or idle. Which is as it should be.<br />There are _very_ few loads that are kernel-intensive, and in fact the best<br />way to get high system times is to do either lots of fork/exec/wait with<br />everything cached, or do lots of open/read/write/close with everything<br />cached.<br /><br />Of the remaining 1-5% of time, schedule() shows up as one fairly high<br />thing, but on most profiles I've seen of real work it shows up long after<br />things like "clear_page()" and "copy_page()".<br /><br />And look closely at the profile, and you'll notice that it tends to be a<br />_loong_ tail of stuff.<br /><br />Quite frankly, I'd be a _lot_ more interested in making the scheduling<br />slices _shorter_ during 2.5.x, and go to a 1kHz clock on x86 instead of a<br />100Hz one, _despite_ the fact that it will increase scheduling load even<br />more. Because it improves interactive feel, and sometimes even performance<br />(ie being able to sleep for shorter sequences of time allows some things<br />that want "almost realtime" behaviour to avoid busy-looping for those<br />short waits - improving performace exactly _because_ they put more load on<br />the scheduler).<br /><br />The benchmark that is just about _the_ worst on the scheduler is actually<br />something like "lmbench", and if you look at profiles for that you'll<br />notice that system call entry and exit together with the read/write path<br />ends up being more of a performance issue.<br /><br />And you know what? From a user standpoint, improving disk latency is again<br />a _lot_ more noticeable than scheduler overhead.<br /><br />And even more important than performance is being able to read and write<br />to CD-RW disks without having to know about things like "ide-scsi" etc,<br />and do it sanely over different bus architectures etc.<br /><br />The scheduler simply isn't that important.<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
