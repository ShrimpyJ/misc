    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/11/26/110">First message in thread</a></li><li><a href="/lkml/2003/11/26/110">(Bruce Perens)</a><ul><li><a href="/lkml/2003/11/26/112">Linus Torvalds</a><ul><li><a href="/lkml/2003/11/26/116">Linus Torvalds</a></li><li><a href="/lkml/2003/11/26/121">Linus Torvalds</a></li><li class="origin"><a href="/lkml/2003/11/26/130">Linus Torvalds</a><ul><li><a href="/lkml/2003/11/26/130">Bruce Perens</a><ul><li><a href="/lkml/2003/11/26/134">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2003/11/27/22">Herbert Xu</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 26 Nov 2003 10:45:41 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Never mind. Re: Signal left blocked after signal handler.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 26 Nov 2003, Bruce Perens wrote:<br />&gt;<br />&gt; The test code works on 2.4, but the electric fence confidence test does<br />&gt; not. Maybe something odd with SIGSEGV, which is<br />&gt; what that confidence test is catching. I will go back and see why.<br /><br />One difference in 2.4.x and 2.6.x is the signal blocking wrt blocked<br />signals that are _forced_ (ie anything that is thread-synchronous, like a<br />SIGSEGV/SIGTRAP/SIGBUS that happens as a result of a fault):<br /><br /> - in 2.4.x they will just punch through the block<br /> - in 2.6.x they will refuse to punch through a blocked signal, but<br />   since they can't be delivered they will cause the process to be<br />   killed.<br /><br />Trivial test program:<br /><br />	#include &lt;signal.h&gt;<br />	#include &lt;stdlib.h&gt;<br /><br />	void sigsegv(int sig)<br />	{<br />		*(int *)0=0;<br />	}<br /><br />	int main(int argc, char **argv)<br />	{<br />		struct sigaction sa = { .sa_handler = sigsegv };<br /><br />		sigaction(SIGSEGV, &amp;sa, NULL);<br />		*(int *)0 = 0;<br />	}<br /><br />and in 2.4.x this will cause infinte SIGSEGV's (well, they'll be caught by<br />the stack size eventually, but you see the problem: do a "strace" to see<br />what's going on). In 2.6.x the second SIGSEGV will just kill the program<br />immediately.<br /><br />If you _want_ the recursive behaviour, you should add<br /><br />	.sa_flags = SA_NODEFER<br /><br />to the sigaction initializer.<br /><br />I don't understand why your test-program works differently on 2.4.x,<br />though, since a "kill()" system call is _not_ thread-synchronous, and<br />should never punch through anything. Not even on 2.4.x.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
