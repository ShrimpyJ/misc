    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/11/22/60">First message in thread</a></li><li><a href="/lkml/2003/11/22/60">Daniel Barlow</a><ul><li class="origin"><a href="/lkml/2003/11/22/76">Linus Torvalds</a><ul><li><a href="/lkml/2003/11/22/76">Paul Mackerras</a><ul><li><a href="/lkml/2003/11/22/78">Linus Torvalds</a><ul><li><a href="/lkml/2003/11/23/5">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 22 Nov 2003 11:02:00 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: x86: SIGTRAP handling differences from 2.4 to 2.6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sat, 22 Nov 2003, Daniel Barlow wrote:<br />&gt; <br />&gt; There is a difference between 2.4 (tested in 2.4.23-rc2) and 2.6<br />&gt; (tested in 2.6.0-pre9) in the handling of "int 3" inside a SIGTRAP <br />&gt; handler.<br /><br />Indeed.<br /><br />The basic change is basically:<br /><br /> - some signals are "thread synchronous", ie the thread _cannot_ continue <br />   without taking them. Basically, any instruction fault does this, <br />   since just returning would generally cause the instruction to just be <br />   done again, and cause the same fault.<br /><br /> - the difference between 2.4.x and 2.6.x is that in 2.4.x such a <br />   thread-synchronous instruction will just blow through being blocked. So <br />   even if you block them, they'll still happen. In 2.6.x, trying to block <br />   a thread-synchronous signal will just cause the process to be killed <br />   with that signal ("it can't be delivered, it can't be ignored, let's <br />   just tell the user")<br /><br />The reason for the change is that the 2.4.x behaviour ends up hiding bugs, <br />and can cause surprising deadlocks in threaded programs. The 2.6.x <br />behaviour is "You did something fundamentally wrong, just _die_ now".<br /><br />&gt; I'm not sure what the correct answer is, if indeed it's specified.<br />&gt; For contrast, in FreeBSD 5.1 I'm told that the signal handler runs to<br />&gt; completion and only on exit is it called again.<br /><br />This works because "int 3" and "into" is what Intel calls a "trap" as<br />opposed to a "fault", and as such we _could_ delay handling the signal and<br />just continue along - when the exception happens, the CPU has already<br />executed the instruction, and the exception will return to _after_ the<br />instruction.<br /><br />However, Linux will refuse to do that because delaying the SIGTRAP is <br />pointless: <br /> - you'd get it at the wrong spot, making it pointless<br /> - the wrong thread could get it if you just consider it a normal signal.<br /><br />So Linux considers both "int 3" and "into" to be thread-synchronous, even <br />though they are trivially recoverable. Which means that we have two <br />options, and two options only: punch through the fact that the signal is <br />blocked, or just say "that's wrong", and kill it.<br /><br />NOTE NOTE NOTE!! If you actually _want_ the 2.4.x behaviour of recursive<br />signal invocation, you should just tell the kernel so: use the SA_NODEFER<br />flag to sigaction() to tell the kernel that you don't want to defer<br />recursive signals.<br /><br />In short, the 2.6.x behaviour is the right one. 2.4.x was a strange<br />violation of the signal blocking, and I consider the FreeBSD behaviour to<br />be just bizarre.<br /><br />And with 2.6.x, if you actually _want_ recursive signal handlers, you can <br />do so (fairly portably, I might add - putting the SA_NODEFER flag there <br />should make everybody do the same thing, even *BSD).<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
