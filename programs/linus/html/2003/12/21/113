    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/12/20/58">First message in thread</a></li><li><a href="/lkml/2003/12/21/107">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/21/110">Manfred Spraul</a><ul><li class="origin"><a href="/lkml/2003/12/24/118">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/24/118">Manfred Spraul</a><ul><li><a href="/lkml/2003/12/25/41">OGAWA Hirofumi</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 21 Dec 2003 14:05:08 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC,PATCH] use rcu for fasync_lock</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 21 Dec 2003, Manfred Spraul wrote:<br />&gt;<br />&gt; &gt;Here's a big clue: if you make code worse than it is today, it won't be <br />&gt; &gt;accepted. I don't even see why you'd bother in the first place.<br />&gt;<br />&gt; fasync_helper != kill_fasync<br />&gt; fasync_helper is rare, and usually running under lock_kernel().<br /><br />But we want to get rid of lock_kernel(), not create new code that depends <br />on it.<br /><br />And _especially_ if fasync_helper() is rarely used, that means that <br />changing the callers to have a nicer calling convention would not be <br />painful.<br /><br />&gt; kill_fasync is far more common (every pipe_read and _write), I want to <br />&gt; remove the unconditional read_lock(&amp;global_lock).<br /><br />Note that my personal preference would be to kill off "kill_fasync()" <br />entirely.<br /><br />We actually have almost all the infrastructure in place already: it's <br />called a "wait queue". In 2.5.x it took a callback function, and the only <br />thing missing is really the "band" information at wakeup time.<br /><br />So if we instead made the whole fasync infrastructure use the existing <br />wait-queues, and made wakeup() say what kind of wakeup it is, we could <br />probably get rid of the specific fasync datastructures entirely. And we'd <br />only take locks that we take _anyway_.<br /><br />I dunno. But to me that at least sounds like a real cleanup.<br /><br />&gt; Today's solution is two copies of fasync_helper: one with lock_sock in <br />&gt; net/socket.c, one with write_lock_irq(&amp;fasync_lock) in fs/fcntl.c.<br /><br />And two functions that statically do something different is actually <br />_better_ than one function that does two different things dynamically.<br /><br />And if the two cases have different locking, then they should remain as <br />two separate cases.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
