    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/12/20/58">First message in thread</a></li><li><a href="/lkml/2003/12/21/102">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/21/104">Manfred Spraul</a><ul><li class="origin"><a href="/lkml/2003/12/21/110">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/21/110">Manfred Spraul</a><ul><li><a href="/lkml/2003/12/21/113">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 21 Dec 2003 13:19:34 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC,PATCH] use rcu for fasync_lock</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 21 Dec 2003, Manfred Spraul wrote:<br />&gt; &gt;<br />&gt; &gt;Just make the caller do the locking.<br />&gt;<br />&gt; It's not that simple:<br /><br />It _is_ that simple.<br /><br />The choices are:<br /> - let the caller do the locking<br /> - make the callee locking be statically determinable<br /><br />Those are the choices. Your kind of code is not goign to be integrated.<br /><br />&gt; the function does<br />&gt;     kmalloc();<br />&gt;     spin_lock();<br />&gt;     use_allocation.<br /><br />This is trivially handled by splitting out the allocation as a separate <br />phase. <br /><br />Yes, it requires that the caller be changed, but if the choice is between <br />insane locking and making a caller change, then the choice is very very <br />clear.<br /><br />&gt; But: as far as I can see, these lines usually run under lock_kernel(). <br />&gt; If this is true, then the spin_lock(&amp;fasync_lock) won't cause any <br />&gt; scalability regression, and I'll use that lock instead of lock_sock, <br />&gt; even for network sockets.<br /><br />Don't.<br /><br />Here's a big clue: if you make code worse than it is today, it won't be <br />accepted. I don't even see why you'd bother in the first place.<br /><br />So go back to the drawing board, and just do it _right_. Or don't do it at <br />all. There's no point to making the code look and behave worse than it <br />does today.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
