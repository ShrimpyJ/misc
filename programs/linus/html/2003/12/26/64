    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/12/26/29">First message in thread</a></li><li><a href="/lkml/2003/12/26/29"> linux&#64;horizon ...</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2003/12/27/50">Andreas Schwab</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Dec 2003 12:05:09 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: GCC 3.4 Heads-up</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Dec 2003 linux&#64;horizon.com wrote:<br />&gt; <br />&gt; Applied to integer types, it *is* pretty brain damaged.  But applied to<br />&gt; pointer types, it makes a lot more sense.<br /><br />No it doesn't.<br /><br />Your example shows all the problems with the thing:<br /><br />&gt; Or consider the case when the structure doesn't have an explicit size<br />&gt; and you have a big case statement for parsing it:<br />&gt; <br />&gt; switch (a-&gt;type) {<br />&gt; 	case BAR:<br />&gt; 		process_bar_chunk(((struct bar *)a)++);<br />&gt; 		break;<br /><br />Do you _really_ want to write unportable code for no reason?<br /><br />This can trivially be done portably and readably by just adding a small <br />bit of verbiage, ie you could have<br /><br />	#define next_ptr(x,type) (void *)(1+(type *)(x))<br /><br />and just write<br /><br />		process_bar_chunk(a);<br />		a = next_ptr(a, struct bar);<br /><br />or similar. Suddenly you can compile your code with any compiler you want <br />to, including one that maybe generates better code than gcc. Including <br />newer versions of gcc.<br /><br />And suddenly people can look at your code, and understand what it is<br />doing, even if they don't know all the gcc extensions. That's _important_.<br /><br />Some extensions are fairly obvious. I think the "a ? : b" one is pretty<br />simple, conceptually (ie you can explain it to even a novice C user<br />without there being any confusion). But the "cast as lvalue" definitely<br />isn't.<br /><br />&gt; It's well-defined and has legitimate uses.<br /><br />It has no legitimate uses. The only upside of it is to avoid typing a few <br />extra characters, but since using macros can make the code more readable <br />anyway, that's not a very good argument.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
