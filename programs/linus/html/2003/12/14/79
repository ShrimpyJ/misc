    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/12/14/5">First message in thread</a></li><li><a href="/lkml/2003/12/14/74">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/14/76">Ingo Molnar</a><ul><li><a href="/lkml/2003/12/14/78">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/15/210">Roland McGrath</a></li></ul></li></ul></li><li><a href="/lkml/2003/12/14/77">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2003/12/14/80">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/14/80">Ingo Molnar</a><ul><li><a href="/lkml/2003/12/15/28">dan carpenter</a></li><li><a href="/lkml/2003/12/15/214">Roland McGrath</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2003/12/15/23">Arjan van de Ven</a><ul><li><a href="/lkml/2003/12/15/205">Roland McGrath</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Dec 2003 14:45:00 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] Re: Problem with exiting threads under NPTL</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 14 Dec 2003, Ingo Molnar wrote:<br />&gt;<br />&gt; - it sets zap_leader to 0 outside the critical section.<br />&gt;<br />&gt; - it sets 'p = leader' within the unlikely branch - slightly faster common<br />&gt;   case.<br /><br />Note that both of these micro-optimizations are equally likely to _hurt_.<br /><br />In particular, the bigger the liveness region of a variable is, the more<br />it adds to register pressure, and the worse code gcc generates.<br />Initializing variables further away from its use tends to just increase<br />the likelihood that gcc will have to spill that (or another) variable to<br />the stack.<br /><br />So setting variables earlier tends to actually pessimize code (yes, a<br />perfect compiler wouldn't care, and just move the assignment later. But<br />for such a perfect compiler it doesn't matter where you put it anyway).<br /><br />Rule of thumb: don't use variables "early" just to get one instruction out<br />of a critical region. The cost of a critical region is not the variables<br />inside of it, but the locking, and using variables early not only has the<br />potential to screw the compiler, it makes the code less readable.<br /><br />Use the variable where they logically make sense.<br /><br />Similarly, straight-line unconditional code without any memory footprint<br />(ie with only cached reads/writes) tends to be basically "free" on any<br />modern CPU. In contrast, jumping around sure isn't (and gcc tends to<br />optimize for the wrong things here).<br /><br />For this reason, don't do<br /><br />	if (x) {<br />		a = ...<br />	} else {<br />		a = ...;<br />	}<br /><br />if one of the cases is trivial and 'a' is a local variable. It's usually<br />better to use<br /><br />	a = ...;<br />	if (x) {<br />		a = ...<br />	}<br /><br />and avoid the jumps.<br /><br />In fact, from a performance standpoint, it can often be better to use<br /><br />	a = ...;<br />	tmp = ....;<br />	a = x ? tmp : a;<br /><br />because that allows the compiler to generate straight-line code with<br />conditional moves - which it would _not_ be able to do if it decided that<br />one of the subexpressions might cause faults or other unintended<br />consequences.<br /><br />Basically: linearize the code. That's what modern CPU's are good at<br />handling. It's ok to do a small number of extra "normal" instructions if<br />you can avoid the nasty kind (jumps etc).<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
