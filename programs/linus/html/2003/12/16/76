    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/12/7/182">First message in thread</a></li><li><a href="/lkml/2003/12/13/110">Nick Piggin</a><ul><li><a href="/lkml/2003/12/13/117">Jamie Lokier</a><ul><li><a href="/lkml/2003/12/14/12">Nick Piggin</a><ul><li><a href="/lkml/2003/12/14/16">Arjan van de Ven</a></li><li><a href="/lkml/2003/12/16/72">Bill Davidsen</a></li></ul></li><li class="origin"><a href="/lkml/2003/12/16/152">Linus Torvalds</a><ul><li><a href="/lkml/2003/12/16/152">Davide Libenzi</a><ul><li><a href="/lkml/2003/12/16/154">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2003/12/16/67">Bill Davidsen</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 16 Dec 2003 10:22:42 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [CFT][RFC] HT scheduler</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 14 Dec 2003, Jamie Lokier wrote:<br /><br />&gt; Nick Piggin wrote:<br />&gt; &gt; &gt;Shared runqueues sound like a simplification to describe execution units<br />&gt; &gt; &gt;which have shared resourses and null cost of changing units. You can do<br />&gt; &gt; &gt;that by having a domain which behaved like that, but a shared runqueue<br />&gt; &gt; &gt;sounds better because it would eliminate the cost of even considering<br />&gt; &gt; &gt;moving a process from one sibling to another.<br />&gt; &gt;<br />&gt; &gt; You are correct, however it would be a miniscule cost advantage,<br />&gt; &gt; possibly outweighed by the shared lock, and overhead of more<br />&gt; &gt; changing of CPUs (I'm sure there would be some cost).<br />&gt;<br />&gt; Regarding the overhead of the shared runqueue lock:<br />&gt;<br />&gt; Is the "lock" prefix actually required for locking between x86<br />&gt; siblings which share the same L1 cache?<br /><br />I bet it is. In a big way.<br /><br />The lock does two independent things:<br /> - it tells the core that it can't just crack up the load and store.<br /> - it also tells other memory ops that they can't re-order around it.<br /><br />Neither of these have anything to do with the L1 cache.<br /><br />In short, I'd be very very surprised if you didn't need a "lock" prefix<br />even between hyperthreaded cores. It might be true in some specific<br />implementation of HT, but quite frankly I'd doubt it, and I'd be willing<br />to guarantee that Intel would never make that architectural even if it was<br />true today (ie it would then break on future versions).<br /><br />It should be easy enough to test in user space.<br /><br />[ Time passes ]<br /><br />Done. Check this program out with and without the "lock ;" prefix. With<br />the "lock" it will run forever on a HT CPU. Without the lock, it will show<br />errors pretty much immediately when the two threads start accessing "nr"<br />concurrently.<br /><br />		Linus<br /><br />----<br />#include &lt;pthread.h&gt;<br />#include &lt;signal.h&gt;<br />#include &lt;unistd.h&gt;<br />#include &lt;stdio.h&gt;<br /><br />unsigned long nr;<br /><br />#define LOCK "lock ;"<br /><br />void * check_bit(int bit)<br />{<br />	int set, reset;<br />	do {<br />		asm(LOCK "btsl %1,%2; sbbl %0,%0": "=r" (set): "r" (bit), "m" (nr):"memory");<br />		asm(LOCK "btcl %1,%2; sbbl %0,%0": "=r" (reset): "r" (bit), "m" (nr):"memory");<br />	} while (reset &amp;&amp; !set);<br />	fprintf(stderr, "bit %d: %d %d (%08x)\n", bit, set, reset, nr);<br />	return NULL;<br />}<br /><br />static void * thread1(void* dummy)<br />{<br />	return check_bit(0);<br />}<br /><br />static void * thread2(void *dummy)<br />{<br />	return check_bit(1);<br />}<br /><br />int main(int argc, char ** argv)<br />{<br />	pthread_t p;<br /><br />	pthread_create(&amp;p, NULL, thread1, NULL);<br />	sleep(1);<br />	thread2(NULL);<br />	return 1;<br />}<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
