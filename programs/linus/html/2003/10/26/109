    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2003/10/26/109">First message in thread</a></li><li class="origin"><a href="/lkml/2003/10/26/120">Linus Torvalds</a><ul><li><a href="/lkml/2003/10/26/120">Randolph Chung</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 26 Oct 2003 10:01:21 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] fix __div64_32 to do division properly</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sun, 26 Oct 2003, Randolph Chung wrote:<br />&gt;<br />&gt; Hi Linus, this was sent to lkml a few days ago. Pls consider applying<br />&gt; for 2.6 :-)<br /><br />As far as I can tell, this one is buggy and can cause total lockups with <br />an infinite loop:<br /><br />&gt; +	if (b &gt; 0) {<br />&gt; +		while (b &lt; rem) {<br />&gt; +			b &lt;&lt;= 1;<br />&gt; +			d &lt;&lt;= 1;<br />&gt; +		}<br />&gt; +	}<br /><br />The "shift up until big enough" is _not_ valid: if the thing we divide is <br />large (high bit set and some other bits set too), then shifting 'b' up may <br />never make 'b' bigger than 'rem'.<br /><br />It looks like this should be trivially triggerable by just dividing ~0ULL <br />with pretty much anything.<br /><br />Or did I miss something?<br /><br />Also, I have to say that it seems silly to do the old "one bit at a time"  <br />thing when most hardware will have at least a 32/32 divide (and even if it<br />doesn't have a hardware 32-bit divide, the "one bit at a time"  algorithm<br />will be faster for regular 32-bit values).<br /><br />Note that the reduction of the high 32 bits can be done with all 32-bit <br />math.<br /><br />So with the overflow case fixed, and with a 32/32 initial reduction of the <br />high bits, the thing would look something like this:<br /><br />	uint32_t __div64_32(uint64_t *n, uint32_t base)<br />	{<br />		uint64_t rem = *n;<br />		uint64_t b = base;<br />		uint64_t res, d = 1;<br />		uint32_t high = rem &gt;&gt; 32;<br />		uint64_t top;<br />	<br />		/* Reduce the thing a bit first */<br />		res = 0;<br />		if (high &gt;= base) {<br />			high /= base;<br />			res = (uint64_t) high &lt;&lt; 32;<br />			rem -= (uint64_t) (high*base) &lt;&lt; 32;<br />		}<br /><br />		while ((int64_t)b &gt; 0 &amp;&amp; b &lt; rem) {<br />			b &lt;&lt;= 1;<br />			d &lt;&lt;= 1;<br />		}<br />	<br />		do {<br />			if (rem &gt;= b) {<br />				rem -= b;<br />				res += d;<br />			}<br />			b &gt;&gt;= 1;<br />			d &gt;&gt;= 1;<br />		} while (d);<br />	<br />		*n = res;<br />		return rem;<br />	}<br />	<br />but I have not really verified this for any reasonable amount of values..<br /><br />If you can verify this some way (test at least a somewhat interesting <br />subset), please re-send the patch. <br /><br />Remember: be _careful_ with math. Overflow is nasty.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
