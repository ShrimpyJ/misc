    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/11/27/1">First message in thread</a></li><li><a href="/lkml/2015/11/27/1">Al Viro</a><ul><li><a href="/lkml/2015/11/27/313">Mauro Carvalho Chehab</a><ul><li class="origin"><a href="/lkml/2015/11/29/284">Linus Torvalds</a><ul><li><a href="/lkml/2015/11/29/284">Al Viro</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Nov 2015 09:49:11 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: -&gt;poll() instances shouldn't be indefinitely blocking</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 27, 2015 at 7:18 AM, Mauro Carvalho Chehab<br />&lt;mchehab&#64;osg.samsung.com&gt; wrote:<br />&gt; Al Viro &lt;viro&#64;ZenIV.linux.org.uk&gt; escreveu:<br />&gt;<br />&gt;&gt; Take a look at this:<br />&gt;&gt; static unsigned int gsc_m2m_poll(struct file *file,<br />&gt;&gt;                                         struct poll_table_struct *wait)<br />&gt;&gt; {<br />&gt;&gt;         struct gsc_ctx *ctx = fh_to_ctx(file-&gt;private_data);<br />&gt;&gt;         struct gsc_dev *gsc = ctx-&gt;gsc_dev;<br />&gt;&gt;         int ret;<br />&gt;&gt;<br />&gt;&gt;         if (mutex_lock_interruptible(&amp;gsc-&gt;lock))<br />&gt;&gt;                 return -ERESTARTSYS;<br />&gt;&gt;<br />&gt;&gt;         ret = v4l2_m2m_poll(file, ctx-&gt;m2m_ctx, wait);<br />&gt;&gt;         mutex_unlock(&amp;gsc-&gt;lock);<br />&gt;&gt;<br />&gt;&gt;         return ret;<br />&gt;&gt; }<br />&gt;&gt;<br />&gt;&gt; a) -&gt;poll() should not return -E...; callers expect just a bitmap of<br />&gt;&gt; POLL... values.<br />&gt;<br />&gt; Yeah. We fixed issues like that on other drivers along the time. I guess<br />&gt; this is a some bad code that people just cut-and-paste from legacy drivers<br />&gt; without looking into it.<br /><br />Actually, while returning -ERESTARTSYS is bogus, returning _zero_<br />would not be. The top-level poll() code will happily notice the<br />signal, and return -EINTR like poll should (unless something else is<br />pending, in which case it will return zero and the bits set for that<br />something else).<br /><br />So having a driver with a -&gt;poll() function that does that kind of<br />conditional locking is not wrong per se. It's just he return value<br />that is crap.<br /><br />I also do wonder if we might not make the generic code a bit more<br />robust wrt things like this. The bitmask we use is only about the low<br />bits, so we *could* certainly allow the driver poll() functions to<br />return errors - possibly just ignoring them. Or perhaps have a<br />WARN_ON_OCNE() to find them.<br /><br />Al, what do you think? The whole "generic code should be robust wrt<br />drivers making silly mistakes" just sounds like a good idea. Finding<br />these things through code inspection is all well and good, but having<br />a nice warning report from users might be even better.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
