    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/11/2/311">First message in thread</a></li><li><a href="/lkml/2015/11/16/477">Peter Zijlstra</a><ul><li><a href="/lkml/2015/11/16/487">Will Deacon</a><ul><li><a href="/lkml/2015/11/16/520">"Paul E. McKenney"</a><ul><li><a href="/lkml/2015/11/16/521">Will Deacon</a><ul><li><a href="/lkml/2015/11/16/554">"Paul E. McKenney"</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2015/11/17/242">Linus Torvalds</a><ul><li><a href="/lkml/2015/11/17/242">Will Deacon</a><ul><li><a href="/lkml/2015/11/17/796">"Paul E. McKenney"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Nov 2015 13:58:49 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 4/4] locking: Introduce smp_cond_acquire()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 16, 2015 at 8:24 AM, Will Deacon &lt;will.deacon&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; ... or we upgrade spin_unlock_wait to a LOCK operation, which might be<br />&gt; slightly cheaper than spin_lock()+spin_unlock().<br /><br />So traditionally the real concern has been the cacheline ping-pong<br />part of spin_unlock_wait(). I think adding a memory barrier (that<br />doesn't force any exclusive states, just ordering) to it is fine, but<br />I don't think we want to necessarily have it have to get the cacheline<br />into exclusive state.<br /><br />Because if spin_unlock_wait() ends up having to get the spinlock<br />cacheline (for example, by writing the same value back with a SC), I<br />don't think spin_unlock_wait() will really be all that much cheaper<br />than just getting the spinlock, and in that case we shouldn't play<br />complicated ordering games.<br /><br />On another issue:<br /><br />I'm also looking at the ARM documentation for strx, and the<br />_documentation_ says that it has no stronger ordering than a "store<br />release", but I'm starting to wonder if that is actually true.<br /><br />Because I do end up thinking that it does have the same "control<br />dependency" to all subsequent writes (but not reads). So reads after<br />the SC can percolate up, but I think writes are restricted.<br /><br />Why? In order for the SC to be able to return success, the write<br />itself may not have been actually done yet, but the cacheline for the<br />write must have successfully be turned into exclusive ownership.<br />Agreed?<br /><br />That means that by the time a SC returns success, no other CPU can see<br />the old value of the spinlock any more. So by the time any subsequent<br />stores in the locked region can be visible to any other CPU's, the<br />locked value of the lock itself has to be visible too.<br /><br />Agreed?<br /><br />So I think that in effect, when a spinlock is implemnted with LL/SC,<br />the loads inside the locked region are only ordered wrt the acquire on<br />the LL, but the stores can be considered ordered wrt the SC.<br /><br />No?<br /><br />So I think a _successful_ SC - is still more ordered than just any<br />random store with release consistency.<br /><br />Of course, I'm not sure that actually *helps* us, because I think the<br />problem tends to be loads in the locked region moving up earlier than<br />the actual store that sets the lock, but maybe it makes some<br />difference.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
