    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/11/18/315">First message in thread</a></li><li><a href="/lkml/2015/11/24/698">Linus Torvalds</a><ul><li><a href="/lkml/2015/11/24/701">Tejun Heo</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Nov 2015 12:49:00 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v3 09/22] kthread: Allow to cancel kthread work</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Nov 24, 2015 at 12:28 PM, Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; In general, it's very dangerous to try to cook up your own locking<br />&gt;&gt; rules. People *always* get it wrong.<br />&gt;<br />&gt; It's either trylock on timer side or timer active spinning trick on<br />&gt; canceling side, so this seems the lesser of the two evils.<br /><br />I'm not saying the approach is wrong.<br /><br />I'm saying that people need to realize that locking is harder than<br />they think, and not cook up their own lock primitives using things<br />like trylock without really thinking about it a *lot*.<br /><br />Basically, "trylock()" on its own should never be used in a loop. The<br />main use for trylock should be one of:<br /><br /> - thing that you can just not do at all if you can't get the lock<br /><br /> - avoiding ABBA deadlocks: if you have a A-&gt;B locking order, but you<br />already hold B, instead of "drop B, then take A and B in the right<br />order", you may decide to first "trylock(A)" - and if that fails you<br />then fall back on the "drop and relock in the right order".<br /><br />but if what you want to create is a "get lock using trylock", you need<br />to be very aware of the cache coherency traffic issue at least.<br /><br />It is possible that we should think about trying to introduce a new<br />primitive for that "loop_try_lock()" thing. But it's probably not<br />common enough to be worth it - we've had this issue before, but I<br />think it's a "once every couple of years" kind of thing rather than<br />anything that we need to worry about.<br /><br />The "locking is hard" issue is very real, though. We've traditionally<br />had a *lot* of code that tried to do its own locking, and not getting<br />the memory ordering right etc. Things that happen to work on x86 but<br />don't on other architectures etc.<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
