    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/11/18/315">First message in thread</a></li><li><a href="/lkml/2015/11/18/336">Petr Mladek</a><ul><li><a href="/lkml/2015/11/23/918">Tejun Heo</a><ul><li><a href="/lkml/2015/11/24/220">Petr Mladek</a></li><li class="origin"><a href="/lkml/2015/11/24/701">Linus Torvalds</a><ul><li><a href="/lkml/2015/11/24/701">Tejun Heo</a><ul><li><a href="/lkml/2015/11/24/706">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Nov 2015 12:23:53 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v3 09/22] kthread: Allow to cancel kthread work</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 23, 2015 at 2:58 PM, Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; And the timer can do (ignoring the multiple worker support, do we even<br />&gt; need that?)<br />&gt;<br />&gt;         while (!trylock(worker)) {<br />&gt;                 if (work-&gt;canceling)<br />&gt;                         return;<br />&gt;                 cpu_relax();<br />&gt;         }<br /><br />No no no!<br /><br />People, you need to learn that code like the above is *not*<br />acceptable. It's busy-looping on a spinlock, and constantly trying to<br />*write* to the spinlock.<br /><br />It will literally crater performance on a multi-socket SMP system if<br />it ever triggers. We're talking 10x slowdowns, and absolutely<br />unacceptable cache coherency traffic.<br /><br />These kinds of loops absolutely *have* to have the read-only part. The<br />"cpu_relax()" above needs to be a loop that just tests the lock state<br />by *reading* it, so the cpu_relax() needs to be replaced with<br />something like<br /><br />        while (spin_is_locked(lock)) cpu_relax();<br /><br />instead (possibly just "spin_unlock_wait()" - but the explicit loop<br />might be worth it if you then want to check the "canceling" flag<br />independently of the lock state too).<br /><br />In general, it's very dangerous to try to cook up your own locking<br />rules. People *always* get it wrong.<br /><br />                      Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
