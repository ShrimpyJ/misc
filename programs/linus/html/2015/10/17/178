    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/10/17/120">First message in thread</a></li><li><a href="/lkml/2015/10/17/120">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/121">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/122">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/123">Alexander Holler</a><ul><li><a href="/lkml/2015/10/19/318">Mark Brown</a><ul><li><a href="/lkml/2015/10/19/607">Rob Herring</a><ul><li><a href="/lkml/2015/10/19/660">Alexander Holler</a></li></ul></li><li><a href="/lkml/2015/10/19/648">Alexander Holler</a></li></ul></li></ul></li><li><a href="/lkml/2015/10/17/124">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/167">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/17/172">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/179">Linus Torvalds</a></li><li><a href="/lkml/2015/10/17/180">Greg Kroah-Hartman</a></li><li><a href="/lkml/2015/10/17/184">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2015/10/17/125">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/126">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/127">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/128">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/129">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/130">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/162">Greg Kroah-Hartman</a><ul><li><a href="/lkml/2015/10/17/164">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/170">Greg Kroah-Hartman</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2015/10/17/131">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/132">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/133">Alexander Holler</a></li><li><a href="/lkml/2015/10/17/134">Alexander Holler</a><ul><li class="origin"><a href="/lkml/2015/10/17/182">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/17/182">Alexander Holler</a></li></ul></li></ul></li><li><a href="/lkml/2015/10/17/161">Greg Kroah-Hartman</a><ul><li><a href="/lkml/2015/10/17/166">Alexander Holler</a><ul><li><a href="/lkml/2015/10/17/173">Greg Kroah-Hartman</a><ul><li><a href="/lkml/2015/10/17/197">Alexander Holler</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2015/11/6/399">Alexander Holler</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 17 Oct 2015 11:47:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 11/14] init: deps: annotate various initcalls</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Oct 17, 2015 at 10:14 AM, Alexander Holler &lt;holler&#64;ahsoftware.de&gt; wrote:<br />&gt;<br />&gt; diff --git a/arch/arm/common/edma.c b/arch/arm/common/edma.c<br />&gt; index 873dbfc..d5d2459 100644<br />&gt; --- a/arch/arm/common/edma.c<br />&gt; +++ b/arch/arm/common/edma.c<br />&gt; &#64;&#64; -1872,5 +1872,4 &#64;&#64; static int __init edma_init(void)<br />&gt;  {<br />&gt;         return platform_driver_probe(&amp;edma_driver, edma_probe);<br />&gt;  }<br />&gt; -arch_initcall(edma_init);<br />&gt; -<br />&gt; +annotated_initcall_drv(arch, edma_init, drvid_edma, NULL, edma_driver.driver);<br />&gt; diff --git a/arch/arm/crypto/aes-ce-glue.c b/arch/arm/crypto/aes-ce-glue.c<br />&gt; index b445a5d..d9bcb89 100644<br />&gt; --- a/arch/arm/crypto/aes-ce-glue.c<br />&gt; +++ b/arch/arm/crypto/aes-ce-glue.c<br />&gt; &#64;&#64; -520,5 +520,10 &#64;&#64; static void __exit aes_exit(void)<br />&gt;         crypto_unregister_algs(aes_algs, ARRAY_SIZE(aes_algs));<br />&gt;  }<br />&gt;<br />&gt; -module_init(aes_init);<br />&gt; +static const unsigned dependencies[] __initconst __maybe_unused = {<br />&gt; +       drvid_cryptomgr,<br />&gt; +       0<br />&gt; +};<br />&gt; +<br />&gt; +annotated_module_init(aes_init, drvid_aes_ce_arm, dependencies);<br />&gt;  module_exit(aes_exit);<br /><br />So I think this is kind of a sign of the same disease I mentioned<br />earlier: making dependencies "separate" from the init levels, now<br />means that you do the initialization of the dependencies *instead* of<br />the init level. And that smells bad and wrong, and causes this kind of<br />patch that is not only huge, but si unreadable and the end result<br />looks like crap too.<br /><br />We've actually been quite good at having the module attributes all be<br />*separate* things that work together. So the code had<br /><br />  module_init(aes_init);<br />  module_exit(aes_exit);<br /><br />but also things like<br /><br />  MODULE_DESCRIPTION("AES-ECB/CBC/CTR/XTS using ARMv8 Crypto Extensions");<br />  MODULE_AUTHOR("Ard Biesheuvel &lt;ard.biesheuvel&#64;linaro.org&gt;");<br />  MODULE_LICENSE("GPL v2");<br /><br />and that all helps improve readablity and keep things sane.<br /><br />In contrast, turds like these are just pure and utter crap:<br /><br />   static const unsigned dependencies[] __initconst __maybe_unused = {<br />          drvid_cryptomgr,<br />          0<br />   };<br />   annotated_module_init(aes_init, drvid_aes_ce_arm, dependencies);<br /><br />and yes, I know that we have things like this for the driver ID lists<br />etc, but that doesn't make it better.<br /><br />No, I think any dependency model should strive to make this really<br />really easy and separate, and do things like<br /><br />   module_depends(cryptomgr);<br /><br />and then just use that to fill in a link section or something like<br />that. And no, there's no way we will ever maintain a "list of<br />dependency identifiers". This is stuff that should be all about<br />scripting, or - better yet - just make the link section contain<br />strings so that you don't *need* any C level identifiers.<br /><br />That would be trivial to do by just making the "module_depends()"<br />macro be something like<br /><br />  #define _dependency(x,y) \<br />         static const  struct module_dependency_attribute \<br />         __used __attribute__ ((__section__ ("__dependencies")))  \<br />        * __dependency_attr =  { x,y }<br /><br />  #define module_depends(x) \<br />        _dependency(#x, KBUILD_NAME)<br /><br />  #define module_provides(x) \<br />        _dependency(KBUILD_NAME, #x)<br /><br />And if a module depends on multiple other things, then you just have<br />multiple of those "module_depends()" things. There's some gcc trick to<br />generating numbered (per compilation unit) C identifiers (so that you<br />can have multiple of those "__dependency_attr" variables in the same<br />file), but I forget it right now.<br /><br />And this is also where I think those "module_init()" vs<br />"subsys_init()" things come in. "module_init()" means that it's a<br />driver level thing, which would mean that module_init() implies<br /><br />  module_depends(level7);<br />  module_provides(level7_end);<br /><br />so that the module would automatically be sorted wrt the "driver" level.<br /><br />Another advantage (apart from legibility of the source, and<br />integrating with the *existing* level-based dependencies) is that<br />using something like "module_depends()" and "module_provides()" means<br />that it should be easy to parse even outside of a C compiler, so you<br />could - if you want to - make all the dependencies be done not as part<br />of compiling the source, but as a separate scripting thing. That could<br />be useful for things like statistics and visualization tools that<br />don't want to actually build the kernel, but want to just show the<br />dependencies between different modules.<br /><br />So no. I do *not* think big patches like this are acceptable. This<br />kind of patch - along with the patch that just adds the random<br />dependency identifier C enums - is exactly what we do *not* want. If<br />we do dependencies, they should all be small and local things, and<br />they should not *replace* the existing "module_init()" vs<br />"arch_init()" system, they should add on top of it.<br /><br />                      Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
