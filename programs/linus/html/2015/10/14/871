    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/10/13/909">First message in thread</a></li><li><a href="/lkml/2015/10/14/836">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/848">Tejun Heo</a><ul><li class="origin"><a href="/lkml/2015/10/14/891">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/891">Tejun Heo</a><ul><li><a href="/lkml/2015/10/18/365">Mike Galbraith</a></li></ul></li><li><a href="/lkml/2015/10/16/811">Chris Metcalf</a><ul><li><a href="/lkml/2015/10/16/813">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Oct 2015 13:10:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] workqueue fixes for v4.3-rc5</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 14, 2015 at 12:38 PM, Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; Doesn't seem that way.  This is from 597d0275736d^ - right before<br />&gt; TIMER_NOT_PINNED is introduced.  add_timer() eventually calls into<br />&gt; __mod_timer().<br />&gt;<br />&gt;                 if (likely(base-&gt;running_timer != timer)) {<br />&gt;                         /* See the comment in lock_timer_base() */<br />&gt;                         timer_set_base(timer, NULL);<br />&gt;                         spin_unlock(&amp;base-&gt;lock);<br />&gt;                         base = new_base;<br />&gt;                         spin_lock(&amp;base-&gt;lock);<br />&gt;                         timer_set_base(timer, base);<br />&gt;<br />&gt; It looks like the timers for work items will be reliably queued on the<br />&gt; local CPU.<br /><br />.. unless they are running on another cpu at the time, yes.<br /><br />Also, the new base is not necessarily the current cpu base, although I<br />think the exceptions to that are pretty rare (ie you have to enable<br />timer migration etc)<br /><br />Which I guess might not actually happen with workqueue timers due to<br />the extra workqueue locking thing, but I'm not sure. It's going to be<br />very unlikely, regardless, I agree.<br /><br />&gt; Heh, I don't think much in this area is intended.  It's mostly all<br />&gt; historical accidents and failures to get things cleaned up in time.<br /><br />No argument there.<br /><br />&gt; So, the following two things bother me about this.<br />&gt;<br />&gt; * Given that this is the first reported case of breakage, I don't<br />&gt;   think this is gonna cause lots of criticial issues; however, the<br />&gt;   only thing this indicates is that there simply hasn't been enough<br />&gt;   cases where timers actualy migrate.  If we end up migrating timers<br />&gt;   more actively in the future, it's possible that we'll see more<br />&gt;   breakages which will likely be subtler.<br /><br />I agree that that's a real concern.<br /><br />At the same time, some of the same issues that are pushing people to<br />move timers around (put idle cores to deeper sleeps etc) would also<br />argue for moving delayed work around to other cpus if possible.<br /><br />So I agree that there is a push to make timer cpu targets more dynamic<br />in a way we historically didn't really have. At the same time, I think<br />the same forces that want to move timers around would actually likely<br />want to move delayed work around too...<br /><br />&gt; * This makes queue_delayed_work() behave differently from queue_work()<br />&gt;   and when I checked years ago the local queueing guarantee was<br />&gt;   definitely being depended upon by some users.<br /><br />Yes. But the delayed work really is different. By definition, we know<br />that the current cpu is busy and active _right_now_, and so keeping<br />work on that cpu isn't obviously wrong.<br /><br />But it's *not* obviously right to schedule something on that<br />particular cpu a few seconds from now, when it might be happily asleep<br />and there might be better cpus to bother..<br /><br />&gt; I do want to get rid of the local queueing guarnatee for all work<br />&gt; items.  That said, I don't think this is the right way to do it.<br /><br />Hmm. I guess that for being past rc5, taking your patch is the safe<br />thing. I really don't like it very much, though.<br /><br />                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
