    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/10/13/909">First message in thread</a></li><li><a href="/lkml/2015/10/14/804">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/817">Christoph Lameter</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Oct 2015 12:10:29 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] workqueue fixes for v4.3-rc5</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 14, 2015 at 11:59 AM, Christoph Lameter &lt;cl&#64;linux.com&gt; wrote:<br />&gt; On Wed, 14 Oct 2015, Linus Torvalds wrote:<br />&gt;<br />&gt;&gt; And "schedule_delayed_work()" uses WORK_CPU_UNBOUND.<br />&gt;<br />&gt; Uhhh. Someone changed that?<br /><br />It always did.  This is from 2007:<br /><br />int fastcall schedule_delayed_work(struct delayed_work *dwork,<br />                                        unsigned long delay)<br />{<br />        timer_stats_timer_set_start_info(&amp;dwork-&gt;timer);<br />        return queue_delayed_work(keventd_wq, dwork, delay);<br />}<br />...<br />int fastcall queue_delayed_work(struct workqueue_struct *wq,<br />                        struct delayed_work *dwork, unsigned long delay)<br />{<br />        timer_stats_timer_set_start_info(&amp;dwork-&gt;timer);<br />        if (delay == 0)<br />                return queue_work(wq, &amp;dwork-&gt;work);<br /><br />        return queue_delayed_work_on(-1, wq, dwork, delay);<br />}<br />...<br />int queue_delayed_work_on(int cpu, struct workqueue_struct *wq,<br />                        struct delayed_work *dwork, unsigned long delay)<br />{<br />....<br />                timer-&gt;function = delayed_work_timer_fn;<br /><br />                if (unlikely(cpu &gt;= 0))<br />                        add_timer_on(timer, cpu);<br />                else<br />                        add_timer(timer);<br />}<br />...<br />void delayed_work_timer_fn(unsigned long __data)<br />{<br />        int cpu = smp_processor_id();<br />        ...<br />        __queue_work(per_cpu_ptr(wq-&gt;cpu_wq, cpu), &amp;dwork-&gt;work);<br />}<br /><br /><br />so notice how it always just used "add_timer()", and then queued it on<br />whatever cpu workqueue the timer ran on.<br /><br />Now, 99.9% of the time, the timer is just added to the current CPU<br />queues, so yes, in practice it ended up running on the same CPU almost<br />all the time. There are exceptions (timers can get moved around, and<br />active timers end up staying on the CPU they were scheduled on when<br />they get updated, rather than get moved to the current cpu), but they<br />are hard to hit.<br /><br />But the code clearly didn't do that "same CPU" intentionally, and just<br />going by naming of things I would also say that it was never implied.<br /><br />                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
