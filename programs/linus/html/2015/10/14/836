    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/10/13/909">First message in thread</a></li><li><a href="/lkml/2015/10/14/760">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/779">Christoph Lameter</a><ul><li><a href="/lkml/2015/10/14/802">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/816">Christoph Lameter</a></li><li><a href="/lkml/2015/10/14/818">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2015/10/14/819">Tejun Heo</a><ul><li class="origin"><a href="/lkml/2015/10/14/848">Linus Torvalds</a><ul><li><a href="/lkml/2015/10/14/848">Tejun Heo</a><ul><li><a href="/lkml/2015/10/14/871">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Oct 2015 12:16:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] workqueue fixes for v4.3-rc5</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 14, 2015 at 12:02 PM, Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; But wasn't add_timer() always CPU-local at the time?  add_timer()<br />&gt; allowing cross-cpu migrations came way after that.<br /><br />add_timer() has actually never been "local CPU only" either.<br /><br />What add_timer() does is to keep the timer on the old CPU timer wheel<br />if it was active, and if it wasn't, put it on the current CPU timer<br />wheel.<br /><br />So again, by pure *accident*, if you don't end up ever modifying an<br />already-active timer, then yes, it ended up being local. But even<br />then, things like suspend/resume can move timers around, afaik, so<br />even then it has never been a real guarantee.<br /><br />And I see absolutely no sign that the local cpu case has ever been intentional.<br /><br />Now, obviously, that said there is obviously at least one case that<br />seems to have relied on it (ie the mm/vmstat.c case), but I think we<br />should just fix that.<br /><br />If it turns out that there really are *lots* of cases where<br />"schedule_delayed_work()" expects the work to always run on the CPU<br />that it is scheduled on, then we should probably take your patch just<br />because it's too painful not to.<br /><br />But I'd like to avoid that if possible.<br /><br />                             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
