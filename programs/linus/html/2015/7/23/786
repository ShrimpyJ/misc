    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/7/23/722">First message in thread</a></li><li><a href="/lkml/2015/7/23/762">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/23/775">Steven Rostedt</a><ul><li><a href="/lkml/2015/7/23/784">Willy Tarreau</a><ul><li><a href="/lkml/2015/7/23/785">Andy Lutomirski</a><ul><li><a href="/lkml/2015/7/23/789">Willy Tarreau</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2015/7/23/788">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/23/788">Andy Lutomirski</a><ul><li><a href="/lkml/2015/7/23/804">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 23 Jul 2015 14:48:13 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Dealing with the NMI mess</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 23, 2015 at 2:31 PM, Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; Let me get this straight. The idea is in the #DB handler to detect that<br />&gt; it was triggered in NMI context, and if so, simply disarm that<br />&gt; breakpoint permanently, right?<br /><br />No, for simplicity, I'd make it cover not just NMI code, but any<br />"kernel code with interrupts disabled".<br /><br />Because that's the test we'd use for "use ret instead of iret".<br /><br />And that wider test is exactly because it's so damn hard to get the<br />exact instruction boundaries right. Let's *not* go down the path<br />(again) of having to get the whole %rip range and "magic stack pointer<br />values" etc.<br /><br />Make it simple and completely unambiguous. The rule really would be:<br /><br /> - if we return to kernel space and interrupts are disabled, we will<br />use "ret" rather than "iret"<br /><br />   Hard rule. Simple. Straightforward. No random %rip values. No<br />random %rsp values. NO CRAP.<br /><br /> - but because we use "ret" rather than "iret" we can't get RF<br />semantics, it means that #DB is special. RF is supposed to make us<br />make forward progress<br /><br />   So for that reason, #DB just says "if the breakpoint happened<br />during that interrupts-ff reghion, I will clear %dr7 to guarantee<br />forward progress"<br /><br />So those would be the two main rules. Very simple, and avoiding all nasty cases.<br /><br />Now, I'd be willing to then hide the "oops, we clear dr7 very<br />agrressively" issue by having a few additional _heuristics_. But I<br />call them "heuristics" because unlike the current NMI nesting games,<br />they aren't about core stability. They are about "ok, maybe somebody<br />wants to trigger those faults, and we'll be _nice_ and try to make it<br />easy for them", but nothing more.<br /><br />So for example, if that "#DB clears %dr7" happened, it sounds easy to<br />set _TIF_USER_WORK_MASK, and just force %dr7 to be re-loaded from a<br />cached value, so that if we disabled things because of some user stack<br />trace access, it will be re-enabled by the time we return to user<br />space. I think that sounds reasonable, but it's not something the core<br />low-level entry x86 assembly code needs to even care about. It's not<br />that level of "core", it's just being polite.<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
