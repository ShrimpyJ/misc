    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/7/23/722">First message in thread</a></li><li><a href="/lkml/2015/7/24/447">Peter Zijlstra</a><ul><li><a href="/lkml/2015/7/24/451">Willy Tarreau</a></li><li><a href="/lkml/2015/7/24/601">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2015/7/24/638">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/24/638">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2015/7/24/660">Peter Zijlstra</a><ul><li><a href="/lkml/2015/7/24/672">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/24/685">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 24 Jul 2015 11:41:55 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Dealing with the NMI mess</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 24, 2015 at 11:29 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So in the #DB handler, we would basically only clear instruction<br />&gt; breakpoints, and only when they trigger. If we have a data breakpoint<br />&gt; that triggers (even in kernel mode, and with interrupts disabled), let<br />&gt; it trigger and return with "ret" anyway. No biggie.<br /><br />So we'd not only look at "which breakpoint triggered", we'd also look<br />at the actual debug register and check that "R/Wn == 0", and only<br />disable it for that case.<br /><br />So you'd read %dr6 and %dr7, and then iterate 0..3 and check whether<br />it triggerd (bit #n in %dr6), and that R/Wn (bits 16-17+n*4 of %dr7)<br />is zero, and if so, clear LGn bits (bits 0-1+n*2) in %dr7.<br /><br />Something like<br /><br />        unsigned long mask = 0;<br />        unsigned int dr6 = debug_read(6);<br />        unsigned int dr7 = debug_read(7)<br />        int i;<br /><br />        for (i = 0; i &lt; 4; i++) {<br />                if ((dr6 &gt;&gt; i) &amp; 1) {<br />                        if (!((dr7 &gt;&gt; (4*i+16)) &amp; 3))<br />                                mask |= 3 &lt;&lt; (i*2);<br />                }<br />        }<br /><br />        if (mask)<br />                debug_write(dr7 &amp; ~mask, 7);<br /><br />(yeah, I could easily have screwed that up)<br /><br />But the above should only clear bits in dr7 that are actually<br />associated with the instruction breakpoint that triggered, and since<br />it's a _kernel_ instruction breakpoint, not a user one, we can clear<br />it and forget it. No need to re-enable at all.<br /><br />Hmm?<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
