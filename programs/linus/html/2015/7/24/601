    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/7/23/722">First message in thread</a></li><li><a href="/lkml/2015/7/24/439">Willy Tarreau</a><ul><li><a href="/lkml/2015/7/24/447">Peter Zijlstra</a><ul><li><a href="/lkml/2015/7/24/451">Willy Tarreau</a></li><li class="origin"><a href="/lkml/2015/7/24/607">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/24/607">Linus Torvalds</a><ul><li><a href="/lkml/2015/7/24/638">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2015/7/24/660">Peter Zijlstra</a><ul><li><a href="/lkml/2015/7/24/672">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2015/7/24/450">Steven Rostedt</a><ul><li><a href="/lkml/2015/7/24/468">Willy Tarreau</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 24 Jul 2015 11:29:29 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Dealing with the NMI mess</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 24, 2015 at 8:30 AM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt; On Fri, Jul 24, 2015 at 05:26:37PM +0200, Willy Tarreau wrote:<br />&gt;&gt; &gt;<br />&gt;&gt; &gt; The point is, if we trigger a #DB on an instruction breakpoint<br />&gt;&gt; &gt; while !IF, then we simply disable that breakpoint and do the RET.<br />&gt;&gt;<br />&gt;&gt; Yes but the breakpoint remains disabled then. Or I'm missing<br />&gt;&gt; something.<br />&gt;<br />&gt; <a href="https://marc.info/?l=linux-kernel&amp;m=143773601130974">http://marc.info/?l=linux-kernel&amp;m=143773601130974</a><br />&gt;<br />&gt; We re-enable before going back to userspace.<br /><br />Actually, Andy had a good argument that we don't even need this.<br /><br />We just don't ever need to disable data breakpoints. Even if we end up doing<br /><br />        cli();<br />        copy_from_user_inatomic();<br /><br />that actually works fine. If there are data breakpoints, we will have<br /><br /> (a) things will run slow as hell anyway. Intel CPU's slow down to a<br />relative crawl.<br /><br /> (b) let's say we have a data breakpoint on the data we're reading above<br /><br /> (c) we take a #DB fault after the instruction has completed, so we<br />make forward progress even if we return with RF clear<br /><br /> (d) even if the data breakpoint is unaligned and triggers multiple<br />times, it's going to be a "small number" of multiple times. And see<br />(a). This never happens in practice, and the much bigger slowdown is<br />how data breakpoints tend to slow things down in general.<br /><br /> (e) yes, the string instructions may hit the data breakpoint multilpe<br />times for the "same" instruction, but the forward progress part is<br />still true even for the string instructions. In fact, it's actually<br />likely &lt;i&gt;more&lt;/i&gt; true for string instructions, because they are<br />documented to be less exact, and may trigger the data watchpoint only<br />after a "group of iterations".<br /><br />so I think we just leave data breakpoint alone. The only debug<br />conditions that are *faults* rather than traps are the instruction<br />breakpoints, and we can detect and disable those by just saying "oh,<br />we're in kernel mode".<br /><br />So in the #DB handler, we would basically only clear instruction<br />breakpoints, and only when they trigger. If we have a data breakpoint<br />that triggers (even in kernel mode, and with interrupts disabled), let<br />it trigger and return with "ret" anyway. No biggie.<br /><br />(Ok, so the "General detect fault" is also a fault rather than a trap,<br />but that's the "write to debug registers when it's disabled" thing,<br />very different)<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
