    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/9/11/570">First message in thread</a></li><li><a href="/lkml/2015/9/18/540">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/18/586">Peter Zijlstra</a><ul><li><a href="/lkml/2015/9/18/590">Peter Zijlstra</a></li><li class="origin"><a href="/lkml/2015/9/28/405">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/28/405">Peter Zijlstra</a><ul><li><a href="/lkml/2015/9/28/469">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 18 Sep 2015 09:12:38 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] fs-writeback: drop wb-&gt;list_lock during blk_finish_plug()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 18, 2015 at 8:59 AM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; See PREEMPT_ACTIVE being a recursion flag, we set it there so we won't<br />&gt; preempt while we're already scheduling.<br /><br />PREEMPT_ACTIVE does more than that. It really is a sign that "this is<br />not synchronous". It causes the scheduler to ignore the current task<br />flags (because it might already be TASK_SLEEPING, but we aren't<br />_actually_ ready to sleep yet) etc.<br /><br />So no. It's not "you can't be preempted during scheduling". That's the<br />*normal* preempt count, and all scheduling calls end up setting that<br />some way (ie "schedule()" just does preempt_disable()).<br /><br />So I disagree with your notion that it's a recursion flag. It is<br />absolutely nothing of the sort. It gets set by preemption - and,<br />somewhat illogically, by cond_resched().<br /><br />The fact that cond_resched() sets it is *probably* because some of the<br />callers end up calling it from page fault paths etc, and the same<br />"ignore TASK_SLEEPING etc" rules apply. But it does mean that<br />"cond_resched()" is a bit misleaning as a name. It's really a<br />"cond_preempt()".<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
