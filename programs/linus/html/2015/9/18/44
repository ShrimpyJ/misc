    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/9/11/570">First message in thread</a></li><li><a href="/lkml/2015/9/17/887">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/18/30">Dave Chinner</a><ul><li class="origin"><a href="/lkml/2015/9/18/45">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/18/45">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/18/375">Jens Axboe</a></li></ul></li><li><a href="/lkml/2015/9/18/318">Chris Mason</a><ul><li><a href="/lkml/2015/9/18/378">Jens Axboe</a></li></ul></li><li><a href="/lkml/2015/9/18/815">Dave Chinner</a><ul><li><a href="/lkml/2015/9/21/137">Jan Kara</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Sep 2015 23:04:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] fs-writeback: drop wb-&gt;list_lock during blk_finish_plug()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 17, 2015 at 10:40 PM, Dave Chinner &lt;david&#64;fromorbit.com&gt; wrote:<br />&gt;<br />&gt; Ok, makes sense - the plug is not being flushed as we switch away,<br />&gt; but Chris' patch makes it do that.<br /><br />Yup.<br /><br />And I actually think Chris' patch is better than the one I sent out<br />(but maybe the scheduler people should take a look at the behavior of<br />cond_resched()), I just wanted you to test that to verify the<br />behavior.<br /><br />The fact that Chris' patch ends up lowering the context switches<br />(because it does the unplugging directly) is also an argument for his<br />approach.<br /><br />I just wanted to understand the oddity with kblockd_workqueue. And I<br />think that's solved.<br /><br />&gt; Context switches go back to the 4-4500/sec range. Otherwise<br />&gt; behaviour and performance is indistinguishable from Chris' patch.<br /><br />.. this was exactly what I wanted to hear. So it sounds like we have<br />no odd unexplained behavior left in this area.<br /><br />Which is not to say that there wouldn't be room for improvement, but<br />it just makes me much happier about the state of these patches to feel<br />like we understand what was going on.<br /><br />&gt; PS: just hit another "did this just get broken in 4.3-rc1" issue - I<br />&gt; can't run blktrace while there's a IO load because:<br />&gt;<br />&gt; $ sudo blktrace -d /dev/vdc<br />&gt; BLKTRACESETUP(2) /dev/vdc failed: 5/Input/output error<br />&gt; Thread 1 failed open /sys/kernel/debug/block/(null)/trace1: 2/No such file or directory<br />&gt; ....<br />&gt;<br />&gt; [  641.424618] blktrace: page allocation failure: order:5, mode:0x2040d0<br />&gt; [  641.438933]  [&lt;ffffffff811c1569&gt;] kmem_cache_alloc_trace+0x129/0x400<br />&gt; [  641.440240]  [&lt;ffffffff811424f8&gt;] relay_open+0x68/0x2c0<br />&gt; [  641.441299]  [&lt;ffffffff8115deb1&gt;] do_blk_trace_setup+0x191/0x2d0<br />&gt;<br />&gt; gdb) l *(relay_open+0x68)<br />&gt; 0xffffffff811424f8 is in relay_open (kernel/relay.c:582).<br />&gt; 577                     return NULL;<br />&gt; 578             if (subbuf_size &gt; UINT_MAX / n_subbufs)<br />&gt; 579                     return NULL;<br />&gt; 580<br />&gt; 581             chan = kzalloc(sizeof(struct rchan), GFP_KERNEL);<br />&gt; 582             if (!chan)<br />&gt; 583                     return NULL;<br />&gt; 584<br />&gt; 585             chan-&gt;version = RELAYFS_CHANNEL_VERSION;<br />&gt; 586             chan-&gt;n_subbufs = n_subbufs;<br />&gt;<br />&gt; and struct rchan has a member struct rchan_buf *buf[NR_CPUS];<br />&gt; and CONFIG_NR_CPUS=8192, hence the attempt at an order 5 allocation<br />&gt; that fails here....<br /><br />Hm. Have you always had MAX_SMP (and the NR_CPU==8192 that it causes)?<br />From a quick check, none of this code seems to be new.<br /><br />That said, having that<br /><br />        struct rchan_buf *buf[NR_CPUS];<br /><br />in "struct rchan" really is something we should fix. We really should<br />strive to not allocate things by CONFIG_NR_CPU's, but by the actual<br />real CPU count.<br /><br />This looks to be mostly Jens' code, and much of it harkens back to 2006. Jens?<br /><br />                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
