    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/9/16/956">First message in thread</a></li><li><a href="/lkml/2015/9/24/607">Tejun Heo</a><ul><li><a href="/lkml/2015/9/24/732">Herbert Xu</a><ul><li class="origin"><a href="/lkml/2015/9/24/766">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/24/766">Herbert Xu</a><ul><li><a href="/lkml/2015/9/25/327">Tejun Heo</a></li></ul></li></ul></li><li><a href="/lkml/2015/9/25/325">Tejun Heo</a><ul><li><a href="/lkml/2015/9/26/67">Herbert Xu</a><ul><li><a href="/lkml/2015/9/26/122">Tejun Heo</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Sep 2015 20:24:56 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: netlink: Add barrier to netlink_connect for theoretical case</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 24, 2015 at 6:43 PM, Herbert Xu &lt;herbert&#64;gondor.apana.org.au&gt; wrote:<br />&gt; On Thu, Sep 24, 2015 at 04:05:10PM -0400, Tejun Heo wrote:<br />&gt;<br />&gt; +static inline bool netlink_bound(struct netlink_sock *nlk)<br />&gt; +{<br />&gt; +       /* Ensure nlk is hashed and visible. */<br />&gt; +       if (nlk-&gt;bound)<br />&gt; +               smp_rmb();<br />&gt; +<br />&gt; +       return nlk-&gt;bound;<br />&gt; +}<br /><br />The above looks very suspicious.<br /><br />If "nlk-&gt;bound" isn't stable, then you might read 0 the first time,<br />not do the smp_rmb(), and then read 1 on the second access to<br />nlk-&gt;bound.<br /><br />In other words, you just ended up returning 1 without actually doing<br />the mb, so there will be no serialization between the "bound" variable<br />and reading the portid afterwards.<br /><br />That makes no sense.<br /><br />And if nlk-&gt;bound *is* stable, then the smp_rmb() doesn't make any<br />sense that I can see.<br /><br />So for the code to actually make sense, it should either do:<br /><br />   int bound = nlk-&gt;bound;<br />   smp_rmb();<br />   return bound;<br /><br />which is fine on x86, but might be expensive on other architectures<br />due to the unconditional rmb.<br /><br />So you *could* write it with a conditional rmb, but then you need to<br />use a READ_ONCE(), to make sure that gcc really does the read exactly<br />once, because at that point the "rmb" no longer keeps gcc from playing<br />tricks. So<br /><br />   int bound = READ_ONCE(nlk-&gt;bound);<br />   if (bound)<br />      smp_rmb();<br />   return bound;<br /><br />could also be correct. Sadly, while "smp_rmb()" is a no-op on x86, it<br />*is* a barrier, so the above conditional smp_rmb() actually sucks on<br />x86, because I suspect that gcc will create a jump around an empty<br />asm. So the unconditional rmb is actually simpler better on at least<br />x86.<br /><br />But the function as you wrote it does not make sense. When you do a<br />barrier, you really have to think about where the accesses are.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
