    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/9/23/315">First message in thread</a></li><li><a href="/lkml/2015/9/23/315">Alexey Dobriyan</a><ul><li><a href="/lkml/2015/9/23/585">Andrew Morton</a></li><li><a href="/lkml/2015/9/24/273">Michal Nazarewicz</a><ul><li><a href="/lkml/2015/9/24/303">Alexey Dobriyan</a></li></ul></li><li class="origin"><a href="/lkml/2015/9/25/387">Linus Torvalds</a><ul><li><a href="/lkml/2015/9/25/387">Michal Nazarewicz</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Sep 2015 11:03:06 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: + kernelh-make-abs-work-with-64-bit-types.patch added to -mm tree</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 23, 2015 at 6:44 AM, Alexey Dobriyan &lt;adobriyan&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; I've sent kabs() before which didn't go in because it didn't work for<br />&gt; INT_MAX et al<br />&gt;<br />&gt; [PATCH v2] Add kabs()<br />&gt; <a href="https://marc.info/?l=linux-kernel&amp;m=133518745522740&amp;w=4">http://marc.info/?l=linux-kernel&amp;m=133518745522740&amp;w=4</a><br /><br />Yeah, no, that's bad.<br /><br />Testing against char/short is pointless. They should get upgraded to "int".<br /><br />And guys, stop the idiotic "shouldn't work on unsigned values" crap.<br />It damn well should work on unsigned values, and the semantics we want<br />is that we treat it as a signed value.<br /><br />Why? That's how "abs()" works. Really. Stop fighting it. If you were<br />to use a real "abs()", it takes an "int" argument, and if you pass it<br />an unsigned value, it gets converted to "int".<br /><br />End of story. Stop with the broken "but but but unsigned" crap already.<br /><br />So the end result is that<br /><br /> (a) we should look at the *size* of the argument type, not the<br />signedness, because the signedness is immaterial<br /><br /> (b) we should *not* cast the thing to unsigned, because we<br />traditionally haven't.<br /><br /> (c) we should definitely not use smaller than "int" as a minimum<br />size, no crazy games with char/short. And considering our legacy, I<br />think we should probably skip "int" and stay with "long" as the<br />minimum size.<br /><br />So I *much* prefer Michal's "abs()" definition that doesn't radically<br />change the meaning (it keeps the old behavior *except* if you pass in<br />a bigger size than "long", in which case it will auto-widen to "s64").<br />That's the maximally compatible model given the "we handle bigger<br />types automatically" extension.<br /><br />Because "maximally compatible" is a strong argument. The signedness<br />stuff and the "let's try to use the exact same type" is just bogus.<br /><br />One thing that *is* interesting is "what if 'long' and 's64' are the<br />same size?" In particular, it means that right now Michal's patch<br />*always* returns "long" on a 64-bit architecture, but will return<br />"long" or "s64" on a 32-bit one. The reason that is somewhat<br />interesting is that while the sizes and values are the same, and the<br />resulting C type expansions are "equivalent" types, i people *print*<br />things, you have to use different modifiers for the two cases. So you<br />might get warnings on 32-bit architectures and not get them on 64-bit,<br />or vice versa.<br /><br />However, I don't see a good solution for that. And assuming we don't<br />use "abs()" in an expression to printk(), I guess it doesn't much<br />matter either.<br /><br />              Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
