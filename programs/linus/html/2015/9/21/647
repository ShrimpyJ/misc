    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/9/21/285">First message in thread</a></li><li><a href="/lkml/2015/9/21/285">Aleksa Sarai</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Sep 2015 11:28:40 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: setup() and odd Syscalls in Ancient History</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 21, 2015 at 6:07 AM, Aleksa Sarai &lt;cyphar&#64;cyphar.com&gt; wrote:<br />&gt;<br />&gt; I was wondering if you could explain *why* setup() was a syscall in<br />&gt; early Linux? I understand that it did some ... odd things (one<br />&gt; function both freeing the initial memory and setting up the<br />&gt; filesystems, devices and mounting) which you obviously need to do in<br />&gt; init. But from what I can see (after digging out v0.01 from the tomb),<br />&gt; it was *never* used by userspace, which begs the question: why was it<br />&gt; a syscall in the first place?<br /><br />Heh. Interesting question, and I have to admit I went and looked at<br />the code to remind me what was going on.<br /><br />It's not really obvious, because the code process separation memory<br />management in very early Linux was based on segmentation. Yes, it used<br />paging too, but it originally used one single page table with 64<br />chunks of 64MB each (if I remember correctly), and then segments would<br />be used to make each process see a single 64MB slice of the 4GB<br />address space.<br /><br />So the code actually goes into user space, but the very *initial* user<br />space is actually shared with the kernel (until the first fork()). We<br />do the initial user mode trasnition by just switching to user<br />segments.<br /><br />So in init/main.c, the magic is that<br /><br />        move_to_user_mode();<br />        if (!fork()) {          /* we count on this going ok */<br />                init();<br />        }<br />        for(;;) pause();<br /><br />where that "move_to_user_mode()" will reload all the segments (some by<br />hand, but CS/SS by doing an "iret").  So that first fork() will<br />actually be done in user space, and before that happens the kernel<br />cannot sleep (because there is no idle task).<br /><br />That "for (;;) pause()" after the fork() is the idle task, which<br />allows the "init()" code to sleep.<br /><br />So "setup()" is a system call because it needs to sleep (to do the<br />IO), and the kernel couldn't sleep before it got to that user-mode and<br />first fork thing.<br /><br />Could it have been done differently? Sure. Obviously we don't do it<br />that way any more, and we create the idle tasks separately and not<br />with "fork()" any more. But it kind of made sense at the time.<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
