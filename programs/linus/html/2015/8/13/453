    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/11/800">First message in thread</a></li><li><a href="/lkml/2015/8/13/435">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/439">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2015/8/13/458">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/458">Andy Lutomirski</a><ul><li><a href="/lkml/2015/8/13/467">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2015/8/13/503">Brian Gerst</a><ul><li><a href="/lkml/2015/8/18/43">Stas Sergeev</a><ul><li><a href="/lkml/2015/8/18/505">Andy Lutomirski</a></li></ul></li></ul></li><li><a href="/lkml/2015/8/14/76">Cyrill Gorcunov</a></li></ul></li><li><a href="/lkml/2015/8/13/547">Stas Sergeev</a><ul><li><a href="/lkml/2015/8/13/595">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/599">Andy Lutomirski</a><ul><li><a href="/lkml/2015/8/13/613">Stas Sergeev</a></li><li><a href="/lkml/2015/8/13/680">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2015/8/13/608">Stas Sergeev</a><ul><li><a href="/lkml/2015/8/13/612">Andy Lutomirski</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2015/8/13/453/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2015 09:19:20 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [regression] x86/signal/64: Fix SS handling for signals delivered to 64-bit programs breaks dosemu</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 13, 2015 at 8:43 AM, Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt;<br />&gt; I'm trying to fix it without reverting.  If that doesn't work, then we<br />&gt; revert.  Yesterday, I thought I had a reasonably clean fix, but it<br />&gt; turned out that it only solved half of the problem.<br /><br />The thing is, I actually think that the current situation is crazy.<br /><br />Especially given that we don't restore any of the other segment<br />registers on x86-64 (except CS, of course)<br /><br />So how about this "alternate" minimal patch instead. The difference is:<br /><br /> - we actually leave the<br /><br />        regs-&gt;ss = __USER_DS;<br /><br />   in __setup_rt_frame, to guarantee that when we take a signal, we do<br />take it with a valid SS<br /><br /> - but it removes all the other games with SS (and treats it exactly<br />the same as FS/GS).<br /><br />   So now we don't play games with the actual sigcontext, and<br />hopefully dosemu is happier.<br /><br />Hmm? That actually makes the code look better, and doesn't<br />re-introduce that annoying CONFIG_X86_32 case (because it now does it<br />in obviously the same place as fs/gs).<br /><br />So the code is cleaner, and closer to what we used to do.<br /><br />Stas, can you test this one too? I, like Luto, don't actually have a<br />dosemu test-case.<br /><br />                      Linus<br /> arch/x86/include/asm/sigcontext.h      | 2 +-<br /> arch/x86/include/uapi/asm/sigcontext.h | 3 +--<br /> arch/x86/kernel/signal.c               | 4 ++--<br /> 3 files changed, 4 insertions(+), 5 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/sigcontext.h b/arch/x86/include/asm/sigcontext.h<br />index 6fe6b182c998..2cefce9b52bd 100644<br />--- a/arch/x86/include/asm/sigcontext.h<br />+++ b/arch/x86/include/asm/sigcontext.h<br />&#64;&#64; -59,7 +59,7 &#64;&#64; struct sigcontext {<br /> 	unsigned short cs;<br /> 	unsigned short __pad2;	/* Was called gs, but was always zero. */<br /> 	unsigned short __pad1;	/* Was called fs, but was always zero. */<br />-	unsigned short ss;<br />+	unsigned short __pad0;<br /> 	unsigned long err;<br /> 	unsigned long trapno;<br /> 	unsigned long oldmask;<br />diff --git a/arch/x86/include/uapi/asm/sigcontext.h b/arch/x86/include/uapi/asm/sigcontext.h<br />index 0e8a973de9ee..d99bbc2d4b0b 100644<br />--- a/arch/x86/include/uapi/asm/sigcontext.h<br />+++ b/arch/x86/include/uapi/asm/sigcontext.h<br />&#64;&#64; -193,8 +193,7 &#64;&#64; struct sigcontext {<br /> 	 */<br /> 	__u16 __pad2;		/* Was gs. */<br /> 	__u16 __pad1;		/* Was fs. */<br />-<br />-	__u16 ss;<br />+	__u16 __pad0;		/* Not ss. */<br /> 	__u64 err;<br /> 	__u64 trapno;<br /> 	__u64 oldmask;<br />diff --git a/arch/x86/kernel/signal.c b/arch/x86/kernel/signal.c<br />index 206996c1669d..e955f0cd9b9d 100644<br />--- a/arch/x86/kernel/signal.c<br />+++ b/arch/x86/kernel/signal.c<br />&#64;&#64; -77,6 +77,7 &#64;&#64; int restore_sigcontext(struct pt_regs *regs, struct sigcontext __user *sc)<br /> 		COPY_SEG(fs);<br /> 		COPY_SEG(es);<br /> 		COPY_SEG(ds);<br />+		COPY_SEG_CPL3(ss);<br /> #endif /* CONFIG_X86_32 */<br /> <br /> 		COPY(di); COPY(si); COPY(bp); COPY(sp); COPY(bx);<br />&#64;&#64; -94,7 +95,6 &#64;&#64; int restore_sigcontext(struct pt_regs *regs, struct sigcontext __user *sc)<br /> #endif /* CONFIG_X86_64 */<br /> <br /> 		COPY_SEG_CPL3(cs);<br />-		COPY_SEG_CPL3(ss);<br /> <br /> 		get_user_ex(tmpflags, &amp;sc-&gt;flags);<br /> 		regs-&gt;flags = (regs-&gt;flags &amp; ~FIX_EFLAGS) | (tmpflags &amp; FIX_EFLAGS);<br />&#64;&#64; -156,7 +156,7 &#64;&#64; int setup_sigcontext(struct sigcontext __user *sc, void __user *fpstate,<br /> 		put_user_ex(regs-&gt;cs, &amp;sc-&gt;cs);<br /> 		put_user_ex(0, &amp;sc-&gt;__pad2);<br /> 		put_user_ex(0, &amp;sc-&gt;__pad1);<br />-		put_user_ex(regs-&gt;ss, &amp;sc-&gt;ss);<br />+		put_user_ex(0, &amp;sc-&gt;__pad0);<br /> #endif /* CONFIG_X86_32 */<br /> <br /> 		put_user_ex(fpstate, &amp;sc-&gt;fpstate);</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
