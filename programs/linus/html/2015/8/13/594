    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/12/964">First message in thread</a></li><li><a href="/lkml/2015/8/13/1">Andrew Morton</a><ul><li><a href="/lkml/2015/8/13/18">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/73">Rasmus Villemoes</a><ul><li><a href="/lkml/2015/8/13/480">Linus Torvalds</a></li></ul></li><li class="origin"><a href="/lkml/2015/8/13/607">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/607">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/679">David Rientjes</a></li></ul></li><li><a href="/lkml/2015/8/13/720">Tony Luck</a><ul><li><a href="/lkml/2015/8/13/759">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2015/8/13/693">Andrew Morton</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2015/8/13/594/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2015 11:32:52 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: get_vmalloc_info() and /proc/meminfo insanely expensive</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 12, 2015 at 10:52 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; I get the feeling this file should be rewritten. But that's not going<br />&gt; to happen. The "let's just cache the last value for one jiffy" seemed<br />&gt; to be the minimal fixup to it.<br /><br />Here's a totally untested patch (I'll reboot and test soon - it does<br />at least compile for me).<br /><br />Notice the total lack of locking, which means that it's fundamentally<br />racy. I really can't find it inside myself to care. Introducing those<br />vmalloc fields was a mistake to begin with, any races here are "ok, we<br />get values that were valid at some point, but it might have been a<br />second ago".<br /><br />And I also can't find it in myself to care about the "on 32-bit,<br />jiffies wraps in 49 days if HZ is 1000". If somebody carefully avoids<br />ever reading /proc/meminfo for 49 days, and then reads it in _just_<br />the right second, and gets a really stale value, I'm just going to do<br />my honey badger impression.<br /><br />Because we really shouldn't have added the vmalloc information to<br />/proc/meminfo to begin with, and nobody ever cares about those values<br />anyway.<br /><br />Comments?<br /><br />                Linus<br /> mm/vmalloc.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++++--<br /> 1 file changed, 48 insertions(+), 2 deletions(-)<br /><br />diff --git a/mm/vmalloc.c b/mm/vmalloc.c<br />index 2faaa2976447..0d0b96ed8948 100644<br />--- a/mm/vmalloc.c<br />+++ b/mm/vmalloc.c<br />&#64;&#64; -2688,7 +2688,7 &#64;&#64; static int __init proc_vmalloc_init(void)<br /> }<br /> module_init(proc_vmalloc_init);<br /> <br />-void get_vmalloc_info(struct vmalloc_info *vmi)<br />+static void calc_vmalloc_info(struct vmalloc_info *vmi)<br /> {<br /> 	struct vmap_area *va;<br /> 	unsigned long free_area_size;<br />&#64;&#64; -2735,5 +2735,51 &#64;&#64; void get_vmalloc_info(struct vmalloc_info *vmi)<br /> out:<br /> 	rcu_read_unlock();<br /> }<br />-#endif<br /> <br />+/*<br />+ * Calculating the vmalloc information is expensive, and nobody really<br />+ * deeply cares about it anyway. Yet, some versions of glibc end up<br />+ * reading /proc/meminfo a lot, not because they care about the vmalloc<br />+ * fields, but because they care about the total memory info.<br />+ *<br />+ * So to alleviate that expense, we cache the vmalloc information for<br />+ * a second. NOTE! This is fundamentally racy, since the accesses to<br />+ * the two fields in "struct vmalloc_info" and the cache timeout are<br />+ * all entirely unsynchronized. We just don't care.<br />+ */<br />+void get_vmalloc_info(struct vmalloc_info *vmi)<br />+{<br />+	static unsigned long cache_timeout = INITIAL_JIFFIES;<br />+	static struct vmalloc_info cached_info;<br />+	unsigned long now = jiffies, last = READ_ONCE(cache_timeout);<br />+<br />+	if (now - last &lt; HZ) {<br />+		*vmi = cached_info;<br />+		return;<br />+	}<br />+<br />+	/*<br />+	 * We update the cache timeout early, because we (again) do<br />+	 * not care if somebody else comes in and sees slightly stale<br />+	 * information. We'd rather return more stale information<br />+	 * than waste time with multiple CPU's all calculating the<br />+	 * new state.<br />+	 *<br />+	 * Note: the barriers are here not to fix any races, but to<br />+	 * avoid the compiling spreading out the updates to these<br />+	 * variables any more than necessary.<br />+	 *<br />+	 * Also note that we calculate the new state into the 'vmi'<br />+	 * buffer that is passed in, and private to the caller. That<br />+	 * is intentional: we do not want to update the cached info<br />+	 * incrementally during the calculations.<br />+	 */<br />+	WRITE_ONCE(cache_timeout, now);<br />+	barrier();<br />+<br />+	calc_vmalloc_info(vmi);<br />+<br />+	barrier();<br />+	cached_info = *vmi;<br />+}<br />+#endif</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
