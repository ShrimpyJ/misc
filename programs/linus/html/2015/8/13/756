    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/13/104">First message in thread</a></li><li><a href="/lkml/2015/8/13/728">Denys Vlasenko</a><ul><li><a href="/lkml/2015/8/13/739">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2015/8/13/758">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/758">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/761">Kees Cook</a></li><li><a href="/lkml/2015/8/13/762">Andy Lutomirski</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2015/8/13/749">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/14/180">Denys Vlasenko</a><ul><li><a href="/lkml/2015/8/22/43">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2015/8/13/756/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2015 15:49:54 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Regression v4.2 ?] 32-bit seccomp-BPF returned errno values wrong in VM?</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 13, 2015 at 2:47 PM, Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt;<br />&gt; It seems to me that the bug is that sysexit_from_sys_call isn't<br />&gt; reloading RAX from regs-&gt;ax.<br /><br />Ugh. That code is confusing, and _most_ cases seem to have %rax already loaded.<br /><br />There seems to be three cases:<br /><br /> - fallthrough from cstar_dispatch after a successful call to the system call<br /><br />   This has %rax as the correct return value (which also got saved to<br />RAX on stack)<br /><br /> - the 'auditsys_exit' macro 'exit' case.<br /><br />   This seems to have %rax reloaded inside the macro<br /><br /> - the out-of-range system call case for cstar_dispatch<br /><br />   This does *not* seem to load %rax with $ENOSYS, but keeps the bad<br />system call number in it.<br /><br />so yeah, there seems to be a bug there, but if I read it right, that<br />bug seems to happen just for the out-of-range system call case, which<br />afaik isn't the case reported here.<br /><br />I guess adding a re-load of %rax is ok, even though in the common<br />cases it is already loaded.<br /><br />Oh, and sysexit_from_sys_call seems to have the exact same situation.<br />The "system call dispatch with %rax out of range" fallthrough case<br />doesn't set %rax to ENOSYS.<br /><br />So I guess we could remove the reloading of system call return value<br />from auditsys_exit, and just do it unconditionally in the common path.<br /><br />Which is sad, since the *really* common case already has the right<br />value, but whatever.<br /><br />Does the attached patch make sense and work? Totally untested, just<br />looking at the code. But maybe it's right, because it's exactly that<br />ENOSYS case that the bad patch in question changed.<br /><br />Btw, the old ENOSYS code also cleared ORIG_EAX. I'm not sure why, but<br />we used to have<br /><br /> ia32_badsys:<br />        movq $0,ORIG_RAX(%rsp)<br />        movq $-ENOSYS,%rax<br />        jmp ia32_sysret<br /><br />for that case.<br /><br />                   Linus<br /> arch/x86/entry/entry_64_compat.S | 3 ++-<br /> 1 file changed, 2 insertions(+), 1 deletion(-)<br /><br />diff --git a/arch/x86/entry/entry_64_compat.S b/arch/x86/entry/entry_64_compat.S<br />index 5a1844765a7a..a7e257d9cb90 100644<br />--- a/arch/x86/entry/entry_64_compat.S<br />+++ b/arch/x86/entry/entry_64_compat.S<br />&#64;&#64; -140,6 +140,7 &#64;&#64; sysexit_from_sys_call:<br /> 	 */<br /> 	andl	$~TS_COMPAT, ASM_THREAD_INFO(TI_status, %rsp, SIZEOF_PTREGS)<br /> 	movl	RIP(%rsp), %ecx		/* User %eip */<br />+	movq    RAX(%rsp), %rax<br /> 	RESTORE_RSI_RDI<br /> 	xorl	%edx, %edx		/* Do not leak kernel information */<br /> 	xorq	%r8, %r8<br />&#64;&#64; -219,7 +220,6 &#64;&#64; sysexit_from_sys_call:<br /> 1:	setbe	%al			/* 1 if error, 0 if not */<br /> 	movzbl	%al, %edi		/* zero-extend that into %edi */<br /> 	call	__audit_syscall_exit<br />-	movq	RAX(%rsp), %rax		/* reload syscall return value */<br /> 	movl	$(_TIF_ALLWORK_MASK &amp; ~_TIF_SYSCALL_AUDIT), %edi<br /> 	DISABLE_INTERRUPTS(CLBR_NONE)<br /> 	TRACE_IRQS_OFF<br />&#64;&#64; -368,6 +368,7 &#64;&#64; sysretl_from_sys_call:<br /> 	RESTORE_RSI_RDI_RDX<br /> 	movl	RIP(%rsp), %ecx<br /> 	movl	EFLAGS(%rsp), %r11d<br />+	movq    RAX(%rsp), %rax<br /> 	xorq	%r10, %r10<br /> 	xorq	%r9, %r9<br /> 	xorq	%r8, %r8</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
