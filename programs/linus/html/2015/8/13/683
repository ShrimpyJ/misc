    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/12/964">First message in thread</a></li><li><a href="/lkml/2015/8/13/607">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/679">David Rientjes</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2015 13:04:19 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: get_vmalloc_info() and /proc/meminfo insanely expensive</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 13, 2015 at 12:50 PM, David Rientjes &lt;rientjes&#64;google.com&gt; wrote:<br />&gt;<br />&gt; Rather than a time based approach, why not invalidate when it is known to<br />&gt; change, either on the next call to get_vmalloc_info() or as part of the<br />&gt; vmalloc operation itself?<br /><br />I started doing that, looking at all the users of vmap_area_lock, and<br />decided that it's just too messy for me. I wanted something minimal<br />and obvious. The vmap_area handling is not obvious, especially since<br />the whole vmalloc statistics don't just depend on the vmap area list,<br />but also take the individual flags into account (ie it counts<br />VM_LAZY_FREE[ING] entries as having already been removed etc).<br /><br />So I started looking at actually turning the vmap_area_lock into a<br />seqlock or even a rwlock (because some of the users are pure readers)<br />just to clarify things, and that wasn't hard per se, but I threw up my<br />hands in disgust. The code that modifies the thing is full of "take<br />lock, look up,. drop lock, do something, take lock again") etc.<br /><br />Yes, we could just sprinkle "invalidate_cache = 1" statements around<br />in all the places that can cause this, but that would be pretty ad-hoc<br />and ugly too.  And since the reader side is actually entirely lockless<br />(currently using rcu, with my patch it has the additional lockless and<br />racy cache reading), to do it *right* you actually need to use at a<br />minimum memory ordering rules. So it would be fairly subtle too.<br /><br />In contrast, my "just base it on time" sure as hell isn't subtle. It's<br />not great, but at least it's obvious and the crazy logic is<br />localized..<br /><br />So I'd be all for somebody actually taking the time to do it right.<br />I'm pretty sure nobody really cares enough, though.<br /><br />Willing to prove me wrong?<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
