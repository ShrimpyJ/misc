    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/11/800">First message in thread</a></li><li><a href="/lkml/2015/8/13/777">Linus Torvalds</a><ul><li><a href="/lkml/2015/8/13/784">Raymond Jennings</a></li><li><a href="/lkml/2015/8/13/786">Stas Sergeev</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2015 17:02:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [regression] x86/signal/64: Fix SS handling for signals delivered to 64-bit programs breaks dosemu</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 13, 2015 at 4:43 PM, Stas Sergeev &lt;stsp&#64;list.ru&gt; wrote:<br />&gt; In fact, in the cases I can remember, the kernel patches<br />&gt; were never reverted, see this for instance:<br />&gt; <a href="https://lkml.org/lkml/2005/3/26/21">https://lkml.org/lkml/2005/3/26/21</a><br />&gt; And there were many other breakages too, for example when<br />&gt; kernel started to use top-down memory allocations. These<br />&gt; were because of the poor code in dosemu, and dosemu was<br />&gt; asked to fix the code. I guess the policy to never break userspace<br />&gt; was not existing back then. Or there is some margin below<br />&gt; which the code quality is considered not worth the troubles. :)<br /><br />Back in 2005 we may well not have been as strict about regressions as<br />we are now, no. The strict policy of no regressions actually<br />originally started mainly wrt suspend/resume issues, where the "fix<br />one machine, break another" kind of back-and-forth caused endless<br />problems, and meant that we didn't actually necessarily make any<br />forward progress, just moving a problem around.<br /><br />(That said, I'd like to think that we've _always_ tried very hard to<br />not break stuff, it just wasn't necessarily the kind of very explicit<br />and hard rule that it is these days).<br /><br />Also, there are certainly developers who push back on fixing the<br />regressions they caused. That is in fact the cause of some of my more<br />memorable explosions. But if I'm not brought into the discussion, and<br />the push-back happens on a mailing list, I may not even be aware of<br />the regression and the fact that a developer isn't willing to fix it.<br /><br />I've also seen other projects be more willing to work around problems<br />like this than I personally would consider to be a good idea. For<br />example, we had some Wine regressions that broke a steam game or two,<br />and it was debugged on the steam and wine lists, and took a longish<br />time to actually even get to the attention of kernel people, because<br />the developers were actually willing to try to do an update and fix<br />their application to not do the thing that caused problems. Which I<br />certainly appreciate, but at the same time that doesn't necessarily<br />help the user who sits there with a game that just didn't work. So<br />even if an app is getting updated eventually, the kernel breakage<br />should be fixed.<br /><br />So if some patch causes problems, and the author of the patch doesn't<br />acknowledge the problem or even if the application developer says "we<br />can work around that", always feel free to escalate the issue and<br />bring in upper maintainers.<br /><br />That said, it *does* depend a bit on just how core the area is.<br />Sometimes it just gets too painful to fix things, and while the "no<br />regressions" rule is pretty damn close to the strictest rule we have,<br />there are never any completely absolute rules. As mentioned, there are<br />exceptions to the regression rule too, and sometimes the result might<br />just end up being "very few people are actually affected, and there's<br />a sufficiently good reason for the regression that we'll just cop<br />out".<br /><br />But that should really be a very rare occurrence. We used to have<br />quite a lot of those kinds of issues with the GPU layer (resulting in<br />flag-days with the X server etc), and it really causes huge problems.<br /><br />So there are no absolutes. But regressions are a serious problem, and<br />need to be treated as such. I will not _guarantee_ that we always fix<br />them, but I would hope we do our best.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
