    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/8/24/779">First message in thread</a></li><li><a href="/lkml/2015/8/25/291">Brian Gerst</a><ul><li><a href="/lkml/2015/8/25/510">Andy Lutomirski</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2015/8/26/18">Brian Gerst</a><ul><li><a href="/lkml/2015/8/26/555">Andy Lutomirski</a><ul><li><a href="/lkml/2015/8/26/805">Brian Gerst</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 25 Aug 2015 09:59:10 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Proposal for finishing the 64-bit x86 syscall cleanup</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 25, 2015 at 9:28 AM, Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt;<br />&gt; I bet that, with a bit of tweaking, that would actually end up faster<br />&gt; than what we do right now for everything except fully fast-path<br />&gt; syscalls.  This would also be a *huge* sanity improvement for the<br />&gt; compat case in which the args are currently jumbled in asm.  It would<br />&gt; become:<br />&gt;<br />&gt; if (nr &lt; max)<br />&gt;   call the syscall(regs-&gt;bx, regs-&gt;cx, regs-&gt;dx, ...);<br />&gt;<br />&gt; which completely avoids the unreadable and probably buggy mess we have now.<br /><br />I'm willing to try it.  Just pass in the system call number and the<br />regs pointer as the arguments, and keep the asm portion as the minimal<br />"save regs, call function, restore regs, return" sequence with<br />absolutely nothing else going on.<br /><br />The main cost would be a few more push/pop instructions, and then the<br />loads from the stack frame in the C function. Go for it.<br /><br />The system calls where the extra five cycles might be noticeable are<br />all irrelevant anyway (ie "getppid()" etc). They aren't actually<br />performance-critical, even if they may be used for benchmarks.<br /><br />But please do make it be very tight push/pop sequences, not those<br />crazy "movq %reg,%off(%rsp)" things.<br /><br />                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
