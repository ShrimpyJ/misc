    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/12/21/547">First message in thread</a></li><li><a href="/lkml/2015/12/21/605">Linus Torvalds</a><ul><li><a href="/lkml/2015/12/21/659">Al Viro</a><ul><li class="origin"><a href="/lkml/2015/12/21/758">Linus Torvalds</a><ul><li><a href="/lkml/2015/12/21/758">Al Viro</a></li></ul></li><li><a href="/lkml/2015/12/21/674">Al Viro</a><ul><li><a href="/lkml/2015/12/22/125">Geert Uytterhoeven</a><ul><li><a href="/lkml/2015/12/22/587">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Dec 2015 17:23:11 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] free_pages stuff</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Grr. Resending because the stupid android gmail app still can't do<br />text emails ]<br /><br />On Dec 21, 2015 17:04, "Al Viro" &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; &gt; And quite frankly, even the "new name" is likely a bad idea. If you<br />&gt; &gt; want to allocate a page, and get a pointer, just use "kmalloc()".<br />&gt; &gt; Boom, done!<br />&gt;<br />&gt; Erm...  You've just described the absolute majority of callers.  Really.<br /><br />That wasn't my point.<br /><br />I totally believe that most of the legacy users actually wanted a pointer.<br /><br />But that doesn't mean that we should just convert a legacy interface.<br />We should either just create a new interface and leave old users<br />alone, or if we care about that code and really want to remove the<br />cast, maybe it should just use kmalloc() instead.<br /><br />Long ago, allocating a page using kmalloc() was a bad idea, because<br />there was overhead for it in the allocation and the code.<br /><br />These days, kmalloc() not only doesn't have the allocation overhead,<br />but may actually scale better too, thanks to percpu caches etc.<br /><br />So my point here is that not only is it wrong to change the calling<br />convention for a legacy function (and it really probably doesn't get<br />much more legacy than get_free_page - I think it's been around<br />forever), but even the "let's make up a new name" conversion may be<br />wrong, because it's entirely possible that the code in question should<br />just be using kmalloc().<br /><br />So I don't think an automatic conversion is a good idea. I suspect<br />that old code that somebody isn't actively working on should just be<br />left alone, and code that *is* actively worked on should maybe<br />consider kmalloc().<br /><br />And if the code really explicitly wants a page (or set of aligned<br />pages) for some vm reason, I suspect having the cast there isn't a bad<br />thing. It's clearly not just a random pointer allocation if the bit<br />pattern of the pointer matters.<br /><br />And yes, most of the people who used to want "unsigned long" have long<br />since been converted to take "struct page *" instead, since things<br />like the VM wants highmem pages etc.  There's a reason why the<br />historical interface returns "unsigned long": it _used_ to be the<br />right thing for a lot of code. The fact that there now are more casts<br />than not are about changing use patterns, but I don't think that means<br />that we should change the calling convention that has a historical<br />reason for it.<br /><br />     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
