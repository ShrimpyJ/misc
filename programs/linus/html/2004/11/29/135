    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/11/26/106">First message in thread</a></li><li><a href="/lkml/2004/11/28/167">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/28/176">Jeff Garzik</a><ul><li><a href="/lkml/2004/11/28/178">Al Viro</a><ul><li><a href="/lkml/2004/11/29/3">Tim Hockin</a></li></ul></li><li><a href="/lkml/2004/11/29/10">Arjan van de Ven</a></li><li><a href="/lkml/2004/12/4/107">Rob Landley</a><ul><li><a href="/lkml/2004/12/4/111">Andries Brouwer</a><ul><li><a href="/lkml/2004/12/5/40">David Greaves</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2004/11/29/15">David Woodhouse</a><ul><li><a href="/lkml/2004/11/30/21">Alex Riesen</a><ul><li><a href="/lkml/2004/11/30/33">Alex Riesen</a></li></ul></li><li><a href="/lkml/2004/12/1/57">Ralf Baechle</a><ul><li><a href="/lkml/2004/12/1/232">(H. Peter Anvin)</a></li></ul></li></ul></li><li><a href="/lkml/2004/11/29/16">Paul Mackerras</a><ul><li><a href="/lkml/2004/11/29/17">Arjan van de Ven</a><ul><li><a href="/lkml/2004/11/29/19">David Woodhouse</a></li></ul></li></ul></li><li><a href="/lkml/2004/11/29/52">Mariusz Mazur</a></li><li><a href="/lkml/2004/11/29/131">Alexandre Oliva</a><ul><li class="origin"><a href="/lkml/2004/11/29/234">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/29/234">Al Viro</a><ul><li><a href="/lkml/2004/12/1/55">Roman Zippel</a></li></ul></li><li><a href="/lkml/2004/11/29/246">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/29/267">(H. Peter Anvin)</a></li><li><a href="/lkml/2004/11/30/2">Herbert Poetzl</a></li><li><a href="/lkml/2004/11/30/7">bert hubert</a></li><li><a href="/lkml/2004/11/30/229">Alexandre Oliva</a></li></ul></li><li><a href="/lkml/2004/11/30/94">David Howells</a><ul><li><a href="/lkml/2004/11/30/101">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2004/11/30/95">David Woodhouse</a><ul><li><a href="/lkml/2004/11/30/103">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2004/12/14/7">Werner Almesberger</a><ul><li><a href="/lkml/2004/12/14/72">Linus Torvalds</a><ul><li><a href="/lkml/2004/12/14/94">Werner Almesberger</a><ul><li><a href="/lkml/2004/12/14/127">Linus Torvalds</a></li><li><a href="/lkml/2004/12/14/148">Horst von Brand</a></li></ul></li><li><a href="/lkml/2004/12/14/97">Andreas Schwab</a><ul><li><a href="/lkml/2004/12/14/123">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 29 Nov 2004 09:41:33 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] Splitting kernel headers and deprecating __KERNEL__</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 29 Nov 2004, Alexandre Oliva wrote:<br />&gt;<br />&gt; &gt; On the bigger question of what to do with kernel headers in general, let's <br />&gt; &gt; just make one thing clear: the kernel headers are for the kernel, and big <br />&gt; &gt; and painful re-organizations that don't help _existing_ user space are not <br />&gt; &gt; going to happen.<br />&gt; <br />&gt; So, of the following two options, which one you think everybody should<br />&gt; pick?<br /><br />Ok, that's pretty straightforward:<br /><br />&gt; - Linux gets to define the ABI between kernel and userland, and<br />&gt;   userland must duplicate the contents of headers in which the kernel<br />&gt;   defines the kernel&lt;-&gt;userland ABI, tracking changes in them in the<br />&gt;   hope that nothing falls through the cracks<br /><br />This is unquestionably true. The kernel obviously _does_ define the ABI, <br />and userland just lives with it. At some point you have to track things, <br />just because new features etc just can't be sanely handled any other way. <br /><br />That said, I think we can make the tracking _easier_. <br /><br />&gt; - we move the kernel&lt;-&gt;userland to a separate package, where it's<br />&gt;   maintained such that it can be used by both kernel and userland, and<br />&gt;   Linux will only build when given a pointer to the location of this<br />&gt;   package.<br /><br />No. Quite frankly, I absolutely hate projects that do that. I gave up on<br />following several interesting projects (mostly media decoding) just<br />because it was just too damn painful to try to make sure that five<br />different packages were all in sync, and you couldn't find one site to<br />just download it all from.<br /><br />So I want the kernel to be as stand-alone as humanly possible. There are a<br />few dependencies I can't avoid, notably the compiler, and there the kernel<br />triest to be as permissive as humanly reasonable, and we've always tried<br />to keep the required tools down to a manageable level (ie even when people<br />were clamorign for graphical configurations etc, the kernel always made<br />that very optional indeed).<br /><br />  ***<br /><br />Now, on trying to make the tracking _easier_, I would not mind at all to <br />move (well-defined) things around a bit to make it clearer what is <br />actually exported to user space. But on the other hand, I don't think it's <br />actively wrong either to just "mark" them in the headers some way, and <br />have tools to extract it automatically _without_ having to separate them <br />into some magic location.<br /><br />In fact, in many ways I'd prefer to have source-level annotations like <br />"this is exported to user space" over trying to gather things in one <br />place. It would need to have some automated checking ability (that <br />probably most people wouldn't run, and would break every once in a while, <br />but hey, that's nothing new. That's how "checkconfig" etc works).<br /><br />But it doesn't have to be "one or the other". I think we could annotate<br />some things that are nasty to export (and quite frankly, it's not like<br />this is something "new"; __KERNEL__ is really nothing but a stupid sort of<br />an "annotation" already, except it's likely the wrong way around: we<br />should not annotate the stuff that is kernel-only, we should annotate the<br />stuff that is user-visible, since that should be the exception rather than<br />the rule).<br /><br />But even if we decide to have part of the ABI annotated, part of it could <br />be split out better. For example, I think the "posix_types.h" split ended <br />up working really quite well, and it cleaned up a _huge_ number of type <br />issues that people have probably already forgotten because that split was <br />done so long ago.<br /><br />So we _have_ had great success with the "split out specific things"  <br />before, and I think we should do it whenever there is an obvious chance,<br />and something is abstracted out and well-defined enough that we can do so.<br /><br />But in general, I do kind of like the explicit marking. The same way we <br />explicitly mark the functions inside the kernel that we expose to modules, <br />we could try to mark the data structures and values that we expose to user <br />space. That tends to "work".<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
