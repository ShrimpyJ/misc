    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/11/14/157">First message in thread</a></li><li><a href="/lkml/2004/11/22/247">Len Brown</a><ul><li><a href="/lkml/2004/11/22/378">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2004/11/23/28">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/23/28">Len Brown</a><ul><li><a href="/lkml/2004/11/23/223">Stian Jordet</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2004/11/23/1/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 22 Nov 2004 20:57:20 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.10-rc2 doesn't boot (if no floppy device)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 22 Nov 2004, Linus Torvalds wrote:<br />&gt; <br />&gt; So what's the right way to get ELCR into a useful state? I'm starting to<br />&gt; lean towards your "just clear it all" after all, but that does the wrong<br />&gt; thing for SCI (which is _usually_ level-triggered), and I worry that there<br />&gt; are other cases too.<br />&gt; <br />&gt; Any reasonably simple patch that likely gets it right?<br /><br />Len, how about this patch - it re-enables the link disable and then<br />re-codes the ELCR setting to match.<br /><br />Basically it just computes the new ELCR: if acpi_noirq is set, it leaves<br />it at the old value, otherwise it zeroes it - and in both cases it fixes<br />the SCI entry.<br /><br />Your argument for doing this ended up being convincing, so the only<br />difference between this and your debug patch is really just the obvious<br />organizational ones, and the test for "acpi_noirq", which I think is<br />needed (since if acpi_noirq is set, we're not going to disable and<br />re-enable the PCI interrupts, so we'll just have to trust ELCR).<br /><br />		Linus<br /><br />----<br />===== arch/i386/kernel/acpi/boot.c 1.75 vs edited =====<br />--- 1.75/arch/i386/kernel/acpi/boot.c	2004-11-11 16:08:40 -08:00<br />+++ edited/arch/i386/kernel/acpi/boot.c	2004-11-22 20:55:57 -08:00<br />&#64;&#64; -409,28 +409,38 &#64;&#64;<br /> void __init<br /> acpi_pic_sci_set_trigger(unsigned int irq, u16 trigger)<br /> {<br />-	unsigned char mask = 1 &lt;&lt; (irq &amp; 7);<br />-	unsigned int port = 0x4d0 + (irq &gt;&gt; 3);<br />-	unsigned char val = inb(port);<br />+	unsigned int mask = 1 &lt;&lt; irq;<br />+	unsigned int old, new;<br /> <br />-	<br />-	printk(PREFIX "IRQ%d SCI:", irq);<br />-	if (!(val &amp; mask)) {<br />-		printk(" Edge");<br />+	/* Real old ELCR mask */<br />+	old = inb(0x4d0) | (inb(0x4d1) &lt;&lt; 8);<br /> <br />-		if (trigger == 3) {<br />-			printk(" set to Level");<br />-			outb(val | mask, port);<br />-		}<br />-	} else {<br />-		printk(" Level");<br />+	/*<br />+	 * If we use ACPI to set PCI irq's, then we should clear ELCR<br />+	 * since we will set it correctly as we enable the PCI irq<br />+	 * routing.<br />+	 */<br />+	new = acpi_noirq ? old : 0;<br /> <br />-		if (trigger == 1) {<br />-			printk(" set to Edge");<br />-			outb(val &amp; ~mask, port);<br />-		}<br />+	/*<br />+	 * Update SCI information in the ELCR, it isn't in the PCI<br />+	 * routing tables..<br />+	 */<br />+	switch (trigger) {<br />+	case 1:	/* Edge - clear */<br />+		new &amp;= ~mask;<br />+		break;<br />+	case 3: /* Level - set */<br />+		new |= mask;<br />+		break;<br /> 	}<br />-	printk(" Trigger.\n");<br />+<br />+	if (old == new)<br />+		return;<br />+<br />+	printk(PREFIX "setting ELCR to %04x (from %04x)\n", new, old);<br />+	outb(new, 0x4d0);<br />+	outb(new &gt;&gt; 8, 0x4d1);<br /> }<br /> <br /> <br />===== drivers/acpi/pci_link.c 1.35 vs edited =====<br />--- 1.35/drivers/acpi/pci_link.c	2004-11-22 10:41:11 -08:00<br />+++ edited/drivers/acpi/pci_link.c	2004-11-22 20:02:53 -08:00<br />&#64;&#64; -685,6 +685,9 &#64;&#64;<br /> 	acpi_link.count++;<br /> <br /> end:<br />+	/* disable all links -- to be activated on use */<br />+	acpi_ut_evaluate_object(link-&gt;handle, "_DIS", 0, NULL);<br />+<br /> 	if (result)<br /> 		kfree(link);<br /> <br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
