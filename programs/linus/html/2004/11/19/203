    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/11/15/196">First message in thread</a></li><li><a href="/lkml/2004/11/19/180">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/19/196">Eric Pouech</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2004/11/19/204">Daniel Jacobowitz</a><ul><li><a href="/lkml/2004/11/19/222">Linus Torvalds</a><ul><li><a href="/lkml/2004/11/20/159">Jesse Allen</a></li></ul></li><li><a href="/lkml/2004/11/19/347">Roland McGrath</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2004/11/19/203/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 19 Nov 2004 13:22:02 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: ptrace single-stepping change breaks Wine</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 19 Nov 2004, Eric Pouech wrote:<br />&gt; <br />&gt; wine mixes both approches, we have (to control what's generated inside the <br />&gt; various exception) to ptrace from our NT-kernel-like process (the ptracer) to <br />&gt; get the context of the exception. Restart from the ptracer is done with <br />&gt; PTRACE_SINGLESTEP.<br /><br />Here's a new patch to try. Totally untested. <br /><br />It is more careful about clearing PT_DTRACED (which by now should probably<br />be renamed PT_PRACE_SINGLESTEP or something on x86, since we should never<br />be lazy about this thing any more), and it may or may not help.<br /><br />Pls test _together_ with the previous patch (which is already applied in <br />the current top-of-tree for anybody with really recent kernels).<br /><br />		Linus<br /><br />-----<br />===== arch/i386/kernel/ptrace.c 1.27 vs edited =====<br />--- 1.27/arch/i386/kernel/ptrace.c	2004-11-07 18:10:34 -08:00<br />+++ edited/arch/i386/kernel/ptrace.c	2004-11-19 13:18:56 -08:00<br />&#64;&#64; -138,6 +138,26 &#64;&#64;<br /> 	return retval;<br /> }<br /> <br />+static void set_singlestep(struct task_struct *child)<br />+{<br />+	long eflags;<br />+<br />+	set_tsk_thread_flag(child, TIF_SINGLESTEP);<br />+	eflags = get_stack_long(child, EFL_OFFSET);<br />+	put_stack_long(child, EFL_OFFSET, eflags | TRAP_FLAG);<br />+	child-&gt;ptrace |= PT_DTRACE;<br />+}<br />+<br />+static void clear_singlestep(struct task_struct *child)<br />+{<br />+	long eflags;<br />+<br />+	clear_tsk_thread_flag(child, TIF_SINGLESTEP);<br />+	eflags = get_stack_long(child, EFL_OFFSET);<br />+	put_stack_long(child, EFL_OFFSET, eflags &amp; ~TRAP_FLAG);<br />+	child-&gt;ptrace &amp;= ~PT_DTRACE;<br />+}<br />+<br /> /*<br />  * Called by kernel/ptrace.c when detaching..<br />  *<br />&#64;&#64; -145,11 +165,7 &#64;&#64;<br />  */<br /> void ptrace_disable(struct task_struct *child)<br /> { <br />-	long tmp;<br />-<br />-	clear_tsk_thread_flag(child, TIF_SINGLESTEP);<br />-	tmp = get_stack_long(child, EFL_OFFSET) &amp; ~TRAP_FLAG;<br />-	put_stack_long(child, EFL_OFFSET, tmp);<br />+	clear_singlestep(child);<br /> }<br /> <br /> /*<br />&#64;&#64; -388,10 +404,8 &#64;&#64;<br /> 		  }<br /> 		  break;<br /> <br />-	case PTRACE_SYSCALL: /* continue and stop at next (return from) syscall */<br />-	case PTRACE_CONT: { /* restart after signal. */<br />-		long tmp;<br />-<br />+	case PTRACE_SYSCALL:	/* continue and stop at next (return from) syscall */<br />+	case PTRACE_CONT:	/* restart after signal. */<br /> 		ret = -EIO;<br /> 		if ((unsigned long) data &gt; _NSIG)<br /> 			break;<br />&#64;&#64; -401,56 +415,39 &#64;&#64;<br /> 		else {<br /> 			clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);<br /> 		}<br />-		clear_tsk_thread_flag(child, TIF_SINGLESTEP);<br /> 		child-&gt;exit_code = data;<br />-	/* make sure the single step bit is not set. */<br />-		tmp = get_stack_long(child, EFL_OFFSET) &amp; ~TRAP_FLAG;<br />-		put_stack_long(child, EFL_OFFSET,tmp);<br />+		/* make sure the single step bit is not set. */<br />+		clear_singlestep(child);<br /> 		wake_up_process(child);<br /> 		ret = 0;<br /> 		break;<br />-	}<br /> <br /> /*<br />  * make the child exit.  Best I can do is send it a sigkill. <br />  * perhaps it should be put in the status that it wants to <br />  * exit.<br />  */<br />-	case PTRACE_KILL: {<br />-		long tmp;<br />-<br />+	case PTRACE_KILL:<br /> 		ret = 0;<br /> 		if (child-&gt;exit_state == EXIT_ZOMBIE)	/* already dead */<br /> 			break;<br /> 		child-&gt;exit_code = SIGKILL;<br />-		clear_tsk_thread_flag(child, TIF_SINGLESTEP);<br /> 		/* make sure the single step bit is not set. */<br />-		tmp = get_stack_long(child, EFL_OFFSET) &amp; ~TRAP_FLAG;<br />-		put_stack_long(child, EFL_OFFSET, tmp);<br />+		clear_singlestep(child);<br /> 		wake_up_process(child);<br /> 		break;<br />-	}<br />-<br />-	case PTRACE_SINGLESTEP: {  /* set the trap flag. */<br />-		long tmp;<br /> <br />+	case PTRACE_SINGLESTEP:	/* set the trap flag. */<br /> 		ret = -EIO;<br /> 		if ((unsigned long) data &gt; _NSIG)<br /> 			break;<br /> 		clear_tsk_thread_flag(child, TIF_SYSCALL_TRACE);<br />-		if ((child-&gt;ptrace &amp; PT_DTRACE) == 0) {<br />-			/* Spurious delayed TF traps may occur */<br />-			child-&gt;ptrace |= PT_DTRACE;<br />-		}<br />-		tmp = get_stack_long(child, EFL_OFFSET) | TRAP_FLAG;<br />-		put_stack_long(child, EFL_OFFSET, tmp);<br />-		set_tsk_thread_flag(child, TIF_SINGLESTEP);<br />+		set_singlestep(child);<br /> 		child-&gt;exit_code = data;<br /> 		/* give it a chance to run. */<br /> 		wake_up_process(child);<br /> 		ret = 0;<br /> 		break;<br />-	}<br /> <br /> 	case PTRACE_DETACH:<br /> 		/* detach a process that was attached. */<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
