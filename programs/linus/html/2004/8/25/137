    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/8/24/13">First message in thread</a></li><li><a href="/lkml/2004/8/25/34">Linus Torvalds</a><ul><li><a href="/lkml/2004/8/25/119">Grant Grundler</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2004/8/25/274">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2004/8/25/281">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Aug 2004 10:25:22 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC&amp;PATCH 1/2] PCI Error Recovery (readX_check)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 25 Aug 2004, Grant Grundler wrote:<br />&gt; <br />&gt; Do we only need to determine there was an error in the IO hierarchy<br />&gt; or do we also need to know which device/driver caused the error?<br />&gt; <br />&gt; If the latter I agree with linus. If the former, then the error recovery<br />&gt; can support asyncronous errors (like the bad DMA address case) and tell<br />&gt; all affected (thanks willy) drivers.<br /><br />Yes, that we could do without locking. The simplest way to do that is to <br />have a global sequence counter, and then the whole thing really boils down <br />to<br /><br />	typedef unsigned long pci_error_cookie_t;<br /><br />	extern pci_error_cookie_t error_sequence_number;<br /><br />	static inline pci_error_cookie_t clear_pci_errors(struct pci_dev *dev)<br />	{<br />		pci_error_cookie_t now;<br /><br />		now = error_sequence_number;<br />		io_start_error_memory_barrier(dev);<br />		return now;<br />	}<br /><br />	static inline int read_pci_errors(pci_error_cookie_t then, struct pci_dev *dev)<br />	{<br />		io_end_error_memory_barrier(dev);<br />		return (then != error_sequence_number) ? -EIO : 0;<br />	}<br /><br />and have the error handler just increment the "error_sequence_number" <br />whenever it happens.<br /><br />However, the above relies on the PCI error being a NMI in the first place<br />(which it may or may not be), and also on the fact that we need to have<br />some way to make sure we get it if it was pending to avoid races (ie the<br />"io_end_error_memory_barrier()" may have to be pretty expensive and<br />bus-serializing - likely a config space read from the device).<br /><br />And the above also relies on it being ok to see other peoples errors by<br />mistake.<br /><br />(Depending on how much information such a PCI error NMI gives the kernel,<br />the "error_sequence_number" could be made per-domain or per-bus, of<br />course, but that's an implementation detail that depends on what the<br />hardware supports).<br /><br />But I would not be surprised if "clear_pci_errors()" actually has to <br />_clear_ some bit in the bridge device and "read_pci_errors()" has to check <br />the bit afterwards. And if that is the case, I really do believe that you <br />want to lock the whole bridge, because you can't have people clearing the <br />bit when somebody else might be actively using it...<br /><br />So I think we have to design for the thing potentially being a irq-safe <br />spinlock - possibly even a global one. That's the worst case, and maybe a <br />lot of hardware platforms can do less intrusive things, but if we're <br />looking at generic infrastructure that different drivers are supposed to <br />be able to use (and I assume that's what we want), then we have to make <br />the interfaces generic.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
