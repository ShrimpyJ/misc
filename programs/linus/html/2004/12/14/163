    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/12/16/39">First message in thread</a></li><li><a href="/lkml/2004/12/16/39">Matthew Wilcox</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Dec 2004 12:15:13 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Question about memcpy_fromio prototype</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 14 Dec 2004, Matthew Wilcox wrote:<br />&gt; <br />&gt; Hi Linus.  On x86 and ia64, memcpy_fromio is protoyped as:<br />&gt; <br />&gt; static inline void memcpy_fromio(void *dst, volatile void __iomem *src, int count)<br />&gt; <br />&gt; ALSA does this (except on x86 and sparc32, so you don't see it):<br />&gt; <br />&gt; int copy_to_user_fromio(void __user *dst, const void __iomem *src, size_t count)<br />&gt; [...]<br />&gt;                 memcpy_fromio(buf, src, c);<br />&gt; <br />&gt; which provokes a warning from gcc that we're discarding a qualifier (the<br />&gt; 'const') from src.  Is ALSA just wrong?  Or is the 'volatile' wrong?<br /><br />Neither. The right thing for a read-only IO pointer is actually<br /><br />	const volatile void __iomem *<br /><br />which looks funny ("const volatile"?) but makes sense for prototypes,<br />exactly because a "const volatile" pointer is the most permissive kind of<br />pointer there is. And it actually does describe the thing perfectly: it is<br />"const" because we don't write to it ("const" in C does not mean that the<br />thing is constant, and never has, confusing name and some C++ semantic<br />changes aside) and obviously as an IO area it's both "volatile" and<br />"__iomem".<br /><br />On x86, readb/w/l already gets that right, so I'll just fix<br />memcpy_fromio(). Other architectures can sort out themselves (ppc64 is<br />already correct, at least for eeh).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
