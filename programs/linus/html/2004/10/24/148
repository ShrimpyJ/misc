    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/19/152">First message in thread</a></li><li><a href="/lkml/2004/10/23/183">Larry McVoy</a><ul><li><a href="/lkml/2004/10/24/37">Paolo Ciarrocchi</a><ul><li><a href="/lkml/2004/10/24/103">Larry McVoy</a><ul><li><a href="/lkml/2004/10/24/139">Paolo Ciarrocchi</a><ul><li><a href="/lkml/2004/10/24/213">Larry McVoy</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2004/10/24/151">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/24/151">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/24/161">Michael Buesch</a></li></ul></li><li><a href="/lkml/2004/10/24/205">Roman Zippel</a><ul><li><a href="/lkml/2004/10/24/210">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 24 Oct 2004 10:44:44 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BK kernel workflow</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 24 Oct 2004, Paolo Ciarrocchi wrote:<br />&gt; <br />&gt; Well, I'm not interested in having the list of all the bk trees used<br />&gt; during the develpoment of a release.<br />&gt; I was looking to the trees used by mantainers.<br /><br />Well, not only is "maintainer" fairly fluid, as Larry said, even if you <br />accept the fact that things will change, there's the issue that<br /><br /> - I do _not_ want people to "own" subsystems. And that's not so much an <br />   anti-maintainer issue (I _love_ maintainers), as more of a "conceptual" <br />   issue. When people expect one person or one group of person to be the <br />   only way to touch a certain subsystem, we have problems. I really <br />   really want everybody (users, developers _and_ maintainers) to realize <br />   that no code is an island, and work with other people touching their <br />   subsystem.<br /><br />   And part of that is that I do not like codifying maintainership. Even <br />   something as simple as saying "this tree is the xxxx tree" is in my <br />   opinion _bad_. Yes, a lot of core development for subsystems happen in <br />   some specific "subsystem tree", but every time that has turned into <br />   something "exclusive", it's been a _major_ problem.<br /><br />   And yes, we've had that problem several times. People having CVS trees <br />   for networking, sound drivers, and other special development <br />   subprojects invariably ended up breakign and throwing away work that <br />   happened "unofficially". And often the "unofficial" work is nearly as <br />   important as the official one.<br /><br />   So BK helps this model, because the distributed nature of BK means that <br />   you can have several pseudo-official trees _and_ totally unofficial<br />   ones, and merging is automatic and basically impossible to avoid, so <br />   the "official" tree never gets to drown out the unofficial work. But <br />   despite that, I want to make people _aware_ that maintainership does<br />   not imply total ownership, and that we don't have a "hierarchy" of <br />   developers but a *network* of developers.<br /><br />   To make a long story short: I do not ever even WANT "official" trees. <br />   Because it gives the wrong idea to people.<br /><br />   I don't know if you've noticed, but I try to encourage other people to<br />   make their own version of _my_ "official" tree, and unlike pretty much<br />   all other open source projects I'm aware of, the Linux kernel<br />   development model has always encouraged things like the "Alan Cox" tree<br />   or "Andrew Morton" tree or "Andrea Arcangeli" tree. Or all the vendor <br />   trees.<br /><br />   Many other projects try to control "the one true tree". Linux never <br />   really did, and for the last several years it's been a conscious<br />   decision for me to _encourage_ people to do their own trees. Exactly <br />   because I don't want people to think that there are any really official<br />   trees. My tree perhaps comes closest, but even I don't expect to be the <br />   "final word on Linux".<br /><br />   This keeps us all honest.<br /><br />Second, and less fundamentally:<br /><br /> - Even if we had "official maintainers" (and at any one time, certain <br />   sub-areas certainly tend to have pretty strong maintainership), those <br />   maintainers tend to have pretty fluid trees of their own, and they<br />   change pretty dynamically.<br /><br />   Look at how trees are merged, and you'll notice that several <br />   maintainers did a special "merge these things for 2.6.9" tree that<br />   contained the stuff that they wanted to push out quickly, and that I<br />   merged for just that release. It was basically a "throw-away" tree that<br />   got used once.<br /><br />   This happens all the time, and again, I _like_ it. It means that people <br />   can react a lot more dynamically to what is going on. Again, having a <br />   documented "list of trees" would not make this kind of thing<br />   technically impossible, but it would foster the wrong kind of "mental<br />   landscape".<br /><br />See what I'm saying? It all boils down to the fact that I really like <br />having a dynamic development model, and that I want to try to avoid <br />putting in mental road-blocks to that model. I want Linux development to <br />be fluid, and I think the best way to reach that goal is to make people <br />_think_ of it as being fluid.<br /><br />It's the old "perception changes reality" thing. It's really true. How you <br />think about something quite heavily influences what you do.<br /><br />Wow. That was deep. Time to go watch TV again.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
