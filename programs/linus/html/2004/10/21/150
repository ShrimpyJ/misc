    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/20/38">First message in thread</a></li><li><a href="/lkml/2004/10/20/38">Roland McGrath</a><ul><li class="origin"><a href="/lkml/2004/10/20/211">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/20/211">Roland McGrath</a></li><li><a href="/lkml/2004/10/21/320">Hugh Dickins</a><ul><li><a href="/lkml/2004/10/21/337">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/21/386">Roland McGrath</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 20 Oct 2004 10:19:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] include all vmas with unbacked pages in ELF core dumps</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 20 Oct 2004, Roland McGrath wrote:<br />&gt;<br />&gt; This patch changes the criteria for including vm regions in a core dump.<br />&gt; In recent glibc, the dynamic linker uses mprotect on part of a data segment<br />&gt; to write-protect pages that should never be touched after startup time<br />&gt; (this makes it harder for exploits to clobber indirection tables and the like).<br />&gt; Currently, this part of the segment is omitted from core dumps, losing<br />&gt; information about what the program did before it died.<br /><br />Augh. Not all filesystems support holes, and I think VM_SHARED should <br />trump VM_WRITE.<br /><br />In general, I'd much prefer just adding a VM_DIRTY flag, and making the<br />COW logic set it. That should guarantee that we write out the minimal <br />required sections.<br /><br />&gt; Including unreadable regions gives you things like guard pages, showing<br />&gt; an accurate representation of of those in the core dump image. Since we<br />&gt; now have the ZERO_PAGE check, this won't actually write any more pages<br />&gt; to disk for those cases.<br /><br />But any non-dumped section _will_ show up in the ELF headers, so things<br />like guard pages have nothing to do with "maydump()", imho. And as <br />mentioned, some filesystems _will_ write many more pages.<br /><br />So if gdb has trouble with guard pages, pls get somebody to fix gdb <br />instead, and tell them what the difference between p_filesz and p_memsz <br />is. Putting them into the dump is just stupid.<br /><br />So "maydump()" might sanely look something like<br /><br />	/* Shared or IO mappings are never written out */<br />	if (vma-&gt;vm_flags &amp; (VM_IO | VM_SHARED | VM_SHM))<br />		return 0;<br /><br />	/*<br />	 * Was the mapped backing store opened for writing?<br />	 * This really only happens for VM_SHARED (which we<br />	 * don't write out anyway), but it's conceptually<br />	 * the right thing to do. Some future internal use<br />	 * might end up doing this.<br />	 */<br />	if (!(vma-&gt;vm_flags &amp; VM_MAYWRITE))<br />		return 0;<br /><br />	/* We really should add this flag */<br />	if (!(vma-&gt;vm_flags &amp; VM_DIRTY))<br />		return 0;<br /><br />	/* otherwise, write it out */<br />	return 1;<br /><br />and that should make people happy. No?<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
