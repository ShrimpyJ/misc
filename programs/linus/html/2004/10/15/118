    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/10/110">First message in thread</a></li><li><a href="/lkml/2004/10/11/156">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/15/83">Pavel Machek</a><ul><li class="origin"><a href="/lkml/2004/10/24/192">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/24/192">Pavel Machek</a><ul><li><a href="/lkml/2004/10/24/196">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 15 Oct 2004 08:56:32 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Totally broken PCI PM calls</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 15 Oct 2004, Pavel Machek wrote:<br />&gt; <br />&gt; I'm trying to learn how to work with bitwise on obsolete stuff, but<br />&gt; checking there is good, too, right?<br />&gt; <br />&gt; Is this right way to do it?<br />&gt; <br />&gt; +typedef enum pm_request __bitwise {<br />&gt; +       __bitwise PM_SUSPEND, /* enter D1-D3 */<br />&gt; +       __bitwise PM_RESUME,  /* enter D0 */<br />&gt; +} pm_request_t;<br /><br />No, "__bitwise" is a type attribute, so you'd have to do it something like <br />this:<br /><br />	typedef int __bitwise pm_request_t;<br /><br />	enum pm_request {<br />		PM_SUSPEND = (__force pm_request_t) 1,<br />		PM_RESUME = (__force pm_request_t) 2<br />	};<br /><br />which makes PM_SUSPEND and PM_RESUME "bitwise" integers (the "__force" is <br />there because sparse will complain about casting to/from a bitwise type, <br />but in this case we really _do_ want to force the conversion). And because <br />the enum values are all the same type, now "enum pm_request" will be that <br />type too.<br /><br />And with gcc, all the __bitwise/__force stuff goes away, and it all ends <br />up looking just like integers to gcc.<br /><br />Quite frankly, you don't need the enum there. The above all really just <br />boils down to one special "int __bitwise" type.<br /><br />So the simpler way is to just do<br /><br />	typedef int __bitwise pm_request_t;<br /><br />	#define PM_SUSPEND ((__force pm_request_t) 1)<br />	#define PM_RESUME ((__force pm_request_t) 2)<br /><br />and you now have all the infrastructure needed for strict typechecking. <br /><br />One small note: the constant integer "0" is special. You can use a <br />constant zero as a bitwise integer type without sparse ever complaining. <br />This is because "bitwise" (as the name implies) was designed for making <br />sure that bitwise types don't get mixed up (little-endian vs big-endian <br />vs cpu-endian vs whatever), and there the constant "0" really _is_ <br />special. <br /><br />Also, because of the "bitwise" nature of bitwise types, you cannot add, <br />subtract or do a lot of things with bitwise types. But you _can_ use the <br />bitwise operations on them, and you can test them for equality.<br /><br />So at some point we might add a separate "__opaque" type that allows no<br />operations at all (except for assignment and equality comparison), and<br />where "0" isn't special. But in the meantime, __bitwise gets you most of <br />the way. Just keep in mind that sparse won't warn about use of the <br />constant zero.<br /><br />&gt; Having __bitwise at every line in enum looks quite ugly to my<br />&gt; eyes.<br /><br />And in fact you cannot do it that way. "__bitwise" will always create a<br />_new_ type, so every time you use it you get a _different_ type. So to use<br />it sanely, you have to create _one_ typedef for each type you want to use, <br />and make that one __bitwise, and that will be the only __bitwise that <br />you'll ever see for that particular usage. After that, you use the <br />typedef, because it is now a unique type, thanks to the __bitwise.<br /><br />&gt;	 [Where to get sparse? I tried to google for it but "sparse" is<br />&gt; very common word (as in sparse matrix). And theres no<br />&gt; kernel/people/linus on kernel.org...]<br /><br />With BK, you can just get it from<br /><br />	bk://sparse.bkbits.net/sparse<br /><br />and I think DaveJ does tar-balls somewhere. If you search for "sparse <br />checker linux" you'll find a number of hits..<br /><br />Once you have it, just do<br /><br />	make<br />	make install<br /><br />as your regular user, and it will install sparse in your ~/bin directory. <br />After that, doing a kernel make with "make C=1" will run sparse on all the <br />C files that get recompiled, or with "make C=2" will run sparse on the <br />files whether they need to be recompiled or not (ie the latter is fast way <br />to check the whole tree if you have already built it).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
