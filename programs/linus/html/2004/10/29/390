    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/18/203">First message in thread</a></li><li><a href="/lkml/2004/10/29/267">Andreas Steinmetz</a><ul><li><a href="/lkml/2004/10/29/288">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/335">Jeff Garzik</a></li></ul></li><li><a href="/lkml/2004/10/29/376">dean gaudet</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Oct 2004 17:15:00 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Semaphore assembly-code bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Oct 2004, dean gaudet wrote:<br />&gt; <br />&gt; for p4 model 0 through 2 it was faster to avoid lea and shl and generate <br />&gt; code like:<br />&gt; <br />&gt; 	add %ebx,%ebx<br />&gt; 	add %ebx,%ebx<br />&gt; 	add %ebx,%ebx<br />&gt; 	add %ebx,%ebx<br /><br />I think that is true only for the lea's that have a shifted input. The<br />weakness of the original P4 is its shifter, not lea itself. And for a<br />simple lea like 4(%esp), it's likely no worse than a regular "add", and<br />there lea has the advantage that you can put the result in another<br />register, which can be advantageous in other circumstances.<br /><br />So lea actually _is_ useful for doing adds, in many cases. Of course, on<br />older CPU's you'll see the effect of the address generation adder being<br />one cycle "off" (earlier) the regular ALU execution unit, so lea often<br />causes AGI stalls.  I don't think this is an issue on the P6 or P4 because <br />of how they actually end up implementing the lea in the regular ALU path. <br /><br />How the hell did we get to worrying about this in the first place?<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
