    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/27/235">First message in thread</a></li><li><a href="/lkml/2004/10/27/463">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/28/408">Zachary Amsden</a><ul><li class="origin"><a href="/lkml/2004/10/29/423">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/423">Geert Uytterhoeven</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Oct 2004 21:52:03 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Remove some divide instructions</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 28 Oct 2004, Zachary Amsden wrote:<br />&gt;<br />&gt; This leaves several options:<br />&gt; <br />&gt; 1) Forget the optimization altogether<br />&gt; 2) Go back to the (base == 1) check<br /><br />Ok, I think I led you on a merry goose-chase, and the "base == 1" check <br />was the only one worth bothering with after all. Sorry about that.<br /><br />&gt; This seems like a lot of work for a trivial optimization; for i386, <br />&gt; perhaps #2 is the most appropriate - with a sufficiently new GCC, this <br />&gt; optimization should be automatic for all architectures not hardcoding <br />&gt; do_div as inline assembler.<br /><br />The do_div() optimization is a trivial one, and one that gcc should <br />definitely have recognized. It's not like a compiler cannot see that you <br />have a 64 / 32 divide, and realize that it's cheaper than a full 64 / 64 <br />divide.<br /><br />But hey, even if the gcc people finally did that optimization today, it <br />would take a few years before we didn't support old compilers any more, <br />so.<br /><br />&gt; Seems to have come full circle - the trivial extension turns out to have <br />&gt; non-trivial side effects.  If only GCC were as easily extensible as <br />&gt; sparse!  A __builtin_highest_one_bit() function would make it possible <br />&gt; to use inline assembler without degenerating to individual cases for <br />&gt; each bit.<br /><br />Yes. There are tons of places where we'd love to have a constant<br />compile-time "log2()" function. And yes, I could do it in sparse in about<br />ten more lines of code, but..<br /><br />I guess you could do it with a lot of tests...  Something like this should<br />do it<br /><br />	#define __constant_log2(y) ((y==1) ? 0 : \<br />				    (y==2) ? 1 : \<br />				    (y==4) ? 2 : \<br />				    (y==8) ? 3 : -1)	/* We could go on ... */<br /><br />	#define do_div(x,y) ({					\<br />		unsigned long __mod;				\<br />		int __log2;					\<br />		if (__builtin_constant_p(y) &amp;&amp; 			\<br />		    !((y) &amp; ((y)-1)) &amp;&amp;				\<br />		    (__log2 = __constant_log2((y))) &gt;= 0) {	\<br />			mod = x &amp; ((y)-1);			\<br />			(x) &gt;&gt;= __log2;				\<br />		} else {					\<br />			.. inline asm case ..			\<br />		}						\<br />		__mod; })<br /><br />which looks like it should work, but it's getting so ugly that I suspect I <br />should be committed for even thinking about it.<br /><br />(And no, I didn't test the above. It is all trivially optimizable by a <br />compiler, and I can't see how gcc could _fail_ to get it right, but hey, I <br />thought the previous thing would work too, so I'm clearly not competent to <br />make that judgement... ;)<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
