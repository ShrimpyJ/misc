    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/10/18/203">First message in thread</a></li><li><a href="/lkml/2004/10/29/145">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/162">Andi Kleen</a><ul><li><a href="/lkml/2004/10/29/235">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/254">Richard Henderson</a></li></ul></li></ul></li><li><a href="/lkml/2004/10/29/179">Andreas Steinmetz</a><ul><li><a href="/lkml/2004/10/29/208">linux-os</a><ul><li><a href="/lkml/2004/10/29/234">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/257">Andreas Steinmetz</a></li><li><a href="/lkml/2004/10/29/412">dean gaudet</a></li><li><a href="/lkml/2004/10/29/439">linux-os</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2004/10/29/213">linux-os</a><ul><li><a href="/lkml/2004/10/29/230">Richard Henderson</a><ul><li><a href="/lkml/2004/10/29/237">linux-os</a><ul><li><a href="/lkml/2004/10/29/426">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2004/10/29/299">Linus Torvalds</a><ul><li><a href="/lkml/2004/10/29/299">Linus Torvalds</a></li><li><a href="/lkml/2004/10/29/334">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2004/10/29/227">Richard Henderson</a></li><li><a href="/lkml/2004/10/29/433">Gabriel Paubert</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2004/10/29/261/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Oct 2004 12:20:58 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Semaphore assembly-code bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />Here's a totally untested patch to make the semaphores use "fastcall" <br />instead of "asmlinkage", and thus pass the argument in %eax instead of on <br />the stack. Does it work? I have no idea. If it does, it should fix the <br />particular bug that started this thread..<br /><br />			Linus<br /><br />---<br />===== arch/i386/kernel/semaphore.c 1.10 vs edited =====<br />--- 1.10/arch/i386/kernel/semaphore.c	2004-04-12 10:53:59 -07:00<br />+++ edited/arch/i386/kernel/semaphore.c	2004-10-29 12:19:22 -07:00<br />&#64;&#64; -49,12 +49,12 &#64;&#64;<br />  *    we cannot lose wakeup events.<br />  */<br /> <br />-asmlinkage void __up(struct semaphore *sem)<br />+fastcall void __up(struct semaphore *sem)<br /> {<br /> 	wake_up(&amp;sem-&gt;wait);<br /> }<br /> <br />-asmlinkage void __sched __down(struct semaphore * sem)<br />+fastcall void __sched __down(struct semaphore * sem)<br /> {<br /> 	struct task_struct *tsk = current;<br /> 	DECLARE_WAITQUEUE(wait, tsk);<br />&#64;&#64; -91,7 +91,7 &#64;&#64;<br /> 	tsk-&gt;state = TASK_RUNNING;<br /> }<br /> <br />-asmlinkage int __sched __down_interruptible(struct semaphore * sem)<br />+fastcall int __sched __down_interruptible(struct semaphore * sem)<br /> {<br /> 	int retval = 0;<br /> 	struct task_struct *tsk = current;<br />&#64;&#64; -154,7 +154,7 &#64;&#64;<br />  * single "cmpxchg" without failure cases,<br />  * but then it wouldn't work on a 386.<br />  */<br />-asmlinkage int __down_trylock(struct semaphore * sem)<br />+fastcall int __down_trylock(struct semaphore * sem)<br /> {<br /> 	int sleepers;<br /> 	unsigned long flags;<br />&#64;&#64; -183,9 +183,9 &#64;&#64;<br />  * need to convert that sequence back into the C sequence when<br />  * there is contention on the semaphore.<br />  *<br />- * %ecx contains the semaphore pointer on entry. Save the C-clobbered<br />- * registers (%eax, %edx and %ecx) except %eax when used as a return<br />- * value..<br />+ * %eax contains the semaphore pointer on entry. Save the C-clobbered<br />+ * registers (%eax, %edx and %ecx) except %eax whish is either a return<br />+ * value or just clobbered..<br />  */<br /> asm(<br /> ".section .sched.text\n"<br />&#64;&#64; -196,13 +196,11 &#64;&#64;<br /> 	"pushl %ebp\n\t"<br /> 	"movl  %esp,%ebp\n\t"<br /> #endif<br />-	"pushl %eax\n\t"<br /> 	"pushl %edx\n\t"<br /> 	"pushl %ecx\n\t"<br /> 	"call __down\n\t"<br /> 	"popl %ecx\n\t"<br /> 	"popl %edx\n\t"<br />-	"popl %eax\n\t"<br /> #if defined(CONFIG_FRAME_POINTER)<br /> 	"movl %ebp,%esp\n\t"<br /> 	"popl %ebp\n\t"<br />&#64;&#64; -257,13 +255,11 &#64;&#64;<br /> ".align 4\n"<br /> ".globl __up_wakeup\n"<br /> "__up_wakeup:\n\t"<br />-	"pushl %eax\n\t"<br /> 	"pushl %edx\n\t"<br /> 	"pushl %ecx\n\t"<br /> 	"call __up\n\t"<br /> 	"popl %ecx\n\t"<br /> 	"popl %edx\n\t"<br />-	"popl %eax\n\t"<br /> 	"ret"<br /> );<br /> <br />===== include/asm-i386/linkage.h 1.4 vs edited =====<br />--- 1.4/include/asm-i386/linkage.h	2004-10-16 18:24:37 -07:00<br />+++ edited/include/asm-i386/linkage.h	2004-10-29 11:32:18 -07:00<br />&#64;&#64; -1,7 +1,7 &#64;&#64;<br /> #ifndef __ASM_LINKAGE_H<br /> #define __ASM_LINKAGE_H<br /> <br />-#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(0)))<br />+#define asmlinkage CPP_ASMLINKAGE __attribute__((regparm(3)))<br /> #define FASTCALL(x)	x __attribute__((regparm(3)))<br /> #define fastcall	__attribute__((regparm(3)))<br /> <br />===== include/asm-i386/semaphore.h 1.9 vs edited =====<br />--- 1.9/include/asm-i386/semaphore.h	2004-08-27 00:02:38 -07:00<br />+++ edited/include/asm-i386/semaphore.h	2004-10-29 12:06:48 -07:00<br />&#64;&#64; -87,15 +87,15 &#64;&#64;<br /> 	sema_init(sem, 0);<br /> }<br /> <br />-asmlinkage void __down_failed(void /* special register calling convention */);<br />-asmlinkage int  __down_failed_interruptible(void  /* params in registers */);<br />-asmlinkage int  __down_failed_trylock(void  /* params in registers */);<br />-asmlinkage void __up_wakeup(void /* special register calling convention */);<br />-<br />-asmlinkage void __down(struct semaphore * sem);<br />-asmlinkage int  __down_interruptible(struct semaphore * sem);<br />-asmlinkage int  __down_trylock(struct semaphore * sem);<br />-asmlinkage void __up(struct semaphore * sem);<br />+fastcall void __down_failed(void /* special register calling convention */);<br />+fastcall int  __down_failed_interruptible(void  /* params in registers */);<br />+fastcall int  __down_failed_trylock(void  /* params in registers */);<br />+fastcall void __up_wakeup(void /* special register calling convention */);<br />+<br />+fastcall void __down(struct semaphore * sem);<br />+fastcall int  __down_interruptible(struct semaphore * sem);<br />+fastcall int  __down_trylock(struct semaphore * sem);<br />+fastcall void __up(struct semaphore * sem);<br /> <br /> /*<br />  * This is ugly, but we want the default case to fall through.<br />&#64;&#64; -111,12 +111,13 &#64;&#64;<br /> 		"js 2f\n"<br /> 		"1:\n"<br /> 		LOCK_SECTION_START("")<br />-		"2:\tcall __down_failed\n\t"<br />+		"2:\tlea %0,%%eax\n\t"<br />+		"call __down_failed\n\t"<br /> 		"jmp 1b\n"<br /> 		LOCK_SECTION_END<br /> 		:"=m" (sem-&gt;count)<br />-		:"c" (sem)<br />-		:"memory");<br />+		:<br />+		:"memory","ax");<br /> }<br /> <br /> /*<br />&#64;&#64; -135,11 +136,12 &#64;&#64;<br /> 		"xorl %0,%0\n"<br /> 		"1:\n"<br /> 		LOCK_SECTION_START("")<br />-		"2:\tcall __down_failed_interruptible\n\t"<br />+		"2:\tlea %1,%%eax\n\t"<br />+		"call __down_failed_interruptible\n\t"<br /> 		"jmp 1b\n"<br /> 		LOCK_SECTION_END<br /> 		:"=a" (result), "=m" (sem-&gt;count)<br />-		:"c" (sem)<br />+		:<br /> 		:"memory");<br /> 	return result;<br /> }<br />&#64;&#64; -159,11 +161,12 &#64;&#64;<br /> 		"xorl %0,%0\n"<br /> 		"1:\n"<br /> 		LOCK_SECTION_START("")<br />-		"2:\tcall __down_failed_trylock\n\t"<br />+		"2:\tlea %1,%%eax\n\t"<br />+		"call __down_failed_trylock\n\t"<br /> 		"jmp 1b\n"<br /> 		LOCK_SECTION_END<br /> 		:"=a" (result), "=m" (sem-&gt;count)<br />-		:"c" (sem)<br />+		:<br /> 		:"memory");<br /> 	return result;<br /> }<br />&#64;&#64; -182,13 +185,14 &#64;&#64;<br /> 		"jle 2f\n"<br /> 		"1:\n"<br /> 		LOCK_SECTION_START("")<br />-		"2:\tcall __up_wakeup\n\t"<br />+		"2:\tlea %0,%%eax\n\t"<br />+		"call __up_wakeup\n\t"<br /> 		"jmp 1b\n"<br /> 		LOCK_SECTION_END<br /> 		".subsection 0\n"<br /> 		:"=m" (sem-&gt;count)<br />-		:"c" (sem)<br />-		:"memory");<br />+		:<br />+		:"memory","ax");<br /> }<br /> <br /> #endif<br />===== include/linux/spinlock.h 1.32 vs edited =====<br />--- 1.32/include/linux/spinlock.h	2004-10-24 16:24:20 -07:00<br />+++ edited/include/linux/spinlock.h	2004-10-29 12:08:14 -07:00<br />&#64;&#64; -27,7 +27,7 &#64;&#64;<br />         extra                                   \<br />         ".ifndef " LOCK_SECTION_NAME "\n\t"     \<br />         LOCK_SECTION_NAME ":\n\t"               \<br />-        ".endif\n\t"<br />+        ".endif\n"<br /> <br /> #define LOCK_SECTION_END                        \<br />         ".previous\n\t"<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
