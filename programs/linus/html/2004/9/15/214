    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/9/15/174">First message in thread</a></li><li><a href="/lkml/2004/9/15/194">Linus Torvalds</a><ul><li><a href="/lkml/2004/9/15/208">Nikita Danilov</a><ul><li><a href="/lkml/2004/9/15/222">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2004/9/15/209">=?iso-8859-1?Q?J=F6rn?= Engel</a><ul><li class="origin"><a href="/lkml/2004/9/15/218">Linus Torvalds</a><ul><li><a href="/lkml/2004/9/15/218">Linus Torvalds</a></li><li><a href="/lkml/2004/9/15/244">Greg KH</a><ul><li><a href="/lkml/2004/9/15/250">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2004/9/16/174">Horst von Brand</a></li></ul></li></ul></li><li><a href="/lkml/2004/9/15/228">Chris Wedgwood</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Sep 2004 10:57:25 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Being more anal about iospace accesses..</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 15 Sep 2004, Jörn Engel wrote:<br />&gt; <br />&gt; But it still leaves me confused.  Before I had this code:<br />&gt; <br />&gt; 	struct regs {<br />&gt; 		uint32_t status;<br />&gt; 		...<br />&gt; 	}<br />&gt; <br />&gt; 	...<br />&gt; <br />&gt; 	struct regs *regs = ioremap(...);<br />&gt; 	uint32_t status = regs-&gt;status;<br />&gt; 	...<br />&gt; <br />&gt; So now I should do it like this:<br />&gt; <br />&gt; 	#define REG_STATUS 0<br />&gt; <br />&gt; 	...<br />&gt; <br />&gt; 	void __iomem *regs = ioremap(...);<br />&gt; 	uint32_t status = readl(regs + REG_STATUS);<br /><br />No, you can certainly continue to use non-void pointers. The "void __iomem<br />*" case is just the typeless one, exactly equivalent to regular void<br />pointer usage.<br /><br />So let me clarify my original post with two points:<br /><br /> - if your device only supports MMIO, you might as well just use the old <br />   interfaces. The new interface will _also_ work, but there is no real <br />   advantage, unless you count the "pci_iomap()" as a simpler interface.<br /><br />   The new interface is really only meaningful for things that want to <br />   support _both_ PIO and MMIO. It's also, perhaps, a bit syntactically <br />   easier to work with, so some people might prefer that for that <br />   reason. See my comments further down on the auto-sizing. BUT it doesn't <br />   make the old interfaces go away by any means, and I'm not even<br />   suggesting that people should re-write drivers just for the hell of it.<br /><br />   In short: if you don't go "ooh, that will simplify XXX", then you <br />   should just ignore the new interfaces.<br /><br /> - you can _absolutely_ use other pointers than "void *". You should <br />   annotate them with "__iomem" if you want to be sparse-clean (and it <br />   often helps visually to clarify the issue), but gcc won't care, the <br />   "__iomem" annotation is purely a extended check.<br /><br />So you can absolutely still continue with<br /><br />	struct mydev_iolayout {<br />		__u32 status;<br />		__u32 irqmask;<br />		...<br /><br />	struct mydev_iolayout __iomem *regs = pci_map(...);<br />	status = ioread32(&amp;regs.status);<br /><br />which is often a lot more readable, and thus in fact _preferred_. It also<br />adds another level of type-checking, so I applaud drivers that do this.<br /><br />Now, I'm _contemplating_ also allowing the "get_user()" kind of "unsized" <br />access function for the new interface. Right now all the old (and the new) <br />access functions are all explicitly sized. But for the "struct layout" <br />case, it's actually often nice to just say<br /><br />	status = ioread(&amp;regs.status);<br /><br />and the compiler can certainly figure out the size of the register on its<br />own. This was impossible with the old interface, because the old <br />interfaces didn't even take a _pointer_, much less one that could be sized <br />up automatically.<br /><br />(The auto-sizing is something that "get_user()" and "put_user()" have<br />always done, and it makes them very easy to use. It involved a few pretty<br />ugly macros, but hey, that's all hidden away, and is actually pretty<br />simple in the end).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
