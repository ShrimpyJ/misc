    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/9/15/174">First message in thread</a></li><li><a href="/lkml/2004/9/15/185">=?iso-8859-1?Q?J=F6rn?= Engel</a><ul><li><a href="/lkml/2004/9/15/192">Jeff Garzik</a></li><li><a href="/lkml/2004/9/15/194">Linus Torvalds</a><ul><li><a href="/lkml/2004/9/15/208">Nikita Danilov</a><ul><li><a href="/lkml/2004/9/15/222">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2004/9/15/209">=?iso-8859-1?Q?J=F6rn?= Engel</a><ul><li><a href="/lkml/2004/9/15/214">Linus Torvalds</a><ul><li><a href="/lkml/2004/9/15/218">Linus Torvalds</a></li><li><a href="/lkml/2004/9/15/244">Greg KH</a></li><li><a href="/lkml/2004/9/16/174">Horst von Brand</a></li></ul></li></ul></li><li><a href="/lkml/2004/9/15/228">Chris Wedgwood</a></li></ul></li><li><a href="/lkml/2004/9/15/200">Roland Dreier</a><ul><li class="origin"><a href="/lkml/2004/9/15/256">Linus Torvalds</a><ul><li><a href="/lkml/2004/9/15/256">Russell King</a></li></ul></li></ul></li><li><a href="/lkml/2004/9/15/204">Horst von Brand</a></li><li><a href="/lkml/2004/9/15/206">Brian Gerst</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Sep 2004 10:39:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Being more anal about iospace accesses..</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 15 Sep 2004, Roland Dreier wrote:<br />&gt; <br />&gt; However, I somewhat agree -- it's ugly for drivers rely on this and do<br />&gt; arithmetic on void *.  It should be OK for a driver to use <br />&gt; char __iomem * for its IO base if it needs to add in offsets, right?<br /><br />"char __iomem *" will certainly work - all the normal pointer conversions <br />are ok. Some people in fact use pointers to structures in MMIO space, and <br />this is quite reasonable when working with a chip that uses "mailboxes" <br />for commands.<br /><br />However, I disagree with "void *" arithmetic being ugly. It's a very nice<br />feature to have a pointer that can be validly cast to any other type, and<br />that is the whole _point_ of "void *". The fact that C++ got that wrong is<br />arguably the worst failing of the language, causing tons of unnecessary<br />casts that can silently hide real bugs (maybe the thing you cast wasn't a<br />"void *" in the first place, but you'll never know - the compiler will do<br />the cast for you).<br /><br />For example, to go back to the mailbox example, let's say that your <br />hardware has an IO area that is 8kB in size, with the last 4kB being <br />mailboxes.<br /><br />The _sane_ way to do that is to do<br /><br />	void __iomem *base_io = ioremap(...);<br />	struct mailbox __iomem *mbox = base_io + MAILBOX_OFFSET;<br /><br />and then just work on that.<br /><br />In contrast, havign to cast to a "char *" in order to do arithmetic, and <br />then casting back to the resultant structure type pointer is not only <br />ugly and unreadable, it's a lot more prone to errors as a result.<br /><br />In other words, think of "void *" as a pointer to storage. Not "char"  <br />(which is the C name for a signed byte), but really, it's the pointer to <br />whatever underlying memory there is. And a _fundamental_ part of such <br />memory is the fact that it is addressable. Thus "pointer to storage <br />arithmetic" really does make sense on a very fundamental level. It has <br />nothing to do with C types, and that also explains why "void *" silently <br />converts to anything else. It's a very internally consistent world-view.<br /><br />Now, I disagree with gcc when it comes to actually taking the "size" of <br />void. Gcc will silently accept<br /><br />	void *x;<br />	x = malloc(sizeof(*x));<br /><br />which I consider to be an abomination (and the above _can_ happen, quite<br />easily, as part of macros for doing allocation etc - nobody would write <br />it in that form, but if you have an "MEMALLOC(x)" macro that does the <br />sizeof, you could end up trying to feed the compiler bogus code).<br /><br />The fact that you can do arithmetic on typeless storage does _not_ imply<br />that typeless storage would have a "size" in my book.<br /><br />So sparse will say:<br /><br />	warning: cannot size expression<br /><br />and refuse to look at broken code like the above. But hey, the fact that I <br />have better taste than anybody else in the universe is just something I <br />have to live with. It's not easy being me.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
