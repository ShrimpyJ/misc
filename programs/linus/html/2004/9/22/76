    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2004/9/20/112">First message in thread</a></li><li><a href="/lkml/2004/9/21/53">Alan Cox</a><ul><li><a href="/lkml/2004/9/22/12">Rainer Weikusat</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 22 Sep 2004 07:41:45 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Implementation defined behaviour in read_write.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 22 Sep 2004, Rainer Weikusat wrote:<br />&gt; <br />&gt; 	6.3.1.3 Signed and unsigned integers<br />&gt; <br />&gt; 	When a value with integer type is converted to another integer<br />&gt; 	type other than _Bool, if the value can be represented by the<br />&gt; 	new type, it is unchanged.<br />&gt; <br />&gt; 	[...]<br />&gt; <br />&gt; 	Otherwise, the new type is signed and the value cannot be<br />&gt; 	represented in it; either the result is implementation-defined<br />&gt; 	or an implementation-defined signal is raised.<br />&gt; <br />&gt; The requirement for implementation defined is that the implementation<br />&gt; documents the behaviour (which gcc at least up to 3.4.4 doesn't).<br /><br />They don't, because they do the only thing they _can_ do. Bit-for-bit copy <br />of a 2's complement value. Anything else would be basically impossible for <br />an optimizing compiler to do unless it actively _tried_ to screw the user <br />over. In other words, you're likely to see something else only on a C <br />simulator interface that does strict conformance testing (as opposed to <br />test for working).<br /><br />And you are correct to point out the difference between implementation- <br />defined and un-defined. Implementation-defined means that it has some <br />well-defined semantics, and quite frankly, Linux _does_ depend on 2's <br />complement. I don't expect to ever see anything else (where "ever" is a <br />long time, although obviously not really "forever"), but if we do, we'll <br />have to consider that architecture something very special indeed.<br /><br />&gt; This<br />&gt; not a problem with the current compiler, but I happen to know by<br />&gt; coincedence that some people of unknown relations to the gcc team<br />&gt; (like the person who wrote this advisory:<br />&gt; &lt;URL:<a href="https://cert.uni-stuttgart.de/advisories/c-integer-overflow.php&gt;">http://cert.uni-stuttgart.de/advisories/c-integer-overflow.php&gt;</a>)<br />&gt; would like to turn it into a problem, because they strongly believe it<br />&gt; is "the right thing to do"<br /><br />There are tons of people who have theoretical concerns that they try to<br />push on the real world. Too many of them have talked to the gcc people,<br />but I think the gcc people are basically sane. So I wouldn't worry _too_ <br />much.<br /><br />That said, there are other cases where signed integer arithmetic should be <br />avoided. The signed&lt;-&gt;unsigned conversions are safe due to their <br />implementation-defined behaviour (and only one sane way to do them), but <br />there _are_ cases like signed integer overflow that really is undefined, <br />and where a compiler can actually generate code that differs because it <br />"knows" that signed integers cannot overflow.<br /><br />However, in this case that is not what is happening in read_write.c. All <br />the arithmetic is done in proper unsigned types, and only the last check <br />is done with a (well-defined) signed conversion.<br /><br />Btw, to see other places where we do depend on this 2's complement <br />behaviour, just look at "time_before()" and friends.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
