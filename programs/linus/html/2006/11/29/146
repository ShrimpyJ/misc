    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/11/29/12">First message in thread</a></li><li><a href="/lkml/2006/11/29/12">Nick Piggin</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 29 Nov 2006 08:11:20 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Slab: Remove kmem_cache_t</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 29 Nov 2006, Nick Piggin wrote:<br />&gt; <br />&gt; You are saying that they should only be used to create new "primitive"<br />&gt; types (ie. that you can use in arithmetic / logical ops) that can<br />&gt; change depending on the config.<br /><br />Well, it doesn't have to be something that is "arithmetic".<br /><br />For an example of a primitive type that isn't arithmetic, the page table <br />entries are (pgt_t/pud_t/pmd_t/pte_t) are excellent - they don't do any <br />arithmetic or logical ops, but they do change depending on config, and no, <br />they aren't always opaque structures.<br /><br />(Actually, these days they mostly are, but on many architectures it's much <br />slower to pass even a small struct around than it is to pass an integer <br />around - due simply to calling conventions - so for truly opaque things, <br />the typedef has the advantage that it _can_ be an opaque integer type, and <br />nobody will notice).<br /><br />&gt; That's fair enough. I'm sure you've also said in the past that they can<br />&gt; be used (IIRC you even encouraged it) when the type is opaque in the<br />&gt; context it is being used.<br /><br />I'm sure I've been inconsistent, but in general, typedefs are bad. I think <br />you'll notice that I almost never use them myself. I much prefer passing <br />an opaque structure around, _unless_ I know the structure is so small that <br />it makes sense to do the above optimization (ie allow the case where the <br />opaque thing actually ends up being an integer).<br /><br />Opaque integer types are generally useless in C, because they lose all the <br />type information _way_ too easily. There are no warnings for mis-use, <br />unless you use a sparse "bitwise" type and actually run sparse on the <br />thing. So even when there are performance reasons to use opaque integer <br />types (and on x86, the page table things were one such thing), usign a <br />struct is often preferable just for type-checking.<br /><br />And as mentioned, there _are_ exceptions. Some types just get _sooo_ <br />complex that it's inconvenient to type them out, even if they are <br />perfectly regular types, and don't depend on any config option. The <br />"filldir_t" typedef in fs.h is such an example - it's not really opaque, <br />_nor_ is it a config option, but it sure as hell would be inconvenient for <br />all low-level filesystems to do<br /><br />	int my_readdir(struct file *filp, void *dirent,<br />		int (*filldir)(void *, const char *, int, loff_t,<br />		u64, unsigned))<br />	{<br />		...<br />	}<br /><br />because let's face it, having to write out that "filldir" type just made <br />me use two lines (and potential for totally unnecessary tupos) because the <br />thing was so complex. So at that point, using a typedef is just common <br />sense, and we can do<br /><br />	int my_readdir(struct file *filp, void *dirent, filldir_t filldir)<br />	{<br />		...<br />	}<br /><br />instead.<br /><br />But it's really quite hard to make that kind of complex type in C. It's <br />almost always a function pointer that takes complex arguments.<br /><br />[ That said, I generally won't _complain_ if people use typedefs, but on <br />  the other hand, some people definitely are too eager to do it, and I'll <br />  happily remove them if people send me a patch. For example, we used to <br />  have "task_t" for "struct task_struct", and that was just _unnecessary_, <br />  and made it just harder to pick out what it was. Sometimes long names <br />  and the explicit "struct" is a _good_ thing. ]<br /><br />One final thing: for _small_ structures, typedefs are much better than for <br />large ones. Why? Because of stack usage. I want people to really _think_ <br />about local variable sizes, and that's one thing that a typedef sometimes <br />causes - especially if it's opaque, so that users don't have any "handle" <br />on whether it is big or small, it's really nasty to use them for automatic <br />storage on the stack, because you may simply blow your stack usage on a <br />single (or a couple) of structures.<br /><br />Making things be "struct something_or_other" makes at least _me_ think <br />more about it than if it's "file_t". Maybe it's just me, but I immediately <br />think "complex structure" when I see "struct", but "file_t" to me mentally <br />says "single word".<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
