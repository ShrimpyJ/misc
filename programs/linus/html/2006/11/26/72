    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/11/25/2">First message in thread</a></li><li><a href="/lkml/2006/11/26/58">Linus Torvalds</a><ul><li><a href="/lkml/2006/11/26/62">Roland Dreier</a><ul><li><a href="/lkml/2006/11/26/67">=?iso-8859-1?Q?J=F6rn?= Engel</a></li><li class="origin"><a href="/lkml/2006/11/26/113">Linus Torvalds</a><ul><li><a href="/lkml/2006/11/26/113">Al Viro</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 26 Nov 2006 14:20:10 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Avoid truncating to 'long' in ALIGN() macro</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 26 Nov 2006, Roland Dreier wrote:<br />&gt;<br />&gt;  &gt; +#define ALIGN(x,a)		__ALIGN_MASK(x,(typeof(x))(a)-1)<br />&gt;  &gt; +#define __ALIGN_MASK(x,mask)	(((x)+(mask))&amp;~(mask))<br />&gt; <br />&gt; Fine by me, but it loses the extra (typeof(x)) cast that Al wanted to<br />&gt; make sure that the result of ALIGN() is not wider than x.<br /><br />Well, since "mask" is now made to be of the same type as "x", every <br />sub-expression actually has the same type, modulo the normal C behaviour <br />of "expand to at least "int".<br /><br />So arguably, the result is _more_ like a normal C operation this way. <br />Type-wise, the "ALIGN()" macro acts like any other C operation (ie if you <br />feed it an "unsigned char", the end result is an "int" due to the normal C <br />type widening that happens for all C operations).<br /><br />But I don't care horribly much. Al may have some other reasons to _not_ <br />want the normal C type expansion to happen (ie maybe he does something <br />unnatural with sparse ;)<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
