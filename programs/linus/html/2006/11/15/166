    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/11/7/345">First message in thread</a></li><li><a href="/lkml/2006/11/14/328">Linus Torvalds</a><ul><li><a href="/lkml/2006/11/15/3">(Eric W. Biederman)</a><ul><li class="origin"><a href="/lkml/2006/11/15/203">Linus Torvalds</a><ul><li><a href="/lkml/2006/11/15/203">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Nov 2006 08:06:13 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Use delayed disable mode of ioapic edge triggered interrupts</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 14 Nov 2006, Eric W. Biederman wrote:<br />&gt; <br />&gt; The big one I did not set it on is the interrupt if it comes in<br />&gt; through ExtInt.  I assume the 8259 is sane but I may be wrong.<br /><br />Yes, ExtInt is ok, i fyou actually mask it at the 8259. As mentioned <br />earlier in the thread, the i8259 has its edge detect logic _after_ the <br />masking logic, so if the irq is still active, and you unmask it, it will <br />see an edge, and re-assert the interrupt in hardware.<br /><br />So the i8259 is a good interrupt controller, and does not need delayed <br />disable and software logic to re-assert the irq.<br /><br />&gt; The truth is in practice I don't think it matters because I don't<br />&gt; think anyone actually disables MSI or hypertransport interrupts.<br /><br />Fair enough, at least for a 2.6.19 kind of release timeframe (and that is <br />what I worry about most, at least right now).<br /><br />&gt; At this point I have two questions.<br />&gt; - What is the easiest path to get us to a stable 2.6.19 where<br />&gt;   everything works?<br /><br />If people don't expect HT and MSI interrupts to be masked (and I can well <br />imagine that), then I think your two-liner patch is good to go. Komuro <br />seems to have acked it already, and in many ways that's the "minimal <br />change" for 2.6.19 right now.<br /><br />I do like Ingo's patch because it seems "safe" (even if I think it might <br />be a bit _overly_ safe), but it changes semantics enough that I don't like <br />it for 2.6.19. Even his second version definitely changes semantics for <br />level-triggered PCI interrupts, even though he fixed ExtInt/i8259 ones.<br /><br />So I think I'll go with your patch for now, and we can re-visit Ingo's <br />thing after 2.6.19.<br /><br />&gt; - What is the sanest thing for long term maintenance, of irqs?<br />&gt; <br />&gt;   genirq is less code to maintain overall (a plus).<br /><br />Oh, I absolutely think genirq is the right thing to do. No question at <br />all. I just think that we might want to refactor the code somewhat, and in <br />particular I suspect that many irq controller drivers should use separate <br />"struct irq_chip" entries for edge and level, because they are <br />fundamentally different.<br /><br />&gt;   My gut feel is that there is room for a lot more cleanup in this<br />&gt;   area but we probably need to stabilize what we have.<br /><br />Exactly. Baby steps. Make it work. Then clean up. Slowly.<br /><br />&gt;   Since you aren't complaining about what the code actually does but<br />&gt;   rather how the interface looks, I have a proposal.  I assert that<br />&gt;   the interface for registering an irq is much to general, and broad.<br />&gt; <br />&gt;   Instead of having:<br />&gt; <br />&gt;   irq_desc[irq].status |= IRQ_DELAYED_DISABLE;<br />&gt;   set_irq_chip_and_handler_name(irq, &amp;ioapic_chip,<br />&gt;                                      handle_edge_irq, "edge");<br />&gt; <br />&gt;   We should have a set of helper functions one for each common type<br />&gt;   of interrupt.<br />&gt; <br />&gt;   set_irq_edge_lossy(irq, &amp;ioapic_chip);<br />&gt;   set_irq_edge(irq, &amp;ioapic_chip);<br />&gt;   set_irq_level(irq, &amp;ioapic_chip);<br /><br />Yeah, that might be a fine way too. That's largely what we do for the IO <br />schedulers, and it's been fairly successful. Start out by setting common <br />defaults, and then allow chip drivers to specify particular details <br />explicitly.<br /><br />Ingo?<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
