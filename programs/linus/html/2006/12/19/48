    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/27">Nick Piggin</a><ul><li><a href="/lkml/2006/12/19/35">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2006/12/19/68">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/68">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/19/72">Peter Zijlstra</a></li></ul></li><li><a href="/lkml/2006/12/19/98">Andrew Morton</a><ul><li><a href="/lkml/2006/12/19/100">Nick Piggin</a></li><li><a href="/lkml/2006/12/19/102">Andrew Morton</a></li><li><a href="/lkml/2006/12/19/106">Peter Zijlstra</a></li><li><a href="/lkml/2006/12/19/107">Nick Piggin</a></li></ul></li><li><a href="/lkml/2006/12/19/173">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/183">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Dec 2006 00:04:40 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 18 Dec 2006, Linus Torvalds wrote:<br />&gt; <br />&gt; The code that doesn't make sense is the "shuffle the dirty bits around" In <br />&gt; other words: when does it actually make sense to call your <br />&gt; (well-implemented, don't get me wrong) "test_clear_page_dirty_sync_ptes()"<br />&gt; function? It doesn't _fix_ anything. It just shuffles dirty bits from one <br />&gt; place to another. What was the point again?<br /><br />Let me try to phrase that another way, in terms that you defined.<br /><br />In other words, look at your test_clear_page_dirty_sync_ptes() function.<br /><br />First, start out from the _inner_ part, the:<br /><br />	if (mapping_cap_account_dirty(mapping)) {<br />		if (page_mkclean(page))<br />			set_page_dirty(page);<br />	}<br /><br />part.<br /><br />This the one that both you and I agree is a "working" situation: we are <br />moving the dirty bits from the pte into the "struct page", and we both <br />agree that this is fine. No dirty bits get lost. You even make a BIG DEAL <br />about the fact that no dirty bits get lost.<br /><br />So begin by just explaining:<br /> - why do it?<br /><br />Why shuffle the dirty bits around? Why not just _leave_ the PG_dirty bit <br />on the "struct page", and simply leave it all at that? I agree that the <br />above doesn't lose any dirty bits, but what I'm asking for is WHAT IS THE <br />POINT?<br /><br />So that is the code that we both agree "works", but I personally don't see <br />the _point_ of. However, that's actually not even important, because I <br />don't even care about the point. I wanted to bring that up just in order <br />to then ignore it, and look at the stuff _around: it, namely the other <br />part in "test_clear_page_dirty_sync_ptes()":<br /><br />	int test_clear_page_dirty_sync_ptes(struct page *page)<br />	{<br />		if (test_clear_page_dirty_leave_ptes(page)) {<br />			.. do the inner part ..<br />			return 1;<br />		}<br />		return 0;<br />	}<br /><br />Now, the above is the OUTER part. Please realize that this DOES actually <br />drop the PG-dirty bit. So ignore the inner part entirely (which is a no-op <br />for the case where the page isn't mapped), and explain to me why it's ok <br />to DROP the dirty bit in the outer part, when you tried to say that it was <br />NOT ok to drop it in the inner part?<br /><br />NOTICE? First you make a BIG DEAL about how dirty bits should never get <br />lost, but THE VERY SAME FUNCTION actually very much on purpose DOES drop <br />the dirty bit for when it's not in the page tables.<br /><br />In fact, if you just call that function twice, the first time it will <br />MOVE the dirty bits from the PTE to the "struct page *", and the _second_ <br />time it will just clear the dirty bit from the "struct page *". You end up <br />with a clean page. It returned the same return value BOTH TIMES, even <br />though it did two very different things (once just moving dirty bits <br />around, and the second time actually _removing_ the dirty bit entirely).<br /><br />Again, I have a very simple claim: I claim that NONE of the <br />"test_clear_page_dirty()" functions make any sense what-so-ever. They're <br />all wrong.<br /><br />The "funny" part is, that the only thing that Andrei reports actually <br />fixed his corruption (apart from the patch tjhat just stops removign the <br />dirty bits from the PTE's _entirely_) is actually the part where he had an <br />"#if 0 .. #endif" around basically _all_ of the "test_clear_page_dirty()" <br />function (ie he had mis-understood what I asked for, and put it outside <br />the _outer_ if(), rather than putting it around the inner one).<br /><br />So I claim:<br /> - there is ONE and only ONE place where you can really drop the dirty <br />   bits: it's when you're going to immediately afterwards do a writeout.<br /><br />   This is the "clear_page_dirty_for_io()"<br /><br /> - all the other "[test_and_]clear_dirty*()" functions seem to be outright <br />   buggy and bogus. Shuffling dirty bits around from the page tables to <br />   the "struct page *" (after having _cleared_ that "very important" <br />   PG_dirty bit just before - apparently it wasn't that important after <br />   all, was it?) is insane.<br /><br />Nobody has actually ever explained why "test_clear_page_dirty()" is good <br />at all.<br /><br /> - Why is it ever used instead of "clear_page_dirty_for_io()"?<br /><br /> - What is the difference?<br /><br /> - Why would you EVER want to clear bits just in the "struct page *" or <br />   just in the PTE's?<br /><br /> - Why is it EVER correct to clear dirty bits except JUST BEFORE THE IO?<br /><br />In other words, I have a theory:<br /><br /> "A lot of this is actually historical cruft. Some of it may even be code <br />  that was never supposed to work, but because we maintained _other_ dirty <br />  bits in the PTE's, and never touched them before, we never even realized <br />  that the code that played with PG_dirty was totally insane"<br /><br />Now, that's just a theory. And yeah, it may be stated a bit provocatively. <br />It may not be entirely correct. I'm just saying.. maybe it is?<br /><br />And yes, we actually really _do_ have a data-point from Andrei that says <br />that if you just make "test_clear_page_dirty()" a no-op, the corruption <br />goes away. It was unintentional, bit hey, it's a real datapoint.<br /><br />See the email from Andrei:<br /><br />	Subject: Re: 2.6.19 file content corruption on ext3<br />	From: Andrei Popa &lt;andrei.popa&#64;i-neo.ro&gt;<br />	Date: Tue, 19 Dec 2006 01:48:11 +0200<br />	Message-Id: &lt;1166485691.6977.6.camel&#64;localhost&gt;<br /><br />and look at what remains of his "test_clear_page_dirty()". <br /><br />Scary, isn't it? And a big hint that "test_clear_page_dirty()" is just <br />totally BOGUS. <br /><br />And the thing is, I think it's bogus just because I don't understand why <br />it would EVER be ok to drop those dirty bits _except_ very much just <br />before doing the IO that makes it non-dirty (where "truncate()" is really <br />a special case where the IO ends up being not done, but it's the same kind <br />of situation).<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
