    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/34">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/19/44">Nick Piggin</a><ul><li class="origin"><a href="/lkml/2006/12/19/85">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/85">Nick Piggin</a><ul><li><a href="/lkml/2006/12/19/172">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2006/12/19/49/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Dec 2006 00:14:54 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Dec 2006, Nick Piggin wrote:<br />&gt; &gt; <br />&gt; &gt; Anyway it has the same issues as the others. See what happens when you<br />&gt; &gt; run two test_clear_page_dirty_sync_ptes() consecutively, you still loose<br />&gt; &gt; PG_dirty even though the page might actually be dirty.<br />&gt; <br />&gt; How can this happen? We'll only test_clear_page_dirty_sync_ptes again<br />&gt; after buffers have been reattached, and subsequently cleaned. And in<br />&gt; that case if the ptes are still clean at this point then the page really<br />&gt; is clean.<br /><br />Why do you talk about buffers being reattached? Are you still in some <br />world where "try_to_free_buffers()" matters? Have you not followed the <br />discussion? Why do you ignore my MUCH SIMPLER patch that just removed all <br />this crap ENTIRELY from "try_to_free_buffers()", and the exact same <br />corruption happened?<br /><br />Forget about "try_to_free_buffers()". Please apply this patch to your tree <br />first. That gets rid of _one_ copy of totally insane code that did all the <br />wrong things.<br /><br />Only after you have applied this patch should you look at the code again. <br />Realizing that the corruption still happens.<br /><br />So forget about buffers already. That piece of code was crap.<br /><br />		Linus<br /><br />---<br />diff --git a/fs/buffer.c b/fs/buffer.c<br />index d1f1b54..263f88e 100644<br />--- a/fs/buffer.c<br />+++ b/fs/buffer.c<br />&#64;&#64; -2834,7 +2834,7 &#64;&#64; int try_to_free_buffers(struct page *page)<br /> 	int ret = 0;<br /> <br /> 	BUG_ON(!PageLocked(page));<br />-	if (PageWriteback(page))<br />+	if (PageDirty(page) || PageWriteback(page))<br /> 		return 0;<br /> <br /> 	if (mapping == NULL) {		/* can this still happen? */<br />&#64;&#64; -2845,22 +2845,6 &#64;&#64; int try_to_free_buffers(struct page *page)<br /> 	spin_lock(&amp;mapping-&gt;private_lock);<br /> 	ret = drop_buffers(page, &amp;buffers_to_free);<br /> 	spin_unlock(&amp;mapping-&gt;private_lock);<br />-	if (ret) {<br />-		/*<br />-		 * If the filesystem writes its buffers by hand (eg ext3)<br />-		 * then we can have clean buffers against a dirty page.  We<br />-		 * clean the page here; otherwise later reattachment of buffers<br />-		 * could encounter a non-uptodate page, which is unresolvable.<br />-		 * This only applies in the rare case where try_to_free_buffers<br />-		 * succeeds but the page is not freed.<br />-		 *<br />-		 * Also, during truncate, discard_buffer will have marked all<br />-		 * the page's buffers clean.  We discover that here and clean<br />-		 * the page also.<br />-		 */<br />-		if (test_clear_page_dirty(page))<br />-			task_io_account_cancelled_write(PAGE_CACHE_SIZE);<br />-	}<br /> out:<br /> 	if (buffers_to_free) {<br /> 		struct buffer_head *bh = buffers_to_free;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
