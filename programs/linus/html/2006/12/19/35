    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/19">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/27">Nick Piggin</a><ul><li class="origin"><a href="/lkml/2006/12/19/48">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/48">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/68">Peter Zijlstra</a></li><li><a href="/lkml/2006/12/19/98">Andrew Morton</a></li><li><a href="/lkml/2006/12/19/173">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2006/12/19/217">dean gaudet</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Dec 2006 23:26:26 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Dec 2006, Nick Piggin wrote:<br />&gt; <br />&gt; I wouldn't have thought it becomes clean by dropping it ;) Is this a<br />&gt; trick question? My answer is that we clean a page by by taking some<br />&gt; action such that the underlying data matches the data in RAM...<br /><br />Sure.<br /><br />&gt; We don't "drop" any data until it has been cleaned (again, ignoring<br />&gt; things like truncate for a minute). That's a bug!<br /><br />Actually, it's the other way around. We have to drop the dirty bits BEFORE <br />cleaning. If we clean first, and _then_ drop the dirty bits, THAT is a <br />bug, because the dirty bits can now refer to _new_ dirty data that didn't <br />get written out.<br /><br />So the proper sequence is _literally_ to mark the page clean FIRST. Drop <br />all the dirty bits, but not the _data_ obviously (ie you have a reference <br />to the page). And _then_ you do the writeout to actually clean the data <br />itself.<br /><br />So you actually state it exactly the wrogn way around.<br /><br />We MUST clear the dirty bits before we do the IO that actually cleans the <br />data. Exactly because if new writes keep on happening, if we do it in the <br />other order, we'll drop dirty data on the floor.<br /><br />&gt; &gt; In no other circumstance do we ever want to clear a dirty bit, as far as I<br />&gt; &gt; can tell. <br />&gt; <br />&gt; Exactly. And that is exactly what try_to_free_buffers is doing now.<br />&gt; <br />&gt; I still think you should have a look at the patch.<br /><br />I claim that dropping dirty bits AFTER the IO is always wrong. <br />Try_to_free_buffers() must never touch the dirty bits at all, because by <br />definition that thing happens after the IO has actually been done.<br /><br />Anbd yes, I looked at your patch. And it looks a million times cleaner <br />than Andrew's patch. However, it's already been tested multiple times, and <br />totally REMOVING the "clear_page_dirty()" from try_to_free_buffers() still <br />resulted in the corruption.<br /><br />That said, I think your patch is worth it just as a cleanup. Much nicer <br />than Andrews code, also from a naming standpoint. So I'm not actually <br />disagreeing about the patch itself, but I _am_ saying that I don't <br />actually see the point of ever moving the dirty bits around.<br /><br />So I repeat: we have the case where we really want to _remove_ the dirty <br />bits (because we're going to write the current state of the page to disk, <br />and we need to clear the dirty bits BEFORE we do that). That's the one <br />that makes sense, and that's the code we want to run before doing IO. It's <br />the "clear_dirty_bits_for_io()" case.<br /><br />The code that doesn't make sense is the "shuffle the dirty bits around" In <br />other words: when does it actually make sense to call your <br />(well-implemented, don't get me wrong) "test_clear_page_dirty_sync_ptes()"<br />function? It doesn't _fix_ anything. It just shuffles dirty bits from one <br />place to another. What was the point again?<br /><br />If the point is "try_to_free_buffers()", then my argument was that I had a <br />much simpler solution: "Just don't do that then". My simple patch sadly <br />didn't fix the data corruption, so the data corruption comes from <br />something ELSE than try_to_free_buffers().<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
