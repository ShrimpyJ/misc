    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/49">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/85">Nick Piggin</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Dec 2006 08:46:53 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Dec 2006, Nick Piggin wrote:<br />&gt; <br />&gt; Now I'm not exactly sure how ext3 (or any other) filesystems make use<br />&gt; of this particular feature of try_to_free_buffers(), but it is clear<br />&gt; from the comments what it is for. So your patch isn't really a minimal<br />&gt; fix (ie. it would require an OK from all filesystems, wouldn't it?)<br />&gt; <br />&gt; Or did I miss a mail where you reasoned that it is safe to make this<br />&gt; change (/me goes to reread the thread)...<br /><br />I'm saying it had _better_ be safe, and no, low-level filesystems don't <br />actually matter.<br /><br />The page has to be cleanable _some_ way. So if we test for "page_dirty()" <br />at the top, and just refuse to do it in try_to_free_pages(), we still know <br />that the _proper_ page cleaning had better clean it. Because ttfp() is <br />never going to clean the page in the general case _anyway_.<br /><br />So I'm really saying:<br /><br /> - the page WILL be cleaned by the real page cleaning action (ie memory <br />   pressure or sync or something else causing us to go through the <br />   bog-standard page-based writeout.<br /><br />   Does anybody dispute this?<br /><br /> - the "ttfp()" hack was a HACK. It was an ugly and nasty hack even when <br />   it was first introduced. It gets doubly worse now that we know we have <br />   something wrong with page cleaning, and it has distracted from the real <br />   problem.<br /><br /> - I removed tha ugly and disgusting hack entirely at first, but Andrew <br />   points out that he really wants to keep the buffers there, because the <br />   buffers being clean actually say something. That, together with the <br />   fact that as long as the page is dirty, the buffers really do end up <br />   have a job to do, made me add a much smaller hack to replace the big <br />   ugly one ("don't even try, if the page is marked dirty").<br /><br /> - so with that thing in place, there isn't even any change in behaviour <br />   wrt the buffers and low-level filesystems. It's just that we make them <br />   a bit harder to get rid of. But arguably that shouldn't actually ever <br />   really _happen_ anyway (because I think it's a BUG if the page is <br />   marked dirty but none of the buffers are), so I think that part is a <br />   non-issue.<br /><br />In other words, ttfp() _never_ had anything to do with "page cleaning". <br />Not originally, not with the horrible hack, and not with my patch. <br /><br />Trying to mix it in just caused a bug that _everybody_ agrees is a bug. <br />It's not the bug we're chasing, but we've got three different patches to <br />fix it (Andrew's, mine and yours), and mine is the simplest one by far <br />especially in the long run, because it just REMOVES the ugly dependency.<br /><br />And yes, I probably care more about "in the long run" than most. To me, a <br />bug is a bug even if it's _just_ a maintenance headache. Andrews patch <br />made things _worse_ ("magic insane flag"), and while yours didn't make the <br />code worse, it still introduced the notion of a totally insane "clean the <br />page but if the PTE's are dirty, do something else" notion.<br /><br />IF THE PAGE TRULY IS CLEAN (and both you and Andrew claim it is, if all <br />buffers are clean - since you mark it clean in the non-mapped case) THEN <br />YOU SHOULD BE ABLE TO CLEAN THE PAGE TABLE BITS TOO.<br /><br />And by claiming that the page table bits are different from PG_dirty, <br />you're just making the issues worse. They shouldn't be. That's what the <br />whole point of Peter's patch was: PG_dirty fundmentally _means_ that the <br />page tables might be dirty too. That was the whole _point_ of doing all <br />this in 2.6.19 in the first place.<br /><br />So if you cannot accept that page table bits should be on "equal footing" <br />with PG_dirty, then you should just say "Let's remove Peter's patch <br />entirely".<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
