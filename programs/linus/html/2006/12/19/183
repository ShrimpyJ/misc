    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/48">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/68">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/19/72">Peter Zijlstra</a></li></ul></li><li><a href="/lkml/2006/12/19/98">Andrew Morton</a><ul><li><a href="/lkml/2006/12/19/100">Nick Piggin</a></li><li><a href="/lkml/2006/12/19/102">Andrew Morton</a></li><li><a href="/lkml/2006/12/19/106">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/19/109">Nick Piggin</a><ul><li><a href="/lkml/2006/12/19/121">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2006/12/19/107">Nick Piggin</a></li></ul></li><li><a href="/lkml/2006/12/19/173">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2006/12/19/200">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/200">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/238">Peter Zijlstra</a></li><li><a href="/lkml/2006/12/20/9">"Jari Sundell"</a></li></ul></li><li><a href="/lkml/2006/12/19/243">Florian Weimer</a></li><li><a href="/lkml/2006/12/21/125">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/21/244">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2006/12/19/183/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Dec 2006 09:43:00 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />Btw,<br /> here's a totally new tangent on this: it's possible that user code is <br />simply BUGGY. <br /><br />There is one case where the kernel actually forcibly writes zeroes into a <br />file: when we're writing a page that straddles the "inode-&gt;i_size" <br />boundary. See the various writepages in fs/buffer.c, they all contain <br />variations on that theme (although most of them aren't as well commented <br />as this snippet):<br /><br />        /*<br />         * The page straddles i_size.  It must be zeroed out on each and every<br />         * writepage invocation because it may be mmapped.  "A file is mapped<br />         * in multiples of the page size.  For a file that is not a multiple of<br />         * the  page size, the remaining memory is zeroed when mapped, and<br />         * writes to that region are not written out to the file."<br />         */<br />        kaddr = kmap_atomic(page, KM_USER0);<br />        memset(kaddr + offset, 0, PAGE_CACHE_SIZE - offset);<br />        flush_dcache_page(page);<br />        kunmap_atomic(kaddr, KM_USER0);<br /><br />Now, this should _matter_ only for user processes that are buggy, and that <br />have written to the page _before_ extending it with ftruncate(). That's <br />definitely a serious bug, but it's one that can do totally undetected <br />depending on when the actual write-out happens.<br /><br />So what I'm saying is that if we end up writing things earlier thanks to <br />the more aggressive dirty-page-management thing in 2.6.19, we might <br />actually just expose a long-time userspace bug that was just a LOT harder <br />to trigger before..<br /><br />I'm not saying this is the cause of all this, but we've been tearing our <br />hair out, and it migth be worthwhile trying this really really really <br />stupid patch that will notice when that happens at truncate() time, and <br />tell the user that he's a total idiot. Or something to that effect.<br /><br />Maybe the reason this is so easy to trigger with rtorrent is not because <br />rtorrent does some magic pattern that triggers a kernel bug, but simply <br />because rtorrent itself might have a bug.<br /><br />Ok, so it's a long shot, but it's still worth testing, I suspect. The <br />patch is very simple: whenever we do an _expanding_ truncate, we check the <br />last page of the _old_ size, and if there were non-zero contents past the <br />old size, we complain.<br /><br />As an attachement is a test-program that _should_ trigger a <br />kernel message like<br /><br />	a.out: BADNESS: truncate check 17000<br /><br />for good measure, just so that you can verify that the patch works and <br />actually catches this case.<br /><br />(The 17000 number is just the one-hundred _invalid_ 0xaa bytes - out of <br />the 200 we wrote - that were summed up: 100*0xaa == 17000. Anything <br />non-zero is always a bug).<br /><br />I doubt this is really it, but it's worth trying. If you fill out a page, <br />and only do "ftruncate()" in response to SIGBUS messages (and don't <br />truncate to whole pages), you could potentially see zeroes at the end of <br />the page exactly because _writeout_ cleared the page for you! So it <br />_could_ explain the symptoms, but only if user-space was horribly horribly <br />broken.<br /><br />		Linus<br /><br />----<br />diff --git a/mm/memory.c b/mm/memory.c<br />index c00bac6..79cecab 100644<br />--- a/mm/memory.c<br />+++ b/mm/memory.c<br />&#64;&#64; -1842,6 +1842,33 &#64;&#64; void unmap_mapping_range(struct address_space *mapping,<br /> }<br /> EXPORT_SYMBOL(unmap_mapping_range);<br /> <br />+static void check_last_page(struct address_space *mapping, loff_t size)<br />+{<br />+	pgoff_t index;<br />+	unsigned int offset;<br />+	struct page *page;<br />+<br />+	if (!mapping)<br />+		return;<br />+	offset = size &amp; ~PAGE_MASK;<br />+	if (!offset)<br />+		return;<br />+	index = size &gt;&gt; PAGE_SHIFT;<br />+	page = find_lock_page(mapping, index);<br />+	if (page) {<br />+		unsigned int check = 0;<br />+		unsigned char *kaddr = kmap_atomic(page, KM_USER0);<br />+		do {<br />+			check += kaddr[offset++];<br />+		} while (offset &lt; PAGE_SIZE);<br />+		kunmap_atomic(kaddr,KM_USER0);<br />+		unlock_page(page);<br />+		page_cache_release(page);<br />+		if (check)<br />+			printk("%s: BADNESS: truncate check %u\n", current-&gt;comm, check);<br />+	}<br />+}<br />+<br /> /**<br />  * vmtruncate - unmap mappings "freed" by truncate() syscall<br />  * &#64;inode: inode of the file used<br />&#64;&#64; -1875,6 +1902,7 &#64;&#64; do_expand:<br /> 		goto out_sig;<br /> 	if (offset &gt; inode-&gt;i_sb-&gt;s_maxbytes)<br /> 		goto out_big;<br />+	check_last_page(mapping, inode-&gt;i_size);<br /> 	i_size_write(inode, offset);<br /> <br /> out_truncate:#include &lt;sys/mman.h&gt;<br />#include &lt;sys/fcntl.h&gt;<br />#include &lt;unistd.h&gt;<br />#include &lt;string.h&gt;<br /><br />int main(int argc, char **argv)<br />{<br />	char *mapping;<br />	int fd;<br /><br />	fd = open("mapfile", O_RDWR | O_TRUNC | O_CREAT, 0666);<br />	if (fd &lt; 0)<br />		return -1;<br />	if (ftruncate(fd, 10) &lt; 0)<br />		return -1;<br />	mapping = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);<br />	if (-1 == (int)(long)mapping)<br />		return -1;<br />	memset(mapping, 0x55, 10);<br />	if (ftruncate(fd, 100) &lt; 0)<br />		return -1;<br />	memset(mapping, 0xaa, 200);<br />	if (ftruncate(fd, 200) &lt; 0)<br />		return -1;<br />	return 0;<br />}<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
