    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/19/173">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/183">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2006/12/19/238">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/19/238">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/19/260">Linus Torvalds</a></li><li><a href="/lkml/2006/12/20/165">Stephen Clark</a></li></ul></li><li><a href="/lkml/2006/12/20/9">"Jari Sundell"</a></li></ul></li><li><a href="/lkml/2006/12/19/243">Florian Weimer</a></li><li><a href="/lkml/2006/12/21/125">Peter Zijlstra</a><ul><li><a href="/lkml/2006/12/21/244">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Dec 2006 10:59:09 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Dec 2006, Linus Torvalds wrote:<br />&gt;<br />&gt;  here's a totally new tangent on this: it's possible that user code is <br />&gt; simply BUGGY. <br /><br />Btw, here's a simpler test-program that actually shows the difference <br />between 2.6.18 and 2.6.19 in action, and why it could explain why a <br />program like rtorrent might show corruption behavious that it didn't show <br />before.<br /><br />	#include &lt;sys/mman.h&gt;<br />	#include &lt;sys/fcntl.h&gt;<br />	#include &lt;unistd.h&gt;<br />	#include &lt;string.h&gt;<br /><br />	int main(int argc, char **argv)<br />	{<br />		char *mapping;<br />		int fd;<br />	<br />		fd = open("mapfile", O_RDWR | O_TRUNC | O_CREAT, 0666);<br />		if (fd &lt; 0)<br />			return -1;<br />		if (ftruncate(fd, 10) &lt; 0)<br />			return -1;<br />		mapping = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);<br />		if (-1 == (int)(long)mapping)<br />			return -1;<br />		memset(mapping, 0xaa, 20);<br />		sync();<br />		if (ftruncate(fd, 40) &lt; 0)<br />			return -1;<br />		memset(mapping + 20, 0x55, 20);<br />		write(1, mapping, 40);<br />		return 0;<br />	}<br /><br />Notice the "sync()" in between the "memset()" and the "ftruncate()". In <br />2.6.18, that would normally do absolutely _nothing_ to the shared memory <br />mapping, becuase we simply couldn't track pages that were dirty in the <br />page tables. <br /><br />So in 2.6.18, if you try this, with<br /><br />	./a.out | od -x<br /><br />you should see something like<br /><br />	0000000 aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa<br />	0000020 aaaa aaaa 5555 5555 5555 5555 5555 5555<br />	0000040 5555 5555 5555 5555<br />	0000050<br /><br />which matches your memset() patterns: 20 bytes of 0xaa, and 20 bytes of <br />0x55.<br /><br />HOWEVER. <br /><br />In 2.6.19, because we actually track dirty data so much better, "sync()" <br />will actually be smart enough to write out the dirty mmap'ed data too. But <br />since the user program has only allocated ten bytes for it in the file, <br />when it is written out, the rest of the page is cleared. When you then <br />write the last 20 bytes (after _properly_ allocating memory for them), you <br />should now see a pattern like<br /><br />	0000000 aaaa aaaa aaaa aaaa aaaa 0000 0000 0000<br />	0000020 0000 0000 5555 5555 5555 5555 5555 5555<br />	0000040 5555 5555 5555 5555<br />	0000050<br /><br />instead: with ten bytes of zero in between, because the data that couldn't <br />be written out was cleared.<br /><br />So 2.6.19 is strictly _better_, but exactly because it's tracking dirty <br />status much more precisely, you'll see certain user-level bugs much more <br />easily.<br /><br />NOTE NOTE NOTE! The code really _was_ buggy in 2.6.18 too, and you _can_ <br />get the zeroes in the middle of the file with an older kernel. But in <br />older kernels, you need to be really really unlucky, and have the page <br />cleaned by strong memory pressure. In 2.6.19, any "sync()" activity <br />(includign from the outside) will clean the page, so a user program with <br />this bug can just be made to trigger the bug much more easily.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
