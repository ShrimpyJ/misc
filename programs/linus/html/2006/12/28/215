    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/28/153">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/155">Petri Kaukasoina</a><ul><li><a href="/lkml/2006/12/28/158">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/160">Dave Jones</a><ul><li><a href="/lkml/2006/12/28/169">Arjan van de Ven</a></li><li><a href="/lkml/2006/12/29/32">maximilian attems</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2006/12/28/191">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/194">Russell King</a></li><li class="origin"><a href="/lkml/2006/12/28/220">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/220">David Miller</a><ul><li><a href="/lkml/2006/12/28/223">Linus Torvalds</a></li><li><a href="/lkml/2006/12/28/244">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2006/12/28/234">Anton Altaparmakov</a><ul><li><a href="/lkml/2006/12/28/232">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2006/12/29/102">Guillaume Chazarain</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Dec 2006 14:37:37 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Ok,<br /> with the ugly trace capture patch, I've actually captured this corruption <br />in action, I think.<br /><br />I did a full trace of all pages involved in one run, and picked one <br />corruption at random:<br /><br />	Chunk 14465 corrupted (0-75)  (01423fb4-01423fff)<br />	Expected 129, got 0<br />	Written as (5126)9509(15017)<br /><br />That's the first 76 bytes of a chunk missing, and it's the last 76 bytes <br />on a page. It's page index 01423 in the mapped file, and bytes fb4-fff <br />within that file.<br /><br />There were four chunks written to that page:<br /><br />	Writing chunk 14463/15800 (15%) (0142344c) (1)<br />	Writing chunk 14462/15800 (30%) (01422e98) (2) (overflows into 00001423)<br />	Writing chunk 14464/15800 (32%) (01423a00) (3)<br />	Writing chunk 14465/15800 (60%) (01423fb4) (4)  &lt;--- LOST!<br /><br />and the other three chunks checked out all right.<br /><br />And here's the annotated trace as it concerns that page:<br /><br /> - here we write the first chunk to the page:<br />	** (1)  do_no_page: mapping index 00001423 at b7d1f44c (write)<br />	**      Setting page 00001423 dirty<br /><br /> - something flushes it out to disk:<br />	**      cpd_for_io: index 00001423<br />	**      cleaning index 00001423 at b7d1f000<br /><br /> - here we write the second chunk (which was split over the previous page <br />   and the interesting one):<br />	** (2)  Setting page 00001422 dirty<br />	** (2)  Setting page 00001423 dirty<br /><br /> - and here we do a cleaning event<br />	**      cpd_for_io: index 00001423<br />	**      cleaning index 00001423 at b7d1f000<br /><br /> - here we write the third chunk:<br />	** (3)  Setting page 00001423 dirty<br /><br /> - here we write the fourth chunk:<br />	** (4) NO DIRTY EVENT<br /><br /> - and a third flush to disk: <br />	**      cpd_for_io: index 00001423<br />	**      cleaning index 00001423 at b7d1f000<br /><br /> - here we unmap and flush:<br />	**      Unmapped index 00001423 at b7d1f000<br />	**      Removing index 00001423 from page cache<br /><br /> - here we remap to check:<br />	**      do_no_page: mapping index 00001423 at b7d1f000 (read)<br />	**      Unmapped index 00001423 at b7d1f000<br /><br /> - and finally, here I remove the file after the run:<br />	**      Removing index 00001423 from page cache<br /><br />Now, the important thing to see here is:<br /><br /> - the missing write did not have a "Setting page 00001423 dirty" event <br />   associated with it.<br /><br /> - but I can _see_ where the actual dirty event would be happening in the <br />   logs, because I can see the dirty events of the other chunk writes <br />   around it, so I know exactly where that fourth write happens. And <br />   indeed, it _shouldn't_ get a dirty event, because the page is still <br />   dirty from the write of chunk #3 to that page, which _did_ get a dirty <br />   event.<br /><br />   I can see that, because the testing app writes the log of the pages it <br />   writes, and this is the log around the fourth and final write:<br /><br />	...<br />        Writing chunk 5338/15800 (60%) (0076eb48)       PFN: 76e/76f<br />        Writing chunk 960/15800 (60%) (00156300)        PFN: 156<br />        Writing chunk 14465/15800 (60%) (01423fb4)  &lt;----<br />        Writing chunk 8594/15800 (60%) (00bf74a8)       PFN: bf7<br />        Writing chunk 556/15800 (60%) (000c62f0)        PFN: c6<br />	Writing chunk 15190/15800 (60%) (01526678)	PFN: 1526<br />	...<br /><br />   and I can match this up with the full log from the kernel, which looks <br />   like this:<br /><br />        Setting page 0000076e dirty<br />        Setting page 0000076f dirty<br />        Setting page 00000156 dirty<br />        Setting page 000000c6 dirty<br />	Setting page 00001526 dirty<br /><br />   so I know exactly where the missing writes (to our page at pfn 1423, <br />   and the fpn-bf7 page) happened.<br /><br /> - and the thing is, I can see a "cpd_for_io()" happening AFTER that <br />   fourth write. Quite a long while after, in fact. So all of this looks <br />   very fine indeed. We are not losing any dirty bits.<br /><br /> - EVEN MORE INTERESTING: write 3 makes it onto disk, and it really uses <br />   the SAME dirty bit as write 4 did (which didn't make it out to disk!). <br />   The event that clears the dirty bit that write 3 did happens AFTER <br />   write 4 has happened!<br /><br />So if we're not losing any dirty bits, what's going on?<br /><br />I think we have some nasty interaction with the buffer heads. In <br />particular, I don't think it's the dirty page bits that are broken (I <br />_see_ that the PageDirty bit was set after write 4 was done to memory in <br />the kernel traces). So I think that a real writeback just doesn't happen, <br />because somebody has marked the buffer heads clean _after_ it started IO <br />on them.<br /><br />I think "__mpage_writepage()" is buggy in this regard, for example. It <br />even has a comment about its crapola behaviour:<br /><br />        /*<br />         * Must try to add the page before marking the buffer clean or<br />         * the confused fail path above (OOM) will be very confused when<br />         * it finds all bh marked clean (i.e. it will not write anything)<br />         */<br /><br />however, I don't think that particular thing explains it, because I don't <br />think we use that function for the cases I'm looking at.<br /><br />Anyway, I'll add tracing for page-writeback setting/cleaning too, in case <br />I might see anything new there..<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
