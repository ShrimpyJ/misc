    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/28/139">Marc Haber</a><ul><li><a href="/lkml/2006/12/28/153">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/155">Petri Kaukasoina</a><ul><li><a href="/lkml/2006/12/28/158">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/160">Dave Jones</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2006/12/28/194">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/194">Russell King</a></li><li><a href="/lkml/2006/12/28/215">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/28/220">David Miller</a></li><li><a href="/lkml/2006/12/28/234">Anton Altaparmakov</a></li></ul></li></ul></li><li><a href="/lkml/2006/12/29/102">Guillaume Chazarain</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2006/12/28/191/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Dec 2006 13:24:30 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.19 file content corruption on ext3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 28 Dec 2006, Linus Torvalds wrote:<br />&gt; <br />&gt; What we need now is actually looking at the source code, and people who <br />&gt; understand the VM, I'm afraid. I'm gathering traces now that I have a good <br />&gt; test-case. I'll post my trace tools once I've tested that they work, in <br />&gt; case others want to help.<br /><br />Ok, I've got the traces, but quite frankly, I doubt anybody is crazy <br />enough to want to trawl through them. It's a bit painful, since we're <br />talking thousands of pages to trigger this problem.<br /><br />Also, I've used the PG_arch_1 flag, which is fine on x86[-64] and probably <br />ARM, but is used for other things on ia64, powerpc and sparc64. But here's <br />the patch in case anybody cares.<br /><br />It wants a _big_ kernel buffer to capture all the crud into (which is why <br />I made the thing accept a bigger log buffer), and quite frankly, I'm not <br />at all sure that all the locking is ok (ie I could imagine that the <br />dcache-locking thing there in "is_interesting()" could deadlock, what do I <br />know..)<br /><br />But I've captured some real data with this, which I'll describe <br />separately.<br /><br />		Linus<br /><br />----<br />diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h<br />index 350878a..967dd80 100644<br />--- a/include/linux/page-flags.h<br />+++ b/include/linux/page-flags.h<br />&#64;&#64; -91,6 +91,8 &#64;&#64;<br /> #define PG_nosave_free		18	/* Used for system suspend/resume */<br /> #define PG_buddy		19	/* Page is free, on buddy lists */<br /> <br />+#define SetPageInteresting(page) set_bit(PG_arch_1, &amp;(page)-&gt;flags)<br />+#define PageInteresting(page)	test_bit(PG_arch_1, &amp;(page)-&gt;flags)<br /> <br /> #if (BITS_PER_LONG &gt; 32)<br /> /*<br />diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug<br />index 5c26818..7735b83 100644<br />--- a/lib/Kconfig.debug<br />+++ b/lib/Kconfig.debug<br />&#64;&#64; -79,7 +79,7 &#64;&#64; config DEBUG_KERNEL<br /> <br /> config LOG_BUF_SHIFT<br /> 	int "Kernel log buffer size (16 =&gt; 64KB, 17 =&gt; 128KB)" if DEBUG_KERNEL<br />-	range 12 21<br />+	range 12 24<br /> 	default 17 if S390 || LOCKDEP<br /> 	default 16 if X86_NUMAQ || IA64<br /> 	default 15 if SMP<br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index 8332c77..d6a0f56 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -116,6 +116,7 &#64;&#64; void __remove_from_page_cache(struct page *page)<br /> {<br /> 	struct address_space *mapping = page-&gt;mapping;<br /> <br />+if (PageInteresting(page)) printk("Removing index %08x from page cache\n", page-&gt;index);<br /> 	radix_tree_delete(&amp;mapping-&gt;page_tree, page-&gt;index);<br /> 	page-&gt;mapping = NULL;<br /> 	mapping-&gt;nrpages--;<br />&#64;&#64; -421,6 +422,23 &#64;&#64; int filemap_write_and_wait_range(struct address_space *mapping,<br /> 	return err;<br /> }<br /> <br />+static noinline int is_interesting(struct address_space *mapping)<br />+{<br />+	struct inode *inode = mapping-&gt;host;<br />+	struct dentry *dentry;<br />+	int retval = 0;<br />+<br />+	spin_lock(&amp;dcache_lock);<br />+	list_for_each_entry(dentry, &amp;inode-&gt;i_dentry, d_alias) {<br />+		if (strcmp(dentry-&gt;d_name.name, "mapfile"))<br />+			continue;<br />+		retval = 1;<br />+		break;<br />+	}<br />+	spin_unlock(&amp;dcache_lock);<br />+	return retval;<br />+}<br />+<br /> /**<br />  * add_to_page_cache - add newly allocated pagecache pages<br />  * &#64;page:	page to add<br />&#64;&#64; -439,6 +457,9 &#64;&#64; int add_to_page_cache(struct page *page, struct address_space *mapping,<br /> {<br /> 	int error = radix_tree_preload(gfp_mask &amp; ~__GFP_HIGHMEM);<br /> <br />+	if (is_interesting(mapping))<br />+		SetPageInteresting(page);<br />+<br /> 	if (error == 0) {<br /> 		write_lock_irq(&amp;mapping-&gt;tree_lock);<br /> 		error = radix_tree_insert(&amp;mapping-&gt;page_tree, offset, page);<br />diff --git a/mm/memory.c b/mm/memory.c<br />index 563792f..14c9815 100644<br />--- a/mm/memory.c<br />+++ b/mm/memory.c<br />&#64;&#64; -667,6 +667,8 &#64;&#64; static unsigned long zap_pte_range(struct mmu_gather *tlb,<br /> 			tlb_remove_tlb_entry(tlb, pte, addr);<br /> 			if (unlikely(!page))<br /> 				continue;<br />+if (PageInteresting(page))<br />+	printk("Unmapped index %08x at %08x\n", page-&gt;index, addr);<br /> 			if (unlikely(details) &amp;&amp; details-&gt;nonlinear_vma<br /> 			    &amp;&amp; linear_page_index(details-&gt;nonlinear_vma,<br /> 						addr) != page-&gt;index)<br />&#64;&#64; -1605,6 +1607,7 &#64;&#64; gotten:<br /> 		 */<br /> 		ptep_clear_flush(vma, address, page_table);<br /> 		set_pte_at(mm, address, page_table, entry);<br />+if (PageInteresting(new_page)) printk("do_wp_page: mapping index %08x at %08lx\n", new_page-&gt;index, address);<br /> 		update_mmu_cache(vma, address, entry);<br /> 		lru_cache_add_active(new_page);<br /> 		page_add_new_anon_rmap(new_page, vma, address);<br />&#64;&#64; -2249,6 +2252,7 &#64;&#64; retry:<br /> 		entry = mk_pte(new_page, vma-&gt;vm_page_prot);<br /> 		if (write_access)<br /> 			entry = maybe_mkwrite(pte_mkdirty(entry), vma);<br />+if (PageInteresting(new_page)) printk("do_no_page: mapping index %08x at %08lx (%s)\n", new_page-&gt;index, address, write_access ? "write" : "read");<br /> 		set_pte_at(mm, address, page_table, entry);<br /> 		if (anon) {<br /> 			inc_mm_counter(mm, anon_rss);<br />diff --git a/mm/page-writeback.c b/mm/page-writeback.c<br />index b3a198c..0466601 100644<br />--- a/mm/page-writeback.c<br />+++ b/mm/page-writeback.c<br />&#64;&#64; -813,6 +813,7 &#64;&#64; int fastcall set_page_dirty(struct page *page)<br /> 		if (!spd)<br /> 			spd = __set_page_dirty_buffers;<br /> #endif<br />+if (PageInteresting(page)) printk("Setting page %08x dirty\n", page-&gt;index);<br /> 		return (*spd)(page);<br /> 	}<br /> 	if (!PageDirty(page)) {<br />&#64;&#64; -867,6 +868,7 &#64;&#64; int clear_page_dirty_for_io(struct page *page)<br /> <br /> 	if (TestClearPageDirty(page)) {<br /> 		if (mapping_cap_account_dirty(mapping)) {<br />+if (PageInteresting(page)) printk("cpd_for_io: index %08x\n", page-&gt;index);<br /> 			page_mkclean(page);<br /> 			dec_zone_page_state(page, NR_FILE_DIRTY);<br /> 		}<br />diff --git a/mm/rmap.c b/mm/rmap.c<br />index 57306fa..e98e84c 100644<br />--- a/mm/rmap.c<br />+++ b/mm/rmap.c<br />&#64;&#64; -448,6 +448,7 &#64;&#64; static int page_mkclean_one(struct page *page, struct vm_area_struct *vma)<br /> 	if (pte_dirty(*pte) || pte_write(*pte)) {<br /> 		pte_t entry;<br /> <br />+if (PageInteresting(page)) printk("cleaning index %08x at %08x\n", page-&gt;index, address);<br /> 		flush_cache_page(vma, address, pte_pfn(*pte));<br /> 		entry = ptep_clear_flush(vma, address, pte);<br /> 		entry = pte_wrprotect(entry);<br />&#64;&#64; -637,6 +638,7 &#64;&#64; static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,<br /> 		goto out_unmap;<br /> 	}<br /> <br />+if (PageInteresting(page)) printk("unmapping index %08x from %08lx\n", page-&gt;index, address);<br /> 	/* Nuke the page table entry. */<br /> 	flush_cache_page(vma, address, page_to_pfn(page));<br /> 	pteval = ptep_clear_flush(vma, address, pte);<br />&#64;&#64; -767,6 +769,7 &#64;&#64; static void try_to_unmap_cluster(unsigned long cursor,<br /> 		if (ptep_clear_flush_young(vma, address, pte))<br /> 			continue;<br /> <br />+if (PageInteresting(page)) printk("Cluster-unmapping %08x from %08lx\n", page-&gt;index, address);<br /> 		/* Nuke the page table entry. */<br /> 		flush_cache_page(vma, address, pte_pfn(*pte));<br /> 		pteval = ptep_clear_flush(vma, address, pte);<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
