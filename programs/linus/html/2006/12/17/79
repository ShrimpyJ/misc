    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/105">First message in thread</a></li><li><a href="/lkml/2006/12/16/139">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/16/165">Ricardo Galli</a><ul><li><a href="/lkml/2006/12/16/176">Theodore Tso</a></li></ul></li><li><a href="/lkml/2006/12/17/51">Alexandre Oliva</a><ul><li><a href="/lkml/2006/12/17/68">Ricardo Galli</a></li><li><a href="/lkml/2006/12/17/72">Kyle Moffett</a><ul><li><a href="/lkml/2006/12/17/107">"David Schwartz"</a><ul><li><a href="/lkml/2006/12/17/111">"D. Hazelton"</a></li></ul></li><li><a href="/lkml/2006/12/18/179">Alexandre Oliva</a><ul><li><a href="/lkml/2006/12/18/227">Christoph Hellwig</a></li><li><a href="/lkml/2006/12/18/301">"D. Hazelton"</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2006/12/17/115">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/17/115">Paul Mackerras</a><ul><li><a href="/lkml/2006/12/18/8">Junio C Hamano</a></li></ul></li><li><a href="/lkml/2006/12/18/122">"Dave Neuer"</a><ul><li><a href="/lkml/2006/12/18/146">Theodore Tso</a></li></ul></li><li><a href="/lkml/2006/12/18/177">Alexandre Oliva</a><ul><li><a href="/lkml/2006/12/18/181">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Dec 2006 09:59:51 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: GPL only modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 17 Dec 2006, Alexandre Oliva wrote:<br /><br />&gt; On Dec 16, 2006, Linus Torvalds &lt;torvalds&#64;osdl.org&gt; wrote:<br />&gt; &gt; <br />&gt; &gt; The whole reason the LGPL exists is that people realized that if they <br />&gt; &gt; don't do something like that, the GPL would have been tried in court, and <br />&gt; &gt; the FSF's position that anything that touches GPL'd code would probably <br />&gt; &gt; have been shown to be bogus.<br />&gt; <br />&gt; Or that people would feel uncomfortable about the gray area and avoid<br />&gt; using the GPLed code in cases in which this would be perfectly legal<br />&gt; and advantageous to Free Software. <br /><br />I agree. A lot of it is about "comfort". But you can _easily_ handle that <br />comfort level in other ways.<br /><br />For example, many programs already do have clarifications that certain <br />uses do not introduce any GPL dependency what-so-ever. The kernel COPYING <br />makes it clear that user space is not a derived work of the kernel, for <br />example. You don't actually need to use a different license for this case: <br />if all you're looking for is "comfort", then you really can comfort people <br />other ways.<br /><br />For example, glibc could easily have just come out and said the thing that <br />is obvious to any sane person: "using this library as just a standard <br />library does not make your program a derived work". <br /><br />There really wassn't much need for the LGPL, I think. <br /><br />&gt; There are many factors involved and you're oversimplifying the issue.<br /><br />Sure. It's never clear-cut. It's never black and white. <br /><br />&gt; Some claim that, in the case of static linking, since there part of<br />&gt; the library copied to the binary, it is definitely a case of derived<br />&gt; work.<br /><br />No, the sane way to think about it is that linking just creates an <br />"aggregate" work. It's no less "aggregate" than creating a CD-ROM that <br />contains the library and some random program: you "link" them together <br />with "mkisofs".<br /><br />Why do people think that using "ln" is _any_ different from using <br />"mkisofs". Both create one file that contains multiple pieces. What's the <br />difference - really?<br /><br />Of course, the _aggregate_ still needs permission from all the copyright <br />holders in order to be distributed, that goes without saying. But the <br />GPLv2 clearly allows aggregation.<br /><br />And don't get me wrong: I do not say that "linking" _never_ creates <br />derived works. I'm just saying that "linking" is just a technical step, <br />and as such is not the answer to whether something is derived or not. <br />Things can be derived works of each other _without_ being linked, and they <br />may not be derived works even if they _are_ linked.<br /><br />So "linking" basically has very little to do with "derived" per se.<br /><br />Linking does have one thing that it implies: it's maybe a bit "closer" <br />relationship between the parts than "mkisofs" implies. So there is <br />definitely a higher _correlation_ between "derived work" and "linking", <br />but it's really a correlation, not a causal relationship.<br /><br />For example, if you link two object files together where neither is a <br />"library" with standard interfaces, then the result is most likely a <br />derived work from both. But it wasn't the "act of linking" that caused <br />that to happen, but simply the fact that they were part of a bigger whole, <br />and were meaningless apart from each other.<br /><br />Think of this in the sense of a book. Does binding pages together create a <br />"derived work"? Not always: you can have anthologies (which are <br />*aggregations* of works with *independent* copyright), and the binding of <br />pages together didn't really do anything to the independent pieces. But <br />clearly, if you're talking about individual pages in one story, then each <br />individual page is not an independent work in itself.<br /><br />Linking is the same way. Are the two pieces you link "independent works" <br />on their own? If so, the end result is really just an aggregate, no <br />different from using "mkisofs". They are still clearly separable: you <br />could have built either piece AGAINST SOMETHING ELSE.<br /><br />&gt; Some then take this notion that linking creates derived works and<br />&gt; further extend the claim that using dynamic linking is just a trick to<br />&gt; avoid making the binary a derived work, and thus it shouldn't be taken<br />&gt; into account, even if there still is *some* information from the<br />&gt; dynamic library that affects the linked binary.<br /><br />See how this whole "trick" discussion becomes a totally moot point once <br />you realize that "mkisofs" and "ld" aren't really all that different.<br /><br />Does "mkisofs" create a derived work, or an aggregate? Does "ld" create a <br />derived work or an aggregate? The answer in BOTH cases is the same: it's <br />not about the name of the command, or some technical detail about how the <br />pieces are bound together. Copyright law doesn't concern itself with <br />"mkisofs" vs "ld". It would be totally INSANE if it did, wouldn't you say?<br /><br />So if it isn't about "mkisofs" vs "ld", then _what_ is it about?<br /><br />I gave you one answer above. Feel free to make your own judgements. I'm <br />just saying that anybody who thinks that copyright law cares about <br />"mkisofs" vs "ld" is just obviously misguided.<br /><br />So I think the "dynamic vs static" linking argument is a red herring. It <br />_is_ meaningful in two ways:<br /><br /> - static linking obviously means that even at a MINIMUM, the result will <br />   _contain_ both things, so at a minimum, you do need the permission to <br />   distribute the pieces as parts of an aggregate work.<br /><br />   In contrast,  in dynamic linking, since you're not _actually_ <br />   distributing the thing you linked against, you don't need to have the <br />   license to distribute it as an aggregate work.<br /><br />   This particular thing is a non-issue wrt the GPLv2, since you always <br />   have the right to do distribution of aggregates, but it does come up in <br />   some OTHER licenses.<br /><br /> - you can (quite validly, in my opinion) argue that dynamic linking is a <br />   sign of separation, and as such if you're able to do dynamic linking <br />   against an unmodified second work, you have a much stronger argument <br />   that they really can be seen as two independent works. But notice how <br />   this was not a technical argument about the _linking_ per se: this <br />   comes back to a much more important (and much more fundamental) issue <br />   of whether things are independent (and being independent is certainly <br />   one _requirement_ for them not being derived works)<br /><br />   In other words: the _ability_ to do dynamic linking is certainly <br />   meaningful, not because of the linking itself, but because of what it <br />   implies from a perspective of "independence".<br /><br />So to get back to the example of glibc: if a program _could_ have been <br />linked against some other library, then that pretty clearly shows that <br />it's really independent of glibc, and the linking is "mere aggregation" <br />exactly the same way "mkisofs" is generally considered "mere aggregation".<br /><br />And that is actually true whether you link dynamically or statically. <br />Since the GPLv2 allows aggregation, I think you can very much argue in <br />front of a judge that you could have linked statically against even a <br />GPL'd glibc.<br /><br />But notice how the thing changes if you talk about a specialized library <br />like libqt - and notice how it again doesn't really matter whether you do <br />dynamic or static linking. Libqt is still a work in its own right, but <br />what about the program that links _to_ it? You can't generally really <br />claim that it could equally well have been built against some other <br />library, so now that program - whether linked dynamically or statically - <br />obviously cannot stand on its own independently of libqt.<br /><br />As a result, something that links against libqt is very different from <br />something that links against glibc. <br /><br />But note how it wasn't "static" vs "dynamic" that mattered AT ALL. What <br />mattered was whether they had independent lives.<br /><br />And finally, in case it's not clear: I'm not a lawyer, and I don't play <br />one on TV, and if I did, I'd be better looking and wouldn't spend my time <br />on some technical discussion forum. So I'm not claiming that my viewpoint <br />is "Right(tm)".<br /><br />But I _am_ claiming that it makes a hell of a lot more sense as a <br />viewpoint than the "linking is magic" argument does.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
