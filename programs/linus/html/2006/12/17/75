    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/17/20">First message in thread</a></li><li><a href="/lkml/2006/12/17/20">Al Viro</a><ul><li class="origin"><a href="/lkml/2006/12/17/77">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/17/77">Evgeniy Polyakov</a><ul><li><a href="/lkml/2006/12/17/82">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/18/30">Evgeniy Polyakov</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2006/12/17/75/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Dec 2006 09:24:30 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] fallout from atomic_long_t patch</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 17 Dec 2006, Al Viro wrote:<br />&gt; -			if (likely(!test_bit(WORK_STRUCT_PENDING,<br />&gt; -					     &amp;__cbq-&gt;work.work.management) &amp;&amp;<br />&gt; +			if (likely(!work_pending(&amp;__cbq-&gt;work.work) &amp;&amp;<br /><br />That should properly be<br /><br />	if (likely(!delayed_work_pending(&amp;__cbq-&gt;work) &amp;&amp; ...<br /><br />and why the heck was it doing that open-coded int he first place?<br /><br />HOWEVER, looking even more, why is that thing a "delayed work" at all? All <br />the queuing seems to happen with a timeout of zero..<br /><br />So I _think_ that the proper patch is actually the following, but somebody <br />who knows and uses the connector thing should double-check. Please?<br /><br />			Linus<br />---<br />diff --git a/drivers/connector/cn_queue.c b/drivers/connector/cn_queue.c<br />index b418b16..296f510 100644<br />--- a/drivers/connector/cn_queue.c<br />+++ b/drivers/connector/cn_queue.c<br />&#64;&#64; -34,7 +34,7 &#64;&#64;<br /> void cn_queue_wrapper(struct work_struct *work)<br /> {<br /> 	struct cn_callback_entry *cbq =<br />-		container_of(work, struct cn_callback_entry, work.work);<br />+		container_of(work, struct cn_callback_entry, work);<br /> 	struct cn_callback_data *d = &amp;cbq-&gt;data;<br /> <br /> 	d-&gt;callback(d-&gt;callback_priv);<br />&#64;&#64; -59,13 +59,12 &#64;&#64; static struct cn_callback_entry *cn_queue_alloc_callback_entry(char *name, struc<br /> 	memcpy(&amp;cbq-&gt;id.id, id, sizeof(struct cb_id));<br /> 	cbq-&gt;data.callback = callback;<br /> 	<br />-	INIT_DELAYED_WORK(&amp;cbq-&gt;work, &amp;cn_queue_wrapper);<br />+	INIT_WORK(&amp;cbq-&gt;work, &amp;cn_queue_wrapper);<br /> 	return cbq;<br /> }<br /> <br /> static void cn_queue_free_callback(struct cn_callback_entry *cbq)<br /> {<br />-	cancel_delayed_work(&amp;cbq-&gt;work);<br /> 	flush_workqueue(cbq-&gt;pdev-&gt;cn_queue);<br /> <br /> 	kfree(cbq);<br />diff --git a/drivers/connector/connector.c b/drivers/connector/connector.c<br />index 5e7cd45..416de8c 100644<br />--- a/drivers/connector/connector.c<br />+++ b/drivers/connector/connector.c<br />&#64;&#64; -135,17 +135,16 &#64;&#64; static int cn_call_callback(struct cn_msg *msg, void (*destruct_data)(void *), v<br /> 	spin_lock_bh(&amp;dev-&gt;cbdev-&gt;queue_lock);<br /> 	list_for_each_entry(__cbq, &amp;dev-&gt;cbdev-&gt;queue_list, callback_entry) {<br /> 		if (cn_cb_equal(&amp;__cbq-&gt;id.id, &amp;msg-&gt;id)) {<br />-			if (likely(!test_bit(WORK_STRUCT_PENDING,<br />-					     &amp;__cbq-&gt;work.work.management) &amp;&amp;<br />+			if (likely(!work_pending(&amp;__cbq-&gt;work) &amp;&amp;<br /> 					__cbq-&gt;data.ddata == NULL)) {<br /> 				__cbq-&gt;data.callback_priv = msg;<br /> <br /> 				__cbq-&gt;data.ddata = data;<br /> 				__cbq-&gt;data.destruct_data = destruct_data;<br /> <br />-				if (queue_delayed_work(<br />+				if (queue_work(<br /> 					    dev-&gt;cbdev-&gt;cn_queue,<br />-					    &amp;__cbq-&gt;work, 0))<br />+					    &amp;__cbq-&gt;work))<br /> 					err = 0;<br /> 			} else {<br /> 				struct cn_callback_data *d;<br />&#64;&#64; -159,12 +158,12 &#64;&#64; static int cn_call_callback(struct cn_msg *msg, void (*destruct_data)(void *), v<br /> 					d-&gt;destruct_data = destruct_data;<br /> 					d-&gt;free = __cbq;<br /> <br />-					INIT_DELAYED_WORK(&amp;__cbq-&gt;work,<br />+					INIT_WORK(&amp;__cbq-&gt;work,<br /> 							  &amp;cn_queue_wrapper);<br /> 					<br />-					if (queue_delayed_work(<br />+					if (queue_work(<br /> 						    dev-&gt;cbdev-&gt;cn_queue,<br />-						    &amp;__cbq-&gt;work, 0))<br />+						    &amp;__cbq-&gt;work))<br /> 						err = 0;<br /> 					else {<br /> 						kfree(__cbq);<br />diff --git a/include/linux/connector.h b/include/linux/connector.h<br />index 3ea1cd5..10eb56b 100644<br />--- a/include/linux/connector.h<br />+++ b/include/linux/connector.h<br />&#64;&#64; -133,7 +133,7 &#64;&#64; struct cn_callback_data {<br /> struct cn_callback_entry {<br /> 	struct list_head callback_entry;<br /> 	struct cn_callback *cb;<br />-	struct delayed_work work;<br />+	struct work_struct work;<br /> 	struct cn_queue_dev *pdev;<br /> <br /> 	struct cn_callback_id id;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
