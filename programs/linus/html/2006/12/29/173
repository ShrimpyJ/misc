    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/29/154">Theodore Tso</a><ul><li><a href="/lkml/2006/12/29/165">Linus Torvalds</a></li><li><a href="/lkml/2006/12/29/168">Andrew Morton</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Dec 2006 16:50:39 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Ok, explained.. (was Re: [PATCH] mm: fix page_mkclean_one)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Dec 2006, Andrew Morton wrote:<br />&gt; <br />&gt; Adam Richter spent considerable time a few years ago trying to make the<br />&gt; mpage code go direct-to-BIO in all cases and we eventually gave up.  The<br />&gt; conceptual layering of page&lt;-&gt;blocks&lt;-&gt;bio is pretty clean, and it is hard<br />&gt; and ugly to fully optimise away the "block" bit in the middle.<br /><br />Using the buffer cache as a translation layer to the physical address is <br />fine. That's what _any_ block device will do.<br /><br />I'm not at all sayign that "buffer heads must go away". They work fine.<br /><br />What I'm saying is that<br /><br /> - if you index by buffer heads, you're screwed.<br /> - if you do IO by starting at buffer heads, you're screwed.<br /><br />Both indexing and writeback decisions should be done at the page cache <br />layer. Then, when you actually need to do IO, you look at the buffers. But <br />you start from the "page". YOU SHOULD NEVER LOOK UP a buffer on its own <br />merits, and YOU SHOULD NEVER DO IO on a buffer head on its own cognizance.<br /><br />So by all means keep the buffer heads as a way to keep the <br />"virtual-&gt;physical" translation. It's what they were designed for. But <br />they were _originally_ also designed for "lookup" and "driving the start <br />of IO", and that is wrong, and has been wrong for a long time now, because<br /><br /> - lookup based on physical address is fundamentally slow and inefficient. <br />   You have to look up the virtual-&gt;physical translation somewhere else, <br />   so it's by design an unnecessary indirection _and_ that "somewere <br />   else" is also by definition filesystem-specific, so you can't do any <br />   of these things at the VFS layer.<br /><br />   Ergo: anything that needs to look up the physical address in order to <br />   find the buffer head is BROKEN in this day and age. We look up the <br />   _virtual_ page cache page, and then we can trivially find the buffer <br />   heads within that page thanks to page-&gt;buffers.<br /><br />   Example: ext2 vs ext3 readdir. One of them sucks, the other doesn't. <br /><br /> - starting IO based on the physical entity is insane. It's insane exactly <br />   _because_ the VM doesn't actually think in physical addresses, or in <br />   buffer-sized blocks. The VM only really knows about whole pages, and <br />   all the VM decisions fundamentally have to be page-based. We don't ever <br />   "free a buffer". We free a whole page, and as such, doing writeback <br />   based on buffers is pointless, because it doesn't actually say anything <br />   about the "page state" which is what the VM tracks.<br /><br />But neither of these means that "buffer_head" itself has to go away. They <br />both really boil down to the same thing: you should never KEY things by <br />the buffer head. All actions should be based on virtual indexes as far as <br />at all humanly possible.<br /><br />Once you do lookup and locking and writeback _starting_ from the page, <br />it's then easy to look up the actual buffer head within the page, and use <br />that as a way to do the actual _IO_ on the physical address. So the buffer <br />heads still exist in ext2, for example, but they don't drive the show <br />quite as much.<br /><br />(They still do in some areas: the allocation bitmaps, the xattr code etc. <br />But as long as none of those have big VM footprints, and as long as no <br />_common_ operations really care deeply, and as long as those data <br />structures never need to be touched by the VM or VFS layer, nobody will <br />ever really care).<br /><br />The directory case comes up just because "readdir()" actually is very <br />common, and sometimes very slow. And it can have a big VM working set <br />footprint ("find"), so trying to be page-based actually really helps, <br />because it all drives things like writeback on the _right_ issues, and we <br />can do things like LRU's and writeback decisions on the level that really <br />matters.<br /><br />I actually suspect that the inode tables could benefit from being in the <br />page cache too (although I think that the inode buffer address is actually <br />"physical", so there's no indirection for inode tables, which means that <br />the virtual vs physical addressing doesn't matter). For directories, there <br />definitely is a big cost to continually doing the virtual-&gt;physical <br />translation all the time.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
