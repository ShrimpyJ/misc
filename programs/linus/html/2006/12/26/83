    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/12/16/164">First message in thread</a></li><li><a href="/lkml/2006/12/24/58">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/24/73">"Gordon Farquharson"</a></li><li><a href="/lkml/2006/12/26/16">Nick Piggin</a><ul><li class="origin"><a href="/lkml/2006/12/27/36">Linus Torvalds</a><ul><li><a href="/lkml/2006/12/27/36">"Jari Sundell"</a></li><li><a href="/lkml/2006/12/27/38">	valdyn&#64;gmail ...</a><ul><li><a href="/lkml/2006/12/27/43">"Jari Sundell"</a></li></ul></li><li><a href="/lkml/2007/1/6/177">"Tom Lanyon"</a><ul><li><a href="/lkml/2007/1/7/5">"Tom Lanyon"</a></li><li><a href="/lkml/2007/1/7/6">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Dec 2006 11:26:50 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm: fix page_mkclean_one (was: 2.6.19 file content corruption on ext3)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 26 Dec 2006, Nick Piggin wrote:<br /><br />&gt; Linus Torvalds wrote:<br />&gt; &gt; <br />&gt; &gt; Ok, so how about this diff.<br />&gt; &gt; <br />&gt; &gt; I'm actually feeling good about this one. It really looks like<br />&gt; &gt; "do_no_page()" was simply buggy, and that this explains everything.<br />&gt; <br />&gt; Still trying to catch up here, so I'm not going to reply to any old<br />&gt; stuff and just start at the tip of the thread... Other than to say<br />&gt; that I really like cancel_page_dirty ;)<br /><br />Yeah, I think that part is a bit clearer about what's going on now.<br /><br />&gt; I think your patch is quite right so that's a good catch.<br /><br />Actually, since people told me it didn't matter, I went back and looked at <br />_why_ - the thing is, "vma-&gt;vm_page_prot" should always be read-only <br />anyway, except for mappings that don't do dirty accounting at all, so I <br />think my patch only found cases that are unimportant (ie pages that get <br />faulted on on filesystems like ramfs that doesn't do any dirty page <br />accounting because they're all dirty anyway).<br /><br />&gt; But I'm not too surprised that it does not help the problem, because I <br />&gt; don't think we have started shedding any old pte_dirty tests at <br />&gt; unmap/reclaim-time, have we? So the dirty bit isn't going to get lost, <br />&gt; as such.<br /><br />True. We should no longer _need_ those dirty bit reclaims at <br />unmap/reclaim, but we still do them, so you're right, even if we were <br />buggy in this area, it should only really matter for the dirty page <br />counting, not for any lost data.<br /><br />&gt; I was hoping that you've almost narrowed it down to the filesystem<br />&gt; writeback code, with the last few mails?<br /><br />I think so, yes.<br /><br />However, I've checked, and "rtorrent" really does seem to be fairly <br />well-behaved wrt any filesystem activity. It does<br /><br /> - no threading. It's 100% single-threaded, and doesn't even appear to use <br />   signals.<br /><br /> - exactly _one_ "ftruncate()", and it does it at the beginning, for the <br />   full final size.<br /><br />   IOW, it's not anything subtle with truncate and dirty page cancel.<br /><br /> - It never uses mprotect on the shared mappings, but it _does_ do:<br />	"mincore()" - but the return values don't much matter (it's used <br />	              as a heuristic on which parts to hash, apparently)<br /><br />		      I double- and triple-checked this one, because I<br />		      did make changes to "mincore()", but those didn't go <br />		      into the affected kernels anyway (ie they are not in <br />		      plain 2.6.19, nor in 2.6.18.3 either)<br /><br />	"madvise(MADV_WILLNEED)"<br />	"msync(MS_ASYNC)" (or MS_SYNC if you use a command line flag)<br />	"munmap()" of course<br /><br /> - it never seems to mix mmap() and write() - it does _only_ mmap.<br /><br /> - it seems to mmap/munmap the shared files in nice 64-page chunks, all <br />   64-page aligned in the file (ie it does NOT create one big mapping, it <br />   has some kind of LRU of thse 64-page chunks). The only exception being <br />   the last chunk, which it maps byte-accurate to the size.<br /><br /> - I haven't checked whether it only ever has the same chunk mapped once <br />   at a time.<br /><br />Anyway, the _one_ half-way interesting thing is the fact that it doesn't <br />allocate any backing store at all for the file, and as such the page <br />writeback needs to create all the underlying buffers on the filesystem. I <br />really don't see why that would be a problem either, but I could imagine <br />that if we have some writeback bug where we can end up writing back the <br />_same_ page concurrently, we'd actually end up racing in the kernel, and <br />allocating two different backing stores, and then maybe the other one <br />would effectively "get lost" (and the earlier writeback would win the <br />race, explaining why we'd end up with zeroes at the end of a block).<br /><br />Or something.<br /><br />However, all the codepaths _seem_ to test for PG_writeback, and not even <br />try to start another writeback while the first one is still active.<br /><br />What would also actually be interesting is whether somebody can reproduce <br />this on Reiserfs, for example. I _think_ all the reports I've seen are on <br />ext2 or ext3, and if this is somehow writeback-related, it could be some <br />bug that is just shared between the two by virtue of them still having a <br />lot of stuff in common. <br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
