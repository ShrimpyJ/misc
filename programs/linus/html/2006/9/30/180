    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/9/30/147">First message in thread</a></li><li><a href="/lkml/2006/9/30/172">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/30/176">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2006/9/30/183">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/30/183">Ingo Molnar</a></li><li><a href="/lkml/2006/9/30/190">Andi Kleen</a><ul><li><a href="/lkml/2006/9/30/198">Andi Kleen</a></li><li><a href="/lkml/2006/9/30/216">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2006/10/4/75">"Jan Beulich"</a><ul><li><a href="/lkml/2006/10/4/168">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Sep 2006 14:11:06 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BUG-lockdep and freeze (was: Arrr! Linux 2.6.18)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 30 Sep 2006, Ingo Molnar wrote:<br />&gt; <br />&gt; (i'd have been happy with an %rbp based unwinder for x86_64, in fact i <br />&gt; implemented it for lockdep and used it for some time on x86_64, but Andi <br />&gt; wanted a dwarf-based, lower-overhead one. Andi also nicely integrated it <br />&gt; into stacktrace.c.)<br /><br />I wouldn't mind the dawrf-based one so much, if it wasn't so obviously <br />crap.<br /><br />It could - and _should_ dammit! - do some basic sanity tests like "is the <br />thing even in the same stack page"? But nooo... It seems _designed_ to be <br />fragile and broken.<br /><br />Here's a simple test: if the next stack-slot isn't on the same page, the <br />unwind information is bogus unless you had the IRQ stack-switch signature <br />there. Does the code do that? No. It just assumes that unwind information <br />is complete and perfect.<br /><br />That's not the kind of code we write in the kernel. In the kernel, we <br />write code that _works_, regardless of the kind of horrible stuff people <br />feed it. That's _doubly_ true for something like a stack frame debugger, <br />which is invoced when there is trouble, and for all we know the stack <br />itself MIGHT BE CORRUPT.<br /><br />In short, I think the stack unwinder is just _broken_. It has made all the <br />wrong policy decisions - it only works when everything is perfect, yet <br />it's actually meant to be _used_ when somethign bad happened. Doesn't that <br />strike anybody else as a totally flawed design?<br /><br />It damn well should.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
