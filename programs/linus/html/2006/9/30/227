    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/9/30/147">First message in thread</a></li><li><a href="/lkml/2006/9/30/217">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/30/218">Linus Torvalds</a></li><li><a href="/lkml/2006/9/30/223">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2006/9/30/229">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/30/229">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/1/25">Andi Kleen</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Sep 2006 17:25:12 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BUG-lockdep and freeze (was: Arrr! Linux 2.6.18)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 1 Oct 2006, Andi Kleen wrote:<br />&gt; <br />&gt; On i386 it is simpler (only one interrupt stack and one process stack)<br />&gt; However there can be still nasty corner cases, like the temporary NMI stacks<br />&gt; that were added recently. It could be probably all handled in a state machine,<br />&gt; but it would be ugly (at least I heard complaints about the x86 code that<br />&gt; does it) <br /><br />No, I don't understand AT ALL why you are so hung up about this state <br />machine thing. It's not true. There's simply no state machine involved, <br />although from a theoretical standpoint you can obviously always implement <br />just about _anything_ as a state machine.<br /><br />&gt; &gt; Read the x86 code. Please. The one _before_ you added unwinding.<br />&gt; <br />&gt; It's still the same if you disable unwinding.<br /><br />I think your problem is that you think that "unwinding" needs to handle <br />all the page crossing. That's incorrect, and that just results in stupid <br />and unworkable code.<br /><br />Instead (and this is why I was trying to point you to the original <br />pre-unwinding code on i386), what you should do is to see it as two <br />totally independent phases:<br /><br /> - you have an outer loop that loops around the pages (since the _kernel_ <br />   controls the stack nesting at that level). This is the loop I quoted at <br />   you.<br /><br /> - you have a _separate_ "unwinder()" for each page. It only unwinds <br />   within that one page, and if the frame moves away from the page, it <br />   immediately just returns that address, but it knows that it cannot be a <br />   "valid" unwind address within that page.<br /><br />That separate "unwind within one page" can well be using the dwarf info: <br />it only really needs to verify that<br /> - it stays within the same page<br /> - the unwind info results in an aligned pointer at a strictly higher <br />   address.<br />those two tests are trivial, and _guarantee_ that we don't access any <br />half-way untrustworthy pointer.<br /><br />See? No state machine. And notice how the dwarf info absolutely does _not_ <br />need to know about the magic page-crossing events like interrupts, <br />exceptions or anything else. Very much on purpose.<br /><br />This is what we used to do with %ebp following (at least on x86), and what <br />I tried to explain. Nothing complicated. And it's easy to set up, and the <br />dawrf unwinder (which depends on complex data structures) can be trivially <br />verified (ie it just stops immediately when it doesn't understand <br />something, and "crosses a page" is such an event).<br /><br />And the page-crossing events don't need to know _anything_ about the dwarf <br />format (or %ebp, or any other unwinding details), and it can just depend <br />on the chain of pages (which is trivial to set up - if the exception pages <br />aren't already using the same format as the interrupt stack pages, it <br />should at least not be hard to make them do that).<br /><br />And the page-level unwinding data format is trivial. I don't think we even <br />bothered verifying it on x86, but I guess some simple sanity-checking even <br />there might be worth it (but unlike any dwarf unwinding, this is _not_ at <br />all complicated, and there are absolutely _zero_ issues about compiler and <br />linker versions etc etc).<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
