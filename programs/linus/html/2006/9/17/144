    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/9/17/105">First message in thread</a></li><li><a href="/lkml/2006/9/17/105">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="/lkml/2006/9/18/8">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/18/8">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Sep 2006 19:24:31 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] MMIO accessors &amp; barriers documentation #2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 18 Sep 2006, Benjamin Herrenschmidt wrote:<br />&gt; <br />&gt; Class 1: Ordered accessors<br />&gt; --------------------------<br />&gt; <br />&gt;  1- {read,write}{b,w,l,q} : MMIO accessors. Those accessors provide<br />&gt; all MMIO ordering requirements. They are thus called "fully ordered".<br />&gt; That is #1, #2 and #4 for writes and #1 and #3 for reads. <br /><br />Well, it's already not defined to be #4 right now on SGI boxes, and we <br />have that (badly named) mmiowb() thing to enforce #4, so I think we should <br />just accept that write[bwl]() it's _that_ ordered.<br /><br />And on x86, we _already_ depend on "wmb()" to be a "normal write to MMIO <br />write" barrier, which is technically wrong and bad. Again, thanks to <br />mmiowb(), normal memory accesses and MMIO accesses have already been <br />defined to not be in the same "ordering domain", so "wmb()" is technically <br />wrong and may not order a regular write wrt a MMIO (because it doesn't do <br />so for the other order: MMIO-&gt;spin_unlock).<br /><br />So I think we should just admit that at least MMIO _stores_ are already <br />not entirely ordered, and not try to strengthen the rules for the current <br />setup (and just try to clarify the currently accepted semantics).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
