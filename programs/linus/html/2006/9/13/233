    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/9/13/184">First message in thread</a></li><li><a href="/lkml/2006/9/13/226">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/13/231">Jeremy Fitzhardinge</a><ul><li class="origin"><a href="/lkml/2006/9/13/237">Linus Torvalds</a><ul><li><a href="/lkml/2006/9/13/237">Jeremy Fitzhardinge</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 13 Sep 2006 15:05:34 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Assignment of GDT entries</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 13 Sep 2006, Jeremy Fitzhardinge wrote:<br />&gt; <br />&gt; So does this mean that moving the user-visible cs/ds isn't likely to break<br />&gt; stuff, if it has been done before?<br /><br />Yes. I _think_ we could do it. It's been done before, and nobody noticed.<br /><br />That said, it may actually be that programs have since become much more <br />aware of segments, for a rather perverse reason: the TLS stuff. Old <br />programs are all very much coded and compiled for a totally flat model, <br />and as such they really don't know _anything_ about segments. But with <br />more TLS stuff, it's possible that a modern threded program is at least <br />aware of _some_ of it. <br /><br />In other words - I _suspect_ we can move things around, but it would <br />require some rather heavy testing, at least. Especially programs like Wine <br />might react badly.<br /><br />&gt; &gt; And segment #8 (ie 0x40) is special (TLS segment #3), of course. Anybody who<br />&gt; &gt; wants to emulate windows or use the BIOS needs to use that for their "common<br />&gt; &gt; BIOS area" thing, iirc.<br />&gt; <br />&gt; Do you mean that something like dosemu/Wine needs to be able to use GDT #8?<br />&gt; Or is it only used in kernel code?<br /><br />Both. I think the APM BIOS callbacks use GDT#8 too. As long as it's not <br />one of the really _core_ kernel segments, that's ok (you can swap it <br />around and nobody will care). But it would be a total disaster (I suspect) <br />if GDT#8 was the kernel code segment, for example. Suddenly the "switch <br />things around temporarily" is not as trivial any more, and involves nasty <br />nasty things.<br /><br />[ BUT! I haven't ever really had much to do with those BIOS callbacks, and <br />  I'm too lazy to check, so this is all from memory. ]<br /><br />&gt; &gt; See above. The kernel and user segments have to be moved as a block of four,<br />&gt; &gt; and obviously we'd like to keep them in the same cacheline too. Also, the<br />&gt; &gt; cacheline that contains segment #8/0x40 is not available,<br />&gt; <br />&gt; Why's that?  That cacheline (assuming 64 byte line size) already contains the<br />&gt; user/kernel/cs/ds descriptors.<br /><br />Right. That's what I'm saying. We should move them all together, and we <br />should keep them as aligned as they are now. <br /><br />&gt; I'm thinking of putting together a patch to change the descriptor use to:<br />&gt; <br />&gt;    8  - TLS #1<br />&gt;    9  - TLS #2<br />&gt;    10 - TLS #3<br /><br />So I'd not be surprised if movign the TLS segments around would break <br />something. <br /><br />&gt;    11 - Kernel PDA<br /><br />But you keep the four basic ones in the same place:<br /><br />&gt;    12 - Kernel CS<br />&gt;    13 - Kernel DS<br />&gt;    14 - User CS<br />&gt;    15 - User DS<br /><br />So that's obviously ok at least for _those_.<br /><br />&gt; Alternatively, maybe:<br />&gt; <br />&gt;    0  - NULL<br />&gt;    1  - Kernel PDA<br />&gt;    2  - Kernel CS<br />&gt;    3  - Kernel DS<br />&gt;    4  - User CS<br />&gt;    5  - User DS<br />&gt;    6  - TLS #1<br />&gt;    7  - TLS #2<br />&gt; <br />&gt; which moves the user cs/ds, but avoids #8.<br /><br />I don't like that one, exactly because now the four most common segments <br />(which get accessed for all system calls) are no longer in the same <br />32-byte cacheline.<br /><br />[ Unless we start playing games with offsetting the GDT or something.. <br />  Quite frankly, I'd rather keep it simple and obvious. ]<br /><br />Now, most systems have a 64-byte cacheline these days (and some have a <br />split 128-byte one), and maybe we'll never go back to the "good old days" <br />with 32-byte lines, so maybe this is a total non-issue. But fitting in the <br />same 32-byte aligned thing would still count as a "good thing" in my book.<br /><br />That said, numbers talk, bullshit walks. If the above just works a lot <br />better for all modern CPU's that all have 64-byte cachelines (because now <br />_everything_ is in that bigger cacheline), and if you can show that with <br />numbers, and nothing breaks in practice, then hey..<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
