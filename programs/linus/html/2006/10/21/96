    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/10/19/351">First message in thread</a></li><li><a href="/lkml/2006/10/20/162">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/20/167">Linus Torvalds</a></li><li><a href="/lkml/2006/10/21/50">Pierre Ossman</a><ul><li class="origin"><a href="/lkml/2006/10/21/141">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/21/141">Pierre Ossman</a><ul><li><a href="/lkml/2006/10/21/160">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Oct 2006 09:10:00 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Git training wheels for the pimple faced maintainer</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 21 Oct 2006, Pierre Ossman wrote:<br />&gt; &gt;<br />&gt; &gt; HOWEVER! The above obviously only really works correctly if "master" is a <br />&gt; &gt; strict subset of "for-linus".<br />&gt; <br />&gt; Ah, that's a bit of a gotcha. Any nice tricks to keep track of where you<br />&gt; where in sync with upstream last? Create a dummy branch/tag perhaps?<br /><br />You don't need to. Git keeps track of the fork-point, and you can always <br />get it with<br /><br />	git merge-base a b<br /><br />where "a" and "b" are the two branches.<br /><br />HOWEVER. If you have _merged_ since (ie your branch contains merges _from_ <br />the branch that you are tracking), this will give you the last <br />merge-point (since that's the last common base), and as such a "diff" from <br />that point will _ignore_ your changes from before the merge. See?<br /><br />But holding a tag to the "original fork point" is equally useless in that <br />case, since if you have merged from my tree since that tag, and you do a <br />"git diff tag..for-linus", then the diff will contain all the new stuff <br />that came from _me_ through your merge as well. See?<br /><br />In other words: in both cases you really really shouldn't merge from me <br />after you started developing. And the reason in both cases is really <br />fundamnetlly the same: because merging from me obviously brings in commits <br />_from_me_, so any single diff thus obviously turns pointless: it will <br />_not_ talk about all your new work.<br /><br />Anyway, notice the "single diff" caveat above. Git obviously does actually <br />keep track of individual commits, so the individual commits that are <br />unique to your repository are _still_ unique to your repository even after <br />you've merged with me - since I haven't merged with you. So you _can_ get <br />the information, but now you have to do something fundamentally <br />different..<br /><br />So if you've done merges with me since you started development, you cannot <br />now just say "what's the difference between &lt;this&gt; point and &lt;that&gt; point <br />in the development tree", because clearly there is no _single_ line of <br />development that shows just _your_ changes. But that doesn't mean that <br />your development isn't separatable, and you can do one of two things:<br /><br /> (a) work on a "individual commit" level:<br /><br />	git log -p linus..for-linus<br /><br />     will show each commit that is in your "for-linus" branch but is _not_ <br />     in your "linus" tracker branch. This does the right thing even in the <br />     presense of merges: it will show the merge commit you did (since that <br />     individual commit is _yours_), but it will not show the commits <br />     merged (since those came from _my_ line of development)<br /><br />     So now a<br /><br />	git log -p linux..for-linus | diffstat<br /><br />     will give something that _approximates_ the diffstat I will see when <br />     merging. I say _approximates_, because it only really gives the right <br />     answer if all the commits are entirely independent, and you never <br />     have one commit that changes a line one way, and then a subsequent <br />     commit that changes the same lines another way.<br /><br />     If you have commits that are inter-dependent, the diffstat above will <br />     show the "sum" of the diffs, which is not what I will see when I <br />     actually merge. I will see just the end result, which is more like <br />     the "union" of the diffs. And the two are the same only for <br />     independent diffs, of course.<br /><br />So the above is simple, and gives _almost_ the right answer. The other <br />alternative is slightly smarter, and more involved, and gives the exact <br />right answer:<br /><br /> (b) create a temporary new merge, and see what the difference of the <br />     merge is, as seen by me (eg as seen from "linus"). So this is <br />     basically:<br /><br />	git checkout -b test-branch for-linus<br />	git pull . linus<br />	git diff -M --stat --summary linus..<br /><br />     will create a new branch ("checkout -b") based on your current <br />     "for-linus" state, and within that branch, do a merge of the "linus" <br />     branch (or you could have done it the other way around and made the <br />     merge as if you were me: check out the state of "linus" and then <br />     pull the "for-linus" branch instead).<br /><br />     And then, the final step is to just diff the result of the merge <br />     against the "linus" branch. This obviously gives the same diffstat <br />     as the one _I_ should see when I merge, because you basically <br />     "pre-tested" my merge for me.<br /><br />See? git does give you the tools, but if you merge from me and don't have <br />a branch that is a nice clear superset of what you started off with, but <br />have mixed in changes from _my_ tree since you started developing, you end <br />up having to do some extra work to separate out all the new changes.<br /><br />So that's why I suggest not doing a lot of criss-crossing merges. It <br />generates an uglier history that is much harder to follow visually in <br />"gitk", but it also generates some extra work for you. Not a lot, but <br />considering that there are seldom any real upsides, this hopefully <br />explains why I suggest against it.<br /><br />And again, as a final note: none of this is "set in stone". These are all <br />_suggestions_. Notice the "seldom any real upsides". I say "seldom" on <br />purpose, because quite frankly, sometimes it's just easier for you to <br />merge (especially if you know there are likely to be clashes), so that you <br />can fix up any issues that the merge brings.<br /><br />Anyway, I hope this clarified the issue. I don't think we've actually had <br />a lot of problems with these things in practice. None of this is really <br />"hard", and a lot of it is just getting used to the model. Once you are <br />comfortable with how git works (and using "gitk" to show history tends to <br />be a very visual way to see what is going on in the presense of merges), <br />and get used to working with me, you'll do all of this without even <br />thinking about it.<br /><br />It really just _sounds_ more complicated than it really is. <br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
