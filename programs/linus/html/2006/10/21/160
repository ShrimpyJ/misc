    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/10/19/351">First message in thread</a></li><li><a href="/lkml/2006/10/21/96">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/21/141">Pierre Ossman</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Oct 2006 12:07:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Git training wheels for the pimple faced maintainer</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 21 Oct 2006, Pierre Ossman wrote:<br />&gt; <br />&gt; If I read your response above and the man page for git-merge-base, it<br />&gt; will do the right thing even if "linus" now is further in the future<br />&gt; than the point I forked it.<br /><br />Yes. You can continue to track my state in the "linus" branch as much as <br />you want, and "git merge-base" will show where your branch and mine <br />diverged, so you don't need to remember it explicitly.<br /><br />Only if you start _mixing_ the branches (ie you merge "linus" into your <br />branch) do you end up in the situation where there now is no longer a <br />single-threaded line of development, so you can no longer expect to be <br />able to just use a direct "git diff".<br /><br />&gt; &gt;  (a) work on a "individual commit" level:<br />&gt; &gt;<br />&gt; &gt; 	git log -p linus..for-linus<br />&gt; &gt;<br />&gt; &gt;      will show each commit that is in your "for-linus" branch but is _not_ <br />&gt; &gt;      in your "linus" tracker branch. This does the right thing even in the <br />&gt; &gt;      presense of merges: it will show the merge commit you did (since that <br />&gt; &gt;      individual commit is _yours_), but it will not show the commits <br />&gt; &gt;      merged (since those came from _my_ line of development)<br />&gt; <br />&gt; Ah, so "git log" will not show the commits that have popped up on<br />&gt; "linus" after "for-linus" branched off? Neat. :)<br /><br />That is what the git "a..b" syntax means for everything _but_ "diff". <br />Doing a "git diff" really is actually the special case: to create a diff, <br />you need two end-points. For all other git commands, "a..b" really means <br />"all commits that are in 'b' but not in 'a'", ie it's _not_ really about <br />two end-points, it's about a _set_ operation.<br /><br />You should think of "a..b" as the "set difference" operation, or "b-a".<br /><br />There's also a "symmetric difference", which is called "a...b" (three <br />dots). That's the "union of the differences both ways", in other words, <br />"a...b" is the set of commits that exist in a _or_ b, but not in both.<br /><br />You can do some even more complex operations, and one that I find <br />reasonably useful at times is for example<br /><br />	gitk --all --not HEAD<br /><br />which basically means: "show all commits in all branches, but subtract <br />everything that is reachable from the current HEAD". In other words, it <br />shows what commits exist in all the other branches that have not been <br />merged into the current one.<br /><br />(The "--not HEAD" thing is mostly written as "^HEAD", but I wrote it out <br />in long-hand here because it is perhaps a bit more readable that way.)<br /><br />&gt; One concern I had was how to find stuff to cherry-pick when doing a<br />&gt; stable review.<br /><br />So looking at the above, what you can do is literally<br /><br />	gitk --all ^linus<br /><br />which shows all your branches _except_ stuff that is already merged into <br />the "linus" branch that tracks what I have merged.<br /><br />Git really is very clever.<br /><br />HOWEVER! A word of warning: especially when you start doing <br />cherry-picking, git will consider a commit that has been cherry-picked to <br />be totally _separate_ from the original one. So when you do things like <br />the above, and you have commits that have "identical patches" as the ones <br />I have already applied, they will show up as "not being in linus' branch". <br /><br />That's because the identity of a commit is really not the patch it <br />describes at all: the commit is defined by the exact spot in the history, <br />and by the exact contents of that commit (which include date, time, <br />committer info, parents, exact tree state etc). So when you do a <br />"cherry-pick", you are very much creating a totally new commit - it just <br />happens to generate the same (or similar) _diff_.<br /><br />There are tools to help you filter out cherry-picked commits too, by <br />literally looking at the diff and saying "oh, that same diff already <br />exists upstream", but that's different. If you really care, you can look <br />at what "git cherry" does (and it's not very efficient).<br /><br />&gt; git has a lot of these hidden features and ways of doing<br />&gt; less-than-obvious things, so I'm just trying to broaden my repertoire by<br />&gt; consulting those who have been using it on a more daily basis.<br /><br />You really can do a _lot_ with git. Part of what seems to scare some <br />people is that git really allows for a lot of power and flexibility, and <br />you can do some very fancy stuff. <br /><br />At the same time, you can mostly also use it as if it were a lot dumber <br />than it really is. There are ways to limit your usage so that you'll never <br />even need to worry about things like multiple branches or cherry-picking <br />or merging or anything else, and try to just see your work as a linear <br />progression on top of a particular release version.<br /><br />I'll happily explain all the grotty details, but keep in mind that you <br />don't _need_ to use the features if you don't want to. <br /><br />&gt; I am just thankful git has a reset command ;)<br /><br />You can undo almost any mess you get yourself into (you _can_ really screw <br />that up too, if you do a combination of "reset" and "git prune", but you <br />have to work at it).<br /><br />The bigger problem may be that if you get yourself into a real mess, you <br />need to understand how you got there: you can always get back to a <br />previous state, sometimes you just need to know what that state _was_, and <br />if you get confused enough, even that can be a problem.<br /><br />"gitk" really does tend to help clarify what happened.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
