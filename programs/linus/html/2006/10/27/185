    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/10/23/373">First message in thread</a></li><li><a href="/lkml/2006/10/27/159">Stephen Hemminger</a><ul><li><a href="/lkml/2006/10/27/172">Andrew Morton</a><ul><li class="origin"><a href="/lkml/2006/10/27/186">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/27/186">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/27/237">Greg KH</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Oct 2006 13:42:44 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] drivers: wait for threaded probes between initcall levels</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 27 Oct 2006, Andrew Morton wrote:<br />&gt; <br />&gt; I couldn't work out a way of doing that.  I guess one could a) count the<br />&gt; number of threads which are going to be started, b) start them all, c) do<br />&gt; an up() when each thread ends and d) handle errors somehow.<br /><br />No. First off, you want to _limit_ the maximum number of parallelism <br />anyway (memory pressure and sanity), so you want to use the counting <br />semaphore for that too.<br /><br />The easiest way to do it would probably be something like this:<br /><br />	#define PARALLELISM (10)<br /><br />	static struct semaphore outstanding;<br /><br />	struct thread_exec {<br />		int (*fn)(void *);<br />		void *arg;<br />		struct completion completion;<br />	};<br /><br />	static void allow_parallel(int n)<br />	{<br />		while (--n &gt;= 0)<br />			up(&amp;outstanding);<br />	}<br /><br />	static void wait_for_parallel(int n)<br />	{<br />		while (--n &gt;= 0)<br />			down(&amp;outstanding);<br />	}<br /><br />	static int do_in_parallel(void *arg)<br />	{<br />		struct thread_exec *p = arg;<br />		int (*fn)(void *) = p-&gt;fn;<br />		void *arg = p-&gt;arg;<br />		int retval;<br /><br />		/* Tell the caller we are done with the arguments */<br />		complete(&amp;p-&gt;completion);<br /><br />		/* Do the actual work in parallel */<br />		retval = p-&gt;fn(p-&gt;arg);<br /><br />		/*<br />		 * And then tell the rest of the world that we've<br />		 * got one less parallel thing outstanding..<br />		 */<br />		up(&amp;outstanding);<br />		return retval;<br />	}<br /><br />	static void execute_in_parallel(int (*fn)(void *), void *arg)<br />	{<br />		struct thread_exec arg = { .fn = fn, .arg = arg };<br /><br />		/* Make sure we can have more outstanding parallel work */<br />		down(&amp;outstanding);<br /><br />		arg.fn = fn;<br />		arg.arg = arg;<br />		init_completion(&amp;arg.completion);<br /><br />		kernel_thread(do_in_parallel, &amp;arg);<br /><br />		/* We need to wait until our "arg" is safe */<br />		wait_for_completion(&amp;arg.completion)<br />	}<br /><br />The above is ENTIRELY UNTESTED, but the point of it is that it should now <br />allow you to do something like this:<br /><br />	/* Set up how many parallel threads we can run */<br />	allow_parallel(PARALLELISM);<br /><br />	...<br /><br />	/*<br />	 * Run an arbitrary number of threads with that<br />	 * parallelism.<br />	 */<br />	for (i = 0; i &lt; ... ; i++)<br />		execute_in_parallel(fnarray[i].function, <br />				    fnarray[i].argument);<br /><br />	...<br /><br />	/* And wait for all of them to complete */<br />	wait_for_parallel(PARALLELISM);<br /><br />and this is totally generic (ie this is useful for initcalls or anything <br />else). Note also how you can set up the parallelism (and wait for it) <br />totally independently (ie that can be done at some earlier stage, and the <br />"execute_in_parallel()" can just be executed in any random situation in <br />between - as many times as you like. It will always honor the parallelism.<br /><br />By setting PARALLELISM to 1, you basically only ever allow one outstanding <br />call at any time (ie it becomes serial), so you don't even have to make <br />this a config option, you could do it as a runtime setup thing.<br /><br />Hmm?<br /><br />(And I repeat: the above code is untested, and was written in the email <br />client. It has never seen a compiler, and not gotten a _whole_ lot of <br />thinking).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
