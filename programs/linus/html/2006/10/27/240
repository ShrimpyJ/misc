    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2006/10/23/373">First message in thread</a></li><li><a href="/lkml/2006/10/27/186">Linus Torvalds</a><ul><li><a href="/lkml/2006/10/27/237">Greg KH</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Oct 2006 18:50:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] drivers: wait for threaded probes between initcall levels</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 27 Oct 2006, Greg KH wrote:<br />&gt; <br />&gt; Heh, ok, I'll take this idea, and Andrew's patch, and rework things for<br />&gt; the next round of 2.6.20-rc kernels, and mark the current stuff as<br />&gt; BROKEN for now.<br /><br />My interface stuff is kind of designed for:<br /><br /> - keep the current "init" sequence as-is for now<br /><br /> - keep the _actual_ PCI probing non-parallel, so that we actually do all <br />   the bus _discovery_ in a repeatable and sane order.<br /><br /> - use the new "execute_in_parallel()" interface for things that actually <br />   _sleep_. For example, all the PCI IDE _driver_ attachement should be <br />   done synchronously, but perhaps the code that tries to see if there are <br />   actual disks (ie the stuff that has timeouts etc) can use the parallel <br />   execution.<br /><br /> - module loading would do a "allow_parallel(1)" and <br />   "wait_for_parallel(1)" thing when calling the module init function (so <br />   that a module could use "execute_in_parallel()" whether compiled in or <br />   not, and each "init level" at boot would also do this (with some bigger <br />   number, like 10), so that for drivers etc that want to do async stuff, <br />   they can do so in parallel (but they'd still have done the actual hard <br />   device find/init serially - keeping the link order relevant for things <br />   like IDE controller discovery)<br /><br />How does this sound?<br /><br />There's really no reason to parallelise the actual PCI config cycles and <br />probing and stuff. It's only when some driver knows that it might have to <br />do some longer-running thing that it might want to execute a thread in <br />parallel with other things - but it still needs to be done in a controlled <br />situation, so that when "driver_init()" stops and "filesystem_init()" <br />starts, we must wait for all the driver-init parallel tasks to finish <br />(since "filesystem_init()" is allowed to depend on them).<br /><br />Hmm?<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
