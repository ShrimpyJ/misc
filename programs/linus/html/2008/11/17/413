    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/11/17/360">First message in thread</a></li><li><a href="/lkml/2008/11/17/400">Linus Torvalds</a><ul><li><a href="/lkml/2008/11/17/406">Andrew Morton</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2008/11/17/456">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Nov 2008 13:42:35 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Large stack usage in fs code (especially for PPC64)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 17 Nov 2008, Andrew Morton wrote:<br />&gt; <br />&gt; Yup.  That being said, the younger me did assert that "this is a neater<br />&gt; implementation anyway".  If we can implement those loops without<br />&gt; needing those on-stack temporary arrays then things probably are better<br />&gt; overall.<br /><br />Sure, if it actually ends up being nicer, I'll not argue with it. But from <br />an L1 I$ standpoint (and I$ is often very important, especially for kernel <br />loads where loops are fairly rare), it's often _much_ better to do two <br />"tight" loops over two subsystems (filesystem and block layer) than it is <br />to do one bigger loop that contains both. If the L1 can fit both subsystem <br />paths, you're fine - but if not, you may get a lot more misses.<br /><br />So it's often nice if you can "stage" things so that you do a cluster of <br />calls to one area, followed by a cluster of calls to another, rather than <br />mix it up. <br /><br />But numbers talk. And code cleanliness. If somebody has numbers that the <br />code size actually goes down for example, or the code is just more <br />readable, micro-optimizing cache patterns isn't worth it.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
