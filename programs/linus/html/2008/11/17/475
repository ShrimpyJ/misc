    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/11/16/211">First message in thread</a></li><li><a href="/lkml/2008/11/17/411">Eric Dumazet</a><ul><li><a href="/lkml/2008/11/17/463">Eric Dumazet</a><ul><li class="origin"><a href="/lkml/2008/11/18/79">Linus Torvalds</a><ul><li><a href="/lkml/2008/11/18/79">Eric Dumazet</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Nov 2008 16:01:27 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: eth_type_trans(): Re: [Bug #11308] tbench regression on each kernel release from 2.6.22 -&amp;gt; 2.6.28</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 18 Nov 2008, Eric Dumazet wrote:<br />&gt; &gt; *<br />&gt; &gt; * Compare two ethernet addresses, returns 0 if equal<br />&gt; &gt; */<br />&gt; &gt; static inline unsigned compare_ether_addr(const u8 *addr1, const u8 *addr2)<br />&gt; &gt; {<br />&gt; &gt;        const u16 *a = (const u16 *) addr1;<br />&gt; &gt;        const u16 *b = (const u16 *) addr2;<br />&gt; &gt; <br />&gt; &gt;        BUILD_BUG_ON(ETH_ALEN != 6);<br />&gt; &gt;        return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2])) != 0;<br /><br />Btw, at least on some Intel CPU's, it would be faster to do this as a <br />32-bit xor and a 16-bit xor. And if we can know that there is always 2 <br />bytes at the end (because of how the thing was allocated), it's faster <br />still to do it as a 64-bit xor and a mask.<br /><br />And that's true even if the addresses are only 2-byte aligned.<br /><br />The code that gcc generates for "memcmp()" for a constant-size small data <br />thing is sadly crap. It always generates a "rep cmpsb", even if the size <br />is something really trivial like 4 bytes, and even if you compare for <br />exact equality rather than a smaller/greater-than. Gaah.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
