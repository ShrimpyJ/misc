    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/11/17/360">First message in thread</a></li><li><a href="/lkml/2008/11/17/507">Linus Torvalds</a><ul><li><a href="/lkml/2008/11/18/109">Nick Piggin</a><ul><li><a href="/lkml/2008/11/18/124">Paul Mackerras</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Nov 2008 08:02:10 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Large stack usage in fs code (especially for PPC64)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 18 Nov 2008, Nick Piggin wrote:<br />&gt; &gt;<br />&gt; &gt; The fact is, Intel (and to a lesser degree, AMD) has shown how hardware<br />&gt; &gt; can do good TLB's with essentially gang lookups, giving almost effective<br />&gt; &gt; page sizes of 32kB with hardly any of the downsides. Couple that with<br />&gt; <br />&gt; It's much harder to do this with powerpc I think because they would need<br />&gt; to calculate 8 hashes and touch 8 cachelines to prefill 8 translations,<br />&gt; wouldn't they?<br /><br />Oh, absolutely. It's why I despise hashed page tables. It's a broken <br />concept.<br /><br />&gt; The per-page processing costs are interesting too, but IMO there is more<br />&gt; work that should be done to speed up order-0 pages. The patches I had to<br />&gt; remove the sync instruction for smp_mb() in unlock_page sped up pagecache<br />&gt; throughput (populate, write(2), reclaim) on my G5 by something really<br />&gt; crazy like 50% (most of that's in, but I'm still sitting on that fancy<br />&gt; unlock_page speedup to remove the final smp_mb).<br />&gt; <br />&gt; I suspect some of the costs are also in powerpc specific code to insert<br />&gt; linux ptes into their hash table. I think some of the synchronisation for<br />&gt; those could possibly be shared with generic code so you don't need the<br />&gt; extra layer of locks there.<br /><br />Yeah, the hashed page tables get extra costs from the fact that it can't <br />share the software page tables with the hardware ones, and the associated <br />coherency logic. It's even worse at unmap time, I think.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
