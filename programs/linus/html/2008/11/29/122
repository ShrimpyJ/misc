    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/11/26/524">First message in thread</a></li><li><a href="/lkml/2008/11/26/524">Steven Rostedt</a><ul><li><a href="/lkml/2008/11/26/525">Steven Rostedt</a><ul><li><a href="/lkml/2008/11/27/30">Ingo Molnar</a></li><li class="origin"><a href="/lkml/2008/11/29/129">Linus Torvalds</a><ul><li><a href="/lkml/2008/11/29/129">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 29 Nov 2008 11:19:47 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/1] sched: prevent divide by zero error in cpu_avg_load_per_task</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 26 Nov 2008, Steven Rostedt wrote:<br />&gt;  {<br />&gt;  	struct rq *rq = cpu_rq(cpu);<br />&gt; +	unsigned long nr_running = rq-&gt;nr_running;<br />&gt; <br />&gt; -	if (rq-&gt;nr_running)<br />&gt; -		rq-&gt;avg_load_per_task = rq-&gt;load.weight / rq-&gt;nr_running;<br />&gt; +	if (nr_running)<br />&gt; +		rq-&gt;avg_load_per_task = rq-&gt;load.weight / nr_running;<br />&gt;  	else<br />&gt;  		rq-&gt;avg_load_per_task = 0;<br /><br />I don't think this necessarily fixes it.<br /><br />There's nothing that keeps gcc from deciding not to reload rq-&gt;nr_running. <br /><br />Of course, in _practice_, I don't think gcc ever will (if it decides that <br />it will spill, gcc is likely going to decide that it will literally spill <br />the local variable to the stack rather than decide to reload off the <br />pointer), but it's a valid compiler optimization, and it even has a name <br />(rematerialization).<br /><br />So I suspect that your patch does fix the bug, but it still leaves the <br />fairly unlikely _potential_ for it to re-appear at some point.<br /><br />We have ACCESS_ONCE() as a macro to guarantee that the compiler doesn't <br />rematerialize a pointer access. That also would clarify the fact that we <br />access something unsafe outside a lock.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
