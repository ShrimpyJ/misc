    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/30/132">First message in thread</a></li><li><a href="/lkml/2008/7/30/636">Jamie Lokier</a><ul><li><a href="/lkml/2008/7/30/686">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/2008/7/30/695">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/30/695">Linus Torvalds</a></li><li><a href="/lkml/2008/7/31/27">Jamie Lokier</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Jul 2008 17:51:15 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch v3] splice: fix race with page invalidation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 31 Jul 2008, Jamie Lokier wrote:<br />&gt;<br />&gt; Jamie Lokier wrote:<br />&gt; &gt; not being able to tell when a sendfile() has finished with the pages<br />&gt; &gt; its sending.<br />&gt; <br />&gt; (Except by the socket fully closing or a handshake from the other end,<br />&gt; obviously.)<br /><br />Well, people should realize that this is pretty fundamental to zero-copy <br />scemes. It's why zero-copy is often much less useful than doing a copy in <br />the first place. How do you know how far in a splice buffer some random <br />'struct page' has gotten? Especially with splicing to spicing to tee to <br />splice...<br /><br />You'd have to have some kind of barrier model (which would be really <br />complex), or perhaps a "wait for this page to no longer be shared" (which <br />has issues all its own).<br /><br />IOW, splice() is very closely related to a magic kind of "mmap()+write()" <br />in another thread. That's literally what it does internally (except the <br />"mmap" is just a small magic kernel buffer rather than virtual address <br />space), and exactly as with mmap, if you modify the file, the other thread <br />will see if, even though it did it long ago.<br /><br />Personally, I think the right approach is to just realize that splice() is <br />_not_ a write() system call, and never will be. If you need synchronous <br />writing, you simply shouldn't use splice().<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
