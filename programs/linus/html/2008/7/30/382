    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/30/318">First message in thread</a></li><li><a href="/lkml/2008/7/30/318">Chris Fester</a><ul><li class="origin"><a href="/lkml/2008/7/30/518">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/30/518">Chris Fester</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/7/30/382/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Jul 2008 11:06:29 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] ROMFS 0 byte file read error</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 30 Jul 2008, Chris Fester wrote:<br />&gt;<br />&gt; I've verified that the git tree at:<br />&gt; git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git<br />&gt; <br />&gt; also has the zero byte file problem for romfs.  This patch<br />&gt; fixes the problem.  Avoids calling romfs_copyfrom when in <br />&gt; the 0 size case.<br /><br />Hmm. Who calls 'readpage()' with an offset past the end of the file <br />anyway? This _really_ shouldn't matter.<br /><br />But regardless, isn't the bug that 'romfs_readpage()' sets an error bit <br />by default - ie even if there was no actual IO error? The thing is also <br />very confused about types: if it really wants to be safe in "loff_t, then <br />it had bettr not do the "min_t()" in just "unsigned long".<br /><br />So this whole routine really seems to be much more broken than your patch <br />implies, and your patch just works around some brokenness.<br /><br />Of course, I think it's all 32-bit and some of these problems cannot <br />actually happen, but wouldn't it be more obvious to rewrite it to have a <br />separate error return ("result") and a variable saying how much of the <br />page was filled ("filled")?<br /><br />Something like this. UNTESTED. Pls verify and send back if this is ok. The <br />patch is certainly bigger, but I think that the end result is more <br />obvious.<br /><br />		Linus<br /><br />---<br /> fs/romfs/inode.c |   37 +++++++++++++++++++++++--------------<br /> 1 files changed, 23 insertions(+), 14 deletions(-)<br /><br />diff --git a/fs/romfs/inode.c b/fs/romfs/inode.c<br />index 8e51a2a..60d2f82 100644<br />--- a/fs/romfs/inode.c<br />+++ b/fs/romfs/inode.c<br />&#64;&#64; -418,7 +418,8 &#64;&#64; static int<br /> romfs_readpage(struct file *file, struct page * page)<br /> {<br /> 	struct inode *inode = page-&gt;mapping-&gt;host;<br />-	loff_t offset, avail, readlen;<br />+	loff_t offset, size;<br />+	unsigned long filled;<br /> 	void *buf;<br /> 	int result = -EIO;<br /> <br />&#64;&#64; -430,21 +431,29 &#64;&#64; romfs_readpage(struct file *file, struct page * page)<br /> <br /> 	/* 32 bit warning -- but not for us :) */<br /> 	offset = page_offset(page);<br />-	if (offset &lt; i_size_read(inode)) {<br />-		avail = inode-&gt;i_size-offset;<br />-		readlen = min_t(unsigned long, avail, PAGE_SIZE);<br />-		if (romfs_copyfrom(inode, buf, ROMFS_I(inode)-&gt;i_dataoffset+offset, readlen) == readlen) {<br />-			if (readlen &lt; PAGE_SIZE) {<br />-				memset(buf + readlen,0,PAGE_SIZE-readlen);<br />-			}<br />-			SetPageUptodate(page);<br />-			result = 0;<br />+	size = i_size_read(inode);<br />+	filled = 0;<br />+	result = 0;<br />+	if (offset &lt; size) {<br />+		unsigned long readlen;<br />+<br />+		size -= offset;<br />+		readlen = size &gt; PAGE_SIZE ? PAGE_SIZE : size;<br />+<br />+		filled = romfs_copyfrom(inode, buf, ROMFS_I(inode)-&gt;i_dataoffset+offset, readlen);<br />+<br />+		if (filled != readlen) {<br />+			SetPageError(page);<br />+			filled = 0;<br />+			result = -EIO;<br /> 		}<br /> 	}<br />-	if (result) {<br />-		memset(buf, 0, PAGE_SIZE);<br />-		SetPageError(page);<br />-	}<br />+<br />+	if (filled &lt; PAGE_SIZE)<br />+		memset(buf + filled, 0, PAGE_SIZE-filled);<br />+<br />+	if (!result)<br />+		SetPageUptodate(page);<br /> 	flush_dcache_page(page);<br /> <br /> 	unlock_page(page);<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
