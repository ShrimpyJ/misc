    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/28/123">First message in thread</a></li><li><a href="/lkml/2008/7/28/192">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/29/238">Vitaly Mayatskikh</a></li><li><a href="/lkml/2008/7/30/206">Vitaly Mayatskikh</a><ul><li class="origin"><a href="/lkml/2008/8/1/340">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/1/340">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/1/441">Vitaly Mayatskikh</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/7/30/208">Vitaly Mayatskikh</a></li><li><a href="/lkml/2008/7/30/210">Vitaly Mayatskikh</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Jul 2008 10:29:32 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: Optimize tail handling for copy_user</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 30 Jul 2008, Vitaly Mayatskikh wrote:<br />&gt; <br />&gt; Another try.<br /><br />Ok, this is starting to look more reasonable. But you cannot split things <br />up like this per-file, because the end result doesn't _work_ with the <br />changes separated.<br /><br />&gt; BYTES_LEFT_IN_PAGE macro returns PAGE_SIZE, not zero, when the address<br />&gt; is well aligned to page.<br /><br />Hmm. Why? If the address is aligned, then we shouldn't even tro to copy <br />any more, should we? We know we got a fault - and regardless of whether it <br />was because of some offset off the base pointer or not, if the base <br />pointer was at offset zero, it's going to be in the same page. So why try <br />to do an operation we know will fault again?<br /><br />Also, that's a rather inefficient way to do it, isn't it? Maybe the <br />compiler can figure it out, but the efficient code would be just<br /><br />	PAGE_SIZE - ((PAGE_SIZE-1) &amp;(unsigned long)ptr)<br /><br />no? That said, exactly because I think we shouldn't even bother to try to <br />fix up faults that happened at the beginning of a page, I think the right <br />one is the one I think I posted originally, ie the one that does just<br /><br />	#define BYTES_LEFT_IN_PAGE(ptr) \<br />		(unsigned int)((PAGE_SIZE-1) &amp; -(long)(ptr))<br /><br />which is a bit simpler (well, it requires some thought to know why it <br />works, but it generates good code).<br /><br />In case you wonder why it works, the operation we _want_ do do is<br /><br />	(PAGE_SIZE - offset-in-page) mod PAGE_SIZE<br /><br />but subtraction is "stable" in modulus calculus (*), so you can write that <br />as<br /><br />	(PAGE_SIZE mod PAGE_SIZE - offset-in-page) mod PAGE_SIZE<br /><br />which is just<br /><br />	(0 - (ptr mod PAGE_SIZE)) mod PAGE_SIZE<br /><br />but again, subtraction is stable in modulus, so you can write that as<br /><br />	(0 - ptr) mod PAGE_SIZE<br /><br />and so the result is literally just those single 'neg' and 'and' <br />instructions (in the macro, you then need all the casting and the <br />parenthesis, which is why it gets ugly again)<br /><br />And yes, maybe the compiler figures it all out, but judging by past <br />experience, things often don't work that well.<br /><br />			Linus<br /><br />(*) Yeah, in math, it's stable in general, in 2's complement arithmetic <br />it's only stable in mod 2^n, I guess.<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
