    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/14/174">First message in thread</a></li><li><a href="/lkml/2008/7/14/286">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/14/294">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2008/7/14/301">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/14/301">Andi Kleen</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/7/14/299/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 14 Jul 2008 12:30:04 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] core, x86: make LIST_POISON less deadly</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 14 Jul 2008, Andi Kleen wrote:<br />&gt; <br />&gt; How about if the page fault handler checks for the value and prints<br />&gt; a obvious string? It could do this reliably, unlike the "grep<br />&gt; all registers for poison on #GP" method that was earlier proposed.<br /><br />The GP handler, you mean.<br /><br />Sure, that might work. I'm not convinced it's worth it, but it's certainly <br />not difficult to do either. Something like this (TOTALLY UNTESTED!) might <br />work.<br /><br />It puts it in the general "__die()" routine because it was easier this way <br />(we do want it below the "oops" thing, so that it gets captured by Arjan's <br />scripts!), in case the deathnotes are useful for other cases too.<br /><br />It could perhaps be extended to allow negative offsets off the 0xdead000.. <br />pointer (right now those would be ignored because the '0xdead00..' part <br />would turns into '0xdeacff..') but that would not matter for the <br />particular case of the list poisoning (since that one adds the 0x0100100 <br />thing to it anyway).<br /><br />Again: totally untested.<br /><br />			Linus<br /><br />---<br /> arch/x86/kernel/traps_64.c |   24 ++++++++++++++++++++++++<br /> 1 files changed, 24 insertions(+), 0 deletions(-)<br /><br />diff --git a/arch/x86/kernel/traps_64.c b/arch/x86/kernel/traps_64.c<br />index f1a95d1..7487ce2 100644<br />--- a/arch/x86/kernel/traps_64.c<br />+++ b/arch/x86/kernel/traps_64.c<br />&#64;&#64; -434,6 +434,29 &#64;&#64; void dump_stack(void)<br /> <br /> EXPORT_SYMBOL(dump_stack);<br /> <br />+/*<br />+ * This depends intimately on the layout of pt_regs to<br />+ * show deathnotes in the GP registers.<br />+ */<br />+static void show_deathnotes(struct pt_regs *regs)<br />+{<br />+	static const char *names[16] = {<br />+		"r15", "r14", "r13", "r12",<br />+		"rbp", "rbx", "r11", "r10",<br />+		"r9",  "r8",  "rax", "rcx",<br />+		"rdx", "rsi", "rdi",<br />+	};<br />+	const unsigned long *r = &amp;regs-&gt;r15;<br />+	int i;<br />+<br />+	for (i = 0; i &lt; 15; i++) {<br />+		unsigned long value = r[i];<br />+		if ((value &gt;&gt; 48) != 0xdead)<br />+			continue;<br />+		printk("Deathnote %lx in register %s\n", value, names[i]);<br />+	}<br />+}<br />+<br /> void show_registers(struct pt_regs *regs)<br /> {<br /> 	int i;<br />&#64;&#64; -554,6 +577,7 &#64;&#64; int __kprobes __die(const char * str, struct pt_regs * regs, long err)<br /> 	printk("\n");<br /> 	if (notify_die(DIE_OOPS, str, regs, err, current-&gt;thread.trap_no, SIGSEGV) == NOTIFY_STOP)<br /> 		return 1;<br />+	show_deathnotes(regs);<br /> 	show_registers(regs);<br /> 	add_taint(TAINT_DIE);<br /> 	/* Executive summary in case the oops scrolled away */<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
