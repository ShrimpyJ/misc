    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/25/55">First message in thread</a></li><li><a href="/lkml/2008/7/25/88">Andrew Morton</a><ul><li><a href="/lkml/2008/7/25/139">Matthew Wilcox</a><ul><li><a href="/lkml/2008/7/25/143">Andrew Morton</a></li><li class="origin"><a href="/lkml/2010/2/17/459">Linus Torvalds</a><ul><li><a href="/lkml/2010/2/17/459">Grant Likely</a><ul><li><a href="/lkml/2010/2/17/467">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/7/26/206">Adrian Bunk</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 26 Jul 2008 12:38:05 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: __weak vs ifdef</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 25 Jul 2008, Matthew Wilcox wrote:<br /><br />&gt; On Fri, Jul 25, 2008 at 02:34:55AM -0700, Andrew Morton wrote:<br />&gt; &gt; We should make arch_pick_mmap_layout __weak and nuke that ifdef.<br />&gt; <br />&gt; I strongly disagree.  I find it makes it harder to follow code flow<br />&gt; when __weak functions are involved.  Ifdefs are ugly, no question, but<br />&gt; they're easier to grep for<br /><br />Hell no, they're not.<br /><br />Our use of random HAVE_ARCH_xyz or ARCH_SUPPORTS_xyz etc stuff makes <br />things _totally_ impossible to grep for.<br /><br />In contrast, it we did this code as<br /><br />	#ifndef arch_pick_mmap_layout<br />	void __weak arch_pick_mmap_layout(struct mm_struct *mm)<br />	{<br />		mm-&gt;mmap_base = TASK_UNMAPPED_BASE;<br />		mm-&gt;get_unmapped_area = arch_get_unmapped_area;<br />		mm-&gt;unmap_area = arch_unmap_area;<br />	}<br />	#endif<br /><br />then trying to grep for arch_pick_mmap_layout() would show EVERY SINGLE <br />RELEVANT CASE! And it would show the "__weak" there too, so that once <br />people get used to this convention, they'd have a really easy time <br />figuring out the rules from just the output of the 'grep'.<br /><br />I really think that whoever started that 'HAVE_ARCH_x'/'ARCH_HAS_x' mess <br />with totally random symbols that have NOTHING WHAT-SO-EVER to do with the <br />actual symbols in question (so they do _not_ show up in grep'ing for some <br />use) should be shot. <br /><br />We should never _ever_ use that model. And we use it way too much.<br /><br />We should generally strive for the simpler and much more obvious<br /><br />	/* Generic definition */<br />	#ifndef symbol<br />	int symbol(..)<br />	...<br />	#endif<br /><br />and then architecture code can do<br /><br />	#define symbol(x) ...<br /><br />or if they want to do a function, and you _really_ don't like the '__weak' <br />part (or you want to make it an inline function and don't want the clash <br />with the real declaration), then you can just do<br /><br />	static inline int symbol(x)<br />	{<br />		...<br />	}<br />	#define symbol symbol<br /><br />and again it all works fine WITHOUT having to introduce some idiotic new <br />and unrelated element called ARCH_HAS_SYMBOL.<br /><br />And now when you do 'git grep symbol' you really will see the rules. ALL <br />the rules. Not some random collection of uses that don't actually explain <br />why there are five different definitions of the same thing and then you <br />have to figure out which one gets used.<br /><br />&gt; My basic point here is that __weak makes the code easier to write but<br />&gt; harder to read, and we're supposed to be optimising for easier to read.<br /><br />But your basic point is flawed. The thing you advocate is actually harder <br />to read.<br /><br />Yes, if you don't follow the codign style, and you write<br /><br />	int __weak<br />	symbol(x)<br />	{<br /><br />you are (a) a moronic rebel you never understood why the declaration <br />should be on one line and (b) as a result your 'grep' won't see the __weak <br />and you'll be confused about the rules.<br /><br />But if we _consistently_ used<br /><br /> - '#ifndef symbol' to avoid redeclaring something that the architecture <br />   overrides<br /><br /> - and '__weak' to allow architectures to just override functions without <br />   extra work and rules<br /><br />then after a while people would simply _know_ that very simple set of <br />rules, and a 'grep' would work so much better than it does now.<br /><br />Really. Try it. Try it with 'arch_pick_mmap_layout' (with Andrews patch in <br />place). And then imagine that you'd be used to '__weak', and seeing that <br />additional<br /><br />	mm/util.c:#ifndef arch_pick_mmap_layout<br />	mm/util.c:void __weak arch_pick_mmap_layout(struct mm_struct *mm)<br /><br />in the output. Be honest now - wouldn't that actually _tell_ you something <br />relevant about that particular declaration? And make the fact that some <br />architectures override it _less_ confusing?<br /><br />IOW, you could tell directly from the grep output that it's a "default <br />fallback". Which you definitely cannot tell right now, because we have <br />insane models for doing it.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
