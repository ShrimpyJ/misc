    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/20/118">First message in thread</a></li><li><a href="/lkml/2008/7/24/170">"Pekka Enberg"</a><ul><li><a href="/lkml/2008/7/24/172">Patrick McHardy</a><ul><li><a href="/lkml/2008/7/24/186">Pekka Enberg</a><ul><li><a href="/lkml/2008/7/24/193">Patrick McHardy</a><ul><li><a href="/lkml/2008/7/24/196">Pekka Enberg</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2008/7/24/431">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/24/431">David Miller</a></li><li><a href="/lkml/2008/7/26/106">Patrick McHardy</a></li><li><a href="/lkml/2008/8/1/397">"Paul E. McKenney"</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/7/24/418/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Jul 2008 14:13:42 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [regression] nf_iterate(), BUG: unable to handle kernel NULL pointer dereference</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 24 Jul 2008, Patrick McHardy wrote:<br />&gt; <br />&gt; To fix this I think we need a __krealloc() that doesn't<br />&gt; free the old memory, especially since it must not be<br />&gt; freed immediately because it may still be used in a RCU<br />&gt; read side (see the last part in the patch attached to<br />&gt; this mail (based on a kernel without your patch)).<br /><br />Hmm. Don't you need to fix some of the ordering of the initialization too?<br /><br />If there are possible readers that happen in parallel with changing this <br />thing, don't you need to protect the update of "ext-&gt;len" against the <br />actual changes? And the readers should probably have a read barrier <br />between checking "len" and actually looking at the values? Finally, why do <br />the "ct-&gt;ext" dereference thing, when we know it has to be equal to "new"?<br /><br />ie something like this on the writing side (in _addition_ to both the <br />patches already seen), but I didn't do the reading side (ie there are no <br />"smp_rmb()"'s on the reading side)<br /><br />And no, I don't know the code, so I don't know who/what can read those <br />things with RCU, so maybe there is some reason why the actual data doesn't <br />need protecting. But I somehow doubt it.<br /><br />		Linus<br /><br />---<br /> net/netfilter/nf_conntrack_extend.c |    9 +++++----<br /> 1 files changed, 5 insertions(+), 4 deletions(-)<br /><br />diff --git a/net/netfilter/nf_conntrack_extend.c b/net/netfilter/nf_conntrack_extend.c<br />index 3469bc7..135e095 100644<br />--- a/net/netfilter/nf_conntrack_extend.c<br />+++ b/net/netfilter/nf_conntrack_extend.c<br />&#64;&#64; -115,10 +115,11 &#64;&#64; void *__nf_ct_ext_add(struct nf_conn *ct, enum nf_ct_ext_id id, gfp_t gfp)<br /> 		ct-&gt;ext = new;<br /> 	}<br /> <br />-	ct-&gt;ext-&gt;offset[id] = newoff;<br />-	ct-&gt;ext-&gt;len = newlen;<br />-	memset((void *)ct-&gt;ext + newoff, 0, newlen - newoff);<br />-	return (void *)ct-&gt;ext + newoff;<br />+	new-&gt;offset[id] = newoff;<br />+	memset((void *)new + newoff, 0, newlen - newoff);<br />+	smp_wmb();<br />+	new-&gt;len = newlen;<br />+	return (void *)new + newoff;<br /> }<br /> EXPORT_SYMBOL(__nf_ct_ext_add);<br /> <br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
