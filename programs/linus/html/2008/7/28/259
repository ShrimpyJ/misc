    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/28/191">First message in thread</a></li><li><a href="/lkml/2008/7/28/241">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/28/248">James Bottomley</a><ul><li class="origin"><a href="/lkml/2008/7/28/369">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/28/369">Mathieu Desnoyers</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 28 Jul 2008 10:10:19 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/1] mm: unify pmd_free() implementation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 28 Jul 2008, James Bottomley wrote:<br />&gt; <br />&gt; Sorry ... should have been clearer.  My main concern is the cost of<br />&gt; barrier() which is just a memory clobber ... we have to use barriers to<br />&gt; place the probe points correctly in the code.<br /><br />Oh, "barrier()" itself has _much_ less cost.<br /><br />It still has all the "needs to flush any global/address-taken-of variables <br />to memory" property and can thus cause reloads, but that's kind of the <br />point of it, after all. So in that sense "barrier()" is free: the only <br />cost of a barrier is the cost of what you actually need to get done. It's <br />not really "free", but it's also not any more costly than what your <br />objective was.<br /><br />In contrast, the "objective" in an empty function call is seldom the <br />serialization, so in that case the serialization is all just unnecessary <br />overhead.<br /><br />Also, barrier() avoids the big hit of turning a leaf function into a <br />non-leaf one. It also avoids all the fixed registers and the register <br />clobbers (although for tracing purposes you may end up setting up fixed <br />regs, of course).<br /><br />The leaf -&gt; non-leaf thing is actually often the major thing. Yes, the <br />compiler will often inline functions that are simple enough to be leaf <br />functions with no stack frame, so we don't have _that_ many of them, but <br />when it hits, it's often the most noticeable part of an unnecessary <br />function call. And "barrier()" should never trigger that problem.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
