    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/28/328">First message in thread</a></li><li><a href="/lkml/2008/7/28/528">Johannes Weiner</a><ul><li><a href="/lkml/2008/7/28/541">Johannes Weiner</a><ul><li class="origin"><a href="/lkml/2008/7/28/555">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/28/555">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/28/564">Alexey Dobriyan</a></li><li><a href="/lkml/2008/7/28/572">Hugh Dickins</a></li><li><a href="/lkml/2008/7/28/580">Nick Piggin</a></li></ul></li><li><a href="/lkml/2008/7/28/565">Johannes Weiner</a></li><li><a href="/lkml/2008/7/28/582">Nick Piggin</a></li></ul></li></ul></li><li><a href="/lkml/2008/7/28/542">Alexey Dobriyan</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 28 Jul 2008 17:33:46 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: do not overrun page table ranges in gup</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 29 Jul 2008, Johannes Weiner wrote:<br />&gt; <br />&gt; Actually, I think the prettier fix would be to just establish that<br />&gt; garuantee:<br />&gt;<br />&gt; --- a/arch/x86/mm/gup.c<br />&gt; +++ b/arch/x86/mm/gup.c<br />&gt; &#64;&#64; -223,7 +223,7 &#64;&#64; int get_user_pages_fast(unsigned long start, int nr_pages, int write,<br />&gt;  			struct page **pages)<br />&gt;  {<br />&gt;  	struct mm_struct *mm = current-&gt;mm;<br />&gt; -	unsigned long end = start + (nr_pages &lt;&lt; PAGE_SHIFT);<br />&gt; +	unsigned long end = PAGE_ALIGN(start + (nr_pages &lt;&lt; PAGE_SHIFT));<br /><br />Umm. 'end' is guaranteed to be page-aligned if 'start' is. <br /><br />So if this makes a difference, that implies that _start_ isn't <br />page-aligned, and then you when you add PAGE_SIZE to 'addr', you are going <br />to miss 'end' again.<br /><br />So no, the right fix would be to align 'start' first, which means that <br />everything else (including 'end') will be page-aligned. Aligning just one <br />or the other is very very wrong.<br /><br />But yeah, this looks like a nasty bug. It's also sad that the code <br />that _should_ be architecture-independent, isn't - because every <br />architecture defines the _whole_ "get_user_pages_fast()", even though part <br />of it is very much arch-independent (the whole alignment/access_ok part).<br /><br />It also shows a bug in that whole "access_ok()" check. The fact is, that <br />thing is broken too - for the same reason. If you want to get a single <br />page at the end of the address space, but don't use an aligned address, <br />the "access_ok()" will fail.<br /><br />Nick, how do you want to fix this? I was just about to cut an -rc1, but I <br />would really like to see this one not make it into it..<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
