    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/16/393">First message in thread</a></li><li><a href="/lkml/2008/7/17/233">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/17/364">Len Brown</a><ul><li><a href="/lkml/2008/7/17/378">Harvey Harrison</a><ul><li><a href="/lkml/2008/7/17/431">Andi Kleen</a></li></ul></li><li class="origin"><a href="/lkml/2008/7/17/381">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/17/381">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2008/7/17/467">"J. Bruce Fields"</a></li></ul></li><li><a href="/lkml/2008/7/17/540">Thomas Gleixner</a><ul><li><a href="/lkml/2008/7/17/555">Andi Kleen</a></li><li><a href="/lkml/2008/7/17/575">Thomas Gleixner</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Jul 2008 12:12:38 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Please pull ACPI updates</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 17 Jul 2008, Len Brown wrote:<br />&gt; <br />&gt; ps.<br />&gt; <br />&gt; One thing I wish I had in git is a way to make this sequence easier...<br /><br />Actually, it _is_ easier, although apparently the thing that made it <br />easier isn't necessarily widely known or documented.<br /><br />I'm going to quote your whole sequence, because it's not a really odd <br />thing do want to do, and quoting how you do it now also makes the "proper <br />git way" actually much more understandable:<br /><br />&gt; Say I have a big topic branch with 30 patches in it.<br />&gt; The 3rd patch turns out to have a bug in it, but the<br />&gt; rest of the series is okay.  Today I invoke gitk on<br />&gt; the branch and keep that open.<br />&gt;<br />&gt; Then I create a new topic branch at the broken patch.<br />&gt; <br />&gt; I always consult ~/src/git/Documentation/git-reset.txt<br />&gt; so I can remember the following sequence...<br />&gt; <br />&gt; $ git reset --soft HEAD^<br />&gt; $ edit<br />&gt; $ git commit -a -c ORIG_HEAD<br />&gt; <br />&gt; Now I've got the fixed 3rd patch checked in,<br />&gt; but 27 patches in the original branch are hanging<br />&gt; off the original broken 3rd patch.<br />&gt; So I git-cherry-pick 27 patches<br />&gt; I hope I get them in the right order and don't miss any...<br />&gt; <br />&gt; It would be nice if we could somehow git rebase those<br />&gt; 27 patches in a single command, but if we do,<br />&gt; that pulls with it the broken 3rd patch.<br />&gt; <br />&gt; come to think of it, I can probably export 4..27 as<br />&gt; an mbox and then import it on top of the new 3,<br />&gt; maybe that is what others do.<br /><br />No, what others do (if they know the tricks) is to say something like:<br /><br />	git rebase -i &lt;starting-point&gt;<br /><br />("-i" is short for "--interactive") where the starting point is just where <br />you want to start your work. It might be "origin", or it might be <br />"HEAD~30" to say "30 commits ago" or whatever. Anyway, it's basically the <br />stable point before the place you want to fix up.<br /><br />That thing will literally show you the list of commits in an editor, and <br />then you can re-order them or mark them for special actions.<br /><br />The normal action is to "pick" the commit (ie you just cherry-pick it). <br />But rather than just picking a commit (remember - you can change the order <br />by just editing the list), you can also do<br /><br /> - "edit": this just basically pauses the rebase after committing the <br />    cherry-pick, so that you can then edit things and fix them with "git <br />    commit --amend", and when you're happy, you do "git rebase --continue"<br />    to continue your series.<br /><br /> - "squash": this squashes the commit in togethr with the previous one, <br />   and is very useful together with moving commits around. IOW, maybe you <br />   committed a fix to a previous commit, and want to integrate the fix <br />   into the original commit - in that case you'd move the commit in the <br />   list up to just after the commit you want to fix, and change the "pick" <br />   into a "squash"<br /><br />so it actually makes doing what you do above by hand much easier.<br /><br />[ Honesty in advertising: I actually don't use this at all. I've tested <br />  it, and I think it's very useful, but I have so far mostly ended up <br />  doing this by hand in the very few cases I do it at all. Part of the <br />  reason is that "git rebase -i" is fairly recent, so it's not part of my <br />  normal tool set.<br /><br />  But the bigger reason is that obviously all the commits I tend to do are <br />  just merges, and I don't maintain "patch series" in my trees except <br />  sometimes for git itself ]<br /><br />Git rebase can also try to rebase merges (the "-p" flag - short form of <br />"--preserve-merges"), so this _does_ work with a non-linear history too to <br />some degree, but quite frankly, I would seriously suggest people try to <br />avoid getting quite that funky with it. It's useful for emergencies, but <br />you'd better know what you are doing, and you should look at the <br />before-and-after state very carefully.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
