    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/7/16/393">First message in thread</a></li><li><a href="/lkml/2008/7/17/430">Andi Kleen</a><ul><li><a href="/lkml/2008/7/17/434">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/17/443">Andi Kleen</a></li><li class="origin"><a href="/lkml/2008/7/17/454">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/17/454">Linus Torvalds</a><ul><li><a href="/lkml/2008/7/18/223">Olivier Galibert</a></li></ul></li><li><a href="/lkml/2008/7/17/457">Andi Kleen</a></li></ul></li></ul></li><li><a href="/lkml/2008/7/17/440">"Ray Lee"</a><ul><li><a href="/lkml/2008/7/17/455">Andi Kleen</a><ul><li><a href="/lkml/2008/7/18/27">	david&#64;lang ...</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Jul 2008 13:16:39 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Please pull ACPI updates</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 17 Jul 2008, Linus Torvalds wrote:<br />&gt; <br />&gt; In particular, if something worked for somebody before, it also removes <br />&gt; the "known good state" from a bisection standpoint, so rebasing actually <br />&gt; makes things _harder_ to bisect - because now you cannot sanely bisect <br />&gt; between two versions of the tree (when you mark the old tree "good", it <br />&gt; has no relevance to the new tree that had all the old history rewritten).<br /><br />Let me do a made-up example of this just to kind of illustrate the point.<br /><br />Let's say that _I_ rebased history to always make it linear.<br /><br />That would obviously make things much "easier" to bisect, since now it's <br />just a linear list of commits, and bisection is just taking the midpoint <br />of that list and trying it. Right? Also, I'd fix up the linear list so <br />that any found bugs are squashed into th code that caused them, so all <br />_known_ bugs are non-issues from the standpoint of bisection: because the <br />code you are bisecting already has those removed entirely.<br /><br />That's a clean nice linear history with no unnecessary breakages (no <br />compile failures, no other unrelated and solved bugs) for bisection, so <br />bisecting new bugs must be much simpler, right?<br /><br />WRONG.<br /><br />It means that a person who ran my tree as of yesterday, and had a working <br />setup, but then updated to my tree as of today, and things break, can no <br />longer bisect sanely AT ALL - because the state that he was at yesterday <br />is basically completely *gone*, because it has been cleaned-up and <br />sanitized, since I happened to rewrite history from a week ago due to <br />finding a bug.<br /><br />Also, related to the same thing, if that person had some patches of his <br />own that he was working on on top of the state I had yesterday, since I <br />rebased, it's now almost impossible for him to be able to judge what is <br />really _new_ stuff, and what is just the old stuff he was working on, <br />except it's been cleaned up and sanitized.<br /><br />But at the same time, the new history is clearly _simpler_, isn't it? Yes, <br />it is simpler, BUT ONLY IF YOU DON'T TAKE INTO ACCOUNT THAT SOMEBODY <br />ALREADY SAW AND USED THE _OTHER_ HISTORY YESTERDAY!<br /><br />I'm shouting, because this is really really important from a very <br />fundamental standpoint. It's not just important from a git standpoint: <br />this really is _not_ some odd git-specific implementation issue. No, it's <br />much much more fundamental than git. It's a very basic fact that woudl be <br />true with _any_ SCM.<br /><br />So git just happens to encode that fundamental truth a bit more explicitly <br />and make it very obvious. Git is very careful at _not_ losing that state <br />as it existed somewhere yesterday.<br /><br />So rebasing and cleanups may indeed result in a "simpler" history, but it <br />only look that way if you then ignore all the _other_ "simpler" histories. <br />So anybody who rebases basically creates not just one simple history, but <br />a _many_ "simple" histories, and in doing so actually creates a <br />potentially much bigger mess than he started out with!<br /><br />As long as you never _ever_ expose your rewriting of history to anybody <br />else, people won't notice or care, because you basically guarantee that <br />nobody can ever see all those _other_ "simpler" histories, and they only <br />see the one final result. That's why 'rebase' is useful for private <br />histories.<br /><br />But even then, any testing you did in your private tree is now suspect, <br />because that testing was done with the old history that you threw away.  <br />So even if you delete all the old histories and never show them, they kind <br />of do exist conceptually - they existed in the sense that you tested them, <br />and you've just hidden the fact that what you release is different from <br />what you tested.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
