    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/29/149">First message in thread</a></li><li><a href="/lkml/2008/9/30/263">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/30/311">Rene Herman</a><ul><li><a href="/lkml/2008/9/30/312">Rene Herman</a></li><li><a href="/lkml/2008/9/30/321">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/30/349">Rene Herman</a></li></ul></li></ul></li><li><a href="/lkml/2008/9/30/315">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2008/9/30/332">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/30/332">Arjan van de Ven</a></li><li><a href="/lkml/2008/9/30/337">Ingo Molnar</a></li><li><a href="/lkml/2008/10/1/21">Grant Grundler</a><ul><li><a href="/lkml/2008/10/1/79">Ingo Molnar</a></li><li><a href="/lkml/2008/10/1/208">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2008/9/30/342">Rolf Eike Beer</a><ul><li><a href="/lkml/2008/10/1/90">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Sep 2008 12:51:07 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2/2] PNP: don't check disabled PCI BARs for conflicts in quirk_system_pci_resources()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 30 Sep 2008, Ingo Molnar wrote:<br />&gt; <br />&gt; incidentally, i've been talking to Arjan about this recently in context <br />&gt; of the CONFIG_FASTBOOT feature. Because, as a side-effect, in the long <br />&gt; run, once the dependencies between initcalls fan out in a more natural <br />&gt; way, with explicit initcall ordering we'll also be able to boot a bit <br />&gt; faster and a bit more parallel.<br /><br />Hell no.<br /><br />We do not want any implicit parallelism in the initcalls. That way lies <br />madness.<br /><br />The probe functions that explicitly know that they are slow (like USB <br />detection and/or other individual drivers that have timeouts) should put <br />themselves in the background. We should _not_ use the dependency chain to <br />do so automatically, because for most cases drivers are totally <br />independent, but we still want a _reliable_  and _repeatable_ ordering.<br /><br />Which means that I will not accept stuff that makes for a parallel bootup <br />as a general initcall notion. I want things like network devices to show <br />up in the same order for the same kernel, thank you very much - even if <br />there is absolutely _zero_ ordering constraints between two independent <br />network drivers.<br /><br />Anything else will inevitably cause just totally random and undebuggable <br />problems.<br /><br />&gt; i think the topological ordering should not be just an extension of the <br />&gt; current hardcoded initcall levels, but it should be symbol space based: <br />&gt; i.e. an initcall should depend not on some kind of artificial enum, but <br />&gt; it should depend on _another initcall_. (a list of initcalls more <br />&gt; generally)<br /><br />Yes, it should be explicit.<br /><br />However, I don't agree with the notion of having initcalls point to other <br />initcalls. One big _idea_ of initcalls is that you can put them anywhere <br />in the source code, and that CONFIG_XYZ variables will automatically run <br />them or not depending on whether the code was compiled in. Having <br />something like:<br /><br />&gt; so instead of the current hardcoded levels:<br />&gt; <br />&gt;   core_initcall(sysctl_init);<br />&gt; <br />&gt; we could have natural constructs like:<br />&gt; <br />&gt;   initcall_depends_on(sysctl_init, securityfs_init);<br />&gt;   initcall_depends_on(sock_init, sysctl_init)<br /><br />would be a TOTAL DISASTER, because if you do that, then you are <br />essentially back to the insane situation where people need to know what <br />other parts are enabled.<br /><br />So no. No "one call depends on another" crap.<br /><br />But I think we could add a separate notion of a dependancy point, and have <br />a setup where we describe "initcall X needs to happen before point A" and <br />"initcall Z needs to happen after point A".<br /><br />And then we can create a separate set of these dependency points, so that <br />X and Y don't have to know about each other, they just have to have some <br />knowledge about some common synchronization point - one that exists <br />regardless of whether X or Y are even compiled in!<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
