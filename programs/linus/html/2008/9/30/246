    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/25/356">First message in thread</a></li><li><a href="/lkml/2008/9/30/208">Jonathan Corbet</a><ul><li><a href="/lkml/2008/9/30/229">Peter Zijlstra</a><ul><li class="origin"><a href="/lkml/2008/9/30/255">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/30/255">Steven Rostedt</a><ul><li><a href="/lkml/2008/9/30/260">Linus Torvalds</a></li><li><a href="/lkml/2008/9/30/271">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Sep 2008 09:38:18 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v10 Golden] Unified trace buffer</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 30 Sep 2008, Peter Zijlstra wrote:<br />&gt; <br />&gt; Its not that complex IMHO, the thing that is ugly are those struct page<br />&gt; overloads, what we could do is try and sanitize the regular struct page<br />&gt; and pull all these things in.<br /><br />That's not the scary part. The scary part is that somebody may well want <br />to access the trace buffer pages in complex ways.<br /><br />If you mmap them, for example, you can use VM_PFNMAP to make sure that <br />nobody should ever look at the "struct page", but if you want to do things <br />like direct-to-disk IO on the trace pages (either with splice() or with <br />some kind of in-kernel IO logic), then you're officially screwed.<br /><br />&gt; Because the only reason people are doing these overloads is because<br />&gt; struct page in mm_types.h is becomming an unreadable mess.<br /><br />The "unreadable mess" has exactly the same issues, though: people need to <br />realize that when you overload fields in the page structure, you can then <br />NEVER EVER use those pages for any other thing. <br /><br />For the internal VM code, that's ok. The VM knows that a page is either an <br />anonymous page or a file mapping etc, and the overloading wrt mm_types.h <br />is explicit. The same goes for SL*B, although it does the overloading <br />differently.<br /><br />Trace buffers are different, though. Do people realize that doing the <br />overloading means that you never EVER can use those buffers for anything <br />else? Do people realize that it means that splice() and friends are out of <br />the question?<br /><br />&gt; Trouble is, looking at it I see no easy way out,<br /><br />Quite frankly, we could just put it at the head of the page itself. Having <br />a "whole page" for the trace data is not possible anyway, since the trace <br />header itself will always eat 8 bytes.<br /><br />And I do think it would potentially be a better model. Or at least safer.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
