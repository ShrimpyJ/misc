    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/9/30/124">Ingo Molnar</a><ul><li><a href="/lkml/2008/9/30/234">Mike Travis</a><ul><li class="origin"><a href="/lkml/2008/9/30/281">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/30/281">Mike Travis</a><ul><li><a href="/lkml/2008/9/30/374">Mike Travis</a></li></ul></li><li><a href="/lkml/2008/9/30/419">Rusty Russell</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Sep 2008 09:46:59 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 30 Sep 2008, Mike Travis wrote:<br />&gt; <br />&gt; One pain is:<br />&gt; <br />&gt; 	typedef struct __cpumask_s *cpumask_t;<br />&gt; 	const cpumask_t xxx;<br />&gt; <br />&gt; is not the same as:<br />&gt; <br />&gt; 	typedef const struct __cpumask_s *const_cpumask_t;<br />&gt; 	const_cpumask_t xxx;<br />&gt; <br />&gt; and I'm not exactly sure why.<br /><br />Umm. The const has different <br /><br />One is<br /><br />	typedef const struct __cpumask_s *const_cpumask_t;<br /><br />which becomes<br /><br />	(const struct __cpumask_s) *<br /><br />while the other is<br /><br />	const cpumask_t xxx<br /><br />which is<br /><br />	const (struct __cpumask_s *)<br /><br />and if you look a bit more closely, you'll see that they are _obviously_ <br />not the same thing at all.<br /><br />Quite frankly, I personally do hate typedefs that end up being pointers, <br />and used as pointers, without showing that in the source code.<br /><br />When you do<br /><br />	type_t a;<br /><br />	fn(a);<br /><br />I expect the code to essentially do a pass-by-value. But when the type_t <br />is a pointer, that doesn't really work.<br /><br />Your issue with 'const' is just another version of the same. You don't <br />want the _pointer_ to be const, you want what it points _to_ to be const. <br />But because you hid the pointerness inside the typedef, you simply cannot <br />do that.<br /><br />The problem with cpumask's, of course, is that for the "small mask" case, <br />we really don't want it to be a pointer. So now it's sometimes a pointer <br />and sometimes not. The typedef hides that, and I understand why it's a <br />good idea, but I'm surprised you didn't understand what the implications <br />were for 'const', and I'm now a bit more leery about this whole thing just <br />because the typedef ends up hiding so much - it doesn't just hide the <br />basic type, it hides a very basic *code* issue.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
