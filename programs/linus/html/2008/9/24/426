    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/24/13">First message in thread</a></li><li><a href="/lkml/2008/9/24/338">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/24/353">Mathieu Desnoyers</a><ul><li class="origin"><a href="/lkml/2008/9/24/433">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/24/433">Linus Torvalds</a></li><li><a href="/lkml/2008/9/25/314">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/9/25/318">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/9/25/284">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/9/25/293">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/25/301">Steven Rostedt</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 24 Sep 2008 15:28:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH 1/3] Unified trace buffer</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 24 Sep 2008, Mathieu Desnoyers wrote:<br />&gt; <br />&gt; The reason why Martin did use only a 27 bits TSC in ktrace was that they<br />&gt; were statically limited to 32 event types.<br /><br />Well, I actually think we could do the same - for the "internal" types.<br /><br />So why not do something like 4-5 bits for the basic type information, and <br />then oen of those cases is a "freeform" thing, and the others are reserved <br />for other uses.<br /><br />So a trace entry header could easily look something like<br /><br />	struct trace_entry {<br />		u32 tsc_delta:27,<br />		     type:5;<br />		u32 data;<br />		u64 array[];<br />	}<br /><br />and then depending on the that 5-bit type, the "data" field in the header <br />means different things, and the size of the trace_entry also is different.<br /><br />So it could be something like<br /><br /> - case 0: EnfOfPage marker<br />	(data is ignored)<br />	size = 8<br /><br /> - case 1: TSCExtend marker<br />	data = extended TSC (bits 28..59)<br />	size = 8<br /><br /> - case 2: TimeStamp marker<br />	data = tv_nsec<br />	array[0] = tv_sec<br />	size = 16<br /><br /> - case 3: LargeBinaryBlob marker<br />	data = 32-bit length of binary data<br />	array[0] = 64-bit pointer to binary blob<br />	array[1] = 64-bit pointer to "free" function<br />	size = 24<br /><br /> - case 4: SmallBinaryBlob marker<br />	data = inline length in bytes, must be &lt; 4096<br />	array[0..(len+7)/8] = inline data, padded<br />	size = (len+15) &amp; ~7<br /><br /> - case 5: AsciiFormat marker<br />	data = number of arguments<br />	array[0] = 64-bit pointer to static const format string<br />	array[1..arg] = argument values<br />	size = 8*(2+arg)<br /><br />  ...<br /><br />ie we use a few bits for "trace _internal_ type fields", and then for a <br />few of those types we have internal meanings, and other types just means <br />that the user can fill in the data itself.<br /><br />IOW, you _could_ have an interface like<br /><br />	ascii_marker_2(ringbuffer,<br />		"Reading sector %lu-%lu",<br />		sector, sector+nsec);<br /><br />and what it would create would be a fairly small trace packet that looks <br />something like<br /><br />	.type = 5,<br />	.tsc_delta = ...,<br />	.data = 2,<br />	.array[0] = (const char *) "Reading sector %lu-%lu\n"<br />	.array[1] = xx,<br />	.array[2] = yy<br /><br />and you would not actually print it out as ASCII until somebody read it <br />from the kernel (and any "binary" interface would get the string as a <br />string, not as a pointer, because the pointer is obviously meaningless <br />outside the kernel.<br /><br />Also note how you'd literally just have a single copy of the string, <br />because the rule would be that a trace user must use a static string, not <br />some generated one that can go away (module unloading would need to be <br />aware of any trace buffer entries, of course - perhaps by just disallowing <br />unloading while trace buffers are active).<br /><br />And note! Everything above is meant as an example of something that <br />_could_ work. I do like the notion of putting pointers to strings in the <br />markers, rather than having some odd magic numerical meaning that user <br />space has to just magically know that "event type 56 for ring buffer type <br />171 means that there are two words that mean 'sector' and 'end-sector' <br />respectively".<br /><br />But it's still meant more as an RFC. But I think it could work.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
