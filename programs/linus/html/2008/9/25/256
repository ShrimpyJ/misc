    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/26/185">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/190">"Yinghai Lu"</a></li><li><a href="/lkml/2008/9/24/492">Rusty Russell</a><ul><li><a href="/lkml/2008/9/25/102">Ingo Molnar</a></li><li class="origin"><a href="/lkml/2008/9/25/415">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/25/415">Mike Travis</a></li><li><a href="/lkml/2008/9/26/9">Rusty Russell</a><ul><li><a href="/lkml/2008/9/26/20">Mike Travis</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Sep 2008 08:42:13 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 25 Sep 2008, Rusty Russell wrote:<br />&gt; <br />&gt;     This turns out to be awful in practice, mainly due to const.  Consider:<br />&gt; <br />&gt; 	#ifdef CONFIG_CPUMASK_OFFSTACK<br />&gt; 	typedef unsigned long *cpumask_t;<br />&gt; 	#else<br />&gt; 	typedef unsigned long cpumask_t[1];<br />&gt; 	#endif<br />&gt; <br />&gt; 	cpumask_t returns_cpumask(void);<br /><br />No. That's already broken. You cannot return a cpumask_t, regardless of <br />interface. We must not do it regardless of how we pass those things <br />around, since it generates _yet_ another temporary on the stack for the <br />return slot for any kind of structure.<br /><br />So all cpumask functions should always return pointers and/or take <br />pointers to be filled in. That's true *regardless* of how we actually are <br />to then allocate them.<br /><br />So forget returning cpumasks. It's irrelevant.<br /><br />What _is_ relevant is how we allocate them when we need temporary CPU <br />masks. And _that_ is where my suggestion comes in. For small NR_CPUS, we <br />really do want to allocate them on the stack, because calling kmalloc for <br />a 4- or 8-byte allocation is just _stupid_.<br /><br />So all your arguments are invalid, because you're looking at the wrong <br />thing. The thing that I was talking about is converting current code that <br />has<br /><br />   random_function(..)<br />   {<br />	cpumask_t mask;<br /><br />	.. do something with mask ...<br />   }<br /><br />which has to be converted some way. And I think it needs to be converted <br />in a way that does *not* force us to call kmalloc() for idiotically small <br />values.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
