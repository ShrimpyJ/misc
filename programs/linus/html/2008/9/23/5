    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/19/275">First message in thread</a></li><li><a href="/lkml/2008/9/22/468">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/22/470">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/9/23/2">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2008/9/22/471">Steven Rostedt</a><ul><li><a href="/lkml/2008/9/23/3">Masami Hiramatsu</a><ul><li><a href="/lkml/2008/9/23/4">"Martin Bligh"</a><ul><li><a href="/lkml/2008/9/23/209">Masami Hiramatsu</a></li></ul></li><li><a href="/lkml/2008/9/23/89">Steven Rostedt</a></li></ul></li><li class="origin"><a href="/lkml/2008/9/23/186">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/23/186">Mathieu Desnoyers</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 22 Sep 2008 21:19:01 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Unified tracing buffer</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 22 Sep 2008, Steven Rostedt wrote:<br />&gt; <br />&gt; But, with that, with a global atomic counter, and the following trace:<br />&gt; <br />&gt; cpu 0: trace_point_a<br />&gt; cpu 1: trace_point_c<br />&gt; cpu 0: trace_point_b<br />&gt; cpu 1: trace_point_d<br />&gt; <br />&gt; Could the event a really come after event d, even though we already hit <br />&gt; event b?<br /><br />Each tracepoint will basically give a partial ordering (if you make it so, <br />of course - and on x86 it's hard to avoid it).<br /><br />And with many trace-points, you can narrow down ordering if you're lucky.<br /><br />But say that you have code like<br /><br />	CPU#1		CPU#2<br /><br />	trace_a		trace_c<br />	..		..<br />	trace_b		trace_d<br /><br />and since each CPU itself is obviously strictly ordered, you a priori know <br />that a &lt; b, and c &lt; d. But your trace buffer can look many different ways:<br /><br /> - a -&gt; b -&gt; c -&gt; d<br />   c -&gt; d -&gt; a -&gt; b<br /><br />   Now you do know that what happened between c and d must all have <br />   happened entirely after/before the things that happened between<br />   a and b, and there is no overlap.<br /><br />   This is only assuming the x86 full memory barrier from a "lock xadd" of <br />   course, but those are the semantics you'd get on x86. On others, the <br />   ordering might not be that strong.<br /><br /> - a -&gt; c -&gt; b -&gt; d<br />   a -&gt; c -&gt; d -&gt; b<br /><br />   With these trace point orderings, you really don't know anything at all <br />   about the order of any access that happened in between. CPU#1 might <br />   have gone first. Or not. Or partially. You simply do not know.<br /><br />&gt; But I guess you are stating the fact that what the computer does <br />&gt; internally, no one really knows. Without the help of real memory barriers, <br />&gt; ording of memory accesses is mostly determined by tarot cards.<br /><br />Well, x86 defines a memory order. But what I'm trying to explain is that <br />memory order still doesn't actually specify what happens to the code that <br />actually does tracing! The trace is only going to show the order of the <br />tracepoints, not the _other_ memory accesses. So you'll have *some* <br />information, but it's very partial.<br /><br />And the thing is, all those other memory accesses are the ones that do all <br />the real work. You'll know they happened _somewhere_ between two <br />tracepoints, but not much more than that.<br /><br />This is why timestamps aren't really any worse than sequence numbers in <br />all practical matters. They'll get you close enough that you can consider <br />them equivalent to a cache-coherent counter, just one that you don't have <br />to take a cache miss for, and that increments on its own!<br /><br />Quite a lot of CPU's have nice, dependable, TSC's that run at constant <br />frequency. <br /><br />And quite a lot of traces care a _lot_ about real time. When you do IO <br />tracing, the problem is almost never about lock ordering or anything like <br />that. You want to see how long a request took. You don't care AT ALL how <br />many tracepoints were in between the beginning and end, you care about how <br />many microseconds there were!<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
