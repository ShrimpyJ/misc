    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/26/198">First message in thread</a></li><li><a href="/lkml/2008/9/28/30">Al Viro</a><ul><li><a href="/lkml/2008/9/28/87">Hugh Dickins</a><ul><li class="origin"><a href="/lkml/2008/9/28/100">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/28/100">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/28/104">Hugh Dickins</a></li></ul></li><li><a href="/lkml/2008/9/28/118">(Eric W. Biederman)</a></li></ul></li></ul></li><li><a href="/lkml/2008/9/28/95">Linus Torvalds</a><ul><li><a href="/lkml/2008/9/28/97">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/9/28/98/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 28 Sep 2008 13:55:29 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.27-rc7-sha1: EIP at proc_sys_compare+0x36/0x50</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 28 Sep 2008, Hugh Dickins wrote:<br />&gt; <br />&gt; I got a couple of earlier instances of this on powerpc<br />&gt; <a href="https://lkml.org/lkml/2008/8/14/289">http://lkml.org/lkml/2008/8/14/289</a><br />&gt; but saw nothing more of it, so asked Al to forget about it.<br />&gt; <br />&gt; But today I've got it again, this time on x86_64, with kdb in<br />&gt; (but not serial console), similar kernel builds with swapping<br />&gt; loads as before.  Though with Andrew's latest mmotm, so some<br />&gt; details different from 2.6.27-rc, and could be an mmotm bug.<br /><br />Ok, you were definitely under memory pressure, and yes, it looks like the <br />exact same bug on ppc64 - access to a pointer that is two poointers offset <br />down from NULL.<br /><br />&gt; The dentry in question (it's for /proc/sys/kernel/ngroups_max)<br />&gt; looks as if the __d_drop and d_kill of prune_one_dentry() came<br />&gt; in on one cpu just after __d_lookup() had found the entry on<br />&gt; parent's hashlist, just before it acquired dentry-&gt;d_lock.<br /><br />Yes. <br /><br />&gt; That's plausible, isn't it, and would account for the rarity,<br />&gt; and would say Linus's patch is good?<br />&gt; <br />&gt; Do ask me for any details you'd like out of the dentry.<br /><br />I actually like my second patch better - it looks simpler, and it means <br />that the rules for filesystems using d_compare() are a bit clearer: at <br />least we'll only pass them dentries to look at that haven't gone through <br />d_drop (and we do hold dentry-&gt;d_lock that serializes all of that).<br /><br />So here it is again (I sent it out just minutes ago, but you weren't on <br />that cc, you must have picked this up off the kernel list)<br /><br />NOTE! Totally untested patch! It looks sane and really obvious, but maybe <br />it has some insane and non-obvious bug.<br /><br />		Linus<br /><br />---<br /> fs/dcache.c |   10 ++++++----<br /> 1 files changed, 6 insertions(+), 4 deletions(-)<br /><br />diff --git a/fs/dcache.c b/fs/dcache.c<br />index 80e9395..e7a1a99 100644<br />--- a/fs/dcache.c<br />+++ b/fs/dcache.c<br />&#64;&#64; -1395,6 +1395,10 &#64;&#64; struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)<br /> 		if (dentry-&gt;d_parent != parent)<br /> 			goto next;<br /> <br />+		/* non-existing due to RCU? */<br />+		if (d_unhashed(dentry))<br />+			goto next;<br />+<br /> 		/*<br /> 		 * It is safe to compare names since d_move() cannot<br /> 		 * change the qstr (protected by d_lock).<br />&#64;&#64; -1410,10 +1414,8 &#64;&#64; struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)<br /> 				goto next;<br /> 		}<br /> <br />-		if (!d_unhashed(dentry)) {<br />-			atomic_inc(&amp;dentry-&gt;d_count);<br />-			found = dentry;<br />-		}<br />+		atomic_inc(&amp;dentry-&gt;d_count);<br />+		found = dentry;<br /> 		spin_unlock(&amp;dentry-&gt;d_lock);<br /> 		break;<br /> next:<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
