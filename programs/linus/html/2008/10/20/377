    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/16/511">First message in thread</a></li><li><a href="/lkml/2008/10/20/328">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/20/367">"john stultz"</a><ul><li class="origin"><a href="/lkml/2008/10/20/380">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/20/380">Ingo Molnar</a></li><li><a href="/lkml/2008/10/20/395">"H. Peter Anvin"</a><ul><li><a href="/lkml/2008/10/21/255">Bjorn Helgaas</a></li></ul></li><li><a href="/lkml/2008/10/20/429">john stultz</a></li></ul></li></ul></li><li><a href="/lkml/2008/10/22/369">Mathieu Desnoyers</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 20 Oct 2008 15:06:17 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC patch 15/15] LTTng timestamp x86</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 20 Oct 2008, john stultz wrote:<br />&gt; <br />&gt; I'm not quite sure I followed your per-cpu xtime thoughts.  Could you<br />&gt; explain further your thinking as to why the entire timekeeping<br />&gt; subsystem should be per-cpu instead of just keeping that back in the<br />&gt; arch-specific clocksource implementation?  In other words, why keep<br />&gt; things synced at the nanosecond level instead of keeping the per-cpu<br />&gt; TSC synched at the cycle level?<br /><br />I don't think you can kep them sync'ed without taking frequency drift into <br />account. When you have multiple boards (ie big boxes), they simply _will_ <br />be in different clock domains. They won't have the exact same frequency.<br /><br />So the "rewrite the TSC every once in a while" approach (where "after <br />coming out of idle" is just a special case of "once in a while" due to <br />many CPU's losing TSC in idle) works well in the kind of situation where <br />you really only have a single clock domain, and the TSC's are all <br />basically from the same reference clock. And that's a common case, but it <br />certainly isn't the _only_ case.<br /><br />What about fundamnetally different frequencies (old TSC's that change with <br />cpufreq)? Or what about just subtle different ones (new TSC's but on <br />separate sockets that use separate external clocks)?<br /><br />But sure, I can imagine using a global xtime, but just local TSC offsets <br />and frequencies, and just generating a local offset from xtime. BUT HOW DO <br />YOU EXPECT TO DO THAT?<br /><br />Right now, the global xtime offset thing also depends on the fact that we <br />have a single global TSC offset! That whole "delta against xtime" logic <br />depends very much on this:<br /><br />	/* calculate the delta since the last update_wall_time: */<br />	cycle_delta = (cycle_now - clock-&gt;cycle_last) &amp; clock-&gt;mask;<br /><br />and that base-time setting depends on a _global_ clock source. Why? <br />Because it depends on setting that in sync with updating xtime.<br /><br />And maybe I'm missing something. But I do not believe that it's easy to <br />just make the TSC be per-CPU. You need per-cpu correction factors, but you <br />_also_ need a per-CPU time base.<br /><br />Oh, I'm sure you can do hacky things, and work around known issues, and <br />consider the TSC to be globally stable in a lot of common schenarios. <br />That's what you get by re-syncing after idle etc. And it's going to work <br />in a lot of situations.<br /><br />But it's not going to solve the "hey, I have 512 CPU's, they are all on <br />different boards, and no, they are _not_ synchronized to one global <br />clock!".<br /><br />That's why I'd suggest making _purely_ local time, and then aiming for <br />something NTP-like. But maybe there are better solutions out there.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
