    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/15/194">First message in thread</a></li><li><a href="/lkml/2008/10/15/206">Nick Piggin</a><ul><li><a href="/lkml/2008/10/15/212">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/214">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/233">Matt Mackall</a></li></ul></li><li><a href="/lkml/2008/10/15/219">Nick Piggin</a><ul><li><a href="/lkml/2008/10/15/234">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/239">Nick Piggin</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/10/15/235">Nick Piggin</a><ul><li><a href="/lkml/2008/10/15/242">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/249">Nick Piggin</a></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/10/17/423/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Oct 2008 13:29:04 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc] SLOB memory ordering issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Ok, finally looked at this.<br /><br />There is indeed a locking bug there. "anon_vma_prepare()" optimistically <br />looks at vma-&gt;anon_vma without taking the &amp;mm-&gt;page_table_lock. That's not <br />right.<br /><br />Of course, we could just take the lock, but in this case it's probably ok <br />to just admit that we have a lockless algorithm. But that implies that we <br />need to do the right memory ordering.<br /><br />And that, in turn, doesn't just imply a "smp_wmb()" - if you do memory <br />ordering, you need to do it on *both* sides, so now the other side needs <br />to also do a matching smp_rmb(). Or, in this case, smp_rmb_depends(), I <br />guess.<br /><br />That, btw, is an important part of memory ordering. You can never do <br />ordering on just one side. A "smp_wmb()" on its own is always nonsensical. <br />It always needs to be paired with a "smp_rmb()" variant.<br /><br />Something like the appended may fix it.<br /><br />But I do think we have a potential independent issue with the new page <br />table lookup code now that it's lock-free. We have the smp_rmb() calls in <br />gup_get_pte() (at least on x86), when we look things up, but we don't <br />actually have a lot of smp_wmb()'s there when we insert the page.<br /><br />For the anonymous page case, we end up doing a<br /><br />	page_add_new_anon_rmap();<br /><br />before we do the set_pte_at() that actually exposes it, and that does the <br />whole<br /><br />	page-&gt;mapping = (struct address_space *) anon_vma;<br />	page-&gt;index = linear_page_index(vma, address);<br /><br />thing, but there is no write barrier between those and the actual write to <br />the page tables, so when GUP looks up the page, it can't actually depend <br />on page-&gt;mappign or anything else!<br /><br />Now, this really isn't an issue on x86, since smp_wmb() is a no-op, and <br />the compiler won't be re-ordering the writes, but in general I do think <br />that now that we do lockless lookup of pages from the page tables, we <br />probably do need smp_wmb()'s there just in front of the "set_pte_at()" <br />calls.<br /><br />NOTE NOTE! The patch below is only about "page-&gt;anon_vma", not about the <br />GUP lookup and page-&gt;mapping/index fields. That's an independent issue.<br /><br />And notice? This has _nothing_ to do with constructors or allocators.<br /><br />And of course - this patch is totally untested, and may well need some <br />thinking about.<br /><br />			Linus<br /><br />---<br /> mm/rmap.c |   18 ++++++++++++++++++<br /> 1 files changed, 18 insertions(+), 0 deletions(-)<br /><br />diff --git a/mm/rmap.c b/mm/rmap.c<br />index 0383acf..21d09bb 100644<br />--- a/mm/rmap.c<br />+++ b/mm/rmap.c<br />&#64;&#64; -81,6 +81,13 &#64;&#64; int anon_vma_prepare(struct vm_area_struct *vma)<br /> 		/* page_table_lock to protect against threads */<br /> 		spin_lock(&amp;mm-&gt;page_table_lock);<br /> 		if (likely(!vma-&gt;anon_vma)) {<br />+			/*<br />+			 * We hold the mm-&gt;page_table_lock, but another<br />+			 * CPU may be doing an optimistic load (the one<br />+			 * at the top), and we want to make sure that<br />+			 * the anon_vma changes are visible.<br />+			 */<br />+			smp_wmb();<br /> 			vma-&gt;anon_vma = anon_vma;<br /> 			list_add_tail(&amp;vma-&gt;anon_vma_node, &amp;anon_vma-&gt;head);<br /> 			allocated = NULL;<br />&#64;&#64; -92,6 +99,17 &#64;&#64; int anon_vma_prepare(struct vm_area_struct *vma)<br /> 		if (unlikely(allocated))<br /> 			anon_vma_free(allocated);<br /> 	}<br />+	/*<br />+	 * Subtle: we looked up anon_vma without any locking<br />+	 * (in the comon case), and are going to look at the<br />+	 * spinlock etc behind it. In order to know that it's<br />+	 * initialized, we need to do a read barrier here.<br />+	 *<br />+	 * We can use the cheaper "depends" version, since we<br />+	 * are following a pointer, and only on alpha may that<br />+	 * give a stale value.<br />+	 */<br />+	smp_read_barrier_depends();<br /> 	return 0;<br /> }<br /> <br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
