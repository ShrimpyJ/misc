    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/17/449">First message in thread</a></li><li><a href="/lkml/2008/10/17/449">Dave Airlie</a><ul><li class="origin"><a href="/lkml/2008/10/17/520">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/17/520">Eric Anholt</a><ul><li><a href="/lkml/2008/10/17/528">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/17/532">Keith Packard</a></li><li><a href="/lkml/2008/10/18/22">Eric Anholt</a></li></ul></li><li><a href="/lkml/2008/10/20/326">Jesse Barnes</a></li></ul></li><li><a href="/lkml/2008/10/18/36">"Dave Airlie"</a></li></ul></li><li><a href="/lkml/2008/10/17/517">Nick Piggin</a><ul><li><a href="/lkml/2008/10/18/166">Keith Packard</a><ul><li><a href="/lkml/2008/10/18/168">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/18/172">=?ISO-8859-1?Q?Thomas_Hellstr=F6m?=</a></li><li><a href="/lkml/2008/10/18/176">Keith Packard</a></li><li><a href="/lkml/2008/10/18/182">Ingo Molnar</a></li><li><a href="/lkml/2008/10/18/225">Nick Piggin</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/10/17/469/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Oct 2008 15:43:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] drm patches for 2.6.27-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 17 Oct 2008, Dave Airlie wrote:<br />&gt; <br />&gt; Please pull the 'drm-next' branch from<br />&gt; ssh://master.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6.git drm-next<br /><br />Grr.<br /><br />This whole merge series has been full of people sending me UNTESTED CRAP.<br /><br />So what's the excuse _this_ time for adding all these stupid warnings to <br />my build log? Did nobody test this?<br /><br />  drivers/gpu/drm/drm_proc.c: In function ‘drm_gem_one_name_info’:<br />  drivers/gpu/drm/drm_proc.c:525: warning: format ‘%d’ expects type ‘int’, but argument 3 has type ‘size_t’<br />  drivers/gpu/drm/drm_proc.c:533: warning: format ‘%9d’ expects type ‘int’, but argument 4 has type ‘size_t’<br />  drivers/gpu/drm/i915/i915_gem.c: In function ‘i915_gem_gtt_pwrite’:<br />  drivers/gpu/drm/i915/i915_gem.c:184: warning: unused variable ‘vaddr_atomic’<br /><br />and I wonder how many other warnings got added that I never even noticed <br />because I don't build them?<br /><br />And yes, it's not just warnings. One of thse is horribly bad code:<br /><br />	nid-&gt;len += sprintf(&amp;nid-&gt;buf[nid-&gt;len],<br />                            "%6d%9d%8d%9d\n",<br />                            obj-&gt;name, obj-&gt;size,<br />                            atomic_read(&amp;obj-&gt;handlecount.refcount),<br />                            atomic_read(&amp;obj-&gt;refcount.refcount));<br /><br />where it's just wrong to use the field width as a separator. Because if <br />the counts are big enough, the separator suddenly goes away!<br /><br />So that format string should be<br /><br />	"%6d %8zd %7d %8d\n"<br /><br />instead. Which  gives the same output when you don't overflow, and doesn't <br />have the overflow bug when you do.<br /><br />As to that "vaddr_atomic" thing, the warning would have been avoided if <br />you had just cleanly split up the optimistic fast case.<br /><br />IOW, write cleaner code, and the warning just goes away on its own. <br />Something like the appended. UNTESTED!<br /><br />Hmm?<br /><br />I really wish people were more careful, and took more pride in trying to <br />write readable code, with small modular functions instead. And move those <br />variables down to the block they are needed in.<br /><br />Anyway, I pulled the thing, but _please_ test this cleanup and send it <br />back to me if it passes your testing. Ok? <br /><br />			Linus<br /><br />---<br /> drivers/gpu/drm/drm_proc.c      |    4 +-<br /> drivers/gpu/drm/i915/i915_gem.c |   59 +++++++++++++++++++++++---------------<br /> 2 files changed, 38 insertions(+), 25 deletions(-)<br /><br />diff --git a/drivers/gpu/drm/drm_proc.c b/drivers/gpu/drm/drm_proc.c<br />index d490db4..ae73b7f 100644<br />--- a/drivers/gpu/drm/drm_proc.c<br />+++ b/drivers/gpu/drm/drm_proc.c<br />&#64;&#64; -522,12 +522,12 &#64;&#64; static int drm_gem_one_name_info(int id, void *ptr, void *data)<br /> 	struct drm_gem_object *obj = ptr;<br /> 	struct drm_gem_name_info_data   *nid = data;<br /> <br />-	DRM_INFO("name %d size %d\n", obj-&gt;name, obj-&gt;size);<br />+	DRM_INFO("name %d size %zd\n", obj-&gt;name, obj-&gt;size);<br /> 	if (nid-&gt;eof)<br /> 		return 0;<br /> <br /> 	nid-&gt;len += sprintf(&amp;nid-&gt;buf[nid-&gt;len],<br />-			    "%6d%9d%8d%9d\n",<br />+			    "%6d %8zd %7d %8d\n",<br /> 			    obj-&gt;name, obj-&gt;size,<br /> 			    atomic_read(&amp;obj-&gt;handlecount.refcount),<br /> 			    atomic_read(&amp;obj-&gt;refcount.refcount));<br />diff --git a/drivers/gpu/drm/i915/i915_gem.c b/drivers/gpu/drm/i915/i915_gem.c<br />index 9ac73dd..b8c8b2e 100644<br />--- a/drivers/gpu/drm/i915/i915_gem.c<br />+++ b/drivers/gpu/drm/i915/i915_gem.c<br />&#64;&#64; -171,6 +171,36 &#64;&#64; i915_gem_pread_ioctl(struct drm_device *dev, void *data,<br /> 	return 0;<br /> }<br /> <br />+/*<br />+ * Try to write quickly with an atomic kmap. Return true on success.<br />+ *<br />+ * If this fails (which includes a partial write), we'll redo the whole<br />+ * thing with the slow version.<br />+ *<br />+ * This is a workaround for the low performance of iounmap (approximate<br />+ * 10% cpu cost on normal 3D workloads).  kmap_atomic on HIGHMEM kernels<br />+ * happens to let us map card memory without taking IPIs.  When the vmap<br />+ * rework lands we should be able to dump this hack.<br />+ */<br />+static inline int fast_user_write(unsigned long pfn, char __user *user_data, int l)<br />+{<br />+#ifdef CONFIG_HIGHMEM<br />+	unsigned long unwritten;<br />+	char *vaddr_atomic;<br />+<br />+	vaddr_atomic = kmap_atomic_pfn(pfn, KM_USER0);<br />+#if WATCH_PWRITE<br />+	DRM_INFO("pwrite i %d o %d l %d pfn %ld vaddr %p\n",<br />+		 i, o, l, pfn, vaddr_atomic);<br />+#endif<br />+	unwritten = __copy_from_user_inatomic_nocache(vaddr_atomic + o, user_data, l);<br />+	kunmap_atomic(vaddr_atomic, KM_USER0);<br />+	return !unwritten;<br />+#else<br />+	return 1;<br />+#endif<br />+}<br />+<br /> static int<br /> i915_gem_gtt_pwrite(struct drm_device *dev, struct drm_gem_object *obj,<br /> 		    struct drm_i915_gem_pwrite *args,<br />&#64;&#64; -180,12 +210,7 &#64;&#64; i915_gem_gtt_pwrite(struct drm_device *dev, struct drm_gem_object *obj,<br /> 	ssize_t remain;<br /> 	loff_t offset;<br /> 	char __user *user_data;<br />-	char __iomem *vaddr;<br />-	char *vaddr_atomic;<br />-	int i, o, l;<br /> 	int ret = 0;<br />-	unsigned long pfn;<br />-	unsigned long unwritten;<br /> <br /> 	user_data = (char __user *) (uintptr_t) args-&gt;data_ptr;<br /> 	remain = args-&gt;size;<br />&#64;&#64; -209,6 +234,9 &#64;&#64; i915_gem_gtt_pwrite(struct drm_device *dev, struct drm_gem_object *obj,<br /> 	obj_priv-&gt;dirty = 1;<br /> <br /> 	while (remain &gt; 0) {<br />+		unsigned long pfn;<br />+		int i, o, l;<br />+<br /> 		/* Operation in this page<br /> 		 *<br /> 		 * i = page number<br />&#64;&#64; -223,25 +251,10 &#64;&#64; i915_gem_gtt_pwrite(struct drm_device *dev, struct drm_gem_object *obj,<br /> <br /> 		pfn = (dev-&gt;agp-&gt;base &gt;&gt; PAGE_SHIFT) + i;<br /> <br />-#ifdef CONFIG_HIGHMEM<br />-		/* This is a workaround for the low performance of iounmap<br />-		 * (approximate 10% cpu cost on normal 3D workloads).<br />-		 * kmap_atomic on HIGHMEM kernels happens to let us map card<br />-		 * memory without taking IPIs.  When the vmap rework lands<br />-		 * we should be able to dump this hack.<br />-		 */<br />-		vaddr_atomic = kmap_atomic_pfn(pfn, KM_USER0);<br />-#if WATCH_PWRITE<br />-		DRM_INFO("pwrite i %d o %d l %d pfn %ld vaddr %p\n",<br />-			 i, o, l, pfn, vaddr_atomic);<br />-#endif<br />-		unwritten = __copy_from_user_inatomic_nocache(vaddr_atomic + o,<br />-							      user_data, l);<br />-		kunmap_atomic(vaddr_atomic, KM_USER0);<br />+		if (!fast_user_write(pfn, user_data, l)) {<br />+			unsigned long unwritten;<br />+			char __iomem *vaddr;<br /> <br />-		if (unwritten)<br />-#endif /* CONFIG_HIGHMEM */<br />-		{<br /> 			vaddr = ioremap_wc(pfn &lt;&lt; PAGE_SHIFT, PAGE_SIZE);<br /> #if WATCH_PWRITE<br /> 			DRM_INFO("pwrite slow i %d o %d l %d "<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
