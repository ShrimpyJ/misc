    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/9/1/43">First message in thread</a></li><li><a href="/lkml/2008/10/13/421">"Tony Luck"</a><ul><li><a href="/lkml/2008/10/13/435">"H. Peter Anvin"</a><ul><li><a href="/lkml/2008/10/13/438">"Luck, Tony"</a></li><li class="origin"><a href="/lkml/2008/10/13/467">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/13/467">"H. Peter Anvin"</a></li><li><a href="/lkml/2008/10/13/479">"Yinghai Lu"</a><ul><li><a href="/lkml/2008/10/13/480">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/10/14/13">"Yinghai Lu"</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/10/13/456/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Oct 2008 14:46:28 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: split e820 reserved entries record to late v4 - fix v7</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 13 Oct 2008, H. Peter Anvin wrote:<br />&gt; <br />&gt; Here is a fix... currently running standard tests on it.<br /><br />Or we could do what Andrew suggested some time ago, and extend %p to do <br />resource printing, like %pS and %pF.<br /><br />TOTALLY UNTESTED! But something like this might allow<br /><br />	printk(KERN_DEBUG "  reserve_region: (%s) %pR\n"<br />		res-&gt;name, res);<br /><br />and if I did things right it should print<br /><br />	reserve_region: (name) [xx-xx]<br /><br />and maybe it's worth it. We certainly do seem to have a fair number of <br />those irritating casts for resource printouts.<br /><br />		Linus<br />---<br /> lib/vsprintf.c |   18 ++++++++++++++++++<br /> 1 files changed, 18 insertions(+), 0 deletions(-)<br /><br />diff --git a/lib/vsprintf.c b/lib/vsprintf.c<br />index c399bc1..dd62557 100644<br />--- a/lib/vsprintf.c<br />+++ b/lib/vsprintf.c<br />&#64;&#64; -24,6 +24,7 &#64;&#64;<br /> #include &lt;linux/kernel.h&gt;<br /> #include &lt;linux/kallsyms.h&gt;<br /> #include &lt;linux/uaccess.h&gt;<br />+#include &lt;linux/ioport.h&gt;<br /> <br /> #include &lt;asm/page.h&gt;		/* for PAGE_SIZE */<br /> #include &lt;asm/div64.h&gt;<br />&#64;&#64; -528,6 +529,21 &#64;&#64; static char *symbol_string(char *buf, char *end, void *ptr, int field_width, int<br /> #endif<br /> }<br /> <br />+static char *resource_string(char *buf, char *end, struct resource *res, int field_width, int precision, int flags)<br />+{<br />+	char sym[4*sizeof(resource_size_t) + 4];<br />+	char *p = sym, *pend = sym + sizeof(sym);<br />+<br />+	*p++ = '[';<br />+	p = number(p, pend, res-&gt;start, 16, -1, -1, 0);<br />+	*p++ = '-';<br />+	p = number(p, pend, res-&gt;end, 16, -1, -1, 0);<br />+	*p++ = ']';<br />+	*p = 0;<br />+<br />+	return string(buf, end, sym, field_width, precision, flags);<br />+}<br />+<br /> /*<br />  * Show a '%p' thing.  A kernel extension is that the '%p' is followed<br />  * by an extra set of alphanumeric characters that are extended format<br />&#64;&#64; -549,6 +565,8 &#64;&#64; static char *pointer(const char *fmt, char *buf, char *end, void *ptr, int field<br /> 		/* Fallthrough */<br /> 	case 'S':<br /> 		return symbol_string(buf, end, ptr, field_width, precision, flags);<br />+	case 'R':<br />+		return resource_string(buf, end, ptr, field_width, precision, flags);<br /> 	}<br /> 	flags |= SMALL;<br /> 	if (field_width == -1) {<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
