    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/4/197">First message in thread</a></li><li><a href="/lkml/2008/10/13/315">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/13/321">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2008/10/13/324">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/13/324">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Oct 2008 09:08:55 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kerneloops] regression in 2.6.27 wrt "lock_page" and the "hwclock" program</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 13 Oct 2008, Ingo Molnar wrote:<br />&gt; <br />&gt; hm, i think the 64-bit case is the correct code, because in this 'init <br />&gt; task OOMs' case we do:<br />&gt; <br />&gt; out_of_memory:<br />&gt;         up_read(&amp;mm-&gt;mmap_sem);<br />&gt;         if (is_global_init(tsk)) {<br />&gt;                 yield();<br />&gt;                 down_read(&amp;mm-&gt;mmap_sem);<br />&gt; <br />&gt; note that we drop the mmap_sem, so in theory another thread of this same <br />&gt; MM could change the vma tree, and our 'vma' might not be valid anymore.<br /><br />Hmm. Looks about right.<br /><br />&gt; It's probably not a real issue in practice because this is about PID 1, <br />&gt; so i doubt it really matters, but still.<br />&gt; <br />&gt; So how about the patch below?<br /><br />Ack. As long as we don't have two versions and the code is impossible to <br />look at.<br /><br />			Linus<br /><br />&gt; <br />&gt; 	Ingo<br />&gt; <br />&gt; ----------------&gt;<br />&gt; &gt;From 7b87da331b6ada44ccd5ffeedba76880c825d4fc Mon Sep 17 00:00:00 2001<br />&gt; From: Ingo Molnar &lt;mingo&#64;elte.hu&gt;<br />&gt; Date: Mon, 13 Oct 2008 17:49:02 +0200<br />&gt; Subject: [PATCH] x86/mm: unify init task OOM handling<br />&gt; <br />&gt; Linus noticed that the "again:" versus "survive:" OOM logic for<br />&gt; the init task was arbitrarily different.<br />&gt; <br />&gt; The 64-bit codepath is the better one, because it correctly re-lookups<br />&gt; the vma after having dropped the -&gt;mmap_sem.<br />&gt; <br />&gt; Signed-off-by: Ingo Molnar &lt;mingo&#64;elte.hu&gt;<br />&gt; ---<br />&gt;  arch/x86/mm/fault.c |   15 ++++++---------<br />&gt;  1 files changed, 6 insertions(+), 9 deletions(-)<br />&gt; <br />&gt; diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c<br />&gt; index ac2ad78..8bc5956 100644<br />&gt; --- a/arch/x86/mm/fault.c<br />&gt; +++ b/arch/x86/mm/fault.c<br />&gt; &#64;&#64; -671,7 +671,8 &#64;&#64; void __kprobes do_page_fault(struct pt_regs *regs, unsigned long error_code)<br />&gt;  		goto bad_area_nosemaphore;<br />&gt; <br />&gt;  again:<br />&gt; -	/* When running in the kernel we expect faults to occur only to<br />&gt; +	/*<br />&gt; +	 * When running in the kernel we expect faults to occur only to<br />&gt;  	 * addresses in user space.  All other faults represent errors in the<br />&gt;  	 * kernel and should generate an OOPS.  Unfortunately, in the case of an<br />&gt;  	 * erroneous fault occurring in a code path which already holds mmap_sem<br />&gt; &#64;&#64; -734,9 +735,6 &#64;&#64; good_area:<br />&gt;  			goto bad_area;<br />&gt;  	}<br />&gt; <br />&gt; -#ifdef CONFIG_X86_32<br />&gt; -survive:<br />&gt; -#endif<br />&gt;  	/*<br />&gt;  	 * If for any reason at all we couldn't handle the fault,<br />&gt;  	 * make sure we exit gracefully rather than endlessly redo<br />&gt; &#64;&#64; -871,12 +869,11 &#64;&#64; out_of_memory:<br />&gt;  	up_read(&amp;mm-&gt;mmap_sem);<br />&gt;  	if (is_global_init(tsk)) {<br />&gt;  		yield();<br />&gt; -#ifdef CONFIG_X86_32<br />&gt; -		down_read(&amp;mm-&gt;mmap_sem);<br />&gt; -		goto survive;<br />&gt; -#else<br />&gt; +		/*<br />&gt; +		 * Re-lookup the vma - in theory the vma tree might<br />&gt; +		 * have changed:<br />&gt; +		 */<br />&gt;  		goto again;<br />&gt; -#endif<br />&gt;  	}<br />&gt; <br />&gt;  	printk("VM: killing process %s\n", tsk-&gt;comm);<br />&gt; <br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
