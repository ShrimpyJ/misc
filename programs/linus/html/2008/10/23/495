    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/17/449">First message in thread</a></li><li><a href="/lkml/2008/10/23/392">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/23/490">Keith Packard</a><ul><li class="origin"><a href="/lkml/2008/10/23/502">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/23/502">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2008/10/24/47">Keith Packard</a></li></ul></li><li><a href="/lkml/2008/10/24/8">Keith Packard</a></li><li><a href="/lkml/2008/10/24/66">Keith Packard</a><ul><li><a href="/lkml/2008/10/24/83">=?UTF-8?B?VGhvbWFzIEhlbGxzdHLDtm0=?=</a></li></ul></li><li><a href="/lkml/2008/10/24/111">Ingo Molnar</a></li></ul></li></ul></li><li><a href="/lkml/2008/10/23/501">Benjamin Herrenschmidt</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 23 Oct 2008 19:48:11 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Adding kmap_atomic_prot_pfn  (was: [git pull] drm patches for 2.6.27-rc1)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 23 Oct 2008, Keith Packard wrote:<br />&gt; <br />&gt; &gt; So I'd much rather create a new &lt;linux/kmap.h&gt; or something. Or just <br />&gt; &gt; expose this from to &lt;asm/fixmap.h&gt; or something. Let's not confuse this <br />&gt; &gt; with highmem, even if the implementation _historically_ was due to that.<br />&gt; <br />&gt; Sure, we readily admit that we're abusing the highmem API. So we wrapped<br />&gt; that abusive code in a pretty package that can be re-implemented however<br />&gt; you desire.<br />&gt; <br />&gt; How (and when) would you like to see this fixed?<br /><br />I'm not entirely sure who wants to own up to owning that particular part <br />of code, and is willing to make kmap_atomic_prot_pfn() also work in the <br />absense of CONFIG_HIGHMEM.<br /><br />I suspect it's Ingo, but I also suspect that he'd like to see a tested <br />patch by somebody who actually _uses_ this code.<br /><br />So I would suspect that if you guys actually write a patch, and make sure <br />that it works on x86-32 even _without_ CONFIG_HIGHMEM, and send it to <br />Ingo, good things will happen.<br /><br />As to the "without CONFIG_HIGHMEM" part: making all of this work even <br />without HIGHMEM should literally be a matter of:<br /><br /> - remove the '#ifdef CONFIG_HIGHMEM' in &lt;asm/fixmap_32.h&gt;, so that we <br />   have fixmap entries for the temporary kernel mappings regardless (ie <br />   FIX_KMAP_BEGIN and FIX_KMAP_END).<br /><br /> - move the code for the atomic accesses that use those fixmap entries <br />   into a file that gets compiled regardless of CONFIG_HIGHMEM. Or at <br />   least just kmap_atomic_prot_pfn() and kunmap_atomic().<br /><br />and it probably should all work automatically. The kmap_atomic() stuff <br />really should be almost totally independent of CONFIG_HIGHMEM, since it's <br />really much more closely related to fixmaps than HIGHMEM. <br /><br />I guess there may be some debugging code that depends on HIGHMEM (eg that <br />whole testing for whether a page is a highmem page or not), so it might be <br />a _bit_ more than just moving code around, but I really didn't look <br />closer.<br /><br />Then, there's the issue of 64-bit, and just mapping everything there, and <br />the interface to that. I liked the trivial extension to "struct resource" <br />to have a "cached mapping" pointer. So if we can just make it pass <br />resources around and get a page that way (and not even need kmap() on <br />64-bit architections), that would be good.<br /><br />It's too late for -rc1 (which I'm planning on cutting within the hour), <br />and if it ends up being complex, I guess that it means this will eb a <br />2.6.29 issue.<br /><br />But if it really is just a matter of mostly just some trivial code <br />movement and both the gfx and x86 people are all happy, I'll happily take <br />it for -rc2, and we can just leave this all behind us.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
