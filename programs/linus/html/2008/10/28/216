    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/28/190">First message in thread</a></li><li><a href="/lkml/2008/10/28/190">Alexey Dobriyan</a><ul><li><a href="/lkml/2008/10/28/197">Matthew Wilcox</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Oct 2008 09:16:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: On spreading atomic_t initialization</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 28 Oct 2008, Alexey Dobriyan wrote:<br />&gt;<br />&gt; I wrote stupid runtime checker to look for atomic_t uninitialized usage<br />&gt; and the amount of screaming in logs is surprisingly very big.<br />&gt; <br />&gt; So the question: is there really really an arch for which setting atomic_t<br />&gt; by hand (kzalloc) is not equivalent to atomic_set()?<br /><br />For _initializers_? Not any more. And never for zero values.<br /><br />We used to have very strict rules because 32-bit sparc historically used <br />to use the low byte as a lock byte, but even back then it was ok to <br />initialize the values with zero, and you had to use atomic_set() only if <br />you set it to some other value (because the thing needed to be shifted up <br />by eight bits in order to avoid the lock byte).<br /><br />But zero has always been safe, and in fact since then we've also simply <br />required that "atomic_t" always has at least 32 bits of data, and sparc <br />fixed its implementation to have the lock separately for the broken old <br />sparc32 architectures that don't have good atomic handling. <br /><br />So it might possibly still be valid to check that an atomic_t is <br />initialized properly, but setting it to zero is a special case, and so <br />it's ok to initialize it with a zeroing allocation (kzalloc()) or simply <br />with a 'memset(ptr, 0, size)'.<br /><br />I bet that if you change your checker to accept zero initializations, you <br />won't find any issues any more. <br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
