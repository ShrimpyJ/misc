    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/15/194">First message in thread</a></li><li><a href="/lkml/2008/10/15/247">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/256">Nick Piggin</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Oct 2008 12:47:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc] SLOB memory ordering issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 16 Oct 2008, Nick Piggin wrote:<br />&gt; <br />&gt; I guess I wouldn't bother with your kernel. I was being hypothetical.<br />&gt; Can you _prove_ no code has a bug due specifically to this issue?<br /><br />Nick, nobody can prove anything but the most trivial programs.<br /><br />&gt; Did you read the anon_vma example? It's broken if it assumes the objects<br />&gt; coming out of its slab are always "stable".<br /><br />So why do you blame SLOB/SLAB?<br /><br />This is my whole and only point - you're pointing at all the wrong things, <br />and then I get upset when I point out to you - over and over again - that <br />you point to the wrong thing, and you just keep on (once more) pointing to <br />it.<br /><br />Can you see my frustration? You keep on claiming this is somehow an <br />issue of the slab allocator, and seem to refuse to just read what I write.<br /><br />But let me try it again:<br /><br /> - The object you get from kmalloc (or *any* allocator) is a per-CPU <br />   object. It's your _local_ memory area. And it has to be that way, <br />   because no allocator can ever know the difference between objects that <br />   are going to have global visibility and objects that don't. So the <br />   allocator has to basically assume the cheap case.<br /><br /> - Yes, we could add a "smp_wmb()" at the end of all allocators, but that <br />   would be a pointless no-op on architectures where it doesn't matter, <br />   and it would be potentially expensive on architectures where it _does_ <br />   matter. In other words, in neither case is it the right thing to do.<br /><br /> - Most allocations by _far_ (at least in the static sense of "there's a <br />   lot of kmalloc/kmem_cache_alloc's in the kernel") are going to be used <br />   for things that are either thread-local (think temporary data <br />   structures like "__getname()" for path allocators) or are going to be <br />   used with proper locking.<br /><br />   NONE OF THOSE CASES WANT THE OVERHEAD! And they are the *common* ones.<br /><br /> - constructiors really have absolutely nothing to do with anything. What <br />   about kzalloc()? That's an implicit "constructor" too. Do you want the <br />   smp_wmb() there for that too? Do you realize that 99.9% of all such <br />   users will fill in a few bytes/fields in _addition_ to clearing the <br />   structure they just allocated? You do realize that almost nobody wants <br />   a really empty data structure? You _do_ realize that the "smp_wmb()" in <br />   the allocator IS TOTALLY USELESS if the code that did the allocation <br />   then updates a few other fields too?<br /><br />   ADDING the smp_wmb() at an allocation point WOULD BE ACTIVELY <br />   MISLEADING. Anybody who thinks that it helps is just fooling himself. <br /><br />   We're *much* better off just telling everybody that if they think they <br />   can do lockless data structures, they have to do the memory ordering at <br />   the _insertion_ point, and stop believing in fairies and wizards and in <br />   allocators doing it for them!<br /><br /> - For _all_ of these reasons, any time you say that this is an allocator <br />   issue, or a constructor issue, I don't need to even bother reading any <br />   more. Because you've just shown yourself to not read what I wrote, nor <br />   understand the issue.<br /><br />So if you want to have a constructive discussion, you need to<br /><br /> - *read* what I wrote. UNDERSTAND that memory ordering is a non-issue <br />   when there is locking involved, and that locking is still the default <br />   approach for any normal data structure.<br /><br /> - *stop* talking about "constructors" and "SLOB allocators". Because as <br />   long as you do, you're not making sense.<br /><br />and if you can do that, I can treat you like you're worth talking to. But <br />as long as you cannot accept that, what's the point?<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
