    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/15/194">First message in thread</a></li><li><a href="/lkml/2008/10/15/206">Nick Piggin</a><ul><li><a href="/lkml/2008/10/15/212">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/214">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/233">Matt Mackall</a></li></ul></li><li><a href="/lkml/2008/10/15/219">Nick Piggin</a><ul><li><a href="/lkml/2008/10/15/234">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/239">Nick Piggin</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/10/15/235">Nick Piggin</a><ul><li class="origin"><a href="/lkml/2008/10/15/249">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/249">Nick Piggin</a></li></ul></li><li><a href="/lkml/2008/10/17/423">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Oct 2008 11:26:37 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc] SLOB memory ordering issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 16 Oct 2008, Nick Piggin wrote:<br />&gt; <br />&gt; Who was it that said memory ordering was self-evident?<br /><br />Nobody has _ever_ said that memory ordering is self-evident. Quite the <br />reverse.<br /><br />What we've said is that it's not a ctor issue. This has nothing <br />what-so-ever to do with ctors, and everything to do with the fact that <br />lockless is hard.<br /><br />And the general rule is: to find a page (or any other data structures) on <br />another CPU, you need to insert it into the right data structures. And <br />that insertion event needs to either be locked, or it needs to be ordered.<br /><br />But notice that it's the _insertion_ event. Not the ctor. Not the <br />allocator. It's the person _doing_ the allocation that needs to order <br />things.<br /><br />See?<br /><br />And no, I didn't look at your exact case. But for pages in page tables, <br />we'd need to have the right smp_wmb() at the "set_pte[_at]()" stage, <br />either inside that macro or in the caller.<br /><br />We used to only care about the page _contents_ (because the only unlocked <br />access was the one that was done by hardware), but now that we do unlocked <br />lookups in software too, we need to make sure the "struct page" itself is <br />also valid.<br /><br />For non-page-table lookups (LRU, radix trees, etc etc), the rules are <br />different. Again, it's not an _allocator_ (or ctor) issue, it's about the <br />point where you insert the thing. If you insert the page using a lock, you <br />need not worry about memory ordering at all. And if you insert it using <br />RCU, you do.<br /><br />This is *all* we have argued about. The argument is simple: this has <br />NOTHING to do with the allocator, and has NOTHING to do with constructors.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
