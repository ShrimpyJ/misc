    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/10/13/74">First message in thread</a></li><li><a href="/lkml/2008/10/15/96">Ingo Molnar</a><ul><li><a href="/lkml/2008/10/15/114">Jiri Slaby</a></li><li><a href="/lkml/2008/10/15/167">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/15/173">Jiri Slaby</a><ul><li><a href="/lkml/2008/10/15/186">Linus Torvalds</a></li><li><a href="/lkml/2008/10/15/293">Arjan van de Ven</a></li></ul></li><li class="origin"><a href="/lkml/2008/10/16/115">Linus Torvalds</a><ul><li><a href="/lkml/2008/10/16/115">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/10/15/175/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Oct 2008 08:35:12 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: GIT head no longer boots on x86-64</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 15 Oct 2008, Linus Torvalds wrote:<br />&gt; <br />&gt; The code in question already does<br />&gt; <br />&gt; 	VIRTUAL_BUG_ON(!is_vmalloc_addr(vmalloc_addr) &amp;&amp;<br />&gt;                        !is_module_address(addr));<br />&gt; <br />&gt; and look at that thing and ask yourself: where was the bug again.<br /><br />Btw, I don't even know if this is a sparc64 issue too, but it sounds <br />possible. Sparc64 seems similar to x86-64 in that there is a special range <br />for module addresses.<br /><br />I'm too lazy to check everybody's "module_alloc()", and maybe others do <br />too, but use a different symbol, so grepping for it doesn't trigger.<br /><br />But regardless, a much more correct fix appears to just screw this, and <br />make it explicit on the symbol. And only do it if modules are even <br />supported.<br /><br />And if you *really* want to change "is_vmalloc_addr()", then<br /><br /> (a) do it right, not some crappy x86-64-specific sh*t<br /> (b) do it like I do it, and make it dependent on modules even being <br />     enabled<br /> (c) and rename it to match what it does.<br /><br />not the horrible patch I've seen.<br /><br />Oh, btw. This patch is *totally* untested. I don't even enable modules. So <br />if it doesn't compile, it isn't perfect. But while it may not _work_, at <br />least it's not _ugly_.<br /><br />(Quite frankly, I think an even more correct fix is to rename the whole <br />"vmalloc_to_page()" function, since it's clearly used for other things <br />than vmalloc. Maybe "kernel_virtual_to_page()". Whatever. This is trying <br />to be minimal without being totally disgusting).<br /><br />			Linus<br /><br />---<br /> mm/vmalloc.c |   18 ++++++++++++++++--<br /> 1 files changed, 16 insertions(+), 2 deletions(-)<br /><br />diff --git a/mm/vmalloc.c b/mm/vmalloc.c<br />index bba06c4..f018d7e 100644<br />--- a/mm/vmalloc.c<br />+++ b/mm/vmalloc.c<br />&#64;&#64; -168,6 +168,21 &#64;&#64; int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page ***pages)<br /> }<br /> EXPORT_SYMBOL_GPL(map_vm_area);<br /> <br />+static inline int is_vmalloc_or_module_addr(const void *x)<br />+{<br />+	/*<br />+	 * x86-64 and sparc64 put modules in a special place,<br />+	 * and fall back on vmalloc() if that fails. Others<br />+	 * just put it in the vmalloc space.<br />+	 */<br />+#if defined(CONFIG_MODULES) &amp;&amp; defined(MODULES_VADDR)<br />+	unsigned long addr = (unsigned long)x;<br />+	if (addr &gt;= MODULES_VADDR &amp;&amp; addr &lt; MODULES_END)<br />+		return 1;<br />+#endif<br />+	return is_vmalloc_addr(x);<br />+}<br />+<br /> /*<br />  * Map a vmalloc()-space virtual address to the physical page.<br />  */<br />&#64;&#64; -184,8 +199,7 &#64;&#64; struct page *vmalloc_to_page(const void *vmalloc_addr)<br /> 	 * XXX we might need to change this if we add VIRTUAL_BUG_ON for<br /> 	 * architectures that do not vmalloc module space<br /> 	 */<br />-	VIRTUAL_BUG_ON(!is_vmalloc_addr(vmalloc_addr) &amp;&amp;<br />-			!is_module_address(addr));<br />+	VIRTUAL_BUG_ON(!is_vmalloc_or_module_addr(vmalloc_addr));<br /> <br /> 	if (!pgd_none(*pgd)) {<br /> 		pud = pud_offset(pgd, addr);<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
