    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/19/479">First message in thread</a></li><li><a href="/lkml/2008/8/19/559">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/19/567">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2008/8/19/595">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/19/595">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/20/404">Diego Calleja</a></li><li><a href="/lkml/2008/8/22/387">Bart Trojanowski</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Aug 2008 17:56:10 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: vfat BKL/lock_super regression in v2.6.26-rc3-g8f59342</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Aug 2008, Linus Torvalds wrote:<br />&gt; <br />&gt; But I don't know exactly what the timeout should be, though (although I <br />&gt; suspect that it should involve _ignoring_ non-data writes like the atime <br />&gt; updates, and trigger a timeout on data writes so that when you actually <br />&gt; write a file, you'll know that the sync will happen within five seconds of <br />&gt; you having finished the write or whatever).<br /><br />.. and by "finished the write" I mean "closed the file", not "end of <br />write() system call". Ie it's one of those things where it really doesn't <br />mostly make much sense to try to give any kinds of flush guarantees until <br />the user has basically shown that he's all done with writing.<br /><br />If you have something like removable media, and you actually remove it <br />while you have a "cp -R" in progress, it damn well won't matter whether we <br />were synchronous or not. But if you remove it after the "cp" has actually <br />finished, it's a lot more understandable if somebody expects it to be on <br />disk.<br /><br />So one thing we could perhaps consider is to make FAT in particular <br />consider "sync" mounts to be about open/close consistency, not about <br />per-write-system-call consistency. So the "close()" wouldn't return until <br />the file is on disk, but we wouldn't force a synchronous rewrite the inode <br />or the file allocation table thousands of times just because the file was <br />big.<br /><br />FAT really is kind of different. I suspect we could just change what <br />"sync" means for it. But it would probably be good to have a VFS-level <br />notion of open-close consistency. It is, after all, what NFS is already <br />supposed to give you, so there is precedence for that being a useful IO <br />serialization model.<br /><br />Al, what do you think?<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
