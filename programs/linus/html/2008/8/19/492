    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/19/479">First message in thread</a></li><li><a href="/lkml/2008/8/19/479">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/19/480">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/19/495">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/19/575">Bart Trojanowski</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2008/8/19/552">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/19/552">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/19/556">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/19/561">Bart Trojanowski</a></li></ul></li></ul></li><li><a href="/lkml/2008/8/19/559">Bart Trojanowski</a><ul><li><a href="/lkml/2008/8/19/567">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/19/569">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Aug 2008 15:17:29 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: vfat BKL/lock_super regression in v2.6.26-rc3-g8f59342</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 19 Aug 2008, Bart Trojanowski wrote:<br />&gt; <br />&gt; I was able to bisect it to the commit 8f5934278d1d86590244c2791b28f77d67466007<br />&gt; which claims to "Replace BKL with superblock lock in fat/msdos/vfat".<br />&gt; <br />&gt; When I run with lock debugging I get...<br />&gt; <br />&gt;   =============================================<br />&gt;   [ INFO: possible recursive locking detected ]<br />&gt;   2.6.27-rc3-bisect-00448-ga7f5aaf #16<br />&gt;   ---------------------------------------------<br />&gt;   mv/4020 is trying to acquire lock:<br />&gt;    (&amp;type-&gt;s_lock_key#9){--..}, at: [&lt;c01a90fe&gt;] lock_super+0x1e/0x20<br />&gt; <br />&gt;   but task is already holding lock:<br />&gt;    (&amp;type-&gt;s_lock_key#9){--..}, at: [&lt;c01a90fe&gt;] lock_super+0x1e/0x20<br /><br />Thanks for the excellent debug.<br /><br />&gt; It looks like the call trace is:<br />&gt; <br />&gt;  - do_unlinkat<br />&gt;    - vfs_unlink<br />&gt;      - vfat_unlink<br />&gt;        * lock_super<br />&gt;        - fat_remove_entries<br />&gt;          - fat_sync_inode<br />&gt;            - fat_write_inode<br />&gt;              * lock_super<br /><br />Very much so.<br /><br />And I think you hit this issue because you probably mounted the USB stick <br />as a "sync" (or dirsync) mount - which is what some distros do by default, <br />even if it is known to cause problems for some flash cards that don't do a <br />good job at wear levelling.<br /><br />But it's good that you did that, because all _my_ testing (which was <br />admittedly very deficient) had been done with a default mount without that <br />thing.<br /><br />&gt; So this code really really liked BKL because it was recursive.<br /><br />Yeah, we had some other cases like that. It's the main source of BKL <br />problems by far (if it wasn't for the recursion, BKL removal would <br />generally be trivial).<br /><br />The other example of this was 9c20616c385ebeaa30257ef5d35e8f346db4ee32, <br />where fat_setattr-&gt;fat_truncate caused a deadlock.<br /><br />&gt; I am testing a naive patch to address this problem and will follow up on <br />&gt; it in a bit.<br /><br />Thanks.<br /><br />Btw, quite often, the right solution may be to remove one of the locks <br />entirely. FAT should actually have been largely BKL free, and my <br />conversion of BKL to super-lock was "overly eager" exactly because it's <br />easier to find deadlocks (and debug things carefully and handle them as <br />they pop up) than it is to find races (which are almost impossible to <br />debug and pinpoint).<br /><br />In particular, I think fat_write_inode() really is safe. It already uses <br /><br />	spin_lock(&amp;sbi-&gt;inode_hash_lock);<br />	..<br />	spin_unlock(&amp;sbi-&gt;inode_hash_lock);<br /><br />to protect its internal data structures, and all that [un]lock_super() <br />protects is really just local variables and code that is already SMP-safe <br />(ie "sb_bread()" certainly doesn't need locking.<br /><br />So I'm pretty sure the right fix is to just remove [un]lock_super() <br />entirely from fat_write_inode(). <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
