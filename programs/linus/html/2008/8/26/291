    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/26/197">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/222">Adrian Bunk</a><ul><li><a href="/lkml/2008/8/26/226">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/298">Adrian Bunk</a><ul><li><a href="/lkml/2008/8/26/309">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2008/8/26/227">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/242">Jamie Lokier</a><ul><li><a href="/lkml/2008/8/26/260">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2008/8/26/321">Adrian Bunk</a><ul><li><a href="/lkml/2008/8/26/323">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/8/26/282">Jeff Garzik</a><ul><li class="origin"><a href="/lkml/2008/8/26/295">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/295">"Kok, Auke"</a><ul><li><a href="/lkml/2008/8/26/343">"Jeff Kirsher"</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/8/26/291/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Aug 2008 13:06:18 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">e1000 horridness (was Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 26 Aug 2008, Jeff Garzik wrote:<br />&gt; <br />&gt; e1000_check_options builds a struct (singular) on the stack, really... struct<br />&gt; e1000_option is reasonably small.<br /><br />No it doesn't.<br /><br />Look a bit more closely.<br /><br />It builds a struct (singular) MANY MANY times. It also then builds up a <br />huge e1000_opt_list[] array, even though it is const and should be static <br />(and const).<br /><br />I know. I wrote a patch to FIX it.<br /><br />Here's the patch. It shrinks the stack from 1152 bytes to 192 bytes (the <br />first version, that only did the e1000_option part, got it down to 600 <br />bytes). About half comes from not using multiple "e1000_option" <br />structures, the other half comes from turning the "e1000_opt_list[]" <br />arrays into "static const" instead, so that gcc doesn't copy them onto the <br />stack.<br /><br />Most of the patch is actually doing things like turning<br /><br />	struct struct e1000_option opt = {<br /><br />(which declares a _new_ e1000_option variable each time) into<br /><br />	opt = (struct e1000_option) {<br /><br />which just re-uses the single variable.<br /><br />It becomes slightly larger than that, because some places the "opt = .." <br />had to be moved around, since it's no longer a variable declaration, but a <br />regular assignment.<br /><br />The rest is just adding "const" to the right places, and turning<br /><br />	struct e1000_opt_list speed_list[] = ..<br /><br />into<br /><br />	static const struct e1000_opt_list speed_list[] = ..<br /><br />instead, and fixing the indentation to be more straightforward.<br /><br />I have not tested the dang thing, but I think it's correct. And it turns <br />stack usage from "totally horrible and broken" into "pretty reasonable".<br /><br />		Linus<br /><br />---<br /> drivers/net/e1000/e1000_param.c |   81 +++++++++++++++++++++-----------------<br /> 1 files changed, 45 insertions(+), 36 deletions(-)<br /><br />diff --git a/drivers/net/e1000/e1000_param.c b/drivers/net/e1000/e1000_param.c<br />index b9f90a5..213437d 100644<br />--- a/drivers/net/e1000/e1000_param.c<br />+++ b/drivers/net/e1000/e1000_param.c<br />&#64;&#64; -208,7 +208,7 &#64;&#64; struct e1000_option {<br /> 		} r;<br /> 		struct { /* list_option info */<br /> 			int nr;<br />-			struct e1000_opt_list { int i; char *str; } *p;<br />+			const struct e1000_opt_list { int i; char *str; } *p;<br /> 		} l;<br /> 	} arg;<br /> };<br />&#64;&#64; -242,7 +242,7 &#64;&#64; static int __devinit e1000_validate_option(unsigned int *value,<br /> 		break;<br /> 	case list_option: {<br /> 		int i;<br />-		struct e1000_opt_list *ent;<br />+		const struct e1000_opt_list *ent;<br /> <br /> 		for (i = 0; i &lt; opt-&gt;arg.l.nr; i++) {<br /> 			ent = &amp;opt-&gt;arg.l.p[i];<br />&#64;&#64; -279,7 +279,9 &#64;&#64; static void e1000_check_copper_options(struct e1000_adapter *adapter);<br /> <br /> void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> {<br />+	struct e1000_option opt;<br /> 	int bd = adapter-&gt;bd_number;<br />+<br /> 	if (bd &gt;= E1000_MAX_NIC) {<br /> 		DPRINTK(PROBE, NOTICE,<br /> 		       "Warning: no configuration for board #%i\n", bd);<br />&#64;&#64; -287,19 +289,21 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 	}<br /> <br /> 	{ /* Transmit Descriptor Count */<br />-		struct e1000_option opt = {<br />+		struct e1000_tx_ring *tx_ring = adapter-&gt;tx_ring;<br />+		int i;<br />+		e1000_mac_type mac_type = adapter-&gt;hw.mac_type;<br />+<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Transmit Descriptors",<br /> 			.err  = "using default of "<br /> 				__MODULE_STRING(E1000_DEFAULT_TXD),<br /> 			.def  = E1000_DEFAULT_TXD,<br />-			.arg  = { .r = { .min = E1000_MIN_TXD }}<br />+			.arg  = { .r = {<br />+				.min = E1000_MIN_TXD,<br />+				.max = mac_type &lt; e1000_82544 ? E1000_MAX_TXD : E1000_MAX_82544_TXD<br />+				}}<br /> 		};<br />-		struct e1000_tx_ring *tx_ring = adapter-&gt;tx_ring;<br />-		int i;<br />-		e1000_mac_type mac_type = adapter-&gt;hw.mac_type;<br />-		opt.arg.r.max = mac_type &lt; e1000_82544 ?<br />-			E1000_MAX_TXD : E1000_MAX_82544_TXD;<br /> <br /> 		if (num_TxDescriptors &gt; bd) {<br /> 			tx_ring-&gt;count = TxDescriptors[bd];<br />&#64;&#64; -313,19 +317,21 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 			tx_ring[i].count = tx_ring-&gt;count;<br /> 	}<br /> 	{ /* Receive Descriptor Count */<br />-		struct e1000_option opt = {<br />+		struct e1000_rx_ring *rx_ring = adapter-&gt;rx_ring;<br />+		int i;<br />+		e1000_mac_type mac_type = adapter-&gt;hw.mac_type;<br />+<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Receive Descriptors",<br /> 			.err  = "using default of "<br /> 				__MODULE_STRING(E1000_DEFAULT_RXD),<br /> 			.def  = E1000_DEFAULT_RXD,<br />-			.arg  = { .r = { .min = E1000_MIN_RXD }}<br />+			.arg  = { .r = {<br />+				.min = E1000_MIN_RXD,<br />+				.max = mac_type &lt; e1000_82544 ? E1000_MAX_RXD : E1000_MAX_82544_RXD<br />+			}}<br /> 		};<br />-		struct e1000_rx_ring *rx_ring = adapter-&gt;rx_ring;<br />-		int i;<br />-		e1000_mac_type mac_type = adapter-&gt;hw.mac_type;<br />-		opt.arg.r.max = mac_type &lt; e1000_82544 ? E1000_MAX_RXD :<br />-			E1000_MAX_82544_RXD;<br /> <br /> 		if (num_RxDescriptors &gt; bd) {<br /> 			rx_ring-&gt;count = RxDescriptors[bd];<br />&#64;&#64; -339,7 +345,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 			rx_ring[i].count = rx_ring-&gt;count;<br /> 	}<br /> 	{ /* Checksum Offload Enable/Disable */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = enable_option,<br /> 			.name = "Checksum Offload",<br /> 			.err  = "defaulting to Enabled",<br />&#64;&#64; -363,7 +369,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 			 { E1000_FC_FULL,    "Flow Control Enabled" },<br /> 			 { E1000_FC_DEFAULT, "Flow Control Hardware Default" }};<br /> <br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = list_option,<br /> 			.name = "Flow Control",<br /> 			.err  = "reading default settings from EEPROM",<br />&#64;&#64; -381,7 +387,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Transmit Interrupt Delay */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Transmit Interrupt Delay",<br /> 			.err  = "using default of " __MODULE_STRING(DEFAULT_TIDV),<br />&#64;&#64; -399,7 +405,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Transmit Absolute Interrupt Delay */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Transmit Absolute Interrupt Delay",<br /> 			.err  = "using default of " __MODULE_STRING(DEFAULT_TADV),<br />&#64;&#64; -417,7 +423,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Receive Interrupt Delay */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Receive Interrupt Delay",<br /> 			.err  = "using default of " __MODULE_STRING(DEFAULT_RDTR),<br />&#64;&#64; -435,7 +441,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Receive Absolute Interrupt Delay */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Receive Absolute Interrupt Delay",<br /> 			.err  = "using default of " __MODULE_STRING(DEFAULT_RADV),<br />&#64;&#64; -453,7 +459,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Interrupt Throttling Rate */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = range_option,<br /> 			.name = "Interrupt Throttling Rate (ints/sec)",<br /> 			.err  = "using default of " __MODULE_STRING(DEFAULT_ITR),<br />&#64;&#64; -497,7 +503,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Smart Power Down */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = enable_option,<br /> 			.name = "PHY Smart Power Down",<br /> 			.err  = "defaulting to Disabled",<br />&#64;&#64; -513,7 +519,7 &#64;&#64; void __devinit e1000_check_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Kumeran Lock Loss Workaround */<br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = enable_option,<br /> 			.name = "Kumeran Lock Loss Workaround",<br /> 			.err  = "defaulting to Enabled",<br />&#64;&#64; -578,16 +584,18 &#64;&#64; static void __devinit e1000_check_fiber_options(struct e1000_adapter *adapter)<br /> <br /> static void __devinit e1000_check_copper_options(struct e1000_adapter *adapter)<br /> {<br />+	struct e1000_option opt;<br /> 	unsigned int speed, dplx, an;<br /> 	int bd = adapter-&gt;bd_number;<br /> <br /> 	{ /* Speed */<br />-		struct e1000_opt_list speed_list[] = {{          0, "" },<br />-						      {   SPEED_10, "" },<br />-						      {  SPEED_100, "" },<br />-						      { SPEED_1000, "" }};<br />+		static const struct e1000_opt_list speed_list[] = {<br />+			{          0, "" },<br />+			{   SPEED_10, "" },<br />+			{  SPEED_100, "" },<br />+			{ SPEED_1000, "" }};<br /> <br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = list_option,<br /> 			.name = "Speed",<br /> 			.err  = "parameter ignored",<br />&#64;&#64; -604,11 +612,12 &#64;&#64; static void __devinit e1000_check_copper_options(struct e1000_adapter *adapter)<br /> 		}<br /> 	}<br /> 	{ /* Duplex */<br />-		struct e1000_opt_list dplx_list[] = {{           0, "" },<br />-						     { HALF_DUPLEX, "" },<br />-						     { FULL_DUPLEX, "" }};<br />+		static const struct e1000_opt_list dplx_list[] = {<br />+			{           0, "" },<br />+			{ HALF_DUPLEX, "" },<br />+			{ FULL_DUPLEX, "" }};<br /> <br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = list_option,<br /> 			.name = "Duplex",<br /> 			.err  = "parameter ignored",<br />&#64;&#64; -637,7 +646,7 &#64;&#64; static void __devinit e1000_check_copper_options(struct e1000_adapter *adapter)<br /> 		       "parameter ignored\n");<br /> 		adapter-&gt;hw.autoneg_advertised = AUTONEG_ADV_DEFAULT;<br /> 	} else { /* Autoneg */<br />-		struct e1000_opt_list an_list[] =<br />+		static const struct e1000_opt_list an_list[] =<br /> 			#define AA "AutoNeg advertising "<br /> 			{{ 0x01, AA "10/HD" },<br /> 			 { 0x02, AA "10/FD" },<br />&#64;&#64; -671,7 +680,7 &#64;&#64; static void __devinit e1000_check_copper_options(struct e1000_adapter *adapter)<br /> 			 { 0x2e, AA "1000/FD, 100/FD, 100/HD, 10/FD" },<br /> 			 { 0x2f, AA "1000/FD, 100/FD, 100/HD, 10/FD, 10/HD" }};<br /> <br />-		struct e1000_option opt = {<br />+		opt = (struct e1000_option) {<br /> 			.type = list_option,<br /> 			.name = "AutoNeg",<br /> 			.err  = "parameter ignored",<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
