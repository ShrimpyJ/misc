    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/26/226">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/298">Adrian Bunk</a><ul><li class="origin"><a href="/lkml/2008/8/27/336">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/27/336">Jamie Lokier</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Aug 2008 13:41:43 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 26 Aug 2008, Adrian Bunk wrote:<br />&gt; <br />&gt; I had in mind that we anyway have to support it for tiny kernels.<br /><br />I actually don't think that is true.<br /><br />If we really were to decide to be stricter about it, and it makes a big <br />size difference, we can probably also add a tool to warn about functions <br />that really should be inline.<br /><br />&gt; &gt; Inlining really isn't the great tool some people think it is. Especially <br />&gt; &gt; not since gcc stack allocation is so horrid that it won't re-use stack <br />&gt; &gt; slots etc (which I don't disagree with per se - it's _hard_ to re-use <br />&gt; &gt; stack slots while still allowing code scheduling).<br />&gt; <br />&gt; gcc's stack allocation has become better<br />&gt; (that's why we disable unit-at-a-time only for gcc 3.4 on i386).<br /><br /><br />I agree that it has become better. But it still absolutely *sucks*.<br /><br />For example, see the patch I just posted about e1000 stack usage. Even <br />though the variables were all in completely separate scopes, they all got <br />individual space on the stack over the whole lifetime of the function, <br />causing an explosion of stack-space. As such, gcc used 500 bytes too much <br />of stack, just because it didn't re-use the stackspace.<br /><br />That was with gcc-4.3.0, and no, there were hardly any inlining issues <br />involevd, although it is true that inlining actually did make it slightly <br />worse in that case too (but since it was essentially a leaf function, that <br />had little real life impact, since there were no deep callchains below it <br />to care).<br /><br />So the fact is, "better" simply is not "good enough". We still need to do <br />a lot of optimizations _manually_, because gcc cannot see that it can <br />re-use the stack-slots.<br /><br />And sometimes those "optimizations" are actually performance <br />pessimizations, because in order to make gcc not use all the stack at the <br />same time, you simply have to break things out and force-disable inlining.<br /><br />&gt; Most LOCs of the kernel are not written by people like you or Al Viro or <br />&gt; David Miller, and the average kernel developer is unlikely to do it as <br />&gt; good as gcc.<br /><br />Sure. But we do have tools. We do have checkstack.pl, it's just that it <br />hasn't been an issue in a long time, so I suspect many people didn't even <br />_realize_ we have it, and I certainly can attest to the fact that even <br />people who remember it - like me - don't actually tend to run it all that <br />often.<br /><br />&gt; For the average driver the choice is realistically between<br />&gt; "inline's randomly sprinkled across the driver" and<br />&gt; "no inline's, leave it to gcc".<br /><br />And neither is likely to be a big problem.<br /><br />&gt; BTW:<br />&gt; I just ran checkstack on a (roughly) allyesconfig kernel, and we have a <br />&gt; new driver that allocates "unsigned char recvbuf[1500];" on the stack...<br /><br />Yeah, it's _way_ too easy to do bad things.<br /><br />&gt; With the "gcc inline's static functions" you complain about we have<br />&gt; 4-5 years of experience.<br /><br />Sure. And most of it isn't all that great.<br /><br />But I do agree that lettign gcc make more decisions is _dangerous_. <br />However, in this case, at least, the decisions it makes would at least <br />make for less inlining, and thus less stack space explosion.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
