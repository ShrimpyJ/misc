    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/26/227">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/242">Jamie Lokier</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2008/8/26/321">Adrian Bunk</a><ul><li><a href="/lkml/2008/8/26/323">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/26/358">"Parag Warudkar"</a><ul><li><a href="/lkml/2008/8/26/361">David VomLehn</a></li><li><a href="/lkml/2008/8/26/369">Linus Torvalds</a></li><li><a href="/lkml/2008/8/27/70">Bernd Petrovitsch</a></li></ul></li><li><a href="/lkml/2008/8/26/366">Adrian Bunk</a><ul><li><a href="/lkml/2008/8/26/371">Linus Torvalds</a></li><li><a href="/lkml/2008/8/27/73">Alan Cox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Aug 2008 12:18:53 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 26 Aug 2008, Jamie Lokier wrote:<br />&gt; <br />&gt; A function which is only called from one place should, if everything<br />&gt; made sense, _never_ use more stack through being inlined.<br /><br />But that's simply not true.<br /><br />See the whole discussion.<br /><br />The problem is that if you inline that function, the stack usage of the <br />newly inlined function is now added to ALL THE OTHER paths too!<br /><br />So the case we had in module loading was that yes, we had a function with <br />a big stack footprint, but it was NOT in the deep path.<br /><br />But by inlining it, it now moved the stack footprint "up" one level to <br />another function, and now the big stack footprint really _was_ in the deep <br />path, because the caller was involved in a much deeper chain. <br /><br />So inlining moves the code up the callchain, and that is a problem for the <br />backtrace, but that's "just" a debugging issue. But it also moves the <br />stack footprint up the callchain, and that can actually be a correctness <br />issue.<br /><br />Of course, a compiler doesn't _have_ to do that. A compiler _could_ have <br />multiple different stack footprints for a single function, and do liveness <br />analysis etc. But no sane compiler probably does that, because it's very <br />painful indeed, and it's not even an issue if you aren't stack-limited <br />(and being stack-limited is really just a kernel thing).<br /><br />(Yeah, it can be an issue even if you have a big stack, in that you get <br />worse cache behaviour, so a dense stack footprint _would_ help. But the <br />complexity of stack liveness analysis is almost certainly not worth the <br />relatively small gains it would get on some odd cases).<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
