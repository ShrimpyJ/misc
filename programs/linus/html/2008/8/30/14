    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/28/371">First message in thread</a></li><li><a href="/lkml/2008/8/29/464">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/30/3">"Yinghai Lu"</a><ul><li><a href="/lkml/2008/8/30/4">"Yinghai Lu"</a></li><li><a href="/lkml/2008/8/30/12">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/30/16">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/30/28">"Yinghai Lu"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/8/30/5">"Yinghai Lu"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/8/30/14/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Aug 2008 23:11:55 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.27-rc5: System boot regression caused by commit a2bd7274b47124d2fc4dfdb8c0591f545ba749dd</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Aug 2008, Yinghai Lu wrote:<br />&gt; <br />&gt; please check<br />&gt; <br />&gt;   __request_region: conflict: (reserved) [dd000000, efffffff], res:<br />&gt; (qla2xxx) [ddffc000, ddffffff]<br />&gt; busy flag<br />&gt; qla2xxx 0000:83:00.0: BAR 1: can't reserve mem region [0xddffc000-0xddffffff]<br /><br />Ok, this is actually when the driver wants to reserve the BAR, and then it <br />norices that there is an existing "reservation" there.<br /><br />So yes, drivers will care - they literally will think that somebody else <br />owns their resource if they have a BUSY resource inside of them. So this <br />is a driver protecting against another driver.<br /><br />The sad part is that it looks like it's entirely due to the PCI code <br />trying to emulate an ISA driver model, and use a flat resource space - so <br />it hits the upper resources first.<br /><br />Does this patch make a difference? It actually removes a fair chunk of <br />code, by just saying "we really don't care if the resource is IO or MEM, <br />we just want to reserve space inside of it, regardless of type".<br /><br />Untested - obviously.<br /><br />		Linus<br /><br />---<br /> drivers/pci/pci.c |   26 +++++++++-----------------<br /> 1 files changed, 9 insertions(+), 17 deletions(-)<br /><br />diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c<br />index c9884bb..a3de4fe 100644<br />--- a/drivers/pci/pci.c<br />+++ b/drivers/pci/pci.c<br />&#64;&#64; -1304,15 +1304,11 &#64;&#64; pci_get_interrupt_pin(struct pci_dev *dev, struct pci_dev **bridge)<br /> void pci_release_region(struct pci_dev *pdev, int bar)<br /> {<br /> 	struct pci_devres *dr;<br />+	struct resource *res = pdev-&gt;resource + bar;<br /> <br /> 	if (pci_resource_len(pdev, bar) == 0)<br /> 		return;<br />-	if (pci_resource_flags(pdev, bar) &amp; IORESOURCE_IO)<br />-		release_region(pci_resource_start(pdev, bar),<br />-				pci_resource_len(pdev, bar));<br />-	else if (pci_resource_flags(pdev, bar) &amp; IORESOURCE_MEM)<br />-		release_mem_region(pci_resource_start(pdev, bar),<br />-				pci_resource_len(pdev, bar));<br />+	__release_region(res, pci_resource_start(pdev, bar), pci_resource_len(pdev, bar));<br /> <br /> 	dr = find_pci_dr(pdev);<br /> 	if (dr)<br />&#64;&#64; -1336,20 +1332,16 &#64;&#64; void pci_release_region(struct pci_dev *pdev, int bar)<br /> int pci_request_region(struct pci_dev *pdev, int bar, const char *res_name)<br /> {<br /> 	struct pci_devres *dr;<br />+	struct resource *res = pdev-&gt;resource + bar;<br /> <br /> 	if (pci_resource_len(pdev, bar) == 0)<br /> 		return 0;<br />-		<br />-	if (pci_resource_flags(pdev, bar) &amp; IORESOURCE_IO) {<br />-		if (!request_region(pci_resource_start(pdev, bar),<br />-			    pci_resource_len(pdev, bar), res_name))<br />-			goto err_out;<br />-	}<br />-	else if (pci_resource_flags(pdev, bar) &amp; IORESOURCE_MEM) {<br />-		if (!request_mem_region(pci_resource_start(pdev, bar),<br />-				        pci_resource_len(pdev, bar), res_name))<br />-			goto err_out;<br />-	}<br />+<br />+	if (!res-&gt;parent)<br />+		goto err_out;<br />+<br />+	if (!__request_region(res, pci_resource_start(pdev, bar), pci_resource_len(pdev, bar), res_name))<br />+		goto err_out;<br /> <br /> 	dr = find_pci_dr(pdev);<br /> 	if (dr)<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
