    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/16/49">First message in thread</a></li><li><a href="/lkml/2008/8/16/103">"H. Peter Anvin"</a><ul><li><a href="/lkml/2008/8/16/107">Mathieu Desnoyers</a><ul><li class="origin"><a href="/lkml/2008/8/16/221">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/16/221">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/8/16/225">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Aug 2008 10:30:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86_64 : support atomic ops with 64 bits integer values</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 16 Aug 2008, Mathieu Desnoyers wrote:<br />&gt; <br />&gt; I have hit this problem when tying to implement a better rwlock design<br />&gt; than is currently in the mainline kernel (I know the RT kernel has a<br />&gt; hard time with rwlocks)<br /><br />Have you looked at my sleping rwlock trial thing?<br /><br />It's very different from a spinning one, but I think the fast path should <br />be identical, and that's the one I tried to make fairly optimal.<br /><br />See <br /><br />	<a href="https://git.kernel.org/?p=linux/kernel/git/torvalds/rwlock.git;a=summary">http://git.kernel.org/?p=linux/kernel/git/torvalds/rwlock.git;a=summary</a><br /><br />for a git tree. The sleeping version has two extra words for the sleep <br />events, but those would be irrelevant for the spinning version.<br /><br />The fastpath is<br /><br />	movl $4,%eax<br />	lock ; xaddl %eax,(%rdi)<br />	testl $3,%eax<br />	jne __my_rwlock_rdlock<br /><br />for the read-lock (the two low bits are contention bits, so you can make <br />contention have any behaviour you want - including fairish, prefer-reads, <br />or prefer-writes).<br /><br />The write fastpath is<br /><br />	xorl %eax,%eax<br />	movl $1,%edx<br />	lock ; cmpxchgl %edx,(%rdi)<br />	jne __my_rwlock_wrlock<br /><br />and the "unlock" case is actually unnecessarily complex in my <br />implementation, because it needs to<br /><br /> - wake things up in case of a conflict (not true of a spinning version, <br />   of course)<br /> - it's pthreads-compatible, so the same function needs to handle both a <br />   read-unlock and a write-unlock.<br /><br />but a spinning version should be much simpler.<br /><br />Anyway, I haven't tried turning it into a spinning version, but it was <br />very much designed to<br /><br /> - work with both 32-bit and 64-bit x86 by making the fastpath only do <br />   32-bit locked accesses<br /> - have any number of pending readers/writers (which is not a big deal for <br />   a spinning one, but at least there are no CPU count overflows).<br /> - and because it is designed for sleeping, I'm pretty sure that you can <br />   easily drop interrupts in the contention path, to make <br />   write_lock_irq[save]() be reasonable.<br /><br />In particular, the third bullet is the important one: because it's <br />designed to have a "contention" path that has _extra_ information for the <br />contended case, you could literally make the extra information have things <br />like a list of pending writers, so that you can drop interrupts on one <br />CPU, while you adding information to let the reader side know that if the <br />read-lock happens on that CPU, it needs to be able to continue in order to <br />not deadlock.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
