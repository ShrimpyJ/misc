    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/16/49">First message in thread</a></li><li><a href="/lkml/2008/8/16/119">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/16/221">Mathieu Desnoyers</a><ul><li class="origin"><a href="/lkml/2008/8/17/14">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/17/14">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/8/17/86">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Aug 2008 14:33:01 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] Fair rwlock</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 16 Aug 2008, Mathieu Desnoyers wrote:<br />&gt; <br />&gt; Tweakable contention behavior seems interesting, but I don't think it<br />&gt; deals with the fact that on a mainline kernel, when an interrupt handler<br />&gt; comes in and asks for a read lock, it has to get it on the spot.<br /><br />Right. Which is exactly why I'd suggest using the extra space for saying <br />"this CPU is busy-looping waiting for a write lock", and then the <br />read-lock contention case can say<br /><br /> - ok, there's a pending write lock holder on _my_ CPU, so I need to just <br />   succeed right away despite the fact that there is contention.<br /><br />In other words, there are a few cases:<br /><br /> - you actually *got* the write lock<br /><br />   interrupts obviously have to be disabled here, because any reader can <br />   simply not get the lock.<br /><br /> - you are waiting to get the write lock.<br /><br />   Mark this CPU as "pending" in the rwlock (by making the extended thing <br />   be a queue, or by simply only ever allowing a single pendign CPU), and <br />   re-enable interrupts while you wait for it. An interrupt that comes in <br />   and wants a read-lock sees that it's pending, so it should then ignore <br />   the contention bit, and only wait for the write bit to go away.<br /><br />See? This way you only need to actually disable interrupts while holding <br />literally the lock, not while waiting for it. While still giving priority <br />to writers (except for the _one_ CPU, where new readers will have to get <br />through).<br /><br />So this way you can be fair, and not allow readers to starve a writer. The <br />only reader that is allowed past a waiting writer is the reader on that <br />same CPU.<br /><br />And notice how the fast-path needs no spinlock or anything else - it's <br />still just a single locked instruction. In comparison, if I read your <br />example code right, it is absolutely horrid and has an extra spinlock <br />access for the fair_write_lock case.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
