    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/16/49">First message in thread</a></li><li><a href="/lkml/2008/8/16/225">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/17/14">Mathieu Desnoyers</a><ul><li class="origin"><a href="/lkml/2008/8/17/135">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/17/135">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/8/17/177">Mathieu Desnoyers</a></li><li><a href="/lkml/2008/8/18/345">Linus Torvalds</a></li><li><a href="/lkml/2008/8/18/545">"Paul E. McKenney"</a></li><li><a href="/lkml/2008/8/25/281">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Aug 2008 09:17:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] Fair low-latency rwlock v3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 17 Aug 2008, Mathieu Desnoyers wrote:<br />&gt; +/*<br />&gt; + * Uncontended fastpath.<br />&gt; + */<br />&gt; +static int fair_write_lock_irq_fast(struct fair_rwlock *rwlock)<br /><br />So first off, you should call this "trylock", since it doesn't necessarily <br />get the lock at all. It has nothing to do with fast.<br /><br />Secondly:<br /><br />&gt; +	value = atomic_long_read(&amp;rwlock-&gt;value);<br />&gt; +	if (likely(!value)) {<br />&gt; +		/* no other reader nor writer present, try to take the lock */<br />&gt; +		local_bh_disable();<br />&gt; +		local_irq_disable();<br />&gt; +		if (likely(atomic_long_cmpxchg(&amp;rwlock-&gt;value, value,<br /><br />This is actually potentially very slow. <br /><br />Why? If the lock is uncontended, but is not in the current CPU's caches, <br />the read -&gt; rmw operation generates multiple cache coherency protocol <br />events. First it gets the line in shared mode (for the read), and then <br />later it turns it into exclusive mode.<br /><br />So if it's likely that the value is zero (or even if it's just the only <br />case we really care about), then you really should do the<br /><br />	atomic_long_cmpxchg(&amp;rwlock-&gt;value, 0, newvalue);<br /><br />thing as the _first_ access to the lock.<br /><br />Yeah, yeah, that means that you need to do the local_bh_disable etc first <br />too, and undo it if it fails, but the failure path should be the unusual <br />one. <br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
