    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/16/49">First message in thread</a></li><li><a href="/lkml/2008/8/21/495">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/21/505">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/21/531">Linus Torvalds</a></li><li><a href="/lkml/2008/8/23/3">Mathieu Desnoyers</a><ul><li><a href="/lkml/2008/8/23/97">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/23/170">Mathieu Desnoyers</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/8/21/513">"H. Peter Anvin"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 21 Aug 2008 14:41:57 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] Writer-biased low-latency rwlock v8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 21 Aug 2008, H. Peter Anvin wrote:<br />&gt;<br />&gt; First of all, let me say I don't pretend to understand formally how you deal<br />&gt; with overflow-after-the-fact, as unlikely as it is.<br /><br />Just make sure it can't overflow. With spinlocks, you are guaranteed that <br />you won't have more than NR_CPU's thing, so 20 bits is pretty safe. 30 <br />bits is ridiculously safe.<br /><br />&gt; However, it seems to me to be an easy way to avoid it.  Simply by changing the<br />&gt; read-test mask to $0x80000003, you will kick the code down the slow path once<br />&gt; the read counter reaches $0x80000004 (2^29+1 readers), where you can do any<br />&gt; necessary fixup -- or BUG() -- at leisure.<br /><br />Sure, you could do things like that, but that sounds like a separate <br />"debugging" version, not the main one.<br /><br />&gt; This fastpath ends up being identical in size and performance to the one you<br />&gt; posted, although yours could be reduced by changing the test to a testb<br />&gt; instruction -- at the almost certainly unacceptable expense of taking a<br />&gt; partial-register stall on the CPUs that have those.<br /><br />Well, you could just change the "testl $3,%eax" into an "andl $3,%eax", <br />and it will be two bytes shorter with no partial register stall.<br /><br />I forgot that "testl" doesn't have the byte immediate version.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
