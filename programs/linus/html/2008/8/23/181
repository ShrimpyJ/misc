    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/16/49">First message in thread</a></li><li><a href="/lkml/2008/8/23/97">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/23/170">Mathieu Desnoyers</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 23 Aug 2008 14:40:36 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] Writer-biased low-latency rwlock v8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 23 Aug 2008, Mathieu Desnoyers wrote:<br />&gt;<br />&gt; Actually, the point I just fixed in my head is that this bit will be a<br />&gt; "MAY_CONTEND" bit, which could let higher priority readers access the<br />&gt; lock in the slow path.<br /><br />EXACTLY.<br /><br />It's not even necessarily a "contention" bit per se - it's literally a <br />"readers have to take the slow-path" bit (writers will obviously _always_ <br />take the slowpath if there is any non-zero value at all, so they don't <br />need it).<br /><br />Then, the slow-path might actually decide that "hey, there is no _actual_ <br />writer there yet - just some _waiting_ writer, but since this read lock is <br />in an interrupt context, we have to let it go through _despite_ the fact <br />that the lock is contended in order to avoid deadlock".<br /><br />So it allows a fast-path for the trivial cases that is literally just a <br />couple of instructions long, and that is nice not just because of <br />performance issues, but because it then means that you can entirely ignore <br />all those things in the slow path. It also means that everybody can look <br />at the fast-path and decide that "ok, the fast-path really is optimal". <br /><br />That fast-path is what a lot of people care more about than just about <br />anything else.<br /><br />The slow-path, in comparison, can be in C, and can do all those checks <br />like "are we in an (sw-)interrupt handler?" and basically prioritize <br />certain classes of people.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
