    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/29/232">First message in thread</a></li><li><a href="/lkml/2008/8/29/273">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/29/276">Alan Cox</a><ul><li class="origin"><a href="/lkml/2008/8/29/315">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/29/315">Arjan van de Ven</a></li><li><a href="/lkml/2008/8/29/323">Alan Cox</a><ul><li><a href="/lkml/2008/8/29/324">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2008/8/29/279">Arjan van de Ven</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Aug 2008 10:26:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 4/5] select: make select() use schedule_hrtimeout()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Aug 2008, Alan Cox wrote:<br />&gt;<br />&gt; &gt; "schedule_timeout()", there's a big difference between asking for two <br />&gt; &gt; ticks and asking for two seconds. The latter should probably try to round <br />&gt; &gt; to a nice timer tick basis for power reasons).<br />&gt; <br />&gt; I disagree - that is fixing the problem in the wrong place. The timer<br />&gt; structure needs an accuracy field of some form that the existing timer<br />&gt; functions initialise to 0.<br /><br />I do agree that we could do that too, but you miss one big issue: even if <br />we were to add an accuracy field inside the kernel, there is no such field <br />in the user interfaces.<br /><br />We just pass timevals (and sometimes timespecs) around, and no, they don't <br />have any way to specify accuracy.<br /><br />Yeah, we could use the high bits in the usec/nsec words, but then older <br />kernels would basically do random things, so that would be a horrible <br />interface.<br /><br />The other thing to do would be to just add totally new system calls with <br />totally new interfaces, but (a) nobody would use them anyway and (b) it's <br />simply not worth it.<br /><br />So given that reality, and _if_ we want to support nice high-resolution <br />sleeping by select/poll, the only reasonable thing to do is to estimate <br />some kind of expected accuracy from the existing timeval/timespec.<br /><br />And the only reasonable way to do that is to just look at the range. You <br />can probably do something fairly trivial with<br /><br />	/* Estimate expected accuracy in ns from a timeval */<br />	unsigned long estimate_accuracy(struct timeval *tv)<br />	{<br />		/*<br />		 * Tens of ms if we're looking at seconds, even<br />		 * more for 10s+ sleeping<br />		 */<br />		if (tv-&gt;tv_sec) {<br />			/* Tenths of seconds for long sleeps */<br />			if (tv-&gt;tv_sec &gt; 10)<br />				return 100000000;<br />			/*<br />			 * Tens of ms for second-granularity sleeps. This,<br />			 * btw, is the historical Linux 100Hz timer range.<br />			 */<br />			return 10000000;<br />		}<br /><br />		/* Single msecs if we're looking at milliseconds */<br />		if (tv-&gt;tv_usec &gt; 1000)<br />			return 1000000;<br /><br />		/* Aim for tenths of msecs otherwise */<br />		return 100000;<br />	}<br /><br />and yes, it's just a heuristic, but it's probably not a horribly stupid <br />one or a very unreasonable one. <br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
