    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/25/163">"Alan D. Brunelle"</a><ul><li><a href="/lkml/2008/8/25/257">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2008/8/25/312">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/25/312">"Alan D. Brunelle"</a><ul><li><a href="/lkml/2008/8/25/320">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/8/25/262/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Aug 2008 11:09:36 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 25 Aug 2008, Linus Torvalds wrote:<br />&gt; <br />&gt; Could you make your kernel image available somewhere, and we can take a <br />&gt; look at it? Some versions of gcc are total pigs when it comes to stack <br />&gt; usage, and your exact configuration matters too.  But yes, module loading <br />&gt; is a bad case, for me "sys_init_module()" contains<br />&gt; <br />&gt; 	subq    $392, %rsp      #,<br />&gt; <br />&gt; which is probably mostly because of the insane inlining gcc does (ie it <br />&gt; will likely have inlined every single function in that file that is only <br />&gt; called once, and then it will make all local variables of all those <br />&gt; functions alive over the whole function and allocate stack-space for them <br />&gt; ALL AT THE SAME TIME).<br /><br />I bet this one-liner will probably make your kernel work. It's not a full <br />solution, but it will make the module-loading path lose _all_ of the above <br />stack slots by just not inlining "load_module()" - the stack slots will <br />still be used when the module is _loaded_, but by the time we actually <br />callt he -&gt;init function they will have been released since it's not all <br />in the same crazy function any more.<br /><br />I _seriously_ believe that we were better off back when gcc only inlined <br />what we told it to inline, and never inlined on its own. The gcc inlining <br />logic is pure and utter sh*t in an environment like the kernel where stack <br />space is a valuable resource.<br /><br />Anyway, Alan, even if this solves your particular problem, I'd still like <br />to see your kernel image, so that I can hunt for other problems like <br />this..<br /><br />			Linus<br /><br />---<br /> kernel/module.c |    2 +-<br /> 1 files changed, 1 insertions(+), 1 deletions(-)<br /><br />diff --git a/kernel/module.c b/kernel/module.c<br />index 08864d2..9db1191 100644<br />--- a/kernel/module.c<br />+++ b/kernel/module.c<br />&#64;&#64; -1799,7 +1799,7 &#64;&#64; static void *module_alloc_update_bounds(unsigned long size)<br /> <br /> /* Allocate and load the module: note that size of section 0 is always<br />    zero, and we rely on this for optional sections. */<br />-static struct module *load_module(void __user *umod,<br />+static noinline struct module *load_module(void __user *umod,<br /> 				  unsigned long len,<br /> 				  const char __user *uargs)<br /> {<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
