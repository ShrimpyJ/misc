    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/8/23/105">First message in thread</a></li><li><a href="/lkml/2008/8/25/262">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/25/312">"Alan D. Brunelle"</a><ul><li class="origin"><a href="/lkml/2008/8/25/322">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/25/322">Arjan van de Ven</a></li><li><a href="/lkml/2008/8/25/324">Linus Torvalds</a><ul><li><a href="/lkml/2008/8/25/331">Linus Torvalds</a></li><li><a href="/lkml/2008/8/25/340">"Alan D. Brunelle"</a></li></ul></li><li><a href="/lkml/2008/8/26/108">Rusty Russell</a><ul><li><a href="/lkml/2008/8/26/197">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Aug 2008 13:43:03 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #11342] Linux 2.6.27-rc3: kernel BUG at mm/vmalloc.c - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Mon, 25 Aug 2008, Alan D. Brunelle wrote:<br />&gt; <br />&gt; Mine has:<br />&gt; <br />&gt; Dump of assembler code for function sys_init_module:<br />&gt; 0xffffffff802688c4 &lt;sys_init_module+4&gt;:	sub    $0x1c0,%rsp<br />&gt; <br />&gt; so 448 bytes.<br /><br />Yeah, your build seems to have consistently bigger stack usage, and that <br />may be due to some config option, but most likely it's a compiler version <br />issue.<br /><br />But I think part of the reason is that you have frame pointers enabled: <br />that makes the stack frames bigger not only because of the frame pointer <br />save/restore, but also because you have more register pressure and thus <br />spills.<br /><br />&gt; The kernel is up at: <a href="http://free.linux.hp.com/~adb/bug.11342/vmlinux">http://free.linux.hp.com/~adb/bug.11342/vmlinux</a> (if<br />&gt; you would let me know when you are through with it so I can free up some<br />&gt; space there I'd appreciate it...)<br /><br />I'm downloading it now, I'll probably be done by the time you get this <br />email.<br /><br />[ Update. Done. You can remove it ]<br /><br />&gt; By doing the patch you provided, sys_init_module now looks like:<br />&gt; <br />&gt; Dump of assembler code for function sys_init_module:<br />&gt; 0xffffffff8026aa24 &lt;sys_init_module+4&gt;:	sub    $0x20,%rsp<br />&gt; <br />&gt; So only 32 bytes. (But of course, load_module() exists, and now has<br />&gt; 0x1d0 (464) bytes...)<br /><br />Right - the stack usage didn't go away, but the _lifetimes_ changed.<br /><br />So now load_module() will still use almost 500 bytes of stack, and it will <br />call other routines that use stack too, but the lifetime of that stack <br />usage is no longer over the whole module loading and initialization part, <br />it's purely over just the loading thing.<br /><br />And since the deep callchain came much later (in the actual -&gt;init <br />routines), by the time we do that, we no longer now have the load_module <br />stack usage active any more.<br /><br />&gt; With the patch you provide, I /was/ able to repeatedly boot OK (latest<br />&gt; tree, and I also ran the patch against the 26.27.rc3-based kernel I was<br />&gt; having problems with initially, and that booted OK as well).<br /><br />I had actually already committed it, because it was correct regardless <br />(and gcc really is a total ass for doing that inlining to begin with), but <br />it's good to have verification that the behaviour you saw was literally <br />about this thing.<br /><br />I'll look at your vmlinux binary to see what else sucks from a stack depth <br />standpoint, but one of the problems in this whole thing is that the <br />stack usage is obviously both a static thing (with some functions using <br />_way_ too much stack!) _and_ a dynamic thing (with the total stack use <br />being not about any individual function, but the whole chain).<br /><br />My patch obviously doesn't change the static stack usage, it just moves it <br />around a bit so that it's no longer on that same deep path, so the dynamic <br />stack usage is much less.<br /><br />But I'll look at your vmlinux, see what stands out.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
