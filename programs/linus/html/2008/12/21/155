    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/12/21/6">First message in thread</a></li><li><a href="/lkml/2008/12/21/6">David Brownell</a><ul><li class="origin"><a href="/lkml/2008/12/21/163">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/21/163">David Brownell</a><ul><li><a href="/lkml/2008/12/22/306">Ingo Oeser</a><ul><li><a href="/lkml/2008/12/23/141">David Brownell</a></li></ul></li><li><a href="/lkml/2008/12/23/142">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/23/155">David Brownell</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 21 Dec 2008 15:46:10 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2.6.28-rc9] spi: spi_write_then_read() regression fix</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 20 Dec 2008, David Brownell wrote:<br />&gt; <br />&gt; All SPI transfers are full duplex, and are packaged as half duplex<br />&gt; by either discarding the data that's read ("write only"), or else<br />&gt; by writing zeroes ("read only").  That patch wasn't ensuring that<br />&gt; zeroes were getting written out during the "half duplex read" part<br />&gt; of the transaction; instead, old RX bits were getting sent.<br /><br />Hmm. In addition, isn't this broken (in that same function):<br /><br />        memcpy(local_buf, txbuf, n_tx);<br />        x.tx_buf = local_buf;<br />        x.rx_buf = local_buf;<br /><br />        /* do the i/o */<br />        status = spi_sync(spi, &amp;message);<br />        if (status == 0)<br />                memcpy(rxbuf, x.rx_buf + n_tx, n_rx);<br /><br />shouldn't that 'rx_buf' setup be<br /><br />	x.rx_buf = local_buf + n_tx;<br /><br />since the whole point was that we allocated a buffer that can hold _both_ <br />the rx and tx parts? Especially as that final copy into the resulting <br />"rxbuf" thing uses that "+ n_tx" addition?<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
