    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/12/12/338">First message in thread</a></li><li><a href="/lkml/2008/12/13/105">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/13/107">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/13/195">Alex Chiang</a></li><li><a href="/lkml/2008/12/16/555">Matthew Wilcox</a></li></ul></li><li><a href="/lkml/2008/12/13/194">Alex Chiang</a><ul><li class="origin"><a href="/lkml/2008/12/15/208">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/15/208">Jesse Barnes</a><ul><li><a href="/lkml/2008/12/15/275">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2008/12/15/194">"Chen, Justin"</a></li><li><a href="/lkml/2008/12/15/246">"Chen, Justin"</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/12/13/196/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 13 Dec 2008 17:37:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PCI BAR mem resource allocation "regression"</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 13 Dec 2008, Alex Chiang wrote:<br />&gt; <br />&gt; Yeah, I knew I forgot to send the contents of /proc/iomem. I'll<br />&gt; include them below.<br /><br />Ok, this definitely shows that the commit in question generates a bogus <br />resource tree:<br /><br />&gt; # (a) mainline /proc/iomem before hotplug<br />...<br />&gt; e0000000-efffffff : PCI Bus 0000:50<br />&gt;   e0000000-efffffff : PCI Bus 0000:4f<br />&gt;     e0000000-efffffff : PCI Bus 0000:4e<br />&gt;       e0000000-e7ffffff : PCI Bus 0000:52<br />&gt;         e0000000-e7ffffff : PCI Bus 0000:51<br /><br />This is _not_ the correct nesting. PCI bus 50 is inside 4f, which is <br />inside 4e. Yet the resource tree has these reversed, and shows 4e inside <br />4f inside 50 (and 51 inside 52). And yes, the reversal happens exactly <br />when the size of the inner resource has the same size as the size of the <br />outer one - and then the inner one has been inserted "too high" in the <br />resource tree.<br /><br />So this is very clearly the direct (and intended, but incorrect) result of <br />that commit d33b6fba2c4350651f3f61ff2ab858a2f116e9a4. Reverting it (using <br />my two-liner rather than your version, though) is almost certainly the <br />right thing.<br /><br />We have the exact same issue here:<br /><br />&gt; 80604000000-806ffffffff : PCI Bus 0000:4e<br />&gt;   80680000000-806ffffffff : PCI Bus 0000:50<br />&gt;     80680000000-806ffffffff : PCI Bus 0000:4f<br />&gt;       80680000000-806bfffffff : PCI Bus 0000:52<br />&gt;         80680000000-806bfffffff : PCI Bus 0000:51<br />&gt;           80680000000-8069fffffff : PCI Bus 0000:53<br />&gt;           806a0000000-806bfffffff : PCI Bus 0000:54<br /><br />Again, the nesting is wrong, adn for the exact same reason, even if the <br />pattern is slightly different (ie noe bus #4e is in the right spot in the <br />hierarchy, because it has a different size).<br /><br />Here's the relevant parts of the lspci that show the bus hierarchy <br />(very aggressively snipped from your huge lspci output):<br /><br />&gt; 4e:00.0 PCI bridge: Hewlett-Packard Company PCIe Root Port (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=4e, secondary=4f, subordinate=c1, sec-latency=0<br />&gt; <br />&gt; 4f:00.0 PCI bridge: Integrated Device Technology, Inc. Unknown device 801c (rev 04) (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=4f, secondary=50, subordinate=c1, sec-latency=0<br />&gt; <br />&gt; 50:00.0 PCI bridge: Integrated Device Technology, Inc. Unknown device 801c (rev 04) (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=50, secondary=51, subordinate=88, sec-latency=0<br />&gt; <br />&gt; 50:01.0 PCI bridge: Integrated Device Technology, Inc. Unknown device 801c (rev 04) (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=50, secondary=89, subordinate=c1, sec-latency=0<br />&gt; <br />&gt; 51:00.0 PCI bridge: Integrated Device Technology, Inc. Unknown device 8018 (rev 0e) (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=51, secondary=52, subordinate=54, sec-latency=0<br />&gt; <br />&gt; 52:02.0 PCI bridge: Integrated Device Technology, Inc. Unknown device 8018 (rev 0e) (prog-if 00 [Normal decode])<br />&gt; 	Bus: primary=52, secondary=53, subordinate=53, sec-latency=0<br /><br />ie the bus number allocation really is that bus #53 is inside #52, which <br />is inside #51, which is inside #50, inside #4f, inside #4e.. <br /><br />Your machine is an insane mess of PCI bridges, which is probably why you <br />see this, while most other people probably never will. But I bet it <br />happens on other machines, and I also bet it generally doesn't really <br />result in any problems.<br /><br />Because in practice, the fact that the resource tree has been nested the <br />wrong way around probably almost never actually matters: especially as it <br />happens only when the nesting resources are the same size, which also <br />means that there can be no _other_ resources that would fit inside the <br />true outer one.<br /><br />So even if lots of other people see some of the same issues, it doesn't <br />cause any other symptoms, and that in turn explains why we've had this <br />going on for such a long time (since 2.6.16 or whatever).<br /><br />&gt; # (e) revert /proc/iomem before hotplug<br />...<br />&gt; e0000000-efffffff : PCI Bus 0000:4e<br />&gt;   e0000000-efffffff : PCI Bus 0000:4f<br />&gt;     e0000000-efffffff : PCI Bus 0000:50<br />&gt;       e0000000-e7ffffff : PCI Bus 0000:51<br />&gt;         e0000000-e7ffffff : PCI Bus 0000:52<br />&gt;           e0000000-e3ffffff : PCI Bus 0000:54<br />&gt;           e0000000-e03fffff : 0000:54:00.1<br />&gt;           e0400000-e07fffff : 0000:54:00.0<br />&gt;           e0800000-e081ffff : 0000:54:00.1<br />&gt;           e0820000-e083ffff : 0000:54:00.0<br />&gt;           e4000000-e7ffffff : PCI Bus 0000:53<br />&gt;           e4000000-e43fffff : 0000:53:00.1<br />&gt;           e4400000-e47fffff : 0000:53:00.0<br />&gt;           e4800000-e481ffff : 0000:53:00.1<br />&gt;           e4820000-e483ffff : 0000:53:00.0<br />&gt;       e8000000-efffffff : PCI Bus 0000:89<br />&gt;         e8000000-e80fffff : 0000:89:00.0<br />&gt;           e8000000-e80fffff : cciss<br />&gt;         e8100000-e813ffff : 0000:89:00.0<br />&gt;         e8140000-e8140fff : 0000:89:00.0<br />&gt;           e8140000-e8140fff : cciss<br />...<br />&gt; 80604000000-806ffffffff : PCI Bus 0000:4e<br />&gt;   80680000000-806ffffffff : PCI Bus 0000:4f<br />&gt;     80680000000-806ffffffff : PCI Bus 0000:50<br />&gt;       80680000000-806bfffffff : PCI Bus 0000:51<br />&gt;         80680000000-806bfffffff : PCI Bus 0000:52<br />&gt;           80680000000-8069fffffff : PCI Bus 0000:53<br />&gt;           806a0000000-806bfffffff : PCI Bus 0000:54<br />&gt;       806c0000000-806ffffffff : PCI Bus 0000:89<br /><br />And yes, now the resources nest the right way, and match the actual <br />physical topology of the bus.<br /><br />So yes, that commit really is causing problems. At the same time, I would <br />worry about even the trivial two-liner removal before the release of <br />2.6.28, because while we clearly need to do it, equally clearly this <br />doesn't seem to be a _huge_ problem, and I worry that the brokenness of <br />insert_resource() might have other subtler results.<br /><br />So my inclination would be to prepare the appended patch for the 2.6.29 <br />merge window, but not commit it yet. At least as long as you can't <br />actually show any real devices misbehaving (ie the resource tree is <br />clearly not right, but since I suspect that everything _works_ despite <br />that, this is not a high-priority issue and the unlikely but potential <br />pain is thus much bigger than the negligible gain of fixing it at this <br />point in the 2.6.28 release cycle).<br /><br />Oh, and it would still be good to know why Matthew wanted it this way to <br />begin with.<br /><br />Jesse? Matthew?<br /><br />			Linus<br /><br />---<br /> kernel/resource.c |    2 --<br /> 1 files changed, 0 insertions(+), 2 deletions(-)<br /><br />diff --git a/kernel/resource.c b/kernel/resource.c<br />index 4337063..a464082 100644<br />--- a/kernel/resource.c<br />+++ b/kernel/resource.c<br />&#64;&#64; -381,8 +381,6 &#64;&#64; static struct resource * __insert_resource(struct resource *parent, struct resou<br /> <br /> 		if ((first-&gt;start &gt; new-&gt;start) || (first-&gt;end &lt; new-&gt;end))<br /> 			break;<br />-		if ((first-&gt;start == new-&gt;start) &amp;&amp; (first-&gt;end == new-&gt;end))<br />-			break;<br /> 	}<br /> <br /> 	for (next = first; ; next = next-&gt;sibling) {<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
