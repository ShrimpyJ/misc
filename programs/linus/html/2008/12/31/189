    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2008/12/29/267">First message in thread</a></li><li><a href="/lkml/2008/12/31/176">Roland Dreier</a><ul><li><a href="/lkml/2008/12/31/182">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2008/12/31/195">Sam Ravnborg</a><ul><li><a href="/lkml/2009/1/2/108">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2008/12/31/211">Andrew Morton</a><ul><li><a href="/lkml/2008/12/31/243">Linus Torvalds</a><ul><li><a href="/lkml/2008/12/31/254">David Miller</a></li><li><a href="/lkml/2009/1/1/37">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2008/12/31/189/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Dec 2008 10:02:49 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] parisc: fix module loading failure of large kernel modules (take 4)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 31 Dec 2008, Linus Torvalds wrote:<br />&gt; <br />&gt; I guess I could make a sparse rule for this, but nobody seems to run or <br />&gt; care about sparse anyway. Sad.<br /><br />Ho humm. Looks like a sparse rule might be in order. These are just from <br />my (smallish) personal config. I haven't checked them all, but I did check <br />the first two, and yes, sparse did get it right.<br /><br />  init/main.c:548:24: warning: Calling weak function 'smp_setup_processor_id' in file scope<br />  init/main.c:674:24: warning: Calling weak function 'thread_info_cache_init' in file scope<br />  arch/x86/kernel/e820.c:1364:38: warning: Calling weak function 'machine_specific_memory_setup' in file scope<br />  arch/x86/kernel/e820.c:1371:20: warning: Calling weak function 'memory_setup' in file scope<br />  arch/x86/kernel/reboot.c:386:22: warning: Calling weak function 'mach_reboot_fixups' in file scope<br />  kernel/sched.c:7720:26: warning: Calling weak function 'arch_update_cpu_topology' in file scope<br />  kernel/sched.c:7808:41: warning: Calling weak function 'arch_update_cpu_topology' in file scope<br />  kernel/fork.c:229:29: warning: Calling weak function 'arch_dup_task_struct' in file scope<br />  kernel/fork.c:1325:44: warning: Calling weak function 'idle_regs' in file scope<br />  kernel/sched_clock.c:158:19: warning: Calling weak function 'sched_clock' in file scope<br />  kernel/sched_clock.c:207:19: warning: Calling weak function 'sched_clock' in file scope<br />  kernel/time/timekeeping.c:283:43: warning: Calling weak function 'read_persistent_clock' in file scope<br />  kernel/time/timekeeping.c:318:43: warning: Calling weak function 'read_persistent_clock' in file scope<br />  kernel/time/timekeeping.c:353:50: warning: Calling weak function 'read_persistent_clock' in file scope<br />  mm/vmalloc.c:1645:18: warning: Calling weak function 'vmalloc_sync_all' in file scope<br />  mm/hugetlb.c:1039:32: warning: Calling weak function 'alloc_bootmem_huge_page' in file scope<br />  mm/sparse.c:448:29: warning: Calling weak function 'vmemmap_populate_print_last' in file scope<br />  fs/pipe.c:1069:18: warning: Calling weak function 'sys_pipe2' in file scope<br />  fs/proc/meminfo.c:145:21: warning: Calling weak function 'arch_report_meminfo' in file scope<br />  drivers/acpi/pci_irq.c:676:21: warning: Calling weak function 'acpi_unregister_gsi' in file scope<br />  drivers/char/mem.c:168:23: warning: Calling weak function 'unxlate_dev_mem_ptr' in file scope<br />  drivers/char/mem.c:172:22: warning: Calling weak function 'unxlate_dev_mem_ptr' in file scope<br />  drivers/char/mem.c:240:23: warning: Calling weak function 'unxlate_dev_mem_ptr' in file scope<br />  drivers/char/mem.c:246:22: warning: Calling weak function 'unxlate_dev_mem_ptr' in file scope<br />  drivers/char/mem.c:318:12: warning: Calling weak function 'map_devmem' in file scope<br />  drivers/char/mem.c:324:14: warning: Calling weak function 'unmap_devmem' in file scope<br />  drivers/char/mem.c:349:35: warning: Calling weak function 'phys_mem_access_prot_allowed' in file scope<br />  drivers/char/mem.c:365:15: warning: Calling weak function 'unmap_devmem' in file scope<br />  drivers/pci/probe.c:1159:36: warning: Calling weak function 'set_pci_bus_resources_arch_default' in file scope<br />  drivers/pci/pci.c:1015:24: warning: Calling weak function 'pcibios_disable_device' in file scope<br />  drivers/pci/pci.c:1043:37: warning: Calling weak function 'pcibios_set_pcie_reset_state' in file scope<br />  drivers/pci/pci-sysfs.c:897:39: warning: Calling weak function 'pcibios_add_platform_entries' in file scope<br />  drivers/pci/msi.c:49:27: warning: Calling weak function 'arch_setup_msi_irq' in file scope<br />  drivers/pci/msi.c:69:25: warning: Calling weak function 'arch_teardown_msi_irq' in file scope<br />  drivers/pci/msi.c:421:27: warning: Calling weak function 'arch_setup_msi_irqs' in file scope<br />  drivers/pci/msi.c:492:27: warning: Calling weak function 'arch_setup_msi_irqs' in file scope<br />  drivers/pci/msi.c:562:29: warning: Calling weak function 'arch_msi_check_device' in file scope<br />  drivers/pci/msi.c:654:24: warning: Calling weak function 'arch_teardown_msi_irqs' in file scope<br />  lib/swiotlb.c:141:28: warning: Calling weak function 'swiotlb_phys_to_bus' in file scope<br />  lib/swiotlb.c:146:41: warning: Calling weak function 'swiotlb_bus_to_phys' in file scope<br />  lib/swiotlb.c:156:28: warning: Calling weak function 'swiotlb_phys_to_bus' in file scope<br />  lib/swiotlb.c:167:30: warning: Calling weak function 'swiotlb_phys_to_bus' in file scope<br />  lib/swiotlb.c:168:28: warning: Calling weak function 'swiotlb_phys_to_bus' in file scope<br />  lib/swiotlb.c:204:35: warning: Calling weak function 'swiotlb_alloc_boot' in file scope<br />  lib/swiotlb.c:260:31: warning: Calling weak function 'swiotlb_alloc' in file scope<br />  lib/swiotlb.c:336:58: warning: Calling weak function 'swiotlb_arch_range_needs_mapping' in file scope<br />  lib/swiotlb.c:336:58: warning: Calling weak function 'swiotlb_arch_range_needs_mapping' in file scope<br /><br />I bet there are others that I don't see just because I don't compile the <br />code.<br /><br />The appended trial sparse diff is against sparse -git as of a couple of <br />days ago if anybody wants to run it themselves.<br /><br />The _logical_ fix would be to add "noinline" to the definition of <br />"__weak", but that's reported not to help. I think the bug may be in the <br />assembler that pre-links the call if it sees it in file scope. Or maybe <br />gcc doesn't honor noinline for empty functions. Whatever.<br /><br />Regardless, it's a damn pain.<br /><br />			Linus<br /><br />---<br /> evaluate.c |    7 +++++++<br /> parse.c    |    7 ++++---<br /> symbol.h   |    3 ++-<br /> 3 files changed, 13 insertions(+), 4 deletions(-)<br /><br />diff --git a/evaluate.c b/evaluate.c<br />index f976645..0ae6c93 100644<br />--- a/evaluate.c<br />+++ b/evaluate.c<br />&#64;&#64; -2744,6 +2744,13 &#64;&#64; static int evaluate_symbol_call(struct expression *expr)<br /> 	if (ctype-&gt;op &amp;&amp; ctype-&gt;op-&gt;evaluate)<br /> 		return ctype-&gt;op-&gt;evaluate(expr);<br /> <br />+	if (ctype-&gt;ctype.modifiers &amp; MOD_WEAK) {<br />+		struct symbol *fn = ctype-&gt;ctype.base_type;<br />+<br />+		if (fn-&gt;stmt || fn-&gt;inline_stmt)<br />+			warning(expr-&gt;pos, "Calling weak function '%s' in file scope", show_ident(ctype-&gt;ident));<br />+	}<br />+<br /> 	if (ctype-&gt;ctype.modifiers &amp; MOD_INLINE) {<br /> 		int ret;<br /> 		struct symbol *curr = current_fn;<br />diff --git a/parse.c b/parse.c<br />index eb31871..1ea497f 100644<br />--- a/parse.c<br />+++ b/parse.c<br />&#64;&#64; -289,6 +289,9 &#64;&#64; static struct init_keyword {<br /> 	{ "word",	NS_KEYWORD,	MOD_LONG,	.op = &amp;mode_spec_op },<br /> 	{ "__word__",	NS_KEYWORD,	MOD_LONG,	.op = &amp;mode_spec_op },<br /> <br />+	{ "weak",	NS_KEYWORD,	MOD_WEAK,	.op = &amp;attr_mod_op },<br />+	{ "__weak__",	NS_KEYWORD,	MOD_WEAK,	.op = &amp;attr_mod_op },<br />+<br /> 	/* Ignored attributes */<br /> 	{ "nothrow",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "__nothrow",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br />&#64;&#64; -317,8 +320,6 &#64;&#64; static struct init_keyword {<br /> 	{ "__sentinel__",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "regparm",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "__regparm__",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br />-	{ "weak",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br />-	{ "__weak__",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "alias",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "__alias__",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br /> 	{ "pure",	NS_KEYWORD,	.op = &amp;ignore_attr_op },<br />&#64;&#64; -1582,7 +1583,7 &#64;&#64; static struct statement *start_function(struct symbol *sym)<br /> 	start_function_scope();<br /> 	ret = alloc_symbol(sym-&gt;pos, SYM_NODE);<br /> 	ret-&gt;ctype = sym-&gt;ctype.base_type-&gt;ctype;<br />-	ret-&gt;ctype.modifiers &amp;= ~(MOD_STORAGE | MOD_CONST | MOD_VOLATILE | MOD_INLINE | MOD_ADDRESSABLE | MOD_NOCAST | MOD_NODEREF | MOD_ACCESSED | MOD_TOPLEVEL);<br />+	ret-&gt;ctype.modifiers &amp;= ~(MOD_STORAGE | MOD_CONST | MOD_VOLATILE | MOD_INLINE | MOD_ADDRESSABLE | MOD_NOCAST | MOD_NODEREF | MOD_ACCESSED | MOD_TOPLEVEL | MOD_WEAK);<br /> 	ret-&gt;ctype.modifiers |= (MOD_AUTO | MOD_REGISTER);<br /> 	bind_symbol(ret, &amp;return_ident, NS_ITERATOR);<br /> 	stmt-&gt;ret = ret;<br />diff --git a/symbol.h b/symbol.h<br />index c4d7f28..b3fcccd 100644<br />--- a/symbol.h<br />+++ b/symbol.h<br />&#64;&#64; -185,6 +185,7 &#64;&#64; struct symbol {<br /> #define MOD_LONGLONG	0x0800<br /> <br /> #define MOD_TYPEDEF	0x1000<br />+#define MOD_WEAK	0x2000<br /> <br /> #define MOD_INLINE	0x40000<br /> #define MOD_ADDRESSABLE	0x80000<br />&#64;&#64; -205,7 +206,7 &#64;&#64; struct symbol {<br /> #define MOD_BITWISE	0x80000000<br /> <br /> #define MOD_NONLOCAL	(MOD_EXTERN | MOD_TOPLEVEL)<br />-#define MOD_STORAGE	(MOD_AUTO | MOD_REGISTER | MOD_STATIC | MOD_EXTERN | MOD_INLINE | MOD_TOPLEVEL | MOD_FORCE)<br />+#define MOD_STORAGE	(MOD_AUTO | MOD_REGISTER | MOD_STATIC | MOD_EXTERN | MOD_INLINE | MOD_TOPLEVEL | MOD_FORCE | MOD_WEAK)<br /> #define MOD_SIGNEDNESS	(MOD_SIGNED | MOD_UNSIGNED | MOD_EXPLICITLY_SIGNED)<br /> #define MOD_SPECIFIER	(MOD_CHAR | MOD_SHORT | MOD_LONG | MOD_LONGLONG | MOD_SIGNEDNESS)<br /> #define MOD_SIZE	(MOD_CHAR | MOD_SHORT | MOD_LONG | MOD_LONGLONG)<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
