    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/27/754">First message in thread</a></li><li><a href="/lkml/2017/11/29/927">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/29/931">Linus Torvalds</a></li><li><a href="/lkml/2017/11/29/1034">Kees Cook</a><ul><li class="origin"><a href="/lkml/2017/11/29/1203">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/29/1203">Kees Cook</a><ul><li><a href="/lkml/2017/11/29/1266">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/11/30/36">Daniel Micay</a><ul><li><a href="/lkml/2017/11/30/109">Djalal Harouni</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 29 Nov 2017 14:14:15 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kernel-hardening] Re: [PATCH v5 next 5/5] net: modules: use request_module_cap() to load 'netdev-%s' modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 29, 2017 at 1:17 PM, Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; So, what we have now is that the permission verification already<br />&gt; happens at and around the existing request_module() calls.<br /><br />Usually, yes.<br /><br />I liked the "request_module_cap()" interface partly because that made<br />the net/core/dev_ioctl.c ones more explicit, and maybe it could be<br />convenient if we make other places do similar things.<br /><br />I was hoping some other users could be converted, but grepping around,<br />there's no obvious cases. There is tcp_cong.c and tcp_ulp.c, but they<br />want some extra locking in between the checking..<br /><br />&gt; It still sounds like you'd like to see an explicit change, similar to<br />&gt; the proposed request_module_cap(), that identifies the privilege<br />&gt; expectations on a per-call-site basis. How about this plan:<br /><br />Yes.<br /><br />I'd be perfectly happy to have a long-range plan where the existing<br />"request_module()" ends up requiring more capabilities.<br /><br />I just don't think it's a good first step, exactly because *if* it's a<br />first step, it basically has to be disabled by default.<br /><br />And once you disable it by default, and it becomes purely opt-in, that<br />means that nothing will change for most cases. Some embedded people<br />that do their own thing (ie Android) might change, but normal<br />distributions probably won't.<br /><br />Yes, Android may be 99% of the users, and yes, the embedded world in<br />general needs to be secure, but I'd still like this to be something<br />that helps _everybody_.<br /><br />So:<br /><br />&gt; 1) Add request_module_cap(required_cap, module_name_prefix, fmt, fmt_args...)<br />&gt;<br />&gt; 2) Convert known privileged-but-not-CAP_SYS_MODULE request_module()<br />&gt; callers to request_module_cap(the_needed_cap, prefix, ...)<br /><br />Yes. The upside seems to be very limited here, but at least it makes<br />the users that use CAP_NET_ADMIN instead of CAP_SYS_MODULE able to<br />specify so.<br /><br />&gt; 2) Convert known unprivileged callers to use request_module_cap(0, ...)<br /><br />0 is CAP_CHOWN, so it would have to be -1.<br /><br />And I wouldn't actually want to see that as-is. Not only would I not<br />want to see people have that "-1" in random driver subsystems, I'd<br />much prefer to have actual helper naming that descibes why something<br />is ok<br /><br />Because as mentioned, I think there are valid permission reasons that<br />are _not_ about capabilities that make you able to load a module.<br /><br />If you can open a character device node, then "misc_open()" will do<br /><br />                request_module("char-major-%d-%d", MISC_MAJOR, minor);<br /><br />and there is nothing about capabilities in the CAP_SYS_MODULE sense<br />about the user. But the user _did_ have the privileges to open that<br />character device file.<br /><br />That's why I suggested something like request_module_dev(): it's not<br />at all the same thing as request_module_cap(-1, ...), saying "I don't<br />need/have a capability". It's saying something else entirely, it's<br />basically saying "I have the right based on device permissions".<br /><br />And something like request_module_dev() might even have real semantic<br />meaning, exactly because it says "this module request comes from<br />trying to open a device node".<br /><br />Why would that be? If we know we're on a system where /dev is<br />auto-populated through udev, then the device nodes should have been<br />created by the drivers, not the other way around. So we might even<br />have a rule that notices that automatically, and simply disables<br />request_module_dev() entirely.<br /><br />Anyway, I'm not saying that is necessarily something we should do, but<br />I do suspect that we could adapt to modern systems without having to<br />have tons of magic settings, and try to be as strict as possible<br />without breaking them.<br /><br />Because I dislike "system tuning" in general. I hate knobs that do<br />kernel performance tuning - we try very hard to just DTRT wrt sizing<br />hashes etc instead of expecting the system admin to set flags.<br /><br />And I think we can try to avoid some system tuning in this area too.<br /><br />I suspect that for a lot of our existing request_module() cases, they<br />really are pretty trivial. In most cases, it's probably really about<br />whether you have the hardware or not.<br /><br />So for the hardware driver cases, either the hardware enumerates<br />itself, or it is presumably set up by the system scripts anyway, and<br />CAP_SYS_MODULE is all fine. The "open device node" case is one special<br />case, though.<br /><br />That mainly leaves the protocol ones we need to look out for, I suspect.<br /><br />&gt; 3) Add WARN_RATELIMIT for request_module() calls without<br />&gt; CAP_SYS_MODULE to shake out other places where request_module_cap() is<br />&gt; needed.<br /><br />Yes.<br /><br />And this is where I hope that there really aren't actually all that<br />many cases that will warn, and that it's hopefully easy to simply just<br />look at a handful of reports and say "ok, that case is obviously<br />fine".<br /><br />And I may be wrong.<br /><br />&gt; 4) Adapt the original patch series to add the per-process flag that<br />&gt; can block privilege elevations.<br /><br />Yes.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
