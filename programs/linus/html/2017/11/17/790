    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/17/356">First message in thread</a></li><li><a href="/lkml/2017/11/17/356">Miklos Szeredi</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Nov 2017 13:49:01 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] overlayfs update for 4.15</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 17, 2017 at 7:13 AM, Miklos Szeredi &lt;miklos&#64;szeredi.hu&gt; wrote:<br />&gt;<br />&gt; Created a path_put_init() helper that clears out the pointers after putting the<br />&gt; ref.  I think this could be useful elsewhere, so added it to &lt;linux/path.h&gt;.<br /><br />Slight eww.<br /><br />The problem with your helper is that we've seen gcc generate really<br />horrible code for things like that.<br /><br />So when you do<br /><br />     *path = (struct path) { };<br /><br />we've seen gcc first create an local empty "struct path" on stack, and<br />then memcpy() it over the target. Which is _technically_ what that<br />code does, of course, but it's also excessively stupid.<br /><br />So I suspect that would be better off as just<br /><br />     memset(path, 0, sizeof(*path));<br /><br />which then matches the code that you actually would expect gcc to generate.<br /><br />I hope that "struct path" is small enough that gcc doesn't mess up,<br />and that odd code generation is probably specific to some gcc versions<br />anyway, but we've definitely seen this.<br /><br />NOTE! The above pattern of assignment is very different from the<br />initialization pattern. Gcc generally does well on structure<br />initializers:<br /><br />    struct xyz a = { .. };<br /><br />generally generates reasonable code in ways that<br /><br />    struct xyz a;<br />    ..<br />    a = (struct xyz) { ...};<br /><br />sometimes doesn't.  I suspect it's mainly a "initializers are common,<br />unnamed temporary local structures are not" thing.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
