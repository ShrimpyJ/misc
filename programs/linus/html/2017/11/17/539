    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/15/921">First message in thread</a></li><li><a href="/lkml/2017/11/17/393">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/17/404">Lukas Wunner</a><ul><li><a href="/lkml/2017/11/17/413">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/11/17/459">=?UTF-8?Q?Christian_K=c3=b6nig?=</a><ul><li class="origin"><a href="/lkml/2017/11/17/570">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/17/570">=?UTF-8?Q?Christian_K=c3=b6nig?=</a><ul><li><a href="/lkml/2017/11/18/153">=?UTF-8?Q?Nicolai_H=c3=a4hnle?=</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Nov 2017 10:55:40 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] drm for v4.15</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 17, 2017 at 10:14 AM, Christian König<br />&lt;christian.koenig&#64;amd.com&gt; wrote:<br />&gt;<br />&gt; Taking an example from the AMD headers why this automation is more tricky<br />&gt; than it sounds in the first place: Look at the<br />&gt; mmVM_CONTEXT*_PAGE_TABLE_BASE_ADDR registers for example.<br />&gt;<br />&gt; Register 0-7 are consecutive and so could be perfectly addressable with an<br />&gt; index, but register 8-15 aren't and so we always end with logic like if(i&lt;8)<br />&gt; ... else ....<br />&gt;<br />&gt; The rational from the hardware guys is obvious that they initially had only<br />&gt; 8 and on a later hardware generation extended that to 16 registers.<br /><br />Heh. I don't disagree, but at the same time, that case is actually a<br />wonderful example.<br /><br />Let's take the gmc_6_0 case, because it shows your irregularity, but<br />it also shows another horrid example of nasty nasty automation:<br /><br />  mmVM_CONTEXT0_PAGE_TABLE_BASE_ADDR 0x054F<br />  mmVM_CONTEXT10_PAGE_TABLE_BASE_ADDR 0x0510<br />  mmVM_CONTEXT11_PAGE_TABLE_BASE_ADDR 0x0511<br />  mmVM_CONTEXT12_PAGE_TABLE_BASE_ADDR 0x0512<br />  mmVM_CONTEXT13_PAGE_TABLE_BASE_ADDR 0x0513<br />  mmVM_CONTEXT14_PAGE_TABLE_BASE_ADDR 0x0514<br />  mmVM_CONTEXT15_PAGE_TABLE_BASE_ADDR 0x0515<br />  mmVM_CONTEXT1_PAGE_TABLE_BASE_ADDR 0x0550<br />  mmVM_CONTEXT2_PAGE_TABLE_BASE_ADDR 0x0551<br />  mmVM_CONTEXT3_PAGE_TABLE_BASE_ADDR 0x0552<br />  mmVM_CONTEXT4_PAGE_TABLE_BASE_ADDR 0x0553<br />  mmVM_CONTEXT5_PAGE_TABLE_BASE_ADDR 0x0554<br />  mmVM_CONTEXT6_PAGE_TABLE_BASE_ADDR 0x0555<br />  mmVM_CONTEXT7_PAGE_TABLE_BASE_ADDR 0x0556<br />  mmVM_CONTEXT8_PAGE_TABLE_BASE_ADDR 0x050E<br />  mmVM_CONTEXT9_PAGE_TABLE_BASE_ADDR 0x050F<br /><br />Oops. Those were clearly sorted automatically, and in entirely the wrong way.<br /><br />So automation has _really_ done something inexcusably stupid, and made<br />the end result completely illegible in the process.<br /><br />And yes, you'd be right that it's discontiguous at 8, but it's still<br />arithmetic, ie you could easily have<br /><br /> #define  mmVM_PAGE_TABLE_BASE_ADDR(ctx) \<br />        ((ctx)+0x054f-((ctx) &amp; 8)*9-((ctx)&amp;8)/8)<br /><br />and if "ctx" is a constant, then the end result is trivially a<br />constant and can be used as such. And if it isn't, it's still a much<br />cheaper operation than an "if" or "switch ()" statement (it's just a<br />bitmask and two shifts).<br /><br />Now, seeing those patterns is likely not something that automation<br />should do (although it's definitely possible - superoptimizers do that<br />all the time), but automation could still *verify* the patterns once a<br />human has made them up.<br /><br />And it's quite possible that it would be a good idea to encode that<br />pattern even in the original source code. In fact, it may *be* there<br />somewhere (not as that arithmetic expression, but as the reverse<br />decode logic, obviously).<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
