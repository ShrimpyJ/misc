    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/27/754">First message in thread</a></li><li><a href="/lkml/2017/11/28/1443">Geo Kozey</a><ul><li><a href="/lkml/2017/11/28/1526">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2017/11/28/1539">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/28/1539">Kees Cook</a><ul><li><a href="/lkml/2017/11/28/1547">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/11/29/589">Geo Kozey</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Nov 2017 16:17:05 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kernel-hardening] Re: [PATCH v5 next 5/5] net: modules: use request_module_cap() to load 'netdev-%s' modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Nov 28, 2017 at 3:51 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So a patch that avoids breaking existing users, but also doesn't<br />&gt; actually improve anything for existing users, simply shouldn't be part<br />&gt; of the mainline kernel.<br /><br />Just to clarify: maybe it ends up being truly impossible to make the<br />default be more restrictive. The default certainly won't be the most<br />restrictive option.<br /><br />But at the same time, if people can't even be bothered to try to<br />improve the general case, and only do things that you have to opt in<br />for, it really isn't much of an improvement. We had this whole<br />"opt-in" discussion for another thread entirely, and it basically<br />didn't improve anything for anybody for the better half of a decade.<br /><br />Hardening that only works for special cases isn't hardening at all. It<br />will just mean that 99+% of all kernel developers won't see the<br />fallout at all.<br /><br />Yes, something like Android may be 99% of the devices, but it's a very<br />small portion of the core developer base because the hardware is all<br />locked down, and it's an even smaller portion of the usage patterns.<br /><br />So I can see some people say "We can use this for android and protect<br />the 99%". But if it then is basically invisible to the rest of the<br />user base, it means that all those servers etc aren't getting the kind<br />of protection they should have.<br /><br />Just to take that DCCP thing as an example: being a module wasn't what<br />made it vulnerable. It would have been vulnerable compiled in too.<br />What made it vulnerable was that the DCCP code simply isn't widely<br />enough used and tested, and basically barely on life support. And it<br />was available much too widely despite that.<br /><br />So all this is about is to make for a smaller attack surface.<br /><br />But if it turns out that we can make the attack surface smaller by<br />simply white-listing a few modules that we know are actively used and<br />feel better about the quality of, that makes for a much smaller attack<br />surface _too_. And it does so in general, without having to set some<br />flag that 99% of all MIS people won't even really know about.<br /><br />So that's why I want people to look at a different approach. Yes, the<br />opt-in model means that by default nothing changes. That protects<br />against the whole "oops, we don't break user space". But it has a huge<br />downside.<br /><br />The model that I am a proponent of is to take a softer approach<br />initially: don't forbid module loading (because that breaks users),<br />but instead _warn_ about non-root module loading. And then we can<br />start fixing the cases that we find.<br /><br />See? This is *exactly* the same thing that the user-mode access thing<br />was about. Hardening people need to get over their "hard rules"<br />mindset. We don't kill processes or forbid them from doing things that<br />might be bad. We start by warning about them, to see what "might be<br />bad" cases are actually normal, and not actually bad at all. And then<br />we use that information to guide our notion of what should actually<br />trigger a stronger response.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
