    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/27/754">First message in thread</a></li><li><a href="/lkml/2017/11/28/1535">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/28/1539">Kees Cook</a><ul><li class="origin"><a href="/lkml/2017/11/28/1654">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/28/1654">(Eric W. Biederman)</a></li><li><a href="/lkml/2017/11/29/915">Kees Cook</a><ul><li><a href="/lkml/2017/11/29/927">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2017/11/29/589">Geo Kozey</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Nov 2017 16:50:09 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kernel-hardening] Re: [PATCH v5 next 5/5] net: modules: use request_module_cap() to load 'netdev-%s' modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Nov 28, 2017 at 4:26 PM, Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt;&gt; The model that I am a proponent of is to take a softer approach<br />&gt;&gt; initially: don't forbid module loading (because that breaks users),<br />&gt;&gt; but instead _warn_ about non-root module loading. And then we can<br />&gt;&gt; start fixing the cases that we find.<br />&gt;<br />&gt; I am totally fine with this. The question I'm hoping to have answered<br />&gt; is, "then what?" We already have concrete examples of module<br />&gt; autoloading that will still be need to stay unprivileged and as-is in<br />&gt; the kernel (even if we remove others). What do you see as the way to<br />&gt; allow an admin to turn those off?<br /><br />Just thinking about the DCCP case, where networking people actually<br />knew it was pretty deprecated and had no real maintainer, I think one<br />thing to look at would be simply a per-module flag.<br /><br />That kind of thing should be fairly easy to implement, along the same<br />lines as the module license - it just sets a flag in the ELF section<br />headers.<br /><br />With something like that, we literally could make the default be "no<br />autoloading except for root", and then just mark the modules that we<br />think are ok and well maintained.<br /><br />Sure, if you then do a lock-down mode that makes that flag parsing<br />stricter, then that's a separate thing. But I suspect we definitely<br />could be a lot stricter on a per-module basis, and do it in a way<br />where a normal user wouldn't even notice that we've limited the<br />autoloading.<br /><br />But the first step would be to just add some noise. And even with the<br />per-module flag, at first it would only suppress the noise (ie we'd<br />still _allow_ loading other modules, they'd just be noisy). Then, if<br />nobody hollers, maybe the next kernel release we'll make it actually<br />enforce the flag.<br /><br />Does that sound reasonable?<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
