    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/10/504">First message in thread</a></li><li><a href="/lkml/2017/11/10/549">Mathieu Desnoyers</a><ul><li><a href="/lkml/2017/11/10/565">Linus Torvalds</a></li><li><a href="/lkml/2017/11/13/604">Mathieu Desnoyers</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2017/11/14/350">Avi Kivity</a><ul><li><a href="/lkml/2017/11/14/361">Mathieu Desnoyers</a><ul><li><a href="/lkml/2017/11/14/369">Avi Kivity</a></li><li><a href="/lkml/2017/11/14/393">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Nov 2017 09:14:42 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH 0/2] x86: Fix missing core serialization on migration</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 13, 2017 at 8:56 AM, Mathieu Desnoyers<br />&lt;mathieu.desnoyers&#64;efficios.com&gt; wrote:<br />&gt;<br />&gt; I figured out what you're pointing to: if exec() is executed by a previously<br />&gt; running thread, and there is no core serializing instruction between program<br />&gt; load and return to user-space, the kernel ends up acting like a JIT, indeed.<br /><br />Well, exec() is actually the least of our problems, because it will<br />have caused the virtual m apping to be set up too.<br /><br />But we have had cases that haven't had that basically forever. Your<br />example of user-space doing an _unintentional_ cross-modification is<br />just such a case, but so is anybody doing their own code management in<br />user space by just reading their own executable into memory etc.<br /><br />So part of the problem is that it's perfectly valid to generate code<br />and then just jump to it in x86 space as long as you stay on the same<br />CPU. And there has never been any guarantee that that you wouldn't be<br />migrated in between.<br /><br />In _practice_, I suspect that migration events are much much too big<br />for this to be an issue at all. And the trigger for migration is going<br />to be something like a timer interrupt that causes us to reschedule in<br />the first place - which ends up serializing due to the iret. And even<br />if the rescheduling is done by one CPU just doing a "schedule()", us<br />doing a re-balancing of CPU's, and another CPU then picking up the<br />process, there's been tens of thousands of instructions, several<br />spinlocks, lots of cross-CPU synchronization etc going on.<br /><br />I do not believe for a second that the CPU prefetching queue will be<br />active over those kinds of ranges and events.<br /><br />So I don't really think the problem can actually occur in the first<br />place. I think the SDK rules are garbage.<br /><br />But that's exactly why I'd actually really want to get some more real<br />rules from Intel and AMD. Because I think your patch is pointless, and<br />doesn't really fix anything in reality, but it's triggered by reading<br />the Intel SDK and going "in theory, this means that we would need to<br />do XYZ".<br /><br />And when theory and practice do not match, I think (a) the theory is<br />bad, and (b) reality trumps theory.<br /><br />In this case (b) means that I'm not super-eager to apply the patch,<br />and (a) means that since the theory is based on the Intel SDK, I think<br /> we should consider the Intel SDK to be a problem, and ask for<br />clarification of just what the rules really are.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
