    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/27/754">First message in thread</a></li><li><a href="/lkml/2017/11/27/846">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/27/1079">Djalal Harouni</a><ul><li class="origin"><a href="/lkml/2017/11/27/1143">Linus Torvalds</a><ul><li><a href="/lkml/2017/11/27/1143">Kees Cook</a><ul><li><a href="/lkml/2017/11/27/1154">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/11/28/744">Geo Kozey</a><ul><li><a href="/lkml/2017/11/28/1275">Theodore Ts'o</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 27 Nov 2017 14:04:58 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v5 next 5/5] net: modules: use request_module_cap() to load 'netdev-%s' modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 27, 2017 at 1:41 PM, Djalal Harouni &lt;tixxdz&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; However, we are trying hard to abstract some semantics that are easy<br />&gt; to grasp, we are mutating capabilities and seccomp to have an<br />&gt; abstracted "yes/no" options for our endusers.<br /><br />Yes.<br /><br />Sadly, it looks like we actually do have users that just expect to<br />load modules dynamically without any capabilities at all.<br /><br />So we can't actually disallow it by default at all, which imho makes<br />this security option essentially useless.<br /><br />A security option that people can't use without breaking their system<br />is pointless.<br /><br />We saw that with SELinux - people ended up just disabling it for<br />_years_, simply because it ended up breaking so much in practice. And<br />yes, it got fixed eventually, but at an incredibly high maintenance<br />cost of all the crazy rules databases.<br /><br />&gt; Alright, but I guess we are stuck, is there something better on how we<br />&gt; can do this or describe this ?<br /><br />So I wonder if we can perhaps look at the places that actually do<br />"requerst_module()", and start filtering them on that basis.<br /><br />Some of them will already have checked for capabilities.<br /><br />Others clearly expect to juist work even _without_ capabilities (ie<br />the bluetoothd case).<br /><br />So the whole "let's add a global config option" model is broken. There<br />is no possible global rule. It will break things, which in turn mean<br />that people won't turn it on (and we can't turn it on by default),<br />which in turn makes this pointless.<br /><br />In other words, I really think that anything that just adds a mode<br />flag cannot work.<br /><br />So instead of having one "modules_autoload_mode" thing, maybe the<br />individual requerst_module() cases need to simply be audited.<br /><br />Put another way: I think the part of your patch series that does that<br />"request_module_cap()" and makes the netdev modules use it is a good<br />addition.<br /><br />It's the "mode" part I really don't agree with, because apparently we<br />really need to default it to permissive.<br /><br />So how about instead:<br /><br /> - add that "request_module_cap()" and make the networking code that<br />already uses CAP_ADMIN_NET use it.<br /><br /> - make "request_module()" itself default to being<br />"request_module_cap(CAP_SYS_MODULE,..)"<br /><br /> - make sure that when the capability check fails, we print an error<br />message, and then for the ones that trigger, we will audit them and<br />see if it's ok.<br /><br />Because that "mode" flag defaulting to off will just mean that the<br />default case will remain the existing unsafe one, and that's bad.<br /><br />Opt-in really doesn't work. We've done it.<br /><br />Global flags for varied behavior really doesn't work. We've done that<br />too. Different cases want different behavior, the global flag is just<br />fundamentally broken.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
