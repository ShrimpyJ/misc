    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/11/10/504">First message in thread</a></li><li><a href="/lkml/2017/11/14/439">Avi Kivity</a><ul><li><a href="/lkml/2017/11/14/448">Mathieu Desnoyers</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Nov 2017 09:31:22 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH 0/2] x86: Fix missing core serialization on migration</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Nov 14, 2017 at 9:10 AM, Mathieu Desnoyers<br />&lt;mathieu.desnoyers&#64;efficios.com&gt; wrote:<br />&gt;&gt; (* OPTION 1 *)<br />&gt;&gt; Store modified code (as data) into code segment;<br />&gt;&gt; Jump to new code or an intermediate location;<br />&gt;&gt; Execute new code;"<br />&gt;<br />&gt; Good point, so this is likely why I was having trouble reproducing the<br />&gt; single-threaded self-modifying code incoherent case. I did have a branch<br />&gt; in there.<br /><br />Actually, even *without* the branch, Intel has been very good at<br />having precise I$ coherency. I think uou can literally store to the<br />next instruction, and Intel CPU's after the Pentium Pro would notice,<br />take a micro-fault, and handle it correctly (the i486 and Pentium did<br />not have that level of coherency, but a taken branch would flush the<br />fetch buffer).<br /><br />An in-order Atom probabably has the old Pentium behavior, and you<br />could see it there.<br /><br />But starting with the P6, and OoO execution, the "taken branch" thing<br />meant very little, so Intel started instead just doing the<br />"store-vs-instruction fetch" coherency explicitly, which causes it to<br />be precise.<br /><br />Afaik, the only way to show incoherent I$ fairly easily is to use<br />virtual aliasing, and store to a different virtual address, because<br />the fetch buffer coherency is done by virtual address.<br /><br />But even then, it's only the fetch buffer (and it's been called<br />different things over the years, now it's a uop loop cache), not the<br />L1 caches, so you get a very limited window of instructions.<br /><br />And that fetch buffer is also where any cross-cpu incoherency would<br />be, for the exact same reason.<br /><br />          Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
