    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/9/28/89">First message in thread</a></li><li><a href="/lkml/2017/9/28/89">kernel test robot</a><ul><li><a href="/lkml/2017/9/28/106">Ingo Molnar</a><ul><li><a href="/lkml/2017/9/28/125">Peter Zijlstra</a><ul><li><a href="/lkml/2017/9/28/164">Ingo Molnar</a><ul><li><a href="/lkml/2017/9/28/332">Peter Zijlstra</a></li></ul></li></ul></li></ul></li><li class="origin"><a href="/lkml/2017/9/28/576">Linus Torvalds</a><ul><li><a href="/lkml/2017/9/28/576">Josh Poimboeuf</a><ul><li><a href="/lkml/2017/9/28/583">Josh Poimboeuf</a><ul><li><a href="/lkml/2017/9/28/670">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Sep 2017 09:21:07 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [lkp-robot] [x86/asm] f5caf621ee: PANIC:double_fault</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 28, 2017 at 12:47 AM, kernel test robot<br />&lt;xiaolong.ye&#64;intel.com&gt; wrote:<br />&gt;<br />&gt; [   10.587519] RIP: 0010:compat_sock_ioctl+0xfea/0x103e<br />&gt; [   10.587974] RSP: 0000:0000000000277d78 EFLAGS: 00010283<br />&gt; [   10.588448] RAX: 0000000000277d78 RBX: 0000000000008933 RCX: ffff8800141a8000<br />&gt; [   10.589103] RDX: 0000000000000020 RSI: 00000000fffbea00 RDI: 00000000fffbea50<br />&gt; [   10.589757] RBP: ffffc90000277e18 R08: fffbea50fffbea34 R09: ffffffff814a68c9<br />&gt; [   10.590407] R10: ffffff9c00000002 R11: 00000000fffbea50 R12: 0000000000000000<br />&gt; [   10.591056] R13: ffff880012c8c880 R14: 00000000fffbea50 R15: 00000000fffbea00<br />&gt; [   10.591708] FS:  0000000000000000(0000) GS:ffff880019a00000(0063) knlGS:00000000f7fab9a0<br />&gt; [   10.592446] CS:  0010 DS: 002b ES: 002b CR0: 0000000080050033<br />&gt; [   10.592973] CR2: 0000000000277d68 CR3: 000000001807f000 CR4: 00000000000006b0<br />&gt; [   10.593623] Call Trace:<br />&gt; [   10.593858] Code: 02 0f ff 65 48 8b 04 25 80 d1 00 00 48 8b 80 28 25 00 00 48 83 e8 20 49 39 c7 77 34 89 e0 4c 89 f7 4c 89 fe ba 20 00 00 00 89 c4 &lt;e8&gt; b3 52 05 00 85 c0 74 22 eb 1a 4c 89 fa 89 de 4c 89 ef e8 c6<br />&gt; [   10.595705] Kernel panic - not syncing: Machine halted.<br /><br />That is some _funky_ code, and yes, this may well be triggered by the<br />inline asm changes.<br /><br />The code decodes to (after ignoring a few bytes at the beginning that<br />were in the middle of an instruction)<br /><br />   0: 65 48 8b 04 25 80 d1 mov    %gs:0xd180,%rax<br />   7: 00 00<br />   9: 48 8b 80 28 25 00 00 mov    0x2528(%rax),%rax<br />  10: 48 83 e8 20          sub    $0x20,%rax<br />  14: 49 39 c7              cmp    %rax,%r15<br />  17: 77 34                ja     0x4d<br />  19: 89 e0                mov    %esp,%eax<br />  1b: 4c 89 f7              mov    %r14,%rdi<br />  1e: 4c 89 fe              mov    %r15,%rsi<br />  21: ba 20 00 00 00        mov    $0x20,%edx<br />  26: 89 c4                mov    %eax,%esp<br />  28:* e8 b3 52 05 00        callq  0x552e0 &lt;-- trapping instruction<br />  2d: 85 c0                test   %eax,%eax<br />  2f: 74 22                je     0x53<br />  31: eb 1a                jmp    0x4d<br />  33: 4c 89 fa              mov    %r15,%rdx<br />  36: 89 de                mov    %ebx,%esi<br />  38: 4c 89 ef              mov    %r13,%rdi<br /><br />and it's worth noting that insane<br /><br />     mov    %eax,%esp<br /><br />instruction, and how RAX (and RSP) both have that bad value of<br />0000000000277d78 in them.<br /><br />So double fault is correct - we've corrupted the stack.<br /><br />And NOTE! It's reloading 32 bits, not 64 bits, and that's the basic bug there.<br /><br />I do note that when I build a kernel, I do see that pattern of<br /><br />    movl    $32, %edx<br />    call &lt;something&gt;<br /><br />and in every case it's a a call to a user copy. One is "call<br />_copy_from_user", while the other ones are all the<br />alternative_call_2() in copy_user_generic().<br /><br />Judging by the offset within the function, and judging by the bug,<br />it's almost certainly that alternative_call_2() case.<br /><br />So it does sound like the clang fix has now introduced a gcc regression.<br /><br />And yes, in both cases it seems to be a compiler bug, but I'm not<br />convinced it's a good idea to fix a clang bug by introducing a gcc<br />one.<br /><br />Anyway, I think the real hint here is that 32-bit reload.<br /><br />Lookie here:<br /><br />  register unsigned int __asm_call_sp asm("esp");<br />  #define ASM_CALL_CONSTRAINT "+r" (__asm_call_sp)<br /><br />yeah, that's just garbage. It sure as hell should not be "unsigned int".<br /><br />Yeah. yeah, gcc shouldn't do that insane reload in the first place,<br />but once that gcc bug has triggered, then the "unsigned int" is what<br />makes the code go really bad.<br /><br />I bet that changing it to "unsigned long" will just fix things.<br /><br />Josh?<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
