    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/9/25/614">First message in thread</a></li><li><a href="/lkml/2017/9/25/614">Kyle Huey</a><ul><li><a href="/lkml/2017/9/25/708">Al Viro</a><ul><li class="origin"><a href="/lkml/2017/9/25/721">Linus Torvalds</a><ul><li><a href="/lkml/2017/9/25/721">Al Viro</a><ul><li><a href="/lkml/2017/9/25/725">Al Viro</a></li><li><a href="/lkml/2017/9/25/726">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/9/26/57">Christoph Hellwig</a><ul><li><a href="/lkml/2017/9/28/62">Michael Ellerman</a></li></ul></li></ul></li><li><a href="/lkml/2017/10/15/108">Pavel Machek</a><ul><li><a href="/lkml/2017/10/16/219">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/9/25/717/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Sep 2017 18:37:28 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] vfs.git regression fix Re: Regression related to ipc shmctl compat</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 25, 2017 at 6:00 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; I really wish gcc warned about conversions from pointer to function into<br />&gt; void *...<br /><br />Pulled and pushed out, but I'd like to note that sparse would have<br />caught this. Except we are so far away from being sparse-clean that<br />nobody runs it.<br /><br />And I think your recent compat cleanup work actually made it worse,<br />showing new warnings (including the one that was a real bug)<br /><br />Oh well.<br /><br />Patch to at least fix the address space warnings in ipc/ attached.<br /><br />                    Linus<br /> ipc/msg.c     | 4 ++--<br /> ipc/sem.c     | 4 ++--<br /> ipc/shm.c     | 4 ++--<br /> ipc/syscall.c | 2 +-<br /> 4 files changed, 7 insertions(+), 7 deletions(-)<br /><br />diff --git a/ipc/msg.c b/ipc/msg.c<br />index 06be5a9adfa4..ebb7ea24ee28 100644<br />--- a/ipc/msg.c<br />+++ b/ipc/msg.c<br />&#64;&#64; -590,13 +590,13 &#64;&#64; static int copy_compat_msqid_from_user(struct msqid64_ds *out, void __user *buf,<br /> {<br /> 	memset(out, 0, sizeof(*out));<br /> 	if (version == IPC_64) {<br />-		struct compat_msqid64_ds *p = buf;<br />+		struct compat_msqid64_ds __user *p = buf;<br /> 		if (get_compat_ipc64_perm(&amp;out-&gt;msg_perm, &amp;p-&gt;msg_perm))<br /> 			return -EFAULT;<br /> 		if (get_user(out-&gt;msg_qbytes, &amp;p-&gt;msg_qbytes))<br /> 			return -EFAULT;<br /> 	} else {<br />-		struct compat_msqid_ds *p = buf;<br />+		struct compat_msqid_ds __user *p = buf;<br /> 		if (get_compat_ipc_perm(&amp;out-&gt;msg_perm, &amp;p-&gt;msg_perm))<br /> 			return -EFAULT;<br /> 		if (get_user(out-&gt;msg_qbytes, &amp;p-&gt;msg_qbytes))<br />diff --git a/ipc/sem.c b/ipc/sem.c<br />index f7385bce5fd3..6220e9616207 100644<br />--- a/ipc/sem.c<br />+++ b/ipc/sem.c<br />&#64;&#64; -1636,10 +1636,10 &#64;&#64; static int copy_compat_semid_from_user(struct semid64_ds *out, void __user *buf,<br /> {<br /> 	memset(out, 0, sizeof(*out));<br /> 	if (version == IPC_64) {<br />-		struct compat_semid64_ds *p = buf;<br />+		struct compat_semid64_ds __user *p = buf;<br /> 		return get_compat_ipc64_perm(&amp;out-&gt;sem_perm, &amp;p-&gt;sem_perm);<br /> 	} else {<br />-		struct compat_semid_ds *p = buf;<br />+		struct compat_semid_ds __user *p = buf;<br /> 		return get_compat_ipc_perm(&amp;out-&gt;sem_perm, &amp;p-&gt;sem_perm);<br /> 	}<br /> }<br />diff --git a/ipc/shm.c b/ipc/shm.c<br />index badac463e2c8..85428b094df9 100644<br />--- a/ipc/shm.c<br />+++ b/ipc/shm.c<br />&#64;&#64; -1193,10 +1193,10 &#64;&#64; static int copy_compat_shmid_from_user(struct shmid64_ds *out, void __user *buf,<br /> {<br /> 	memset(out, 0, sizeof(*out));<br /> 	if (version == IPC_64) {<br />-		struct compat_shmid64_ds *p = buf;<br />+		struct compat_shmid64_ds __user *p = buf;<br /> 		return get_compat_ipc64_perm(&amp;out-&gt;shm_perm, &amp;p-&gt;shm_perm);<br /> 	} else {<br />-		struct compat_shmid_ds *p = buf;<br />+		struct compat_shmid_ds __user *p = buf;<br /> 		return get_compat_ipc_perm(&amp;out-&gt;shm_perm, &amp;p-&gt;shm_perm);<br /> 	}<br /> }<br />diff --git a/ipc/syscall.c b/ipc/syscall.c<br />index 667022746ca5..977bffd5a7f8 100644<br />--- a/ipc/syscall.c<br />+++ b/ipc/syscall.c<br />&#64;&#64; -171,7 +171,7 &#64;&#64; COMPAT_SYSCALL_DEFINE6(ipc, u32, call, int, first, int, second,<br /> 			       COMPAT_SHMLBA);<br /> 		if (err &lt; 0)<br /> 			return err;<br />-		return put_user(raddr, (compat_ulong_t *)compat_ptr(third));<br />+		return put_user(raddr, (compat_ulong_t __user *)compat_ptr(third));<br /> 	}<br /> 	case SHMDT:<br /> 		return sys_shmdt(compat_ptr(ptr));</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
