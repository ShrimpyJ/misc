    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/9/15/7">First message in thread</a></li><li><a href="/lkml/2017/9/17/103">Linus Torvalds</a><ul><li><a href="/lkml/2017/9/17/106">Christoph Hellwig</a></li><li><a href="/lkml/2017/9/17/113">Mimi Zohar</a><ul><li class="origin"><a href="/lkml/2017/9/17/116">Linus Torvalds</a><ul><li><a href="/lkml/2017/9/17/116">Al Viro</a><ul><li><a href="/lkml/2017/9/18/170">Steven Whitehouse</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Sep 2017 09:34:01 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/3] ima: use fs method to read integrity data (updated patch description)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 17, 2017 at 9:15 AM, Mimi Zohar &lt;zohar&#64;linux.vnet.ibm.com&gt; wrote:<br />&gt;<br />&gt; Unless I'm missing something, that would only be possible with an IMA<br />&gt; policy rule that permits direct IO (eg. permit_directio).  Otherwise<br />&gt; the direct IO is denied.<br /><br />Note that the "XFS and directio" was only an example.<br /><br />There is absolutely nothing that says that a  filesystem has to use<br />i_rwsem for IO serialization at all. Even for the regular write path.<br /><br />Now, I suspect most (all?) do, but that's a historical artifact rather<br />than "design". In particular, the VFS layer used to do the locking for<br />the filesystems, to guarantee the POSIX requirements (POSIX requires<br />that writes be seen atomically).<br /><br />But that lock was pushed down into the filesystems, since some<br />filesystems really wanted to have parallel writes (particularly for<br />direct IO, where that POSIX serialization requirement doesn't exist).<br /><br />That's all many years ago, though. New filesystems are likely to have<br />copied the pattern from old ones, but even then..<br /><br />Also, it's worth noting that "inode-&gt;i_rwlock" isn't even well-defined<br />as a lock. You can have the question of *which* inode gets talked<br />about when you have things like eoverlayfs etc. Normally it would be<br />obvious, but sometimes you'd use "file-&gt;f_mapping-&gt;host" (which is the<br />same thing in the simple cases), and sometimes it really wouldn't be<br />obvious at all..<br /><br />So... I'm really not at all convinced that i_rwsem is sensible. It's<br />one of those things that are "mostly right for the simple cases",<br />but...<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
