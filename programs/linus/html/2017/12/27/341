    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/12/27/341">First message in thread</a></li><li class="origin"><a href="/lkml/2017/12/27/344">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/27/344">Thomas Gleixner</a></li><li><a href="/lkml/2017/12/27/419">tip-bot for Linus Torvalds</a></li><li><a href="/lkml/2017/12/28/783">(Eric W. Biederman)</a><ul><li><a href="/lkml/2017/12/28/813">   hpa&#64;zytor ...</a><ul><li><a href="/lkml/2017/12/28/826">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/12/27/341/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 27 Dec 2017 11:48:50 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">[PATCH] x86-32: fix kexec with stack canary (CONFIG_CC_STACKPROTECTOR)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />From: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />Date: Wed, 27 Dec 2017 11:41:30 -0800<br />Subject: [PATCH] x86-32: fix kexec with stack canary (CONFIG_CC_STACKPROTECTOR)<br /><br />Commit e802a51ede91 ("x86/idt: Consolidate IDT invalidation") cleaned up<br />and unified the IDT invalidation that existed in a couple of places.  It<br />changed no actual real code.<br /><br />Despite not changing any actual real code, it _did_ change code<br />generation: by implementing the common idt_invalidate() function in<br />archx86/kernel/idt.c, it made the use of the function in<br />arch/x86/kernel/machine_kexec_32.c be a real function call rather than<br />an (accidental) inlining of the function.<br /><br />That, in turn, exposed two issues:<br /><br /> - in load_segments(), we had incorrectly reset all the segment<br />   registers, which then made the stack canary load (which gcc does<br />   using offset of %gs) cause a trap.  Instead of %gs pointing to the<br />   stack canary, it will be the normal zero-based kernel segment, and<br />   the stack canary load will take a page fault at address 0x14.<br /><br /> - to make this even harder to debug, we had invalidated the GDT just<br />   before calling idt_invalidate(), which meant that the fault happened<br />   with an invalid GDT, which in turn causes a triple fault and<br />   immediate reboot.<br /><br />Fix this by<br /><br /> (a) not reloading the special segments in load_segments(). We currently<br />     don't do any percpu accesses (which would require %fs on x86-32) in<br />     this area, but there's no reason to think that we might not want to<br />     do them, and like %gs, it's pointless to break it.<br /><br /> (b) doing idt_invalidate() before invalidating the GDT, to keep things<br />     at least _slightly_ more debuggable for a bit longer. Without a<br />     IDT, traps will not work. Without a GDT, traps also will not work,<br />     but neither will any segment loads etc. So in a very real sense,<br />     the GDT is even more core than the IDT.<br /><br />Reported-and-tested-by: Alexandru Chirvasitu &lt;achirvasub&#64;gmail.com&gt;<br />Fixes: e802a51ede91 ("x86/idt: Consolidate IDT invalidation")<br />Cc: Thomas Gleixner &lt;tglx&#64;linutronix.de&gt;<br />Cc: Andy Lutomirski &lt;luto&#64;kernel.org&gt;<br />Cc: Peter Anvin &lt;hpa&#64;zytor.com&gt;<br />Cc: Ingo Molnar &lt;mingo&#64;kernel.org&gt;<br />Signed-off-by: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />---<br /><br />I wrote "Reported-and-tested-by: Alexandru" because while this isn't <br />exactly the same patch as anything Alexandru tested, it's pretty close, <br />and I'm pretty sure this version will fix his issues too.<br /><br />I decided to try to just do the minimal changes: the GDT invalidation last <br />(because of the debugging) and _only_ removing the resetting of fs/gs <br />rather than removing load_segments() entirely.<br /><br />I think making idt_invalidate() be inline would be a good thing as well, <br />and I do think that all those "phys_to_virt(0)" things are garbage, but I <br />also think they are independent issues, so I didn't touch any of that. <br /><br />I'm assuming I'll get this patch back through the x86 tree, and will not <br />be applying it to my own git tree unless the x86 people ask me to.<br /><br />Comments?<br /><br /> arch/x86/kernel/machine_kexec_32.c | 4 +---<br /> 1 file changed, 1 insertion(+), 3 deletions(-)<br /><br />diff --git a/arch/x86/kernel/machine_kexec_32.c b/arch/x86/kernel/machine_kexec_32.c<br />index 00bc751c861c..edfede768688 100644<br />--- a/arch/x86/kernel/machine_kexec_32.c<br />+++ b/arch/x86/kernel/machine_kexec_32.c<br />&#64;&#64; -48,8 +48,6 &#64;&#64; static void load_segments(void)<br /> 		"\tmovl $"STR(__KERNEL_DS)",%%eax\n"<br /> 		"\tmovl %%eax,%%ds\n"<br /> 		"\tmovl %%eax,%%es\n"<br />-		"\tmovl %%eax,%%fs\n"<br />-		"\tmovl %%eax,%%gs\n"<br /> 		"\tmovl %%eax,%%ss\n"<br /> 		: : : "eax", "memory");<br /> #undef STR<br />&#64;&#64; -232,8 +230,8 &#64;&#64; void machine_kexec(struct kimage *image)<br /> 	 * The gdt &amp; idt are now invalid.<br /> 	 * If you want to load them you must set up your own idt &amp; gdt.<br /> 	 */<br />-	set_gdt(phys_to_virt(0), 0);<br /> 	idt_invalidate(phys_to_virt(0));<br />+	set_gdt(phys_to_virt(0), 0);<br /> <br /> 	/* now call it */<br /> 	image-&gt;start = relocate_kernel_ptr((unsigned long)image-&gt;head,<br />-- <br />2.15.1.391.gc6612a551<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
