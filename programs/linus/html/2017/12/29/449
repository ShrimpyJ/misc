    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/12/29/195">First message in thread</a></li><li><a href="/lkml/2017/12/29/429">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/29/430">=?UTF-8?Q?Toralf_F=c3=b6rster?=</a></li><li><a href="/lkml/2017/12/29/443">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2017/12/29/488">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/29/488">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/30/21">Alexander Tsoy</a></li></ul></li></ul></li><li><a href="/lkml/2017/12/29/456">Alexander Tsoy</a><ul><li><a href="/lkml/2017/12/30/52">=?UTF-8?Q?Toralf_F=c3=b6rster?=</a><ul><li><a href="/lkml/2017/12/30/53">Jiri Kosina</a></li></ul></li></ul></li><li><a href="/lkml/2017/12/29/494">Josh Poimboeuf</a><ul><li><a href="/lkml/2017/12/30/17">Alexander Tsoy</a><ul><li><a href="/lkml/2017/12/30/109">Josh Poimboeuf</a></li></ul></li><li><a href="/lkml/2017/12/30/24">=?UTF-8?Q?Toralf_F=c3=b6rster?=</a></li></ul></li><li><a href="/lkml/2017/12/30/14">=?UTF-8?Q?Toralf_F=c3=b6rster?=</a></li></ul></li><li><a href="/lkml/2017/12/30/27">Jiri Kosina</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Dec 2017 17:00:01 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 4.14.9 doesn't boot (regression)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"> f<br /><br />On Fri, Dec 29, 2017 at 4:10 PM, Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt;<br />&gt; Double faults use IST, so a double fault that double faults will effectively just start over rather than eventually running out of stack and triple faulting.<br />&gt;<br />&gt; But check out the registers. We have RSP = ...28fd8 and CR2 = ...27f08.<br />&gt; IOW the double fault stack is ...28000 - ...28fff and we're somehow getting<br />&gt; a failed page fault a couple hundred bytes below the bottom of the IST stack.<br />&gt; IOW, I think we're just stuck in a neverending loop of stack overflows.<br /><br />Ahh, good catch. This feels like it might finally be explaining things.<br /><br />&gt; (Also, Josh, the oops code should have printed the contents of the struct pt_regs at the top of the DF stack.  Any idea why it didn't?)<br />&gt;<br />&gt; Toralf, can you send the complete output of:<br />&gt;<br />&gt; objdump -dr arch/x86/kernel/traps.o<br />&gt;<br />&gt; From the build tree of a nonworking kernel?<br /><br />Alexander made one of his failing kernels available earlier:<br /><br />    <a href="https://www.dropbox.com/s/yesupqgig3uxf73/linux-4.15-rc5">https://www.dropbox.com/s/yesupqgig3uxf73/linux-4.15-rc5</a>%2B.tar.xz?dl=0<br /><br />and yes, there's something seriously wrong there. Doing a disassembly<br />on "do_double_fault()" shows:<br /><br />ffffffff8101bda0 &lt;do_double_fault&gt;:<br />ffffffff8101bda0:       41 54                   push   %r12<br />ffffffff8101bda2:       55                      push   %rbp<br />ffffffff8101bda3:       53                      push   %rbx<br />ffffffff8101bda4:       48 81 ec 20 10 00 00    sub    $0x1020,%rsp<br />ffffffff8101bdab:       48 83 0c 24 00          orq    $0x0,(%rsp)<br />ffffffff8101bdb0:       48 81 c4 20 10 00 00    add    $0x1020,%rsp<br /><br />WTF? That's bogus crap, and not ok in the kernel.  Doing a stack probe<br />below the stack by subtracting 4128rom the stack pointer and then<br />oring it, and then resetting the stack pointer again is just crazy.<br />And it's definitely not ever going to work for the kernel that has a<br />limited stack.<br /><br />So yes, It's a terminally broken compiler from hell. I assume gentoo<br />has applied some completely broken security patch to their compiler,<br />turning said compiler into complete garbage.<br /><br />Doing some trivial grepping on the disassembly in that vmlinux file,<br />there's tons of those "let's probe more than a page below the stack"<br />issues. The biggest offset I found was 0x1400.<br /><br />That one happened to be in do_sys_poll().<br /><br />&gt; Also, you wouldn't happen to be using Gentoo perchance?<br /><br />Yes, several people involved are using gentoo. Maybe everybody.<br /><br />&gt; I already have two reports of a Gentoo system miscompiling the vDSO<br />&gt; due to Gentoo enabling -fstack-check and GCC generating stack check<br />&gt; code that is highly suboptimal, actively incorrect, and doesn't even<br />&gt; manage to check the stack in a particularly helpful way.<br /><br />Yes. Good. I think you root-caused it.<br /><br />Good. I was not feeling so happy about this bug report, but now I can<br />firmly just blame the gentoo compiler for having some shit-for-brains<br />"feature".<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
