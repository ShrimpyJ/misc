    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/12/15/1215">First message in thread</a></li><li><a href="/lkml/2017/12/15/1215">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2017/12/16/326">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/16/326">Ingo Molnar</a><ul><li><a href="/lkml/2017/12/17/65">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Dec 2017 14:57:25 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC GIT PULL] x86 Page Table Isolation (PTI) syscall entry code preparatory patches</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 15, 2017 at 5:58 PM, Ingo Molnar &lt;mingo&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; These are the x86-64 low level entry code preparatory patches for the page table<br />&gt; isolation patches - which are required for PTI, which addresses KASLR and similar<br />&gt; information leaks.<br /><br />Ugh.<br /><br />Ok, I've read through this, and while I like most of it (I do like the<br />percpu syscall stack), I have this urge to wait until after rc4. With<br />the suspend/resume issues, we've had a horrible track record for 4.15<br />rc's so far, I'l like to not pull another low-level x86 change just<br />before an rc release and potentially make it four for four broken<br />rc's.<br /><br />And I absolutely detest how that cherry-pick branch was done. I can<br />see why, but:<br /><br /> - now we have those extra cherry-picks that I already have<br /><br /> - and the merge commit isn't even a no-op!<br /><br />Dammit, if the point was to have a branch that worked for 4.14, I can<br />see that. But look at that merge (on the "other side"), and notice how<br />the end result is *not* identical to the parent.<br /><br />IOW, that<br /><br />  9a818d1a3235 Merge branch 'WIP.x86/pti.base' into x86/pti, to pick<br />up cherry-picked base tree and preparatory patches<br /><br />was supposed to be a synchronization point, but if you do<br /><br />    git diff 9a818d1a3235..9a818d1a3235^<br /><br />it isn't actually synchronized. It's *almost* synchronized, but not<br />quite. How did those cherry-picks that were already upstream end up<br />causing *changes* upstream? That's odd.<br /><br />So there are some technical oddities in there.<br /><br />I'll read through it tomorrow again.. Maybe I'll change my mind.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
