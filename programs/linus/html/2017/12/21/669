    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/12/20/459">First message in thread</a></li><li><a href="/lkml/2017/12/20/459">syzbot</a><ul><li class="origin"><a href="/lkml/2017/12/22/65">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/22/65">Peter Zijlstra</a><ul><li><a href="/lkml/2017/12/22/72">Dmitry Vyukov</a><ul><li><a href="/lkml/2017/12/22/84">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2017/12/22/88">Dmitry Vyukov</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 21 Dec 2017 10:42:04 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: general protection fault in finish_task_switch</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Dec 20, 2017 at 8:03 AM, syzbot<br />&lt;bot+72c44cd8b0e8a1a64b9c03c4396aea93a16465ef&#64;syzkaller.appspotmail.com&gt;<br />wrote:<br />&gt; Hello,<br />&gt;<br />&gt; syzkaller hit the following crash on<br />&gt; 7dc9f647127d6955ffacaf51cb6a627b31dceec2<br />&gt; git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/master<br />&gt;<br />&gt; kasan: CONFIG_KASAN_INLINE enabled<br />&gt; kasan: GPF could be caused by NULL-ptr deref or user memory access<br />&gt; general protection fault: 0000 [#1] SMP KASAN<br />&gt; Dumping ftrace buffer:<br />&gt;    (ftrace buffer empty)<br />&gt; Modules linked in:<br />&gt; CPU: 0 PID: 4227 Comm: syzkaller244813 Not tainted 4.15.0-rc4-next-20171220+<br />&gt; #77<br />&gt; Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS<br />&gt; Google 01/01/2011<br />&gt; RIP: __fire_sched_in_preempt_notifiers kernel/sched/core.c:2534 [inline]<br /><br />That line 2534 is the call inside the hlist_for_each_entry() loop:<br /><br />        hlist_for_each_entry(notifier, &amp;curr-&gt;preempt_notifiers, link)<br />                notifier-&gt;ops-&gt;sched_in(notifier, raw_smp_processor_id());<br /><br />and the Code: line disassembly is<br /><br />   0: ff 11                callq  *(%rcx)<br />   2: 4c 89 f9              mov    %r15,%rcx<br />   5: 48 c1 e9 03          shr    $0x3,%rcx<br />   9: 42 80 3c 31 00        cmpb   $0x0,(%rcx,%r14,1)<br />   e: 0f 85 1b 02 00 00    jne    0x22f<br />  14: 4d 8b 3f              mov    (%r15),%r15<br />  17: 4d 85 ff              test   %r15,%r15<br />  1a: 0f 84 c0 fd ff ff    je     0xfffffffffffffde0<br />  20: 49 8d 7f 10          lea    0x10(%r15),%rdi<br />  24: 48 89 f9              mov    %rdi,%rcx<br />  27: 48 c1 e9 03          shr    $0x3,%rcx<br />  2b:* 42 80 3c 31 00        cmpb   $0x0,(%rcx,%r14,1) &lt;-- trapping instruction<br />  30: 74 ae                je     0xffffffffffffffe0<br />  32: e8 a7 cc 5b 00        callq  0x5bccde<br />  37: eb a7                jmp    0xffffffffffffffe0<br />  39: 4c 89 fe              mov    %r15,%rsi<br />  3c: 4c 89 e7              mov    %r12,%rdi<br /><br />and while the "callq *(%rcx)" might be just the end part of some<br />previous instruction, I think it may be right (there is indeed an<br />indirect call in that function - that very "-&gt;sched_in()" call).<br /><br />So I think the oops happens after the indirect call returns.<br /><br />I think the second "callq" is<br /><br />    call    __asan_report_load8_noabort<br /><br />and the actual trapping instruction is loading the KASAN byte state.<br /><br />As far as I can tell, the kasan check is trying to check this part of<br />hlist_for_each_entry():<br /><br />    movq    (%r15), %r15    # notifier_110-&gt;link.next,<br /><br />and %r15 is dead000000000100, which is LIST_POISON1.<br /><br />End result: KASAN actually makes these things harder to debug, because<br />it's trying to "validate" the list poison values before they are used,<br />and takes a much more complex and indirect fault in the process,<br />instead of just getting a page-fault on the LIST_POISON1 that would<br />have made it more obvious.<br /><br />Oh well.<br /><br />There is nothing in this that indicates that it's actually related to<br />KASAN, and it _should_ oops even without KASAN enabled.<br /><br />But the reproducer does nothing for me. Of course, I didn't actually<br />run it on linux-next at all, so it is quite possibly related to<br />scheduler work (or the TLB/pagetable work) that just hasn't hit<br />mainstream yet.<br /><br />None of the scheduler people seem to have been on the report, though.<br />Adding some in.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
