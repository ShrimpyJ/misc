    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/12/14/559">First message in thread</a></li><li><a href="/lkml/2017/12/14/559">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2017/12/14/705">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/14/705">Andy Lutomirski</a><ul><li><a href="/lkml/2017/12/14/722">Linus Torvalds</a><ul><li><a href="/lkml/2017/12/14/817">Andy Lutomirski</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 14 Dec 2017 10:42:08 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BUG: unable to handle kernel paging request in __switch_to</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 14, 2017 at 9:12 AM, Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt; On Sun, 3 Dec 2017, syzbot wrote:<br />&gt;&gt; BUG: unable to handle kernel paging request at fffffffffffffff8<br />&gt;&gt; Oops: 0002 [#1] SMP KASAN<br /><br />System write of a non-existent page.<br /><br />&gt;&gt; RIP: 0010:switch_fpu_prepare arch/x86/include/asm/fpu/internal.h:535 [inline]<br />&gt;&gt; RIP: 0010:__switch_to+0x95b/0x1330 arch/x86/kernel/process_64.c:407<br /><br />This says it's<br /><br />     old_fpu-&gt;last_cpu = cpu;<br /><br />and the code disassembly ends up looking something like this:<br /><br />   0: 48 c1 ea 03          shr    $0x3,%rdx<br />   4: 0f b6 04 02          movzbl (%rdx,%rax,1),%eax<br />   8: 84 c0                test   %al,%al<br />   a: 74 08                je     0x14<br />   c: 3c 03                cmp    $0x3,%al<br />   e: 0f 8e d5 06 00 00    jle    0x6e9<br />  14: 8b 85 70 fe ff ff    mov    -0x190(%rbp),%eax<br />  1a: 41 89 84 24 c0 15 00 mov    %eax,0x15c0(%r12)<br />  21: 00<br />  22:* cc                    int3    &lt;-- trapping instruction<br /><br />where that preceding two "mov" instructions look like it might indeed be that<br /><br />     old_fpu-&gt;last_cpu = cpu;<br /><br />thing, and the register state doesn't look insane for this.<br /><br />So I think the RIP-&gt;line encoding is slightly off, and that "int3" is<br />almost certainly due to the very next thing after the write:<br /><br />                trace_x86_fpu_regs_deactivated(old_fpu);<br /><br />and that actually makes sense if the test robot is doing some tracing,<br />particularly if it's just about to _start_ tracing, and it has<br />replaced the first byte of the instruction with 'int3' and is in the<br />process of doing the rewrite.<br /><br />The fact that it then takes a system write fault is because some GDT<br />or IDT setup is screwed up. Or possibly the stack is screwed up and<br />started out as 0, and then the push to the stack would decrement the<br />stack pointer and try to push the error state or something.<br /><br />&gt; That's the second report I'm staring at today which has CR2<br />&gt; fffffffffffffffx and points to a faulting instruction which does not make<br />&gt; any sense at all.<br /><br />That actually does make sense - see above.  It just requires that race<br />with the instruction rewriting.<br /><br />*Normally* we never actually take the "int3" exception, because<br />normally we'll have completed the rewrite before another CPU actually<br />executes the instruction that is being rewritten.<br /><br />So I'm assuming this is with the page table isolation, and some<br />unusual case in exception handling got screwed up.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
