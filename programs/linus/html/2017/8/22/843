    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/14/1000">First message in thread</a></li><li><a href="/lkml/2017/8/22/668">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/22/671">Linus Torvalds</a></li><li><a href="/lkml/2017/8/22/687">Peter Zijlstra</a><ul><li><a href="/lkml/2017/8/22/719">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/8/22/693">Peter Zijlstra</a><ul><li><a href="/lkml/2017/8/22/779">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/22/808">Andi Kleen</a><ul><li><a href="/lkml/2017/8/22/864">Christopher Lameter</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2017/8/22/815">"Liang, Kan"</a><ul><li class="origin"><a href="/lkml/2017/8/22/852">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/22/852">Peter Zijlstra</a><ul><li><a href="/lkml/2017/8/22/856">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/8/23/428">"Liang, Kan"</a><ul><li><a href="/lkml/2017/8/23/486">Tim Chen</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2017/8/23/492">Mel Gorman</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/8/22/843/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 22 Aug 2017 13:42:13 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] sched/wait: Break up long wake list walk</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 22, 2017 at 12:55 PM, Liang, Kan &lt;kan.liang&#64;intel.com&gt; wrote:<br />&gt;<br />&gt;&gt; So I propose testing the attached trivial patch.<br />&gt;<br />&gt; It doesn’t work.<br />&gt; The call stack is the same.<br /><br />So I would have expected the stack trace to be the same, and I would<br />even expect the CPU usage to be fairly similar, because you'd see<br />repeating from the callers (taking the fault again if the page is -<br />once again - being migrated).<br /><br />But I was hoping that the wait queues would be shorter because the<br />loop for the retry would be bigger.<br /><br />Oh well.<br /><br />I'm slightly out of ideas. Apparently the yield() worked ok (apart<br />from not catching all cases), and maybe we could do a version that<br />waits on the page bit in the non-contended case, but yields under<br />contention?<br /><br />IOW, maybe this is the best we can do for now? Introducing that<br />"wait_on_page_migration()" helper might allow us to tweak this a bit<br />as people come up with better ideas..<br /><br />And then add Tim's patch for the general worst-case just in case?<br /><br />             Linus<br /> include/linux/pagemap.h | 7 +++++++<br /> mm/filemap.c            | 9 +++++++++<br /> mm/huge_memory.c        | 2 +-<br /> mm/migrate.c            | 2 +-<br /> 4 files changed, 18 insertions(+), 2 deletions(-)<br /><br />diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h<br />index 79b36f57c3ba..d0451f2501ba 100644<br />--- a/include/linux/pagemap.h<br />+++ b/include/linux/pagemap.h<br />&#64;&#64; -503,6 +503,7 &#64;&#64; static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,<br />  */<br /> extern void wait_on_page_bit(struct page *page, int bit_nr);<br /> extern int wait_on_page_bit_killable(struct page *page, int bit_nr);<br />+extern void wait_on_page_bit_or_yield(struct page *page, int bit_nr);<br /> <br /> /* <br />  * Wait for a page to be unlocked.<br />&#64;&#64; -524,6 +525,12 &#64;&#64; static inline int wait_on_page_locked_killable(struct page *page)<br /> 	return wait_on_page_bit_killable(compound_head(page), PG_locked);<br /> }<br /> <br />+static inline void wait_on_page_migration(struct page *page)<br />+{<br />+	if (PageLocked(page))<br />+		wait_on_page_bit_or_yield(compound_head(page), PG_locked);<br />+}<br />+<br /> /* <br />  * Wait for a page to complete writeback<br />  */<br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index a49702445ce0..9e34e7502cac 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -1026,6 +1026,15 &#64;&#64; int wait_on_page_bit_killable(struct page *page, int bit_nr)<br /> 	return wait_on_page_bit_common(q, page, bit_nr, TASK_KILLABLE, false);<br /> }<br /> <br />+void wait_on_page_bit_or_yield(struct page *page, int bit_nr)<br />+{<br />+	if (PageWaiters(page)) {<br />+		yield();<br />+		return;<br />+	}<br />+	wait_on_page_bit(page, bit_nr);<br />+}<br />+<br /> /**<br />  * add_page_wait_queue - Add an arbitrary waiter to a page's wait queue<br />  * &#64;page: Page defining the wait queue of interest<br />diff --git a/mm/huge_memory.c b/mm/huge_memory.c<br />index 90731e3b7e58..d94e89ca9f0c 100644<br />--- a/mm/huge_memory.c<br />+++ b/mm/huge_memory.c<br />&#64;&#64; -1443,7 +1443,7 &#64;&#64; int do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t pmd)<br /> 		if (!get_page_unless_zero(page))<br /> 			goto out_unlock;<br /> 		spin_unlock(vmf-&gt;ptl);<br />-		wait_on_page_locked(page);<br />+		wait_on_page_migration(page);<br /> 		put_page(page);<br /> 		goto out;<br /> 	}<br />diff --git a/mm/migrate.c b/mm/migrate.c<br />index e84eeb4e4356..f0aa68f775aa 100644<br />--- a/mm/migrate.c<br />+++ b/mm/migrate.c<br />&#64;&#64; -308,7 +308,7 &#64;&#64; void __migration_entry_wait(struct mm_struct *mm, pte_t *ptep,<br /> 	if (!get_page_unless_zero(page))<br /> 		goto out;<br /> 	pte_unmap_unlock(ptep, ptl);<br />-	wait_on_page_locked(page);<br />+	wait_on_page_migration(page);<br /> 	put_page(page);<br /> 	return;<br /> out:</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
