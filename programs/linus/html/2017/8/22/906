    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/14/1000">First message in thread</a></li><li><a href="/lkml/2017/8/22/864">Christopher Lameter</a><ul><li><a href="/lkml/2017/8/22/875">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2017/8/22/915">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/22/915">Linus Torvalds</a></li><li><a href="/lkml/2017/8/23/429">"Liang, Kan"</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/8/22/906/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 22 Aug 2017 15:52:17 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] sched/wait: Break up long wake list walk</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 22, 2017 at 2:24 PM, Andi Kleen &lt;ak&#64;linux.intel.com&gt; wrote:<br />&gt;<br />&gt; I believe in this case it's used by threads, so a reference count limit<br />&gt; wouldn't help.<br /><br />For the first migration try, yes. But if it's some kind of "try and<br />try again" pattern, the second time you try and there are people<br />waiting for the page, the page count (not the map count) would be<br />elevanted.<br /><br />So it's possible that depending on exactly what the deeper problem is,<br />the "this page is very busy, don't migrate" case might be<br />discoverable, and the page count might be part of it.<br /><br />However, after PeterZ made that comment that page migration should<br />have that should_numa_migrate_memory() filter, I am looking at that<br />mpol_misplaced() code.<br /><br />And honestly, that MPOL_PREFERRED / MPOL_F_LOCAL case really looks<br />like complete garbage to me.<br /><br />It looks like garbage exactly because it says "always migrate to the<br />current node", but that's crazy - if it's a group of threads all<br />running together on the same VM, that obviously will just bounce the<br />page around for absolute zero good ewason.<br /><br />The *other* memory policies look fairly sane. They basically have a<br />fairly well-defined preferred node for the policy (although the<br />"MPOL_INTERLEAVE" looks wrong for a hugepage).  But<br />MPOL_PREFERRED/MPOL_F_LOCAL really looks completely broken.<br /><br />Maybe people expected that anybody who uses MPOL_F_LOCAL will also<br />bind all threads to one single node?<br /><br />Could we perhaps make that "MPOL_PREFERRED / MPOL_F_LOCAL" case just<br />do the MPOL_F_MORON policy, which *does* use that "should I migrate to<br />the local node" filter?<br /><br />IOW, we've been looking at the waiters (because the problem shows up<br />due to the excessive wait queues), but maybe the source of the problem<br />comes from the numa balancing code just insanely bouncing pages<br />back-and-forth if you use that "always balance to local node" thing.<br /><br />Untested (as always) patch attached.<br /><br />              Linus<br /> mm/mempolicy.c | 7 ++++---<br /> 1 file changed, 4 insertions(+), 3 deletions(-)<br /><br />diff --git a/mm/mempolicy.c b/mm/mempolicy.c<br />index 618ab125228b..f2d5aab84c49 100644<br />--- a/mm/mempolicy.c<br />+++ b/mm/mempolicy.c<br />&#64;&#64; -2190,9 +2190,9 &#64;&#64; int mpol_misplaced(struct page *page, struct vm_area_struct *vma, unsigned long<br /> <br /> 	case MPOL_PREFERRED:<br /> 		if (pol-&gt;flags &amp; MPOL_F_LOCAL)<br />-			polnid = numa_node_id();<br />-		else<br />-			polnid = pol-&gt;v.preferred_node;<br />+			goto local_node;<br />+<br />+		polnid = pol-&gt;v.preferred_node;<br /> 		break;<br /> <br /> 	case MPOL_BIND:<br />&#64;&#64; -2218,6 +2218,7 &#64;&#64; int mpol_misplaced(struct page *page, struct vm_area_struct *vma, unsigned long<br /> <br /> 	/* Migrate the page towards the node whose CPU is referencing it */<br /> 	if (pol-&gt;flags &amp; MPOL_F_MORON) {<br />+local_node:<br /> 		polnid = thisnid;<br /> <br /> 		if (!should_numa_migrate_memory(current, page, curnid, thiscpu))</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
