    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/25/542">First message in thread</a></li><li><a href="/lkml/2017/8/25/542">Tim Chen</a><ul><li><a href="/lkml/2017/8/25/543">Tim Chen</a><ul><li class="origin"><a href="/lkml/2017/8/25/779">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/25/779">Tim Chen</a><ul><li><a href="/lkml/2017/8/25/789">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2017/8/25/604">Christopher Lameter</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 25 Aug 2017 12:58:05 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2 v2] sched/wait: Introduce lock breaker in wake_up_page_bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 25, 2017 at 9:13 AM, Tim Chen &lt;tim.c.chen&#64;linux.intel.com&gt; wrote:<br />&gt; Now that we have added breaks in the wait queue scan and allow bookmark<br />&gt; on scan position, we put this logic in the wake_up_page_bit function.<br /><br />Oh, _this_ is the other patch you were talking about. I thought it was<br />the NUMA counter threashold that was discussed around the same time,<br />and that's why I referred to Mel.<br /><br />Gods, _this_ patch is ugly.  No, I'm not happy with it at all. It<br />makes that wait_queue_head much bigger, for this disgusting one use.<br /><br />So no, this is no good.<br /><br />Now, maybe the page_wait_table[] itself could be changed to be<br />something that is *not* just the wait-queue head.<br /><br />But if we need to change the page_wait_table[] itself to have more<br />information, then we should make it not be a wait-queue at all, we<br />should make it be a list of much more specialized entries, indexed by<br />the {page,bit} tuple.<br /><br />And once we do that, we probably *could* use something like two<br />specialized lists: one that is wake-all, and one that is wake-one.<br /><br />So you'd have something like<br /><br />    struct page_wait_struct {<br />        struct list_node list;<br />        struct page *page;<br />        int bit;<br />        struct llist_head all;<br />        struct llist_head exclusive;<br />    };<br /><br />and then the "page_wait_table[]" would be just an array of<br /><br />    struct page_wait_head {<br />        spinlock_t lock;<br />        struct hlist_head list;<br />    };<br /><br />and then the rule is:<br /><br /> - each page/bit combination allocates one of these page_wait_struct<br />entries when somebody starts waiting for it for the first time (and we<br />use the spinlock in the page_wait_head to serialize that list).<br /><br /> - an exclusive wait (ie somebody who waits to get the bit for<br />locking) adds itself to the 'exclusive' llist<br /><br /> - non-locking waiters add themselves to the 'all' list<br /><br /> - we can use llist_del_all() to remove the 'all' list and then walk<br />it and wake them up without any locks<br /><br /> - we can use llist_del_first() to remove the first exclusive waiter<br />and wait _it_ up without any locks.<br /><br />Hmm? How does that sound? That means that we wouldn't use the normal<br />wait-queues at all for the page hash waiting. We'd use this two-level<br />list: one list to find the page/bit thing, and then two lists within<br />that fdor the wait-queues for just *that* page/bit.<br /><br />So no need for the 'key' stuff at all, because the page/bit data would<br />be in the first data list, and the second list wouldn't have any of<br />these traversal issues where you have to be careful and do it one<br />entry at a time.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
