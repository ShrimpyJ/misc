    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/20/182">First message in thread</a></li><li><a href="/lkml/2017/8/29/605">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/29/611">Jerome Glisse</a><ul><li class="origin"><a href="/lkml/2017/8/29/740">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/29/740">Andrea Arcangeli</a><ul><li><a href="/lkml/2017/8/29/745">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 29 Aug 2017 12:38:43 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: kvm splat in mmu_spte_clear_track_bits</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 29, 2017 at 12:13 PM, Jerome Glisse &lt;jglisse&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Yes and i am fine with page traversal being under spinlock and not<br />&gt; being able to sleep during that. I agree doing otherwise would be<br />&gt; insane. It is just that the existing behavior of try_to_unmap_one()<br />&gt; and page_mkclean_one() have been broken and that no mmu_notifier<br />&gt; calls were added around the lock section.<br /><br />Yeah, I'm actually surprised that ever worked. I'm surprised that<br />try_to_unmap_one didn't hold any locks earlier.<br /><br />In fact, I think at least some of them *did* already hold the page<br />table locks: ptep_clear_flush_young_notify() and friends very much<br />should have always held them.<br /><br />So it's literally just that mmu_notifier_invalidate_page() call that<br />used to be outside all the locks, but honestly, I think that was<br />always a bug. It means that you got notified of the page removal<br />*after* the page was already gone and all locks had been released, so<br />a completely *different* page could already have been mapped to that<br />address.<br /><br />So I think the old code was always broken exactly because the callback<br />wasn't serialized with the actual action.<br /><br />&gt; I sent a patch that properly compute the range to invalidate and move<br />&gt; to invalidate_range() but is lacking the invalidate_range_start()/<br />&gt; end() so i am gonna respin that with range_start/end bracketing and<br />&gt; assume the worse for the range of address.<br /><br />So surrounding it with start/end _should_ make KVM happy.<br /><br />KVM people, can you confirm?<br /><br />But I do note that there's a number of other users of that<br />"invalidate_page" callback.<br /><br />I think ib_umem_notifier_invalidate_page() the exact same blocking<br />issue, but changing to range_start/end should be good there too.<br /><br />amdgpu_mn_invalidate_page() and the xen/gntdev also seem to be happy<br />being replaced with start/end.<br /><br />In fact, I'm wondering if this actually means that we could get rid of<br />mmu_notifier_invalidate_page() entirely. There's only a couple of<br />callers, and the other one seems to be fs/dax.c, and it actually seems<br />to have the exact same issue that the try_to_unmap_one() code had: it<br />tried to invalidate an address too late - by the time it was called,<br />the page gad already been cleaned and locks had been released.<br /><br />So the more I look at that "turn mmu_notifier_invalidate_page() into<br />invalidate_range_start/end()" the more I think that's fundamentally<br />the right thing to do.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
