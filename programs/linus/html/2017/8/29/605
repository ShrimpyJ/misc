    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/20/182">First message in thread</a></li><li><a href="/lkml/2017/8/29/409">Andrea Arcangeli</a><ul><li><a href="/lkml/2017/8/29/482">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/29/575">Jerome Glisse</a></li></ul></li><li><a href="/lkml/2017/8/29/579">Jerome Glisse</a><ul><li class="origin"><a href="/lkml/2017/8/29/611">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/29/611">Jerome Glisse</a><ul><li><a href="/lkml/2017/8/29/654">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2017/8/30/83">Michal Hocko</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 29 Aug 2017 12:06:42 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: kvm splat in mmu_spte_clear_track_bits</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 29, 2017 at 11:34 AM, Jerome Glisse &lt;jglisse&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Kirill did regress invalidate_page as it use to be call outside the<br />&gt; spinlock and now it is call inside the spinlock thus reverting will<br />&gt; introduce back a regression.<br /><br />Honestly, this MMU notifier thing has been nothing but a badly<br />designed mistake from beginning to end, and bad rules for what can<br />sleep and what can not are one fundamental problem.<br /><br />There are fundamentally two levels of VM locking, and those two levels<br />are not going to go away, and we're not budging on them:<br /><br /> - there's the "virtual address" level, which can block. We have a<br />nice mmap_semaphore, and we guarantee that it's held for writing for<br />all changes to the virtual memory layout<br /><br />   This is the "mmap/munmap" kind of granularity. The mmu callbacks at<br />*this* level are fine to block.<br /><br /> - then there is the "page level" VM handling, and honestly, that<br />*fundamentally* uses a spinlock. If we look at a particular page, that<br />page is meaningless without the lock. Really.<br /><br />   I honestly believe that any MMU callback at this level needs to be<br />atomic. Some of the absolutely *have* to be (that "change_pte", for<br />example).<br /><br />In that second case, we might have a "begin/end" surrounding the<br />actual page table walk. And that might sleep, but then it<br />*fundamentally*  cannot actually be able some particular single page<br />or stable range. Because without the page table spinlock, no such<br />stability exists. It's purely a "we are not going to start looking at<br />this range" kind of thing.<br /><br />I really don't understand why the nVidia crap cannot follow those<br />simple rules. Because either<br /><br /> (a) you're working with virtual addresses, and you should be able to<br />work on that virtual layer<br /><br /> (b) you're actually working with physical pages, and you can just<br />hold on to those physical pages yourself.<br /><br />I really detest our MMU callbacks. I shouldn't have allowed them to be<br />merged. And I definitely shoul.dn't allow them to screw up our VM<br />layer.<br /><br />But we have them, and we should work at making sure people do sane things.<br /><br />And yes, those sane things may include<br /><br /> (a) guaranteeing that the start/end range calls are always done<br />around the actual locked region.<br /><br /> (b) adding a ton of validation so that people *see* then they break<br />the rules. Even when they don't use some random notifier crud.<br /><br />That (b) may involve adding a number of "might_sleep()" calls (not<br />deep in the notifiers themselves, but in the actual wrapper functions<br />even when notifiers are compiled out entirely!), but also adding calls<br />to validate those kinds of "you can't call<br />mmu_notifier_invalidate_page() without having first called<br />mmu_notifier_invalidate_range_start() in a sleepable context".<br /><br />But (b) definitely should also be a very real onus on the mmu<br />notifiers themselves. No way can we sleep when we're traversing page<br />tables. We hold a page table lock. We can sleep before and after, but<br />not during actual page traversal.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
