    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/16/534">First message in thread</a></li><li><a href="/lkml/2017/8/23/802">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/23/826">(Eric W. Biederman)</a><ul><li class="origin"><a href="/lkml/2017/8/24/578">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/24/578">(Eric W. Biederman)</a></li></ul></li><li><a href="/lkml/2017/8/24/7">Stefan Lippers-Hollmann</a><ul><li><a href="/lkml/2017/8/24/585">(Eric W. Biederman)</a><ul><li><a href="/lkml/2017/8/24/708">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Aug 2017 20:24:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/1] devpts: use dynamic_dname() to generate proc name</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 23, 2017 at 8:11 PM, Eric W. Biederman<br />&lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt; -static int pty_get_peer(struct tty_struct *tty, int flags)<br />&gt; +int ptm_open_peer(struct file *master, struct tty_struct *tty, int flags)<br />&gt;  {<br />&gt;         int fd = -1;<br />&gt;         struct file *filp = NULL;<br />&gt;         int retval = -EINVAL;<br />&gt; +       struct path path;<br />&gt; +<br />&gt; +       if ((tty-&gt;driver-&gt;type != TTY_DRIVER_TYPE_PTY) ||<br />&gt; +           (tty-&gt;driver-&gt;subtype != PTY_TYPE_MASTER))<br />&gt; +               return -EIO;<br /><br />No. Afaik, that could be a legact PTY, which wouldn't be ok.<br /><br />I think you need to do<br /><br />        if (tty-&gt;driver != ptm_driver)<br />                return -EIO;<br /><br />which should check both that it's the unix98 pty, and that it's the master.<br /><br />Maybe I'm missing something.<br /><br />That check used to be implicit, in that only the unix98 pty's could<br />reach that pty_unix98_ioctl() function, so then testing just that it<br />was a master was sufficient.<br /><br />&gt; -       /* We need to cache a fake path for TIOCGPTPEER. */<br />&gt; -       pts_path = kmalloc(sizeof(struct path), GFP_KERNEL);<br />&gt; -       if (!pts_path)<br />&gt; -               goto err_release;<br />&gt; -       pts_path-&gt;mnt = filp-&gt;f_path.mnt;<br />&gt; -       pts_path-&gt;dentry = dentry;<br />&gt; -       path_get(pts_path);<br />&gt; -       tty-&gt;link-&gt;driver_data = pts_path;<br />&gt; +       tty-&gt;link-&gt;driver_data = dentry;<br /><br />We used to do "path_get()". Shouldn't we now use "dget()"?<br /><br />But maybe the slave dentry is guaranteed to be around and we don't<br />need to do that. So your approach may be fine. You did remove all the<br />path_put() calls too, so I guess it all matches up.<br /><br />So this looks like it could be fine, but I'd like to make sure.<br /><br />&gt; +struct vfsmount *devpts_mnt(struct file *filp)<br />&gt; +{<br />&gt; +       struct path path;<br />&gt; +       int err;<br />&gt; +<br />&gt; +       path = filp-&gt;f_path;<br />&gt; +       path_get(&amp;path);<br />&gt; +<br />&gt; +       err = devpts_ptmx_path(&amp;path);<br />&gt; +       if (err) {<br />&gt; +               path_put(&amp;path);<br />&gt; +               path.mnt = ERR_PTR(err);<br />&gt; +       }<br />&gt; +       return path.mnt;<br />&gt; +}<br /><br />That can't be right. You're leaking the dentry that you're not returning, no?<br /><br />But yes, apart from those comments, this looks like what I envisioned.<br /><br />Needs testing, and needs more looking at those reference counts, but<br />otherwise looks good.<br /><br />And while the patch is a bit bigger, I do like getting rid of that<br />'struct path' thing, and keeping just the dentry.<br /><br />                      Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
