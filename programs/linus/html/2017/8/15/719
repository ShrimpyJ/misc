    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/14/1000">First message in thread</a></li><li><a href="/lkml/2017/8/15/707">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/15/708">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2017/8/16/819">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/16/819">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Aug 2017 16:50:34 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] sched/wait: Break up long wake list walk</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 15, 2017 at 3:57 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Oh, and the page wait-queue really needs that key argument too, which<br />&gt; is another thing that swait queue code got rid of in the name of<br />&gt; simplicity.<br /><br />Actually, it gets worse.<br /><br />Because the page wait queues are hashed, it's not an all-or-nothing<br />thing even for the non-exclusive cases, and it's not a "wake up first<br />entry" for the exclusive case. Both have to be conditional on the wait<br />entry actually matching the page and bit in question.<br /><br />So no way to use swait, or any of the lockless queuing code in general<br />(so we can't do some clever private wait-list using llist.h either).<br /><br />End result: it looks like you fairly fundamentally do need to use a<br />lock over the whole list traversal (like the standard wait-queues),<br />and then add a cursor entry like Tim's patch if dropping the lock in<br />the middle.<br /><br />Anyway, looking at the old code, we *used* to limit the page wait hash<br />table to 4k entries, and we used to have one hash table per memory<br />zone.<br /><br />The per-zone thing didn't work at all for the generic bit-waitqueues,<br />because of how people used them on virtual addresses on the stack.<br /><br />But it *could* work for the page waitqueues, which are now a totally<br />separate entity, and is obviously always physically addressed (since<br />the indexing is by "struct page" pointer), and doesn't have that<br />issue.<br /><br />So I guess we could re-introduce the notion of per-zone page waitqueue<br />hash tables. It was disgusting to allocate and free though (and hooked<br />into the memory hotplug code).<br /><br />So I'd still hope that we can instead just have one larger hash table,<br />and that is sufficient for the problem.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
