    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/23/647">First message in thread</a></li><li><a href="/lkml/2017/8/23/651">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/23/670">Andreas Dilger</a><ul><li><a href="/lkml/2017/8/24/337">Doug Nazar</a><ul><li><a href="/lkml/2017/8/24/562">Dave Kleikamp</a></li></ul></li><li class="origin"><a href="/lkml/2017/8/27/198">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/27/198">Dave Kleikamp</a></li><li><a href="/lkml/2017/8/29/195">Doug Nazar</a></li></ul></li></ul></li><li><a href="/lkml/2017/8/24/321">Doug Nazar</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Aug 2017 12:47:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Kernels v4.9+ cause short reads of block devices</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 23, 2017 at 2:01 PM, Andreas Dilger &lt;adilger&#64;dilger.ca&gt; wrote:<br />&gt;<br />&gt; Doug,<br />&gt; I noticed while checking for other implications of changing MAX_LFS_FILESIZE<br />&gt; that fs/jfs/super.c is also working around this limit.<br /><br />Note to people: I just committed the patch to update MAX_LFS_FILESIZE.<br /><br />I made it use the simpler (and clearer) calculation of<br /><br />    ((loff_t)ULONG_MAX &lt;&lt; PAGE_SHIFT)<br /><br />for the 32-bit case, and I did *not* change any other users.<br /><br />The jfs comment was a bit confusing, and talks about "wraps around" at<br />8TB, when that actually happens at 16TB. Yes, if you use a signed<br />number for the index, it does wrap at 8TB, but you really shouldn't<br />(and the code the jfs comment points to doesn't).<br /><br />So I didn't touch that.  Nor did I touch:<br /><br />&gt; it also makes sense to fix jfs_fill_super() to<br />&gt; use MAX_LFS_FILESIZE instead of JFS rolling its own, something like:<br />&gt;<br />&gt;         /* logical blocks are represented by 40 bits in pxd_t, etc.<br />&gt;          * and page cache is indexed by long. */<br />&gt;         sb-&gt;s_maxbytes = min((u64)sb-&gt;s_blocksize) &lt;&lt; 40,<br />&gt;                              MAX_LFS_FILESIZE);<br /><br />which I agree should be modified. The new MAX_LFS_FILESIZE should be<br />the right size, but the difference now is only one page less one byte.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
