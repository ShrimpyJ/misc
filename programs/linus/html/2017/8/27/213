    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/25/542">First message in thread</a></li><li><a href="/lkml/2017/8/25/832">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/26/164">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2017/8/27/214">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/27/214">Linus Torvalds</a></li><li><a href="/lkml/2017/8/27/222">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/27/240">Nicholas Piggin</a></li></ul></li></ul></li><li><a href="/lkml/2017/8/28/713">"Liang, Kan"</a><ul><li><a href="/lkml/2017/8/28/829">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/28/969">Tim Chen</a></li><li><a href="/lkml/2017/8/29/333">"Liang, Kan"</a></li><li><a href="/lkml/2017/8/29/486">Tim Chen</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Aug 2017 14:40:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2 v2] sched/wait: Introduce lock breaker in wake_up_page_bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 26, 2017 at 11:15 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So how about just this fairly trivial patch?<br /><br />So I just committed that trivial patch, because I think it's right,<br />but more importantly because I think I found a real and non-trivial<br />fundamental problem.<br /><br />The reason I found it is actually that I was thinking about this<br />patch, and how the WQ_FLAG_EXCLUSIVE ordering matters.<br /><br />And I don't really think the WQ_FLAG_EXCLUSIVE ordering matters all<br />that much, but just *thinking* about it made me realize that the code<br />is broken.<br /><br />In particular, this caller:<br /><br />    int __lock_page_killable(struct page *__page)<br />    {<br />        struct page *page = compound_head(__page);<br />        wait_queue_head_t *q = page_waitqueue(page);<br />        return wait_on_page_bit_common(q, page, PG_locked, TASK_KILLABLE, true);<br />    }<br />    EXPORT_SYMBOL_GPL(__lock_page_killable);<br /><br />is completely broken crap.<br /><br />Why?<br /><br />It's the combination of "TASK_KILLABLE" and "true" that is broken.<br />Always has been broken, afaik.<br /><br />The "true" is that "bool lock" argument, and when it is set, we set<br />the WQ_FLAG_EXCLUSIVE bit.<br /><br />But that bit - by definition, that's the whole point - means that the<br />waking side only wakes up *one* waiter.<br /><br />So there's a race in anybody who uses __lock_page_killable().<br /><br />The race goes like this:<br /><br />  thread1       thread2         thread3<br />  ----          ----            ----<br /><br />  .. CPU1 ...<br />  __lock_page_killable<br />    wait_on_page_bit_common()<br />      get wq lock<br />      __add_wait_queue_entry_tail_exclusive()<br />      set_current_state(TASK_KILLABLE);<br />      release wq lock<br />        io_schedule<br /><br />                ... CPU2 ...<br />                __lock_page[_killable]()<br />                  wait_on_page_bit_common()<br />                    get wq lock<br />                    __add_wait_queue_entry_tail_exclusive()<br />                    set_current_state(TASK_KILLABLE);<br />                    release wq lock<br />                    io_schedule<br /><br />                                ... CPU3 ...<br />                                unlock_page()<br />                                wake_up_page_bit(page, PG_Locked)<br />                                  wakes up CPU1 _only_<br /><br />  ... lethal signal for thread1 happens ...<br />     if (unlikely(signal_pending_state(state, current))) {<br />          ret = -EINTR;<br />          break;<br />     }<br /><br /><br />End result: page is unlocked, CPU3 is waiting, nothing will wake CPU3 up.<br /><br />Of course, if we have multiple threads all locking that page<br />concurrently, we probably will have *another* thread lock it<br />(successfully), and then when it unlocks it thread3 does get woken up<br />eventually.<br /><br />But the keyword is "eventually". It could be a long while,<br />particularly if we don't lock the page *all* the time, just<br />occasionally.<br /><br />So it might be a while, and it might explain how some waiters might queue up.<br /><br />And who does __lock_page_killable? Page faults.<br /><br />And who does a lot of page faults and page locking? That NUMA load from hell.<br /><br />Does it have lethal signals, though? Probably not. That lethal signal<br />case really is unusual.<br /><br />So I'm not saying that this is actually THE BUG. In particular,<br />despite that race, the page actually *is* unlocked afterwards. It's<br />just that one of the threads that wanted the lock didn't get notified<br />of it. So it doesn't really explain how non-locking waiters (ie the<br />people who don't do migrations, just wait for the migration entry)<br />would queue up.<br /><br />But it sure looks like a real bug to me.<br /><br />Basically, if you ask for anm exclusive wakeup, you *have* to take the<br />resource you are waiting for. Youl can't just say "never mind, I'll<br />return -EINTR".<br /><br />I don't see a simple fix for this yet other than perhaps adding a<br />wakeup to the "ret = -EINTR; break" case.<br /><br />Does anybody else see anything? Or maybe see a reason why this<br />wouldn't be a bug in the first place?<br /><br />Anyway, I am officially starting to hate that page wait code.  I've<br />stared at it for days now, and I am not getting more fond of it.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
