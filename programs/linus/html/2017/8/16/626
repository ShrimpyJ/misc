    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/16/534">First message in thread</a></li><li><a href="/lkml/2017/8/16/534">Christian Brauner</a><ul><li><a href="/lkml/2017/8/16/535">Christian Brauner</a></li><li><a href="/lkml/2017/8/16/610">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2017/8/16/674">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/16/674">Christian Brauner</a><ul><li><a href="/lkml/2017/8/16/680">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 16 Aug 2017 11:48:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/1] devpts: use dynamic_dname() to generate proc name</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 16, 2017 at 11:26 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Hardcoding "/dev/pts/%d" is something that user space can already do.<br />&gt; The kernel can and should do better.<br /><br />Put another way: there's no point in applying the patch as-is, since<br />existing glibc ptsname() does the same thing better and faster<br />entirely in user space.<br /><br />Also, we already do special things to get a path for this, but it<br />clearly isn't working. See the<br /><br />        /* We need to cache a fake path for TIOCGPTPEER. */<br /><br />comment in ptmx_open(). Why doesn't the file d_path get filled in<br />correctly there, I wonder.<br /><br />Because The regular<br /><br />        readlink("/proc/self/fd/0", ...)<br /><br />that 'tty' does works correctly.  I think we've done something<br />incorrect in pty_open_peer(), which means that the fd path hasn't been<br />fully filled in.<br /><br />Fixing that *should* fix the readlink() automatically, since it<br />clearly works for the 'tty' binary.<br /><br />I'm wondering why it's not working as-is. "vfs_open()" does that<br /><br />        file-&gt;f_path = *path;<br /><br />thing. Why aren't we getting the right path? The ptmx_open() code<br />looks ok to me.<br /><br />Al, do you see what the issue is, and why we don't get a proper path<br />on that readlink?<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
