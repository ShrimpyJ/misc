    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/8/19/49">First message in thread</a></li><li><a href="/lkml/2017/8/19/129">Linus Torvalds</a><ul><li><a href="/lkml/2017/8/19/135">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2017/9/8/45">Masahiro Yamada</a><ul><li><a href="/lkml/2017/9/8/549">Linus Torvalds</a><ul><li><a href="/lkml/2017/9/8/589">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/8/19/168/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 19 Aug 2017 11:12:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH 0/3] kbuild: generate intermediate C files instead of copying _shipped files</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 19, 2017 at 10:14 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Anybody want to look at just getting rid of the gperf use?<br /><br />I took a stab at it. It wasn't too bad, although I think this needs a<br />*lot* of testing, and I think it needs checking of Makefile<br />dependencies etc.<br /><br />NOTE NOTE NOTE! This may be *COMPLETELY* broken. It just happens to<br />build for me.  So when I say "it wasn't too bad", I really mean "it<br />wasn't too bad, but I didn't spend a lot of effort on it either".<br /><br />Honestly, the code is better and more legible without gperf, imho. And<br />it removes more lines than it adds - and even if you ignore changes to<br />the shipped lines, it's only an additional 15 lines of code,<br /><br />It's likely not even any slower, but who the hell knows.. Do we even<br />care? It's almost certainly faster if you compare to generating that<br />gperf code.<br /><br />              Linus<br />From bb3290d91695bb1ae78ab86f18fb4d7ad8e5ebcc Mon Sep 17 00:00:00 2001<br />From: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />Date: Sat, 19 Aug 2017 10:17:02 -0700<br />Subject: [PATCH] Remove gperf usage from toolchain<br /><br />It turns out that gperf-3.1 changed types in the generated code in ways<br />that aren't even trivially detectable without having to generate a test-file.<br /><br />It's just not worth using tools and libraries from clowns that don't<br />understand or care about compatibility.  So get rid of gperf.<br /><br />Signed-off-by: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />---<br /> Documentation/dontdiff                   |   1 -<br /> scripts/genksyms/Makefile                |   4 +-<br /> scripts/genksyms/keywords.c              |  74 ++++++++<br /> scripts/genksyms/keywords.gperf          |  61 -------<br /> scripts/genksyms/keywords.hash.c_shipped | 230 ------------------------<br /> scripts/genksyms/lex.l                   |   8 +-<br /> scripts/genksyms/lex.lex.c_shipped       |   8 +-<br /> scripts/kconfig/.gitignore               |   1 -<br /> scripts/kconfig/Makefile                 |   4 +-<br /> scripts/kconfig/kconf_id.c               |  54 ++++++<br /> scripts/kconfig/lkc.h                    |   2 +-<br /> scripts/kconfig/zconf.gperf              |  50 ------<br /> scripts/kconfig/zconf.hash.c_shipped     | 297 -------------------------------<br /> scripts/kconfig/zconf.tab.c_shipped      |  10 +-<br /> scripts/kconfig/zconf.y                  |  10 +-<br /> 15 files changed, 151 insertions(+), 663 deletions(-)<br /> create mode 100644 scripts/genksyms/keywords.c<br /> delete mode 100644 scripts/genksyms/keywords.gperf<br /> delete mode 100644 scripts/genksyms/keywords.hash.c_shipped<br /> create mode 100644 scripts/kconfig/kconf_id.c<br /> delete mode 100644 scripts/kconfig/zconf.gperf<br /> delete mode 100644 scripts/kconfig/zconf.hash.c_shipped<br /><br />diff --git a/Documentation/dontdiff b/Documentation/dontdiff<br />index 358b47c06ad4..2228fcc8e29f 100644<br />--- a/Documentation/dontdiff<br />+++ b/Documentation/dontdiff<br />&#64;&#64; -259,5 +259,4 &#64;&#64; wakeup.bin<br /> wakeup.elf<br /> wakeup.lds<br /> zImage*<br />-zconf.hash.c<br /> zoffset.h<br />diff --git a/scripts/genksyms/Makefile b/scripts/genksyms/Makefile<br />index aca33b98bf63..3c23bab3367b 100644<br />--- a/scripts/genksyms/Makefile<br />+++ b/scripts/genksyms/Makefile<br />&#64;&#64; -9,6 +9,6 &#64;&#64; HOSTCFLAGS_parse.tab.o := -I$(src)<br /> HOSTCFLAGS_lex.lex.o := -I$(src)<br /> <br /> # dependencies on generated files need to be listed explicitly<br />-$(obj)/lex.lex.o: $(obj)/keywords.hash.c $(obj)/parse.tab.h<br />+$(obj)/lex.lex.o: $(obj)/parse.tab.h<br /> <br />-clean-files	:= keywords.hash.c lex.lex.c parse.tab.c parse.tab.h<br />+clean-files	:= lex.lex.c parse.tab.c parse.tab.h<br />diff --git a/scripts/genksyms/keywords.c b/scripts/genksyms/keywords.c<br />new file mode 100644<br />index 000000000000..9f40bcd17d07<br />--- /dev/null<br />+++ b/scripts/genksyms/keywords.c<br />&#64;&#64; -0,0 +1,74 &#64;&#64;<br />+static struct resword {<br />+	const char *name;<br />+	int token;<br />+} keywords[] = {<br />+	{ "EXPORT_SYMBOL", EXPORT_SYMBOL_KEYW },<br />+	{ "EXPORT_SYMBOL_GPL", EXPORT_SYMBOL_KEYW },<br />+	{ "EXPORT_SYMBOL_GPL_FUTURE", EXPORT_SYMBOL_KEYW },<br />+	{ "EXPORT_UNUSED_SYMBOL", EXPORT_SYMBOL_KEYW },<br />+	{ "EXPORT_UNUSED_SYMBOL_GPL", EXPORT_SYMBOL_KEYW },<br />+	{ "__asm", ASM_KEYW },<br />+	{ "__asm__", ASM_KEYW },<br />+	{ "__attribute", ATTRIBUTE_KEYW },<br />+	{ "__attribute__", ATTRIBUTE_KEYW },<br />+	{ "__const", CONST_KEYW },<br />+	{ "__const__", CONST_KEYW },<br />+	{ "__extension__", EXTENSION_KEYW },<br />+	{ "__inline", INLINE_KEYW },<br />+	{ "__inline__", INLINE_KEYW },<br />+	{ "__signed", SIGNED_KEYW },<br />+	{ "__signed__", SIGNED_KEYW },<br />+	{ "__typeof", TYPEOF_KEYW },<br />+	{ "__typeof__", TYPEOF_KEYW },<br />+	{ "__volatile", VOLATILE_KEYW },<br />+	{ "__volatile__", VOLATILE_KEYW },<br />+	{ "__builtin_va_list", VA_LIST_KEYW },<br />+<br />+	// According to rth, c99 defines "_Bool", __restrict", __restrict__", "restrict".  KAO<br />+	{ "_Bool", BOOL_KEYW },<br />+	{ "_restrict", RESTRICT_KEYW },<br />+	{ "__restrict__", RESTRICT_KEYW },<br />+	{ "restrict", RESTRICT_KEYW },<br />+	{ "asm", ASM_KEYW },<br />+<br />+	// attribute commented out in modutils 2.4.2.  People are using 'attribute' as a<br />+	// field name which breaks the genksyms parser.  It is not a gcc keyword anyway.<br />+	// KAO. },<br />+	// { "attribute", ATTRIBUTE_KEYW },<br />+<br />+	{ "auto", AUTO_KEYW },<br />+	{ "char", CHAR_KEYW },<br />+	{ "const", CONST_KEYW },<br />+	{ "double", DOUBLE_KEYW },<br />+	{ "enum", ENUM_KEYW },<br />+	{ "extern", EXTERN_KEYW },<br />+	{ "float", FLOAT_KEYW },<br />+	{ "inline", INLINE_KEYW },<br />+	{ "int", INT_KEYW },<br />+	{ "long", LONG_KEYW },<br />+	{ "register", REGISTER_KEYW },<br />+	{ "short", SHORT_KEYW },<br />+	{ "signed", SIGNED_KEYW },<br />+	{ "static", STATIC_KEYW },<br />+	{ "struct", STRUCT_KEYW },<br />+	{ "typedef", TYPEDEF_KEYW },<br />+	{ "typeof", TYPEOF_KEYW },<br />+	{ "union", UNION_KEYW },<br />+	{ "unsigned", UNSIGNED_KEYW },<br />+	{ "void", VOID_KEYW },<br />+	{ "volatile", VOLATILE_KEYW },<br />+};<br />+<br />+#define NR_KEYWORDS (sizeof(keywords)/sizeof(struct resword))<br />+<br />+static int is_reserved_word(register const char *str, register unsigned int len)<br />+{<br />+	int i;<br />+	for (i = 0; i &lt; NR_KEYWORDS; i++) {<br />+		struct resword *r = keywords + i;<br />+		int l = strlen(r-&gt;name);<br />+		if (len == l &amp;&amp; !memcmp(str, r-&gt;name, len))<br />+			return r-&gt;token;<br />+	}<br />+	return -1;<br />+}<br />diff --git a/scripts/genksyms/keywords.gperf b/scripts/genksyms/keywords.gperf<br />deleted file mode 100644<br />index bd4c4b235588..000000000000<br />--- a/scripts/genksyms/keywords.gperf<br />+++ /dev/null<br />&#64;&#64; -1,61 +0,0 &#64;&#64;<br />-%language=ANSI-C<br />-%define hash-function-name is_reserved_hash<br />-%define lookup-function-name is_reserved_word<br />-%{<br />-struct resword;<br />-static const struct resword *is_reserved_word(register const char *str, register unsigned int len);<br />-%}<br />-struct resword { const char *name; int token; }<br />-%%<br />-EXPORT_SYMBOL, EXPORT_SYMBOL_KEYW<br />-EXPORT_SYMBOL_GPL, EXPORT_SYMBOL_KEYW<br />-EXPORT_SYMBOL_GPL_FUTURE, EXPORT_SYMBOL_KEYW<br />-EXPORT_UNUSED_SYMBOL, EXPORT_SYMBOL_KEYW<br />-EXPORT_UNUSED_SYMBOL_GPL, EXPORT_SYMBOL_KEYW<br />-__asm, ASM_KEYW<br />-__asm__, ASM_KEYW<br />-__attribute, ATTRIBUTE_KEYW<br />-__attribute__, ATTRIBUTE_KEYW<br />-__const, CONST_KEYW<br />-__const__, CONST_KEYW<br />-__extension__, EXTENSION_KEYW<br />-__inline, INLINE_KEYW<br />-__inline__, INLINE_KEYW<br />-__signed, SIGNED_KEYW<br />-__signed__, SIGNED_KEYW<br />-__typeof, TYPEOF_KEYW<br />-__typeof__, TYPEOF_KEYW<br />-__volatile, VOLATILE_KEYW<br />-__volatile__, VOLATILE_KEYW<br />-__builtin_va_list, VA_LIST_KEYW<br />-# According to rth, c99 defines _Bool, __restrict, __restrict__, restrict.  KAO<br />-_Bool, BOOL_KEYW<br />-_restrict, RESTRICT_KEYW<br />-__restrict__, RESTRICT_KEYW<br />-restrict, RESTRICT_KEYW<br />-asm, ASM_KEYW<br />-# attribute commented out in modutils 2.4.2.  People are using 'attribute' as a<br />-# field name which breaks the genksyms parser.  It is not a gcc keyword anyway.<br />-# KAO.<br />-#   attribute, ATTRIBUTE_KEYW<br />-auto, AUTO_KEYW<br />-char, CHAR_KEYW<br />-const, CONST_KEYW<br />-double, DOUBLE_KEYW<br />-enum, ENUM_KEYW<br />-extern, EXTERN_KEYW<br />-float, FLOAT_KEYW<br />-inline, INLINE_KEYW<br />-int, INT_KEYW<br />-long, LONG_KEYW<br />-register, REGISTER_KEYW<br />-short, SHORT_KEYW<br />-signed, SIGNED_KEYW<br />-static, STATIC_KEYW<br />-struct, STRUCT_KEYW<br />-typedef, TYPEDEF_KEYW<br />-typeof, TYPEOF_KEYW<br />-union, UNION_KEYW<br />-unsigned, UNSIGNED_KEYW<br />-void, VOID_KEYW<br />-volatile, VOLATILE_KEYW<br />diff --git a/scripts/genksyms/keywords.hash.c_shipped b/scripts/genksyms/keywords.hash.c_shipped<br />deleted file mode 100644<br />index 738018ba7375..000000000000<br />--- a/scripts/genksyms/keywords.hash.c_shipped<br />+++ /dev/null<br />&#64;&#64; -1,230 +0,0 &#64;&#64;<br />-/* ANSI-C code produced by gperf version 3.0.4 */<br />-/* Command-line: gperf -t --output-file scripts/genksyms/keywords.hash.c_shipped -a -C -E -g -k '1,3,$' -p -t scripts/genksyms/keywords.gperf  */<br />-<br />-#if !((' ' == 32) &amp;&amp; ('!' == 33) &amp;&amp; ('"' == 34) &amp;&amp; ('#' == 35) \<br />-      &amp;&amp; ('%' == 37) &amp;&amp; ('&amp;' == 38) &amp;&amp; ('\'' == 39) &amp;&amp; ('(' == 40) \<br />-      &amp;&amp; (')' == 41) &amp;&amp; ('*' == 42) &amp;&amp; ('+' == 43) &amp;&amp; (',' == 44) \<br />-      &amp;&amp; ('-' == 45) &amp;&amp; ('.' == 46) &amp;&amp; ('/' == 47) &amp;&amp; ('0' == 48) \<br />-      &amp;&amp; ('1' == 49) &amp;&amp; ('2' == 50) &amp;&amp; ('3' == 51) &amp;&amp; ('4' == 52) \<br />-      &amp;&amp; ('5' == 53) &amp;&amp; ('6' == 54) &amp;&amp; ('7' == 55) &amp;&amp; ('8' == 56) \<br />-      &amp;&amp; ('9' == 57) &amp;&amp; (':' == 58) &amp;&amp; (';' == 59) &amp;&amp; ('&lt;' == 60) \<br />-      &amp;&amp; ('=' == 61) &amp;&amp; ('&gt;' == 62) &amp;&amp; ('?' == 63) &amp;&amp; ('A' == 65) \<br />-      &amp;&amp; ('B' == 66) &amp;&amp; ('C' == 67) &amp;&amp; ('D' == 68) &amp;&amp; ('E' == 69) \<br />-      &amp;&amp; ('F' == 70) &amp;&amp; ('G' == 71) &amp;&amp; ('H' == 72) &amp;&amp; ('I' == 73) \<br />-      &amp;&amp; ('J' == 74) &amp;&amp; ('K' == 75) &amp;&amp; ('L' == 76) &amp;&amp; ('M' == 77) \<br />-      &amp;&amp; ('N' == 78) &amp;&amp; ('O' == 79) &amp;&amp; ('P' == 80) &amp;&amp; ('Q' == 81) \<br />-      &amp;&amp; ('R' == 82) &amp;&amp; ('S' == 83) &amp;&amp; ('T' == 84) &amp;&amp; ('U' == 85) \<br />-      &amp;&amp; ('V' == 86) &amp;&amp; ('W' == 87) &amp;&amp; ('X' == 88) &amp;&amp; ('Y' == 89) \<br />-      &amp;&amp; ('Z' == 90) &amp;&amp; ('[' == 91) &amp;&amp; ('\\' == 92) &amp;&amp; (']' == 93) \<br />-      &amp;&amp; ('^' == 94) &amp;&amp; ('_' == 95) &amp;&amp; ('a' == 97) &amp;&amp; ('b' == 98) \<br />-      &amp;&amp; ('c' == 99) &amp;&amp; ('d' == 100) &amp;&amp; ('e' == 101) &amp;&amp; ('f' == 102) \<br />-      &amp;&amp; ('g' == 103) &amp;&amp; ('h' == 104) &amp;&amp; ('i' == 105) &amp;&amp; ('j' == 106) \<br />-      &amp;&amp; ('k' == 107) &amp;&amp; ('l' == 108) &amp;&amp; ('m' == 109) &amp;&amp; ('n' == 110) \<br />-      &amp;&amp; ('o' == 111) &amp;&amp; ('p' == 112) &amp;&amp; ('q' == 113) &amp;&amp; ('r' == 114) \<br />-      &amp;&amp; ('s' == 115) &amp;&amp; ('t' == 116) &amp;&amp; ('u' == 117) &amp;&amp; ('v' == 118) \<br />-      &amp;&amp; ('w' == 119) &amp;&amp; ('x' == 120) &amp;&amp; ('y' == 121) &amp;&amp; ('z' == 122) \<br />-      &amp;&amp; ('{' == 123) &amp;&amp; ('|' == 124) &amp;&amp; ('}' == 125) &amp;&amp; ('~' == 126))<br />-/* The character set is not based on ISO-646.  */<br />-#error "gperf generated tables don't work with this execution character set. Please report a bug to &lt;bug-gnu-gperf&#64;gnu.org&gt;."<br />-#endif<br />-<br />-#line 4 "scripts/genksyms/keywords.gperf"<br />-<br />-struct resword;<br />-static const struct resword *is_reserved_word(register const char *str, register unsigned int len);<br />-#line 8 "scripts/genksyms/keywords.gperf"<br />-struct resword { const char *name; int token; };<br />-/* maximum key range = 98, duplicates = 0 */<br />-<br />-#ifdef __GNUC__<br />-__inline<br />-#else<br />-#ifdef __cplusplus<br />-inline<br />-#endif<br />-#endif<br />-static unsigned int<br />-is_reserved_hash (register const char *str, register unsigned int len)<br />-{<br />-  static const unsigned char asso_values[] =<br />-    {<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101,   0,<br />-      101, 101, 101, 101, 101, 101,  15, 101, 101, 101,<br />-        0, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101,   0, 101,   0,   0,   5,<br />-       25,  20,  55,  30, 101,  15, 101, 101,  10,   0,<br />-       10,  40,  10, 101,  10,   5,   0,  10,  15, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101, 101, 101, 101, 101,<br />-      101, 101, 101, 101, 101, 101<br />-    };<br />-  return len + asso_values[(unsigned char)str[2]] + asso_values[(unsigned char)str[0]] + asso_values[(unsigned char)str[len - 1]];<br />-}<br />-<br />-#ifdef __GNUC__<br />-__inline<br />-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__<br />-__attribute__ ((__gnu_inline__))<br />-#endif<br />-#endif<br />-const struct resword *<br />-is_reserved_word (register const char *str, register unsigned int len)<br />-{<br />-  enum<br />-    {<br />-      TOTAL_KEYWORDS = 47,<br />-      MIN_WORD_LENGTH = 3,<br />-      MAX_WORD_LENGTH = 24,<br />-      MIN_HASH_VALUE = 3,<br />-      MAX_HASH_VALUE = 100<br />-    };<br />-<br />-  static const struct resword wordlist[] =<br />-    {<br />-      {""}, {""}, {""},<br />-#line 36 "scripts/genksyms/keywords.gperf"<br />-      {"asm", ASM_KEYW},<br />-      {""},<br />-#line 15 "scripts/genksyms/keywords.gperf"<br />-      {"__asm", ASM_KEYW},<br />-      {""},<br />-#line 16 "scripts/genksyms/keywords.gperf"<br />-      {"__asm__", ASM_KEYW},<br />-      {""}, {""},<br />-#line 27 "scripts/genksyms/keywords.gperf"<br />-      {"__typeof__", TYPEOF_KEYW},<br />-      {""},<br />-#line 19 "scripts/genksyms/keywords.gperf"<br />-      {"__const", CONST_KEYW},<br />-#line 18 "scripts/genksyms/keywords.gperf"<br />-      {"__attribute__", ATTRIBUTE_KEYW},<br />-#line 20 "scripts/genksyms/keywords.gperf"<br />-      {"__const__", CONST_KEYW},<br />-#line 25 "scripts/genksyms/keywords.gperf"<br />-      {"__signed__", SIGNED_KEYW},<br />-#line 54 "scripts/genksyms/keywords.gperf"<br />-      {"static", STATIC_KEYW},<br />-#line 30 "scripts/genksyms/keywords.gperf"<br />-      {"__builtin_va_list", VA_LIST_KEYW},<br />-#line 49 "scripts/genksyms/keywords.gperf"<br />-      {"int", INT_KEYW},<br />-#line 42 "scripts/genksyms/keywords.gperf"<br />-      {"char", CHAR_KEYW},<br />-#line 43 "scripts/genksyms/keywords.gperf"<br />-      {"const", CONST_KEYW},<br />-#line 55 "scripts/genksyms/keywords.gperf"<br />-      {"struct", STRUCT_KEYW},<br />-#line 34 "scripts/genksyms/keywords.gperf"<br />-      {"__restrict__", RESTRICT_KEYW},<br />-#line 35 "scripts/genksyms/keywords.gperf"<br />-      {"restrict", RESTRICT_KEYW},<br />-#line 12 "scripts/genksyms/keywords.gperf"<br />-      {"EXPORT_SYMBOL_GPL_FUTURE", EXPORT_SYMBOL_KEYW},<br />-#line 23 "scripts/genksyms/keywords.gperf"<br />-      {"__inline__", INLINE_KEYW},<br />-      {""},<br />-#line 29 "scripts/genksyms/keywords.gperf"<br />-      {"__volatile__", VOLATILE_KEYW},<br />-#line 10 "scripts/genksyms/keywords.gperf"<br />-      {"EXPORT_SYMBOL", EXPORT_SYMBOL_KEYW},<br />-#line 33 "scripts/genksyms/keywords.gperf"<br />-      {"_restrict", RESTRICT_KEYW},<br />-      {""},<br />-#line 17 "scripts/genksyms/keywords.gperf"<br />-      {"__attribute", ATTRIBUTE_KEYW},<br />-#line 11 "scripts/genksyms/keywords.gperf"<br />-      {"EXPORT_SYMBOL_GPL", EXPORT_SYMBOL_KEYW},<br />-#line 21 "scripts/genksyms/keywords.gperf"<br />-      {"__extension__", EXTENSION_KEYW},<br />-#line 45 "scripts/genksyms/keywords.gperf"<br />-      {"enum", ENUM_KEYW},<br />-#line 13 "scripts/genksyms/keywords.gperf"<br />-      {"EXPORT_UNUSED_SYMBOL", EXPORT_SYMBOL_KEYW},<br />-#line 46 "scripts/genksyms/keywords.gperf"<br />-      {"extern", EXTERN_KEYW},<br />-      {""},<br />-#line 24 "scripts/genksyms/keywords.gperf"<br />-      {"__signed", SIGNED_KEYW},<br />-#line 14 "scripts/genksyms/keywords.gperf"<br />-      {"EXPORT_UNUSED_SYMBOL_GPL", EXPORT_SYMBOL_KEYW},<br />-#line 58 "scripts/genksyms/keywords.gperf"<br />-      {"union", UNION_KEYW},<br />-      {""}, {""},<br />-#line 22 "scripts/genksyms/keywords.gperf"<br />-      {"__inline", INLINE_KEYW},<br />-#line 41 "scripts/genksyms/keywords.gperf"<br />-      {"auto", AUTO_KEYW},<br />-#line 28 "scripts/genksyms/keywords.gperf"<br />-      {"__volatile", VOLATILE_KEYW},<br />-      {""}, {""},<br />-#line 59 "scripts/genksyms/keywords.gperf"<br />-      {"unsigned", UNSIGNED_KEYW},<br />-      {""},<br />-#line 52 "scripts/genksyms/keywords.gperf"<br />-      {"short", SHORT_KEYW},<br />-#line 48 "scripts/genksyms/keywords.gperf"<br />-      {"inline", INLINE_KEYW},<br />-      {""},<br />-#line 61 "scripts/genksyms/keywords.gperf"<br />-      {"volatile", VOLATILE_KEYW},<br />-#line 50 "scripts/genksyms/keywords.gperf"<br />-      {"long", LONG_KEYW},<br />-#line 32 "scripts/genksyms/keywords.gperf"<br />-      {"_Bool", BOOL_KEYW},<br />-      {""}, {""},<br />-#line 51 "scripts/genksyms/keywords.gperf"<br />-      {"register", REGISTER_KEYW},<br />-#line 60 "scripts/genksyms/keywords.gperf"<br />-      {"void", VOID_KEYW},<br />-      {""},<br />-#line 44 "scripts/genksyms/keywords.gperf"<br />-      {"double", DOUBLE_KEYW},<br />-      {""},<br />-#line 26 "scripts/genksyms/keywords.gperf"<br />-      {"__typeof", TYPEOF_KEYW},<br />-      {""}, {""},<br />-#line 53 "scripts/genksyms/keywords.gperf"<br />-      {"signed", SIGNED_KEYW},<br />-      {""}, {""}, {""}, {""},<br />-#line 57 "scripts/genksyms/keywords.gperf"<br />-      {"typeof", TYPEOF_KEYW},<br />-#line 56 "scripts/genksyms/keywords.gperf"<br />-      {"typedef", TYPEDEF_KEYW},<br />-      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},<br />-      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},<br />-      {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},<br />-#line 47 "scripts/genksyms/keywords.gperf"<br />-      {"float", FLOAT_KEYW}<br />-    };<br />-<br />-  if (len &lt;= MAX_WORD_LENGTH &amp;&amp; len &gt;= MIN_WORD_LENGTH)<br />-    {<br />-      register int key = is_reserved_hash (str, len);<br />-<br />-      if (key &lt;= MAX_HASH_VALUE &amp;&amp; key &gt;= 0)<br />-        {<br />-          register const char *s = wordlist[key].name;<br />-<br />-          if (*str == *s &amp;&amp; !strcmp (str + 1, s + 1))<br />-            return &amp;wordlist[key];<br />-        }<br />-    }<br />-  return 0;<br />-}<br />diff --git a/scripts/genksyms/lex.l b/scripts/genksyms/lex.l<br />index 5235aa507ba5..5dc25ee01c77 100644<br />--- a/scripts/genksyms/lex.l<br />+++ b/scripts/genksyms/lex.l<br />&#64;&#64; -94,7 +94,7 &#64;&#64; MC_TOKEN		([~%^&amp;*+=|&lt;&gt;/-]=)|(&amp;&amp;)|("||")|(-&gt;)|(&lt;&lt;)|(&gt;&gt;)<br /> <br /> /* Bring in the keyword recognizer.  */<br /> <br />-#include "keywords.hash.c"<br />+#include "keywords.c"<br /> <br /> <br /> /* Macros to append to our phrase collection list.  */<br />&#64;&#64; -186,10 +186,10 &#64;&#64; repeat:<br /> 	case IDENT:<br /> 	  APP;<br /> 	  {<br />-	    const struct resword *r = is_reserved_word(yytext, yyleng);<br />-	    if (r)<br />+	    int r = is_reserved_word(yytext, yyleng);<br />+	    if (r &gt;= 0)<br /> 	      {<br />-		switch (token = r-&gt;token)<br />+		switch (token = r)<br /> 		  {<br /> 		  case ATTRIBUTE_KEYW:<br /> 		    lexstate = ST_ATTRIBUTE;<br />diff --git a/scripts/genksyms/lex.lex.c_shipped b/scripts/genksyms/lex.lex.c_shipped<br />index 985c5541aae4..d5a7474b3e57 100644<br />--- a/scripts/genksyms/lex.lex.c_shipped<br />+++ b/scripts/genksyms/lex.lex.c_shipped<br />&#64;&#64; -1905,7 +1905,7 &#64;&#64; void yyfree (void * ptr )<br /> <br /> /* Bring in the keyword recognizer.  */<br /> <br />-#include "keywords.hash.c"<br />+#include "keywords.c"<br /> <br /> /* Macros to append to our phrase collection list.  */<br /> <br />&#64;&#64; -1995,10 +1995,10 &#64;&#64; repeat:<br /> 	case IDENT:<br /> 	  APP;<br /> 	  {<br />-	    const struct resword *r = is_reserved_word(yytext, yyleng);<br />-	    if (r)<br />+	    int r = is_reserved_word(yytext, yyleng);<br />+	    if (r &gt;= 0)<br /> 	      {<br />-		switch (token = r-&gt;token)<br />+		switch (token = r)<br /> 		  {<br /> 		  case ATTRIBUTE_KEYW:<br /> 		    lexstate = ST_ATTRIBUTE;<br />diff --git a/scripts/kconfig/.gitignore b/scripts/kconfig/.gitignore<br />index be603c4fef62..51f1c877b543 100644<br />--- a/scripts/kconfig/.gitignore<br />+++ b/scripts/kconfig/.gitignore<br />&#64;&#64; -5,7 +5,6 &#64;&#64; config*<br /> *.lex.c<br /> *.tab.c<br /> *.tab.h<br />-zconf.hash.c<br /> *.moc<br /> gconf.glade.h<br /> *.pot<br />diff --git a/scripts/kconfig/Makefile b/scripts/kconfig/Makefile<br />index eb8144643b78..8c12c20c55a6 100644<br />--- a/scripts/kconfig/Makefile<br />+++ b/scripts/kconfig/Makefile<br />&#64;&#64; -191,7 +191,7 &#64;&#64; gconf-objs	:= gconf.o zconf.tab.o<br /> hostprogs-y := conf nconf mconf kxgettext qconf gconf<br /> <br /> clean-files	:= qconf.moc .tmp_qtcheck .tmp_gtkcheck<br />-clean-files	+= zconf.tab.c zconf.lex.c zconf.hash.c gconf.glade.h<br />+clean-files	+= zconf.tab.c zconf.lex.c gconf.glade.h<br /> clean-files     += config.pot linux.pot<br /> <br /> # Check that we have the required ncurses stuff installed for lxdialog (menuconfig)<br />&#64;&#64; -280,7 +280,7 &#64;&#64; $(obj)/.tmp_gtkcheck:<br /> 	fi<br /> endif<br /> <br />-$(obj)/zconf.tab.o: $(obj)/zconf.lex.c $(obj)/zconf.hash.c<br />+$(obj)/zconf.tab.o: $(obj)/zconf.lex.c<br /> <br /> $(obj)/qconf.o: $(obj)/qconf.moc<br /> <br />diff --git a/scripts/kconfig/kconf_id.c b/scripts/kconfig/kconf_id.c<br />new file mode 100644<br />index 000000000000..5abbc728fbc4<br />--- /dev/null<br />+++ b/scripts/kconfig/kconf_id.c<br />&#64;&#64; -0,0 +1,54 &#64;&#64;<br />+<br />+static struct kconf_id kconf_id_array[] = {<br />+	{ "mainmenu",		T_MAINMENU,		TF_COMMAND },<br />+	{ "menu",		T_MENU,			TF_COMMAND },<br />+	{ "endmenu",		T_ENDMENU,		TF_COMMAND },<br />+	{ "source",		T_SOURCE,		TF_COMMAND },<br />+	{ "choice",		T_CHOICE,		TF_COMMAND },<br />+	{ "endchoice",		T_ENDCHOICE,		TF_COMMAND },<br />+	{ "comment",		T_COMMENT,		TF_COMMAND },<br />+	{ "config",		T_CONFIG,		TF_COMMAND },<br />+	{ "menuconfig",		T_MENUCONFIG,		TF_COMMAND },<br />+	{ "help",		T_HELP,			TF_COMMAND },<br />+	{ "---help---",		T_HELP,			TF_COMMAND },<br />+	{ "if",			T_IF,			TF_COMMAND|TF_PARAM },<br />+	{ "endif",		T_ENDIF,		TF_COMMAND },<br />+	{ "depends",		T_DEPENDS,		TF_COMMAND },<br />+	{ "optional",		T_OPTIONAL,		TF_COMMAND },<br />+	{ "default",		T_DEFAULT,		TF_COMMAND, S_UNKNOWN },<br />+	{ "prompt",		T_PROMPT,		TF_COMMAND },<br />+	{ "tristate",		T_TYPE,			TF_COMMAND, S_TRISTATE },<br />+	{ "def_tristate",	T_DEFAULT,		TF_COMMAND, S_TRISTATE },<br />+	{ "bool",		T_TYPE,			TF_COMMAND, S_BOOLEAN },<br />+	{ "boolean",		T_TYPE,			TF_COMMAND, S_BOOLEAN },<br />+	{ "def_bool",		T_DEFAULT,		TF_COMMAND, S_BOOLEAN },<br />+	{ "int",		T_TYPE,			TF_COMMAND, S_INT },<br />+	{ "hex",		T_TYPE,			TF_COMMAND, S_HEX },<br />+	{ "string",		T_TYPE,			TF_COMMAND, S_STRING },<br />+	{ "select",		T_SELECT,		TF_COMMAND },<br />+	{ "imply",		T_IMPLY,		TF_COMMAND },<br />+	{ "range",		T_RANGE,		TF_COMMAND },<br />+	{ "visible",		T_VISIBLE,		TF_COMMAND },<br />+	{ "option",		T_OPTION,		TF_COMMAND },<br />+	{ "on",			T_ON,			TF_PARAM },<br />+	{ "modules",		T_OPT_MODULES,		TF_OPTION },<br />+	{ "defconfig_list",	T_OPT_DEFCONFIG_LIST,	TF_OPTION },<br />+	{ "env",		T_OPT_ENV,		TF_OPTION },<br />+	{ "allnoconfig_y",	T_OPT_ALLNOCONFIG_Y,	TF_OPTION },<br />+};<br />+<br />+#define KCONF_ID_ARRAY_SIZE (sizeof(kconf_id_array)/sizeof(struct kconf_id))<br />+<br />+static const struct kconf_id *kconf_id_lookup(register const char *str, register unsigned int len)<br />+{<br />+	int i;<br />+<br />+	for (i = 0; i &lt; KCONF_ID_ARRAY_SIZE; i++) {<br />+		struct kconf_id *id = kconf_id_array+i;<br />+		int l = strlen(id-&gt;name);<br />+<br />+		if (len == l &amp;&amp; !memcmp(str, id-&gt;name, len))<br />+			return id;<br />+	}<br />+	return NULL;<br />+}<br />diff --git a/scripts/kconfig/lkc.h b/scripts/kconfig/lkc.h<br />index 91ca126ea080..cdcbe43e87b3 100644<br />--- a/scripts/kconfig/lkc.h<br />+++ b/scripts/kconfig/lkc.h<br />&#64;&#64; -62,7 +62,7 &#64;&#64; enum conf_def_mode {<br /> #define T_OPT_ALLNOCONFIG_Y	4<br /> <br /> struct kconf_id {<br />-	int name;<br />+	const char *name;<br /> 	int token;<br /> 	unsigned int flags;<br /> 	enum symbol_type stype;<br />diff --git a/scripts/kconfig/zconf.gperf b/scripts/kconfig/zconf.gperf<br />deleted file mode 100644<br />index ead02edec936..000000000000<br />--- a/scripts/kconfig/zconf.gperf<br />+++ /dev/null<br />&#64;&#64; -1,50 +0,0 &#64;&#64;<br />-%language=ANSI-C<br />-%define hash-function-name kconf_id_hash<br />-%define lookup-function-name kconf_id_lookup<br />-%define string-pool-name kconf_id_strings<br />-%compare-strncmp<br />-%enum<br />-%pic<br />-%struct-type<br />-<br />-struct kconf_id;<br />-<br />-static const struct kconf_id *kconf_id_lookup(register const char *str, register unsigned int len);<br />-<br />-%%<br />-mainmenu,	T_MAINMENU,	TF_COMMAND<br />-menu,		T_MENU,		TF_COMMAND<br />-endmenu,	T_ENDMENU,	TF_COMMAND<br />-source,		T_SOURCE,	TF_COMMAND<br />-choice,		T_CHOICE,	TF_COMMAND<br />-endchoice,	T_ENDCHOICE,	TF_COMMAND<br />-comment,	T_COMMENT,	TF_COMMAND<br />-config,		T_CONFIG,	TF_COMMAND<br />-menuconfig,	T_MENUCONFIG,	TF_COMMAND<br />-help,		T_HELP,		TF_COMMAND<br />----help---,	T_HELP,		TF_COMMAND<br />-if,		T_IF,		TF_COMMAND|TF_PARAM<br />-endif,		T_ENDIF,	TF_COMMAND<br />-depends,	T_DEPENDS,	TF_COMMAND<br />-optional,	T_OPTIONAL,	TF_COMMAND<br />-default,	T_DEFAULT,	TF_COMMAND, S_UNKNOWN<br />-prompt,		T_PROMPT,	TF_COMMAND<br />-tristate,	T_TYPE,		TF_COMMAND, S_TRISTATE<br />-def_tristate,	T_DEFAULT,	TF_COMMAND, S_TRISTATE<br />-bool,		T_TYPE,		TF_COMMAND, S_BOOLEAN<br />-boolean,	T_TYPE,		TF_COMMAND, S_BOOLEAN<br />-def_bool,	T_DEFAULT,	TF_COMMAND, S_BOOLEAN<br />-int,		T_TYPE,		TF_COMMAND, S_INT<br />-hex,		T_TYPE,		TF_COMMAND, S_HEX<br />-string,		T_TYPE,		TF_COMMAND, S_STRING<br />-select,		T_SELECT,	TF_COMMAND<br />-imply,		T_IMPLY,	TF_COMMAND<br />-range,		T_RANGE,	TF_COMMAND<br />-visible,	T_VISIBLE,	TF_COMMAND<br />-option,		T_OPTION,	TF_COMMAND<br />-on,		T_ON,		TF_PARAM<br />-modules,	T_OPT_MODULES,	TF_OPTION<br />-defconfig_list,	T_OPT_DEFCONFIG_LIST,TF_OPTION<br />-env,		T_OPT_ENV,	TF_OPTION<br />-allnoconfig_y,	T_OPT_ALLNOCONFIG_Y,TF_OPTION<br />-%%<br />diff --git a/scripts/kconfig/zconf.hash.c_shipped b/scripts/kconfig/zconf.hash.c_shipped<br />deleted file mode 100644<br />index d51b15de074a..000000000000<br />--- a/scripts/kconfig/zconf.hash.c_shipped<br />+++ /dev/null<br />&#64;&#64; -1,297 +0,0 &#64;&#64;<br />-/* ANSI-C code produced by gperf version 3.0.4 */<br />-/* Command-line: gperf -t --output-file scripts/kconfig/zconf.hash.c_shipped -a -C -E -g -k '1,3,$' -p -t scripts/kconfig/zconf.gperf  */<br />-<br />-#if !((' ' == 32) &amp;&amp; ('!' == 33) &amp;&amp; ('"' == 34) &amp;&amp; ('#' == 35) \<br />-      &amp;&amp; ('%' == 37) &amp;&amp; ('&amp;' == 38) &amp;&amp; ('\'' == 39) &amp;&amp; ('(' == 40) \<br />-      &amp;&amp; (')' == 41) &amp;&amp; ('*' == 42) &amp;&amp; ('+' == 43) &amp;&amp; (',' == 44) \<br />-      &amp;&amp; ('-' == 45) &amp;&amp; ('.' == 46) &amp;&amp; ('/' == 47) &amp;&amp; ('0' == 48) \<br />-      &amp;&amp; ('1' == 49) &amp;&amp; ('2' == 50) &amp;&amp; ('3' == 51) &amp;&amp; ('4' == 52) \<br />-      &amp;&amp; ('5' == 53) &amp;&amp; ('6' == 54) &amp;&amp; ('7' == 55) &amp;&amp; ('8' == 56) \<br />-      &amp;&amp; ('9' == 57) &amp;&amp; (':' == 58) &amp;&amp; (';' == 59) &amp;&amp; ('&lt;' == 60) \<br />-      &amp;&amp; ('=' == 61) &amp;&amp; ('&gt;' == 62) &amp;&amp; ('?' == 63) &amp;&amp; ('A' == 65) \<br />-      &amp;&amp; ('B' == 66) &amp;&amp; ('C' == 67) &amp;&amp; ('D' == 68) &amp;&amp; ('E' == 69) \<br />-      &amp;&amp; ('F' == 70) &amp;&amp; ('G' == 71) &amp;&amp; ('H' == 72) &amp;&amp; ('I' == 73) \<br />-      &amp;&amp; ('J' == 74) &amp;&amp; ('K' == 75) &amp;&amp; ('L' == 76) &amp;&amp; ('M' == 77) \<br />-      &amp;&amp; ('N' == 78) &amp;&amp; ('O' == 79) &amp;&amp; ('P' == 80) &amp;&amp; ('Q' == 81) \<br />-      &amp;&amp; ('R' == 82) &amp;&amp; ('S' == 83) &amp;&amp; ('T' == 84) &amp;&amp; ('U' == 85) \<br />-      &amp;&amp; ('V' == 86) &amp;&amp; ('W' == 87) &amp;&amp; ('X' == 88) &amp;&amp; ('Y' == 89) \<br />-      &amp;&amp; ('Z' == 90) &amp;&amp; ('[' == 91) &amp;&amp; ('\\' == 92) &amp;&amp; (']' == 93) \<br />-      &amp;&amp; ('^' == 94) &amp;&amp; ('_' == 95) &amp;&amp; ('a' == 97) &amp;&amp; ('b' == 98) \<br />-      &amp;&amp; ('c' == 99) &amp;&amp; ('d' == 100) &amp;&amp; ('e' == 101) &amp;&amp; ('f' == 102) \<br />-      &amp;&amp; ('g' == 103) &amp;&amp; ('h' == 104) &amp;&amp; ('i' == 105) &amp;&amp; ('j' == 106) \<br />-      &amp;&amp; ('k' == 107) &amp;&amp; ('l' == 108) &amp;&amp; ('m' == 109) &amp;&amp; ('n' == 110) \<br />-      &amp;&amp; ('o' == 111) &amp;&amp; ('p' == 112) &amp;&amp; ('q' == 113) &amp;&amp; ('r' == 114) \<br />-      &amp;&amp; ('s' == 115) &amp;&amp; ('t' == 116) &amp;&amp; ('u' == 117) &amp;&amp; ('v' == 118) \<br />-      &amp;&amp; ('w' == 119) &amp;&amp; ('x' == 120) &amp;&amp; ('y' == 121) &amp;&amp; ('z' == 122) \<br />-      &amp;&amp; ('{' == 123) &amp;&amp; ('|' == 124) &amp;&amp; ('}' == 125) &amp;&amp; ('~' == 126))<br />-/* The character set is not based on ISO-646.  */<br />-#error "gperf generated tables don't work with this execution character set. Please report a bug to &lt;bug-gnu-gperf&#64;gnu.org&gt;."<br />-#endif<br />-<br />-#line 10 "scripts/kconfig/zconf.gperf"<br />-struct kconf_id;<br />-<br />-static const struct kconf_id *kconf_id_lookup(register const char *str, register unsigned int len);<br />-/* maximum key range = 71, duplicates = 0 */<br />-<br />-#ifdef __GNUC__<br />-__inline<br />-#else<br />-#ifdef __cplusplus<br />-inline<br />-#endif<br />-#endif<br />-static unsigned int<br />-kconf_id_hash (register const char *str, register unsigned int len)<br />-{<br />-  static const unsigned char asso_values[] =<br />-    {<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73,  0, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 10, 25, 25,<br />-       0,  0,  0,  5,  0,  0, 73, 73,  5,  0,<br />-      10,  5, 45, 73, 20, 20,  0, 15, 15, 73,<br />-      20,  0, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73, 73, 73, 73, 73,<br />-      73, 73, 73, 73, 73, 73<br />-    };<br />-  register int hval = len;<br />-<br />-  switch (hval)<br />-    {<br />-      default:<br />-        hval += asso_values[(unsigned char)str[2]];<br />-      /*FALLTHROUGH*/<br />-      case 2:<br />-      case 1:<br />-        hval += asso_values[(unsigned char)str[0]];<br />-        break;<br />-    }<br />-  return hval + asso_values[(unsigned char)str[len - 1]];<br />-}<br />-<br />-struct kconf_id_strings_t<br />-  {<br />-    char kconf_id_strings_str2[sizeof("if")];<br />-    char kconf_id_strings_str3[sizeof("int")];<br />-    char kconf_id_strings_str5[sizeof("endif")];<br />-    char kconf_id_strings_str7[sizeof("default")];<br />-    char kconf_id_strings_str8[sizeof("tristate")];<br />-    char kconf_id_strings_str9[sizeof("endchoice")];<br />-    char kconf_id_strings_str10[sizeof("---help---")];<br />-    char kconf_id_strings_str12[sizeof("def_tristate")];<br />-    char kconf_id_strings_str13[sizeof("def_bool")];<br />-    char kconf_id_strings_str14[sizeof("defconfig_list")];<br />-    char kconf_id_strings_str17[sizeof("on")];<br />-    char kconf_id_strings_str18[sizeof("optional")];<br />-    char kconf_id_strings_str21[sizeof("option")];<br />-    char kconf_id_strings_str22[sizeof("endmenu")];<br />-    char kconf_id_strings_str23[sizeof("mainmenu")];<br />-    char kconf_id_strings_str25[sizeof("menuconfig")];<br />-    char kconf_id_strings_str27[sizeof("modules")];<br />-    char kconf_id_strings_str28[sizeof("allnoconfig_y")];<br />-    char kconf_id_strings_str29[sizeof("menu")];<br />-    char kconf_id_strings_str31[sizeof("select")];<br />-    char kconf_id_strings_str32[sizeof("comment")];<br />-    char kconf_id_strings_str33[sizeof("env")];<br />-    char kconf_id_strings_str35[sizeof("range")];<br />-    char kconf_id_strings_str36[sizeof("choice")];<br />-    char kconf_id_strings_str39[sizeof("bool")];<br />-    char kconf_id_strings_str41[sizeof("source")];<br />-    char kconf_id_strings_str42[sizeof("visible")];<br />-    char kconf_id_strings_str43[sizeof("hex")];<br />-    char kconf_id_strings_str46[sizeof("config")];<br />-    char kconf_id_strings_str47[sizeof("boolean")];<br />-    char kconf_id_strings_str50[sizeof("imply")];<br />-    char kconf_id_strings_str51[sizeof("string")];<br />-    char kconf_id_strings_str54[sizeof("help")];<br />-    char kconf_id_strings_str56[sizeof("prompt")];<br />-    char kconf_id_strings_str72[sizeof("depends")];<br />-  };<br />-static const struct kconf_id_strings_t kconf_id_strings_contents =<br />-  {<br />-    "if",<br />-    "int",<br />-    "endif",<br />-    "default",<br />-    "tristate",<br />-    "endchoice",<br />-    "---help---",<br />-    "def_tristate",<br />-    "def_bool",<br />-    "defconfig_list",<br />-    "on",<br />-    "optional",<br />-    "option",<br />-    "endmenu",<br />-    "mainmenu",<br />-    "menuconfig",<br />-    "modules",<br />-    "allnoconfig_y",<br />-    "menu",<br />-    "select",<br />-    "comment",<br />-    "env",<br />-    "range",<br />-    "choice",<br />-    "bool",<br />-    "source",<br />-    "visible",<br />-    "hex",<br />-    "config",<br />-    "boolean",<br />-    "imply",<br />-    "string",<br />-    "help",<br />-    "prompt",<br />-    "depends"<br />-  };<br />-#define kconf_id_strings ((const char *) &amp;kconf_id_strings_contents)<br />-#ifdef __GNUC__<br />-__inline<br />-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__<br />-__attribute__ ((__gnu_inline__))<br />-#endif<br />-#endif<br />-const struct kconf_id *<br />-kconf_id_lookup (register const char *str, register unsigned int len)<br />-{<br />-  enum<br />-    {<br />-      TOTAL_KEYWORDS = 35,<br />-      MIN_WORD_LENGTH = 2,<br />-      MAX_WORD_LENGTH = 14,<br />-      MIN_HASH_VALUE = 2,<br />-      MAX_HASH_VALUE = 72<br />-    };<br />-<br />-  static const struct kconf_id wordlist[] =<br />-    {<br />-      {-1}, {-1},<br />-#line 26 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str2,		T_IF,		TF_COMMAND|TF_PARAM},<br />-#line 37 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str3,		T_TYPE,		TF_COMMAND, S_INT},<br />-      {-1},<br />-#line 27 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str5,		T_ENDIF,	TF_COMMAND},<br />-      {-1},<br />-#line 30 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str7,	T_DEFAULT,	TF_COMMAND, S_UNKNOWN},<br />-#line 32 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str8,	T_TYPE,		TF_COMMAND, S_TRISTATE},<br />-#line 20 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str9,	T_ENDCHOICE,	TF_COMMAND},<br />-#line 25 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str10,	T_HELP,		TF_COMMAND},<br />-      {-1},<br />-#line 33 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str12,	T_DEFAULT,	TF_COMMAND, S_TRISTATE},<br />-#line 36 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str13,	T_DEFAULT,	TF_COMMAND, S_BOOLEAN},<br />-#line 47 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str14,	T_OPT_DEFCONFIG_LIST,TF_OPTION},<br />-      {-1}, {-1},<br />-#line 45 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str17,		T_ON,		TF_PARAM},<br />-#line 29 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str18,	T_OPTIONAL,	TF_COMMAND},<br />-      {-1}, {-1},<br />-#line 44 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str21,		T_OPTION,	TF_COMMAND},<br />-#line 17 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str22,	T_ENDMENU,	TF_COMMAND},<br />-#line 15 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str23,	T_MAINMENU,	TF_COMMAND},<br />-      {-1},<br />-#line 23 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str25,	T_MENUCONFIG,	TF_COMMAND},<br />-      {-1},<br />-#line 46 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str27,	T_OPT_MODULES,	TF_OPTION},<br />-#line 49 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str28,	T_OPT_ALLNOCONFIG_Y,TF_OPTION},<br />-#line 16 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str29,		T_MENU,		TF_COMMAND},<br />-      {-1},<br />-#line 40 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str31,		T_SELECT,	TF_COMMAND},<br />-#line 21 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str32,	T_COMMENT,	TF_COMMAND},<br />-#line 48 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str33,		T_OPT_ENV,	TF_OPTION},<br />-      {-1},<br />-#line 42 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str35,		T_RANGE,	TF_COMMAND},<br />-#line 19 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str36,		T_CHOICE,	TF_COMMAND},<br />-      {-1}, {-1},<br />-#line 34 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str39,		T_TYPE,		TF_COMMAND, S_BOOLEAN},<br />-      {-1},<br />-#line 18 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str41,		T_SOURCE,	TF_COMMAND},<br />-#line 43 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str42,	T_VISIBLE,	TF_COMMAND},<br />-#line 38 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str43,		T_TYPE,		TF_COMMAND, S_HEX},<br />-      {-1}, {-1},<br />-#line 22 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str46,		T_CONFIG,	TF_COMMAND},<br />-#line 35 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str47,	T_TYPE,		TF_COMMAND, S_BOOLEAN},<br />-      {-1}, {-1},<br />-#line 41 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str50,		T_IMPLY,	TF_COMMAND},<br />-#line 39 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str51,		T_TYPE,		TF_COMMAND, S_STRING},<br />-      {-1}, {-1},<br />-#line 24 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str54,		T_HELP,		TF_COMMAND},<br />-      {-1},<br />-#line 31 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str56,		T_PROMPT,	TF_COMMAND},<br />-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},<br />-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},<br />-#line 28 "scripts/kconfig/zconf.gperf"<br />-      {(int)(long)&amp;((struct kconf_id_strings_t *)0)-&gt;kconf_id_strings_str72,	T_DEPENDS,	TF_COMMAND}<br />-    };<br />-<br />-  if (len &lt;= MAX_WORD_LENGTH &amp;&amp; len &gt;= MIN_WORD_LENGTH)<br />-    {<br />-      register int key = kconf_id_hash (str, len);<br />-<br />-      if (key &lt;= MAX_HASH_VALUE &amp;&amp; key &gt;= 0)<br />-        {<br />-          register int o = wordlist[key].name;<br />-          if (o &gt;= 0)<br />-            {<br />-              register const char *s = o + kconf_id_strings;<br />-<br />-              if (*str == *s &amp;&amp; !strncmp (str + 1, s + 1, len - 1) &amp;&amp; s[len] == '\0')<br />-                return &amp;wordlist[key];<br />-            }<br />-        }<br />-    }<br />-  return 0;<br />-}<br />-#line 50 "scripts/kconfig/zconf.gperf"<br />-<br />diff --git a/scripts/kconfig/zconf.tab.c_shipped b/scripts/kconfig/zconf.tab.c_shipped<br />index 65b7515a577c..a22b285d759f 100644<br />--- a/scripts/kconfig/zconf.tab.c_shipped<br />+++ b/scripts/kconfig/zconf.tab.c_shipped<br />&#64;&#64; -209,8 +209,8 &#64;&#64; int zconfparse (void);<br /> /* Copy the second part of user declarations.  */<br /> <br /> <br />-/* Include zconf.hash.c here so it can see the token constants. */<br />-#include "zconf.hash.c"<br />+/* Include kconf_id.c here so it can see the token constants. */<br />+#include "kconf_id.c"<br /> <br /> <br /> <br />&#64;&#64; -1515,7 +1515,7 &#64;&#64; yyreduce:<br />   case 12:<br /> <br />     {<br />-	zconf_error("unexpected option \"%s\"", kconf_id_strings + (yyvsp[-2].id)-&gt;name);<br />+	zconf_error("unexpected option \"%s\"", (yyvsp[-2].id)-&gt;name);<br /> }<br /> <br />     break;<br />&#64;&#64; -2268,13 +2268,13 &#64;&#64; static bool zconf_endtoken(const struct kconf_id *id, int starttoken, int endtok<br /> {<br /> 	if (id-&gt;token != endtoken) {<br /> 		zconf_error("unexpected '%s' within %s block",<br />-			kconf_id_strings + id-&gt;name, zconf_tokenname(starttoken));<br />+			id-&gt;name, zconf_tokenname(starttoken));<br /> 		zconfnerrs++;<br /> 		return false;<br /> 	}<br /> 	if (current_menu-&gt;file != current_file) {<br /> 		zconf_error("'%s' in different file than '%s'",<br />-			kconf_id_strings + id-&gt;name, zconf_tokenname(starttoken));<br />+			id-&gt;name, zconf_tokenname(starttoken));<br /> 		fprintf(stderr, "%s:%d: location of the '%s'\n",<br /> 			current_menu-&gt;file-&gt;name, current_menu-&gt;lineno,<br /> 			zconf_tokenname(starttoken));<br />diff --git a/scripts/kconfig/zconf.y b/scripts/kconfig/zconf.y<br />index 001305fa080b..c8f396c3b190 100644<br />--- a/scripts/kconfig/zconf.y<br />+++ b/scripts/kconfig/zconf.y<br />&#64;&#64; -101,8 +101,8 &#64;&#64; static struct menu *current_menu, *current_entry;<br /> } if_entry menu_entry choice_entry<br /> <br /> %{<br />-/* Include zconf.hash.c here so it can see the token constants. */<br />-#include "zconf.hash.c"<br />+/* Include zconf_id.c here so it can see the token constants. */<br />+#include "kconf_id.c"<br /> %}<br /> <br /> %%<br />&#64;&#64; -119,7 +119,7 &#64;&#64; stmt_list:<br /> 	| stmt_list T_WORD error T_EOL	{ zconf_error("unknown statement \"%s\"", $2); }<br /> 	| stmt_list option_name error T_EOL<br /> {<br />-	zconf_error("unexpected option \"%s\"", kconf_id_strings + $2-&gt;name);<br />+	zconf_error("unexpected option \"%s\"", $2-&gt;name);<br /> }<br /> 	| stmt_list error T_EOL		{ zconf_error("invalid statement"); }<br /> ;<br />&#64;&#64; -551,13 +551,13 &#64;&#64; static bool zconf_endtoken(const struct kconf_id *id, int starttoken, int endtok<br /> {<br /> 	if (id-&gt;token != endtoken) {<br /> 		zconf_error("unexpected '%s' within %s block",<br />-			kconf_id_strings + id-&gt;name, zconf_tokenname(starttoken));<br />+			id-&gt;name, zconf_tokenname(starttoken));<br /> 		zconfnerrs++;<br /> 		return false;<br /> 	}<br /> 	if (current_menu-&gt;file != current_file) {<br /> 		zconf_error("'%s' in different file than '%s'",<br />-			kconf_id_strings + id-&gt;name, zconf_tokenname(starttoken));<br />+			id-&gt;name, zconf_tokenname(starttoken));<br /> 		fprintf(stderr, "%s:%d: location of the '%s'\n",<br /> 			current_menu-&gt;file-&gt;name, current_menu-&gt;lineno,<br /> 			zconf_tokenname(starttoken));<br />-- <br />2.14.0.rc1.2.g4c8247ec3<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
