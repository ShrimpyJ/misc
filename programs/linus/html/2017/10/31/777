    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/10/30/628">First message in thread</a></li><li><a href="/lkml/2017/10/30/796">Linus Torvalds</a><ul><li><a href="/lkml/2017/10/30/811">Linus Torvalds</a><ul><li><a href="/lkml/2017/10/31/11">Al Viro</a></li></ul></li><li><a href="/lkml/2017/10/31/8">Al Viro</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2017/10/31/1055">Cong Wang</a><ul><li><a href="/lkml/2017/11/10/13">Simon Brewer</a><ul><li><a href="/lkml/2017/11/10/431">Cong Wang</a></li><li><a href="/lkml/2017/11/10/471">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 31 Oct 2017 12:00:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Kernel crash in free_pipe_info()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 30, 2017 at 9:44 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt; On Mon, Oct 30, 2017 at 07:08:46PM -0700, Linus Torvalds wrote:<br />&gt;&gt;<br />&gt;&gt; Well, they're at 8(%rax), except for that last case.<br />&gt;<br />&gt; 0x10(%rax)?<br /><br />Duh, yes.<br /><br />&gt;&gt; Except the offset is that %r12*0x28+0x10, so we're talking a byte<br />&gt;&gt; offset of 330 bytes into the allocation, and apparently the eight<br />&gt;&gt; previous (0-7) iterations were fine.<br />&gt;&gt;<br />&gt;&gt; Which is really odd.<br />&gt;<br />&gt; I wonder what pipe-&gt;buffers is equal to here...<br /><br />Sadly, we never even bother loading it so it doesn't show up in the<br />register state, we just iterate over the whole table.<br /><br />The (one) ppc oops that looks like it might be the same issue has a<br />totally different pattern. Instead of having that "error number"<br />looking thing as the invalid pointer base, it has the magic number<br />from a spinlock. And rather than being about "pipe-&gt;bufs[]" array,<br />it's the pipe pointer itself that seems corrupted, and thus the oops<br />happens in the account_pipe_buffers() code instead of in the loop over<br />the buffers.<br /><br />Of course, both are consistent with that "pipe_inode_info" simply<br />having been overwritten by something else (possibly, but not<br />necessarily, due to a use-after-free).<br /><br />&gt; FWIW, I would try to slap<br />&gt;         if (buf-&gt;ops &amp;&amp; (unsigned long)buf-&gt;ops &lt;= 0xffffffff)<br />&gt;                 dump the living hell out of that thing<br />&gt; and see what it catches...<br /><br />Actually, I'm looking at *another* error path - the one in named pipes.<br /><br />Named pipes are why we do that nasty "inode-&gt;i_pipe" thing - if it was<br />for just the regular pipes, we'd be able to just do<br />file-&gt;f_private_data and be done with it. But named pipes have to have<br />the pipe data associated with a particular inode.<br /><br />And that code actually does look wrong.<br /><br />Look at fifo_open(): it increments the pipe-&gt;files as it sets<br />filp-&gt;private_data to point to the pipe_inode_info. Good so far.<br /><br />But look at the error case. It does that put_pipe_info() to release it<br />again, but filp-&gt;private_data still contains the pipe_inode_info<br />pointer.<br /><br />So what happens on a failed open of a named pipe? The *normal* code<br />all is very careful to _not_ use "fput()", but instead use<br />"put_filp(f)", which will just free the file pointer.<br /><br />But what if somebody does "vfs_open()" on one of those things, and<br />then does "fput()" in the failure case?<br /><br />In "do_last()" we have that FILE_OPENED protection:<br /><br />        if (unlikely(error) &amp;&amp; (*opened &amp; FILE_OPENED))<br />                fput(file);<br /><br />and path_openat() is again very careful to then use put_filp(file); if<br />FILE_OPENED was never set. And do_o_path() does the same.<br /><br />I'm not seeing anybody who does the wrong thing, but there's a number<br />of ways to get this entirely wrong, and I worry some path does.<br /><br />I would be a *lot* happier if we didn't have that very subtle<br />fput()-vs-put_filp() issue going on.<br /><br />Again, I cannot see anything wrong, but this feels very very fragile to me.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
