    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/10/3/1">First message in thread</a></li><li><a href="/lkml/2017/10/24/367">John Johansen</a><ul><li><a href="/lkml/2017/10/26/173">Thorsten Leemhuis</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 26 Oct 2017 20:13:10 +0200</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: regression in 4.14-rc2 caused by apparmor: add base infastructure for socket mediation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 26, 2017 at 11:11 AM, Thorsten Leemhuis<br />&lt;regressions&#64;leemhuis.info&gt; wrote:<br />&gt;<br />&gt; All that afaics doesn't matter. If a new kernel breaks things for people<br />&gt; (that especially includes people that do *not* update their userland)<br />&gt; then it's a kernel regression, even if the root of the problem is in<br />&gt; usersland. Linus (CCed) said that often enough (I really should sit down<br />&gt; and collect his mails on this from the web and put them in one<br />&gt; document).<br /><br />Thorsten is very much correct.<br /><br />People should basically always feel like they can update their kernel<br />and simply not have to worry about it.<br /><br />I refuse to introduce "you can only update the kernel if you also<br />update that other program" kind of limitations. If the kernel used to<br />work for you, the rule is that it continues to work for you.<br /><br />There have been exceptions, but they are few and far between, and they<br />generally have some major and fundamental reasons for having happened,<br />that were basically entirely unavoidable, and people _tried_hard_ to<br />avoid them. Maybe we can't practically support the hardware any more<br />after it is decades old and nobody uses it with modern kernels any<br />more. Maybe there's a serious security issue with how we did things,<br />and people actually depended on that fundamentally broken model. Maybe<br />there was some fundamental other breakage that just _had_ to have a<br />flag day for very core and fundamental reasons.<br /><br />And notice that this is very much about *breaking* peoples environments.<br /><br />Behavioral changes happen, and maybe we don't even support some<br />feature any more. There's a number of fields in /proc/&lt;pid&gt;/stat that<br />are printed out as zeroes, simply because they don't even *exist* in<br />the kernel any more, or because showing them was a mistake (typically<br />an information leak). But the numbers got replaced by zeroes, so that<br />the code that used to parse the fields still works. The user might not<br />see everything they used to see, and so behavior is clearly different,<br />but things still _work_, even if they might no longer show sensitive<br />(or no longer relevant) information.<br /><br />But if something actually breaks, then the change must get fixed or<br />reverted. And it gets fixed in the *kernel*. Not by saying "well, fix<br />your user space then". It was a kernel change that exposed the<br />problem, it needs to be the kernel that corrects for it, because we<br />have a "upgrade in place" model. We don't have a "upgrade with new<br />user space".<br /><br />And I seriously will refuse to take code from people who do not<br />understand and honor this very simple rule.<br /><br />This rule is also not going to change.<br /><br />And yes, I realize that the kernel is "special" in this respect. I'm<br />proud of it.<br /><br />I have seen, and can point to, lots of projects that go "We need to<br />break that use case in order to make progress" or "you relied on<br />undocumented behavior, it sucks to be you" or "there's a better way to<br />do what you want to do, and you have to change to that new better<br />way", and I simply don't think that's acceptable outside of very early<br />alpha releases that have experimental users that know what they signed<br />up for. The kernel hasn't been in that situation for the last two<br />decades.<br /><br />We do API breakage _inside_ the kernel all the time. We will fix<br />internal problems by saying "you now need to do XYZ", but then it's<br />about internal kernel API's, and the people who do that then also<br />obviously have to fix up all the in-kernel users of that API. Nobody<br />can say "I now broke the API you used, and now _you_ need to fix it<br />up". Whoever broke something gets to fix it too.<br /><br />And we simply do not break user space.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
