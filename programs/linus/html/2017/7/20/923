    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/2/2/507">First message in thread</a></li><li><a href="/lkml/2017/7/20/788">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/20/899">Peter Zijlstra</a><ul><li class="origin"><a href="/lkml/2017/7/21/274">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/21/274">Peter Zijlstra</a><ul><li><a href="/lkml/2017/7/21/292">Joe Perches</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/7/20/923/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Jul 2017 16:24:32 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] lib/int_sqrt.c: Optimize square root function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 20, 2017 at 3:34 PM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt;  "Why does this matter, and what is the range it matters for?"<br />&gt;<br />&gt; I was looking to do some work on the idle estimator. Parts of that keep<br />&gt; online avg and variance for normal distributions. I wanted to bias the<br />&gt; avg downwards, the way to do that is to subtract a scaled stdev from it.<br />&gt; Computing the stdev from a variance requires the sqrt.<br />&gt;<br />&gt; In any case, I suppose the range of values would be in the order of<br />&gt; TICK_NSEC, so the variance would be a number of orders below that. So<br />&gt; we're looking at fairly small numbers &lt;1e5.<br /><br />Ok. So that already cuts down the problem space a lot.<br /><br />And yes, the current code is very suboptimal for exactly the small number case.<br /><br />It's also typiocally the case that right-shifting is more expensive<br />than left-shifting, so the fact that we left-shift twice in that loop<br />for all the big values is extra expensive.<br /><br />So I would actually suggest a different approach:<br /><br /> - start with a small 'm'<br /><br /> - and grow it up.<br /><br />The "small m" means that there is a small constant, which is good.<br /><br />And growing it up is a single trivial left shift by two, which can<br />also be done just two adds or as a single lea, so it works fine even<br />on architectures with slow shifters etc.<br /><br />So mayube something like the attached?<br /><br />NOTE NOTE NOTE! This may be pure garbage. It's untested. But the code<br />generation looks ok even if gcc is being way too clever and turns that<br />first loop into a counted loop instead. Whatever, maybe it's the right<br />thing to do.<br /><br />But note that I might have broken the sqrt for some case, so you need<br />to double-check my logic there. The *intention* is that it's the exact<br />same thing as it used to do, just initializing 'm' differently.<br /><br />                 Linus<br /> lib/int_sqrt.c | 18 +++++++++++++-----<br /> 1 file changed, 13 insertions(+), 5 deletions(-)<br /><br />diff --git a/lib/int_sqrt.c b/lib/int_sqrt.c<br />index 1ef4cc344977..da3b3dabad8e 100644<br />--- a/lib/int_sqrt.c<br />+++ b/lib/int_sqrt.c<br />&#64;&#64; -16,14 +16,22 &#64;&#64;<br />  */<br /> unsigned long int_sqrt(unsigned long x)<br /> {<br />-	unsigned long b, m, y = 0;<br />+	unsigned long m, y;<br /> <br /> 	if (x &lt;= 1)<br /> 		return x;<br /> <br />-	m = 1UL &lt;&lt; (BITS_PER_LONG - 2);<br />-	while (m != 0) {<br />-		b = y + m;<br />+	m = 64;<br />+	do {<br />+		unsigned long new_m = m &lt;&lt; 2;<br />+		if (!new_m)<br />+			break;<br />+		m = new_m;<br />+	} while (m &lt; x);<br />+<br />+	y = 0;<br />+	do {<br />+		unsigned long b = y + m;<br /> 		y &gt;&gt;= 1;<br /> <br /> 		if (x &gt;= b) {<br />&#64;&#64; -31,7 +39,7 &#64;&#64; unsigned long int_sqrt(unsigned long x)<br /> 			y += m;<br /> 		}<br /> 		m &gt;&gt;= 2;<br />-	}<br />+	} while (m);<br /> <br /> 	return y;<br /> }</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
