    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2015/2/2/507">First message in thread</a></li><li><a href="/lkml/2015/2/2/575">Linus Torvalds</a><ul><li><a href="/lkml/2015/2/2/856">Davidlohr Bueso</a><ul><li><a href="/lkml/2015/2/2/862">Davidlohr Bueso</a></li><li><a href="/lkml/2015/2/3/407">Anshul Garg</a></li></ul></li><li><a href="/lkml/2017/7/20/449">Peter Zijlstra</a><ul><li><a href="/lkml/2017/7/20/471">Joe Perches</a><ul><li><a href="/lkml/2017/7/20/598">Peter Zijlstra</a></li></ul></li><li><a href="/lkml/2017/7/20/661">Peter Zijlstra</a></li><li class="origin"><a href="/lkml/2017/7/20/899">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/20/899">Peter Zijlstra</a><ul><li><a href="/lkml/2017/7/20/923">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Jul 2017 11:31:36 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] lib/int_sqrt.c: Optimize square root function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">How did this two-year old thread get resurrected?<br /><br />Anyway, it got resurrected without even answering one core question:<br /><br />On Thu, Jul 20, 2017 at 4:24 AM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt; On Mon, Feb 02, 2015 at 11:13:44AM -0800, Linus Torvalds wrote:<br />&gt;&gt;&gt;&gt; On Mon, Feb 2, 2015 at 11:00 AM, Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;&gt; &gt;<br />&gt;&gt; &gt; (I'm also not entirely sure what uses int_sqrt() that ends up being so<br />&gt;&gt; &gt; performance-critical, so it would be good to document that too, since<br />&gt;&gt; &gt; that probably also matters for the "what's the normal argument range"<br />&gt;&gt; &gt; question..)<br /><br />This is still the case. Which of the (very few) users really _care_?<br />And what are the normal values for that?<br /><br />For example, the 802.11 minstrel code does a "MINSTREL_TRUNC()" on a<br />"unsigned int" value that is in millions. It's not even "unsigned<br />long", so we know it's not many thousands of millions, and<br />MINSTREL_TRUNC shifts it down by 12 bits.<br /><br />So we know we have at most a 20-bit argument.<br /><br />The one case that uses actual unsigned long seems to be<br />"slow_is_prime_number()", and honestly, the sqrt() is the *least* of<br />our problems there.<br /><br />There's a few drivers and filesystems that use it. I do not believe<br />performance matters in those cases. Even if you do a "int_sqrt()" per<br />nertwork packet on some high-performance network (and none of them<br />look anything like that).<br /><br />And there's a couple of VM users. They don't look particularly critical either.<br /><br />So why do you care? Because honestly, calling int_sqrt() once in a<br />blue moon with caches cold and no branch prediction information tends<br />to have very different performance characteristics from calling it in<br />a loop with very predictable input.<br /><br />So I think your "benchmark" is just garbage, in that it's testing<br />something entirely different than the actual load.<br /><br />Also, since this is a generic library routine, no way can we depend on<br />fls being fast.<br /><br />But we could certainly improve on the initial value a lot. It's just<br />that we should probably strive to improve on it without adding extra<br />branch misprediction or I$ misses - both things that your benchmark<br />isn't actually testing at all, since it does the exact opposite of<br />that by basically preloading both.<br /><br />And the *most* important question is that first one:<br /><br /> "Why does this matter, and what is the range it matters for?"<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
