    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/7/18/106">First message in thread</a></li><li><a href="/lkml/2017/7/20/6">Dave Airlie</a><ul><li><a href="/lkml/2017/7/20/13">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2017/7/21/7">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/21/7">Dave Airlie</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 19 Jul 2017 21:44:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] efifb: allow user to disable write combined mapping.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 19, 2017 at 9:28 PM, Andy Lutomirski &lt;luto&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; It shouldn't be that hard to hack up efifb to allocate some actual RAM<br />&gt; as "framebuffer", unmap it from the direct map, and ioremap_wc() it as<br />&gt; usual.  Then you could see if PCIe is important for it.<br /><br />The thing is, the "actual RAM" case is unlikely to show this issue.<br /><br />RAM is special, even when you try to mark it WC or whatever. Yes, it<br />might be slowed down by lack of caching, but the uncore still *knows*<br />it is RAM. The accesses go to the memory controller, not the PCI side.<br /><br />&gt; WC streaming writes over PCIe end up doing 64 byte writes, right?<br />&gt; Maybe the Matrox chip is just extremely slow handling 64b writes.<br /><br />.. or maybe there is some unholy "management logic" thing that catches<br />those writes, because this is server hardware, and server vendors<br />invariably add "value add" (read; shit) to their hardware to justify<br />the high price.<br /><br />Like the Intel "management console" that was such a "security feature".<br /><br />I think one of the points of those magic graphics cards is that you<br />can export the frame buffer over the management network, so that you<br />can still run the graphical Windows GUI management stuff. Because you<br />wouldn't want to just ssh into it and run command line stuff.<br /><br />So I wouldn't be surprised at all if the thing has a special back<br />channel to the network chip with a queue of changes going over<br />ethernet or something, and then when you stream things at high speeds<br />to the GPU DRAM, you fill up the management bandwidth.<br /><br />If it was actual framebuffer DRAM, I would expect it to be *happy*<br />with streaming 64-bit writes. But some special "management interface<br />ASIC" that tries to keep track of GPU framebuffer "damage" might be<br />something else altogether.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
