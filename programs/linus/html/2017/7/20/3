    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2017/7/19/1425">First message in thread</a></li><li><a href="/lkml/2017/7/19/1425">kernel test robot</a><ul><li><a href="/lkml/2017/7/20/2">Daniel Micay</a></li><li class="origin"><a href="/lkml/2017/7/20/20">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/20/20">Daniel Micay</a></li><li><a href="/lkml/2017/7/20/577">Masami Hiramatsu</a></li><li><a href="/lkml/2017/7/20/679">Masami Hiramatsu</a><ul><li><a href="/lkml/2017/7/20/791">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/20/891">Masami Hiramatsu</a></li><li><a href="/lkml/2017/7/20/1000">Masami Hiramatsu</a></li></ul></li></ul></li><li><a href="/lkml/2017/7/20/964">Ye Xiaolong</a><ul><li><a href="/lkml/2017/7/21/18">Kees Cook</a></li><li><a href="/lkml/2017/7/21/142">Andy Shevchenko</a><ul><li><a href="/lkml/2017/7/21/186">Petr Mladek</a></li></ul></li></ul></li><li><a href="/lkml/2017/7/25/1337">Kees Cook</a><ul><li><a href="/lkml/2017/7/25/1353">Linus Torvalds</a><ul><li><a href="/lkml/2017/7/25/1378">Kees Cook</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2017/7/20/3/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 19 Jul 2017 21:04:25 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [lkp-robot] [include/linux/string.h] 6974f0c455: kernel_BUG_at_lib/string.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Hmm. I wonder why the kernel test robot ends up having that annoying<br />line doubling for the dmesg.<br /><br />On Wed, Jul 19, 2017 at 6:42 PM, kernel test robot<br />&lt;xiaolong.ye&#64;intel.com&gt; wrote:<br />&gt;<br />&gt; FYI, we noticed the following commit:<br />&gt;<br />&gt; commit: 6974f0c4555e285ab217cee58b6e874f776ff409 ("include/linux/string.h: add the option of fortified string.h functions")<br />&gt;<br />&gt; caused below changes (please refer to attached dmesg/kmsg for entire log/backtrace):<br /><br />It does strike me that the fortify_panic() code once again makes life<br />unnecessarily hard for everybody by using "BUG()"<br /><br />What the hell is wrong with people? I feel; like I have to say this<br />multiple times for every single merge window, and sometimes in<br />between.<br /><br />BUG() and BUG_ON() are not acceptable debugging things. They kill the<br />machine. They make for bad debugging.<br /><br />&gt; [    8.134860] kernel BUG at lib/string.c:985!<br /><br />This is basically an entirely useless piece of completely<br />information-less garbage.<br /><br />It would have been much nicer if all the fortify_panic() calls had<br />instead used WARN_ONCE() with helpful pointers to what is going on.<br /><br />As it is, the full dmesg does show that<br /><br />    detected buffer overflow in memcpy<br /><br />but since it was printed out separately, if comes before the "-- cut<br />here --" part and didn't get reported in the summary.<br /><br />&gt; [    8.134886]  arch_prepare_optimized_kprobe+0xd5/0x171<br /><br />It's apparently this:<br /><br />        /* Copy arch-dep-instance from template */<br />        memcpy(buf, &amp;optprobe_template_entry, TMPL_END_IDX);<br /><br />and looking at the code generation, the conditional in the fortify case is<br /><br /># ./include/linux/string.h:307:         if (p_size &lt; size || q_size &lt; size)<br />        cmpq    $1, %r13        #, _14<br />        jbe     .L109   #,<br /><br />but it's hard to tell whether that is p_size or q_size. One of them<br />must be ~0ul (or maybe both are 1) for it to have simplified to that<br />single conditional.<br /><br />So the fortify_string code has decided that only a single-byte (or<br />empty) memcpy is ok.<br /><br />And that, in turn, seems to be because we're copying from<br />optprobe_template_entry, which is declared as<br /><br />    extern __visible kprobe_opcode_t optprobe_template_entry;<br /><br />so the fortify code decides it's a single character.<br /><br />Does just changing all those things to be declared as arrays fix things?<br /><br />IOW, a patch something like this white-space damaged mess:<br /><br />    diff --git a/arch/x86/include/asm/kprobes.h b/arch/x86/include/asm/kprobes.h<br />    index 34b984c60790..6cf65437b5e5 100644<br />    --- a/arch/x86/include/asm/kprobes.h<br />    +++ b/arch/x86/include/asm/kprobes.h<br />    &#64;&#64; -52,10 +52,10 &#64;&#64; typedef u8 kprobe_opcode_t;<br />     #define flush_insn_slot(p) do { } while (0)<br /><br />     /* optinsn template addresses */<br />    -extern __visible kprobe_opcode_t optprobe_template_entry;<br />    -extern __visible kprobe_opcode_t optprobe_template_val;<br />    -extern __visible kprobe_opcode_t optprobe_template_call;<br />    -extern __visible kprobe_opcode_t optprobe_template_end;<br />    +extern __visible kprobe_opcode_t optprobe_template_entry[];<br />    +extern __visible kprobe_opcode_t optprobe_template_val[];<br />    +extern __visible kprobe_opcode_t optprobe_template_call[];<br />    +extern __visible kprobe_opcode_t optprobe_template_end[];<br />     #define MAX_OPTIMIZED_LENGTH (MAX_INSN_SIZE + RELATIVE_ADDR_SIZE)<br />     #define MAX_OPTINSN_SIZE                           \<br />        (((unsigned long)&amp;optprobe_template_end -       \<br />Hmm?<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
