    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/8/28/17">First message in thread</a></li><li><a href="/lkml/1998/8/28/17">Claude Gamache</a><ul><li class="origin"><a href="/lkml/1998/8/30/34">(Linus Torvalds)</a><ul><li><a href="/lkml/1998/8/30/34">David Wragg</a></li><li><a href="/lkml/1998/9/1/102">Claude Gamache</a><ul><li><a href="/lkml/1998/9/1/135">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/1998/8/30/35">David Wragg</a><ul><li><a href="/lkml/1998/8/31/138">Claude Gamache</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.0.x SMP performances compared to 2.1.x</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">28 Aug 1998 18:34:24 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;tliujeksot.fsf&#64;pcq05.cae.ca&gt;,<br />Claude Gamache  &lt;cgamache&#64;cae.ca&gt; wrote:<br />&gt;<br />&gt;Our question is about performance of kernels 2.0.x compared to 2.1.x<br />&gt;kernels.<br />&gt;<br />&gt;Our application is built with egcs 1.0.3 and is made up of 10<br />&gt;processes sharing information through shared memories (up to 10<br />&gt;maximum). In order to avoid racing situations among the processes we<br />&gt;use sigaction() and setitimer() to schedule each process execution,<br />&gt;and some of the processes have a priority of +19. So when a process<br />&gt;has finished its computation it gently waits in the pause() function,<br />&gt;requiring almost no CPU time at all. The computations are arranged in<br />&gt;a pipeline going from one process to the next. When one process does<br />&gt;not have any new data, it simply goes directly to the pause() function<br />&gt;in order to be nice to the other processes.<br /><br />You should really make sure it does a "sched_yield()" instead of<br />pause(). <br /><br />Doing a pause() will force a re-schedule, but there is no guarantee that<br />it will actually schedule anything else: the kernel may well decide that<br />the pausing process is still a good process to use.<br /><br />If using the proper sched_yield() doesn't fix it for you, I'd really<br />need to see the binary or something in order to tell you what's wrong.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
