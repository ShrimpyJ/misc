    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/8/14/66">First message in thread</a></li><li><a href="/lkml/1998/8/18/126">(Matthias Urlichs)</a><ul><li><a href="/lkml/1998/8/18/130">(Linus Torvalds)</a><ul><li><a href="/lkml/1998/8/19/84">"David S. Miller"</a><ul><li><a href="/lkml/1998/8/19/103">Linus Torvalds</a><ul><li><a href="/lkml/1998/8/19/120">(Alan Cox)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1998/8/18/137">"Richard B. Johnson"</a><ul><li><a href="/lkml/1998/8/19/46">(Alan Cox)</a><ul><li><a href="/lkml/1998/8/19/79">"Richard B. Johnson"</a><ul><li><a href="/lkml/1998/8/19/77">(Alan Cox)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1998/8/18/138">Andi Kleen</a><ul><li class="origin"><a href="/lkml/1998/8/19/5">Linus Torvalds</a><ul><li><a href="/lkml/1998/8/19/5">Andi Kleen</a><ul><li><a href="/lkml/1998/8/19/10">Linus Torvalds</a></li><li><a href="/lkml/1998/8/19/50">(Alan Cox)</a></li></ul></li><li><a href="/lkml/1998/8/19/89">"David S. Miller"</a></li></ul></li><li><a href="/lkml/1998/8/19/85">"David S. Miller"</a><ul><li><a href="/lkml/1998/8/19/101">(Alan Cox)</a><ul><li><a href="/lkml/1998/8/19/104">"David S. Miller"</a></li><li><a href="/lkml/1998/8/19/114">Andi Kleen</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Aug 1998 21:40:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Notebooks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 19 Aug 1998, Andi Kleen wrote:<br />&gt; <br />&gt; Me thinks it should have a better way to recover from out-of-memory errors<br />&gt; though than:<br />&gt; <br />&gt; (from tcp_send_fin)<br /><br />This wasn't actually the one that locked up for me - the one that had<br />problems was the much more normal "we need an skb for some data".<br /><br />&gt; 	/* Socket is locked, keep trying until memory is available. */<br />&gt; 	do {<br />&gt; 		skb = sock_wmalloc(sk,<br />&gt; 				(MAX_HEADER +<br />&gt; 				sk-&gt;prot-&gt;max_header),<br />&gt; 				1, GFP_KERNEL);<br />&gt; 	} while (skb == NULL);<br /><br />This is actually going to work reasonably well with the new code. <br />Certainly well enough for a small FIN-packet that really doesn't need much<br />memory and easily fits in one page. So I wouldn't worry too much, and I<br />certainly agree that there is no sense in even trying to clean it up for<br />2.2. <br /><br />The mm layer was already pretty robust when it came to singe-page<br />allocations, and as of 2.1.116 is should be robust for everything else<br />too, within reason. <br /><br />What really worries me is the slab stuff. I applied the diffs quite some<br />time ago when David had integrated the "slabification" of the networking<br />layer, but only today when I was chasing down this bug did I notice what<br />really bad things it does. Not only does it use bigger page-orders than<br />necessary, but the networking slabification in particular resulted in the<br />fact that when you allocate a skb you now do _two_ allocations. <br /><br />It used to be that we did one variable-length allocation that contained<br />both the skb head and the actual data. But the slab code cannot handle<br />variable-length allocations, so when somebody slabified it, they changed<br />it to allocate the data separately. As such, the thing just slowed down,<br />even though the whole intent of the slabs was to speed things up. <br /><br />I really don't see the point there. It's slower, more complex, and uses<br />more memory. Somebody please tell me why I shouldn't just get rid of it<br />and revert to the old kmalloc(), which we know is stable and has none of<br />these misfeatures? <br /><br />Davem? Can you fill me in on why that was done in the first place? <br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
