    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/8/26/118">First message in thread</a></li><li><a href="/lkml/1998/8/27/14">(Alan Cox)</a><ul><li><a href="/lkml/1998/8/27/36">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 26 Aug 1998 16:18:26 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.1.118 SMP problem</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 26 Aug 1998, Linus Torvalds wrote:<br />&gt; <br />&gt; What lock_sock() should really do is<br />&gt; <br />&gt; 	atomic_inc(&amp;sk-&gt;sock_readers);<br />&gt; 	synchronize_bh();<br />&gt; <br />&gt; instead of getting the main interrupt lock. The end result is the same,<br />&gt; but at least this way it's clearer what it tries to do (and I can remove<br />&gt; the "You don't want to know" comment ;) <br /><br />When I did this it became fairly obvious that the old code _was_ broken.<br /><br />I initially tried to be cheezy, and do the "I know this is not strictly<br />right, but it's the smaller change" version of the above, which didn't<br />actually make "sock_readers" be atomic, on the assumption that everybody<br />who tried to lock the socket were inside the kernel lock in a process<br />context. <br /><br />That very quickly showed itself to not be true, with various strange and<br />fun things happening to TCP. And THAT in turn means that the old code was<br />always buggy, because while the sock_readers increment was protected by<br />the single irq lock, the decrement wasn't protected by anything at all. <br /><br />It probably worked well enough because the "cli/sti" thing that protected<br />the increment also acted as a fairly strong barrier, and as such it was<br />very unlikely to have races later on during the decrement, but it<br />certainly looks like the above change to the locking logic is not only the<br />technically correct one, it also fixes a real bug.<br /><br />I'll be testing this out some more, but that could have been a cause of<br />some interesting problems on SMP..<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
