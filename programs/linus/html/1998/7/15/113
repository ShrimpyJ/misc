    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/7/11/24">First message in thread</a></li><li><a href="/lkml/1998/7/15/84">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/15/111">Gerard Roudier</a><ul><li class="origin"><a href="/lkml/1998/7/16/39">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/16/39">(Rogier Wolff)</a><ul><li><a href="/lkml/1998/7/16/63">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1998/7/19/74">Rik van Riel</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Jul 1998 12:59:37 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Strange interrupt behaviour</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 15 Jul 1998, Gerard Roudier wrote:<br />&gt; <br />&gt; If you aren't convinced at this point, then you are probably unconvincible<br />&gt; at the moment.<br /><br />Feel free to try this, which is what I currently have in the i386<br />process.c (you need to change the header files to reflect this change<br />too). <br /><br />This essentially keeps a few task-structs around for low memory<br />situations, and should work very well in a "steady-state" situation where<br />usually processes die at roughly the same rate as they get created. I<br />suspect it makes the problem go away at a very low cost, but I haven't<br />tested it on a low-lemory machine (or a big-memory machine either, for<br />that matter - for all I know it won't even boot). <br /><br />This is just cut-and-pasted for you to see the basic approach. It<br />essentially acts as a 8-buffer overflow/underflow system (or at least ment<br />to act that way modulo any bugs that I have introduced). <br /><br />		Linus<br /><br />-----<br />/*<br /> * Allocation and freeing of basic task resources.<br /> *<br /> * NOTE! The task struct and the stack go together<br /> *<br /> * The task structure is a two-page thing, and as such<br /> * not reliable to allocate using the basic page alloc<br /> * functions. We have a small cache of structures for<br /> * when the allocations fail..<br /> *<br /> * This extra buffer essentially acts to make for less<br /> * "jitter" in the allocations..<br /> */<br />#define EXTRA_TASK_STRUCT       16<br />static struct task_struct * task_struct_stack[EXTRA_TASK_STRUCT];<br />static int task_struct_stack_ptr = -1;<br /><br />struct task_struct * alloc_task_struct(void)<br />{<br />        int index;<br />        struct task_struct *ret;<br /><br />        index = task_struct_stack_ptr;<br />        if (index &gt;= EXTRA_TASK_STRUCT/2)<br />                goto use_cache;<br />        ret = (struct task_struct *) __get_free_pages(GFP_KERNEL,1);<br />        if (!ret) {<br />                index = task_struct_stack_ptr;<br />                if (index &gt;= 0) {<br />use_cache:<br />                        ret = task_struct_stack[index];<br />                        task_struct_stack_ptr = index-1;<br />                }<br />        }<br />        return ret;<br />}<br /><br />void free_task_struct(struct task_struct *p)<br />{<br />        int index = task_struct_stack_ptr+1;<br /><br />        if (index &lt; EXTRA_TASK_STRUCT) {<br />                task_struct_stack[index] = p;<br />                task_struct_stack_ptr = index;<br />        } else<br />                free_pages((unsigned long) p, 1);<br />}<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
