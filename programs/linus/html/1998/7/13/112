    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/7/11/24">First message in thread</a></li><li><a href="/lkml/1998/7/12/8">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/12/12">Rik van Riel</a><ul><li><a href="/lkml/1998/7/12/48">(Alan Cox)</a><ul><li><a href="/lkml/1998/7/12/52">Andi Kleen</a><ul><li><a href="/lkml/1998/7/12/53">Linus Torvalds</a></li><li><a href="/lkml/1998/7/12/59">(Kevin Buhr)</a></li></ul></li><li><a href="/lkml/1998/7/12/122">Russell Leighton</a></li><li><a href="/lkml/1998/7/13/6">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/13/17">Trevor Johnson</a></li><li><a href="/lkml/1998/7/13/23">Meelis Roos</a></li><li><a href="/lkml/1998/7/13/79">Bitburn Access Admin Dept</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1998/7/12/13">Andi Kleen</a></li><li><a href="/lkml/1998/7/12/58">Gerard Roudier</a><ul><li><a href="/lkml/1998/7/13/44"> ralf&#64;uni-kobl ...</a><ul><li><a href="/lkml/1998/7/13/76">Linus Torvalds</a></li><li><a href="/lkml/1998/7/13/110">Gerard Roudier</a></li></ul></li><li class="origin"><a href="/lkml/1998/7/14/6">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/14/6">Gerard Roudier</a><ul><li><a href="/lkml/1998/7/14/8">"Michael O'Reilly"</a></li><li><a href="/lkml/1998/7/14/26">(Alan Cox)</a></li><li><a href="/lkml/1998/7/14/75">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Jul 1998 13:32:07 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Strange interrupt behaviour</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 12 Jul 1998, Gerard Roudier wrote:<br />&gt; &gt; <br />&gt; &gt; However, I'd prefer to still try out some other ways of handling this. For<br />&gt; &gt; example, "__get_free_pages()" currently only re-tries once. It shouldn't<br />&gt; &gt; be hard to make it re-try a few more times, and it might well be enough to<br />&gt; &gt; make the problem go away.<br />&gt; <br />&gt; This has been proven to be broken, at least with the current VM/MM stuff.<br />&gt; Trying hard to get 2 contiguous pages leads very often to throw away more <br />&gt; that half the available cached objects, regardless the actual memory size<br />&gt; being used. <br /><br />Note that we actually _do_ have code that tries to keeps memory free<br />enough to allocate dual pages - that's what the kswapd deamon is there<br />for.<br /><br />One of the problems is that the kswapd deamon is completely asynchronous,<br />which means that yes, it will free up pages in the background, but that<br />doesn't help if at the moment when you wanted two pages they weren't<br />there: __get_free_pages() at no point tries to wait for kswapd to do its<br />thing. So there is memory available, it's just right now busy being<br />swapped out.. <br /><br />This is why fork() normally works, but then sometimes when the system is<br />busy doing a lot of things the free memory pool has been temporarily<br />depleted because kswapd hasn't had time to react to things yet, and you<br />get a fork() failure. <br /><br />And this is why I think that there should be some fairly simple approach<br />to fixing it.. It might be as simple as a "wait for kswapd"  thing after<br />we have failed to allocate something. <br /><br />There is a second problem, which is that we often don't select the right<br />pool of pages to throw out. There are obvious problems on low-memory<br />machines that seem to get fragmented by inodes and dentries. The mm code<br />has code to dispose of the dentry cache when it's low on memory, but that<br />doesn't seem to be triggered as well as it should be (and I suspect that<br />one of the reasons is the code that looks like<br /><br />        if (((buffermem &gt;&gt; PAGE_SHIFT) * 100 &gt; buffer_mem.borrow_percent * num_physpages)<br />                   || (page_cache_size * 100 &gt; page_cache.borrow_percent * num_physpages))<br />                state = 0;<br /><br />which will "reset" the swap-out state to try to get rid of the page cache<br />and the buffer cache, but it will also mean that the code that tries to<br />shrink the dcache won't be reached very easily.. The above code in turn<br />was a trial to try to get the swapper to be more aggressive in throwing<br />out page cache and buffer pages, and it may be that it backfired in other<br />ways.. <br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
