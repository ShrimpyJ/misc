    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/7/20/84">First message in thread</a></li><li><a href="/lkml/1998/7/20/84">Robert Wilhelm</a><ul><li><a href="/lkml/1998/7/21/4">Richard Henderson</a><ul><li class="origin"><a href="">(Linus Torvalds)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PCI vremap on ALPHA</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">21 Jul 1998 06:47:54 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;19980720232206.A11011&#64;dot.cygnus.com&gt;,<br />Richard Henderson  &lt;rth&#64;dot.cygnus.com&gt; wrote:<br />&gt;On Mon, Jul 20, 1998 at 05:11:14PM +0200, Robert Wilhelm wrote:<br />&gt;&gt; Does mmapping memory on PCI cards work on ALPHA?<br />&gt;<br />&gt;Yes.  But you don't use readl/writel with ioremaped memory,<br />&gt;you treat it as plain memory.<br /><br />Wrong.  If the alpha port has that logic these days, it's broken.  On<br />many architectures you _cannot_ treat PCI memory as plain memory, not<br />before and not after a "ioremap()". <br /><br />Richard, what _should_ happen is that ioremap() is always required,<br />because on certain architectures you can't fit all of the PCI memory in<br />the memory map at the same time, so "ioremap()" is the way to tell the<br />kernel to please map it to a kernel mappable address.  Think of it as a<br />"swap in this region into the kernel IO address working set". <br /><br />Then you use readl/writel on that ioremapped address (see<br />Documentation/IO-mapping.txt for an example of this). <br /><br />In short, you have to use _both_ ioremap and readl/writel, because<br />otherwise it simply will not work on certain architectures. <br /><br />Now, on Alpha's we can actually fit all of the PCI memory mapping into<br />the kernel mapping without having to do any work, so on alpha's the<br />"ioremap()" is a no-op (or should be), possibly just adding a magic base<br />to the address we passed. So what you _should_ have is something like<br /><br />	/*<br />	 * ioremap doesn't need to do anything special<br />	 */<br />	void * ioremap(unsigned long io_addr)<br />	{<br />		return (void *) (MAGIC_PCI_MEM_BASE + io_addr);<br />	}<br /><br />and then "readl()/writel()" could be just normal reads. <br /><br />This is slightly complicated by the fact that a lot of old-time drivers<br />know that the special ISA memory map hole (from 640kB-1MB) is always<br />mapped, so they'll use "readl()" on that directly without having any<br />call to ioremap(). As such, you'd either have to fix all legacy drivers,<br />or your "readl()" needs to look something like<br /><br />	unsigned int readl(void * addr)<br />	{<br />		unsigned int result;<br /><br />		if ((unsigned long) addr &lt; (1&lt;&lt;20))<br />			addr += MAGIC_PCI_MEM_BASE;<br /><br />		result = (unsigned volatile int *) addr;<br />		asm volatile("mb");<br />		return result;<br />	}<br /><br />which is not pretty, but expecting all legacy drivers to do ioremap() is<br />currently fairly utopistic..<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
