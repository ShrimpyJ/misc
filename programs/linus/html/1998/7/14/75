    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/7/11/24">First message in thread</a></li><li><a href="/lkml/1998/7/13/112">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/14/6">Gerard Roudier</a><ul><li><a href="/lkml/1998/7/14/8">"Michael O'Reilly"</a></li><li><a href="/lkml/1998/7/14/26">(Alan Cox)</a></li><li class="origin"><a href="/lkml/1998/7/14/76">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/14/76">Linus Torvalds</a><ul><li><a href="/lkml/1998/7/14/95">Gerard Roudier</a></li></ul></li><li><a href="/lkml/1998/7/14/77">(Alan Cox)</a><ul><li><a href="/lkml/1998/7/14/81">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1998/7/14/129">MOLNAR Ingo</a><ul><li><a href="/lkml/1998/7/14/130">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1998/7/14/157">"David S. Miller"</a><ul><li><a href="/lkml/1998/7/15/82">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Jul 1998 11:13:53 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Strange interrupt behaviour</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 14 Jul 1998, Gerard Roudier wrote:<br />&gt; <br />&gt; A blind algorithm that would ensure that 1 dual page is available should <br />&gt; try to keep free half of the memory + 1 PAGE.<br /><br />Nope. It would be stupid to be blind, when it's so easy to not be blind. <br />See mm/page_alloc.c - free_memory_available(). <br /><br />I actually tried to force keeping large chunks available (128kB areas<br />instead of 8kB areas), and that certainly did not work due to<br />fragmentation. But keeping a 8kB area free even with random replacement is<br />fairly trivial (do the math, and you'll see that the likelyhood for not<br />finding two contiguous pages when you have 10% free memory is miniscule). <br /><br />Note that people always slam the buddy allocator, but they do it without<br />ever giving any alternative. David used to do this, and I think he finally<br />tried out some alternatives and now I haven't seen him complain about<br />buddy for some time - it's simply the best alternative there is to avoid<br />fragmentation (buddy together with directed swap-out would obviously be<br />better, but directed page-outs are hard). <br /><br />These days it's Alan who slams buddy, and I hereby charge him with the<br />holy goal of coming up with something better before he complains. Not just<br />theory, but implementation. <br /><br />&gt; We donnot need dual pages very often.<br /><br />Actually, we do. But we do not need them often enough that it would be a<br />problem for kswapd.<br /><br />The problem is not that we cannot keep up with the average rate, the<br />problem is that we currently don't even _try_ to keep up with peak<br />allocations because we don't ever synchronize with kswapd. Thus the<br />current problems at even very fleeting peek times. <br /><br />		Linus<br /><br />(*) For the math challenged: imagine that you have x pages, and y of those<br />pages are free. What is the likelihood of not finding a single contiguous<br />two-page area? <br /><br />This boils down to how to place the free pages. It's essentially:<br /><br />	x * (x-2) * (x-4) * (x-8) * ..		(y factors)<br />	-----------------------------<br />		x * x * x * ..			(y factors - ie x^y)<br /><br />and the rate at which point this likelihood shrinks is very fast indeed. <br /><br />For the case where we have 8MB of RAM (x = 2000) and 2% of that is free (y<br />= 40) it's still about 50% likely that you won't find a double page, but<br />at just 5% free pages it's less than half a percent and at 10% free memory<br />we're talking exponents of -10 or so...<br /><br />Now, the above is with the assumption that free page placement is<br />completely random physically. That's not true: the buddy allocator tries<br />to coalesce pages and tends to try to re-use the "scattered" pages first,<br />which works in our favour. But at the same time each 2-page allocation<br />will work to scatter the pages. Somebody would have to do a real<br />simulation to see which is the stronger influence, but I'd expect the two<br />forces to result in a net result that is not too far off the "simple" <br />answer. <br /><br />Note that yes, Gerard, with 512MB of RAM, even just 1% free means that we<br />essentially always have 8kB areas free. Even just having 32MB instead of<br />8MB has the 2% free pages case (which was fifty-fifty with 8MB) be 96%<br />likely to have contiguous pages..<br /><br />Also note that we don't actually have to say "it's very unlikely". The<br />above essentially means that even with random page-out, we can just<br />continue until we get a contiguous area - and the math tells us that we'll<br />essentially never have to page out for very long. <br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.altern.org/andrebalsa/doc/lkml-faq.html">http://www.altern.org/andrebalsa/doc/lkml-faq.html</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
