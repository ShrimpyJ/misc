    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/13/19">First message in thread</a></li><li><a href="/lkml/1998/9/20/82">Donald Becker</a><ul><li><a href="/lkml/1998/9/20/117">Gerard Roudier</a></li><li><a href="/lkml/1998/9/20/151">Doug Ledford</a><ul><li><a href="/lkml/1998/9/20/160">Gerard Roudier</a></li><li><a href="/lkml/1998/9/20/178">Richard Gooch</a><ul><li><a href="/lkml/1998/9/21/29">Doug Ledford</a><ul><li><a href="/lkml/1998/9/21/31">Richard Gooch</a></li></ul></li><li><a href="/lkml/1998/9/22/104">Gerard Roudier</a><ul><li><a href="/lkml/1998/9/21/158">Donald Becker</a></li><li><a href="/lkml/1998/9/22/16">Richard Gooch</a></li></ul></li></ul></li><li><a href="/lkml/1998/9/20/180">Andrea Arcangeli</a><ul><li><a href="/lkml/1998/9/21/25">Doug Ledford</a></li></ul></li><li class="origin"><a href="/lkml/1998/9/21/94">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/21/94">(Alan Cox)</a><ul><li><a href="/lkml/1998/9/22/17">Richard Gooch</a></li><li><a href="/lkml/1998/9/24/79">"Mark H. Wood"</a></li></ul></li><li><a href="/lkml/1998/9/21/115"> kuznet&#64;ms2 ...</a></li><li><a href="/lkml/1998/9/21/188">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/1998/9/21/209">Chris Wedgwood</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 20 Sep 1998 16:19:46 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Today Linus redesigns the networking driver interface (was Re: tulip driver in ...)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 20 Sep 1998, Doug Ledford wrote:<br />&gt; <br />&gt; I think this is the semantic problem.  The SA_INTERRUPT flag doesn't say<br />&gt; anything about the speed of your interrupt routine.  It flags whether or not<br />&gt; to run the various bottom halves at the end of your interrupt. <br /><br />Note that this is no longer true.<br /><br />I small historical background on the issue..<br /><br />SA_INTERRUPT _used_ to mean (a _long_ long time ago):<br /> - incomplete stack frame, with only the non-preserved registers saved on<br />   the frame. This meant, for example, that we couldn't handle signals etc<br />   from a fast interrupt handler, because the stack wasn't set up for<br />   signal handling. <br /> - no PIC masking, and the PIC ACK done after the interrupt handler. This<br />   was made possible by guaranteeing that interrupts would not be enabled<br />   during SA_INTERRUPT processing, so we didn't need to mask out the<br />   interrupt.<br /> - no bottom half handling (well, this was originally even before bottom<br />   halves existed)<br /><br />Essentially, the SA_INTERRUPT thing was meant to be a truly lightweight<br />interrupt handling system, where it took just a few cycles to get into the<br />real handler. It was most useful for serial interrupts that were extremely<br />timing-critical (they still are, but CPU speeds have made the overhead<br />less of an issue). <br /><br />These days, SA_INTERRUPT has none of the above meanings. For various<br />reasons, not the least of which is just my own sanity, the differences<br />between fast and "slow" interrupts have become less and less.<br /><br />First people wanted bottom half handling as a response to serial<br />interrupts, because it made a huge difference to PPP latency. That already<br />meant that some of the advantage of a bottom-half interrupt was no longer<br />there. Then, with the new SMP code, it just became clear that it made no<br />sense at all to have the difference, because the interrupt entry code<br />became fairly involved (I definitely didn't want to have two separate<br />copies). <br /><br />These days the _only_ difference that SA_INTERRUPT makes is that a handler<br />that has SA_INTERRUPT set will not enable local interrupts on the CPU it<br />is running. Or rather, the generic code won't enable the interrupts<br />automatically: the low-level drivers can still enable them if they want<br />to. <br /><br />That's a rather arbitrary difference, and not one worth maintaining, I<br />think. I should just remove that test.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
