    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/21/32">First message in thread</a></li><li><a href="/lkml/1998/9/21/32">Michael Elizabeth Chastain</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 20 Sep 1998 23:17:27 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PTRACE_POKEDATA on PROT_NONE hangs kernel</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 20 Sep 1998, Michael Elizabeth Chastain wrote:<br />&gt;<br />&gt; First of all, if anyone else out there knows about the recent<br />&gt; _PAGE_PROTNONE optimization, could you write to me please?<br />&gt; I need to talk to you, if only for background information.<br /><br />It's not an optimization. It's there to make things work. It essentially<br />has to be done that way due to the less than satisfactory intel page table<br />setup (there's no way to say "this page is present, but cannot be accessed<br />from user or kernel mode", we actuall yhave to turn off the present bit<br />and then use a separate bit (the _PAGE_PROTNONE bit) to keep track of the<br />fact that the page _is_ actually present.<br /><br />&gt; There are two pte tests in put_long:<br />&gt; <br />&gt; 	/* arch/i386/kernel/ptrace.c: put_long */<br />&gt; 	pgtable = pte_offset(pgmiddle, addr);<br />&gt; 	if (!pte_present(*pgtable)) {<br />&gt; 		handle_mm_fault(tsk, vma, addr, 1);<br />&gt; 		goto repeat;<br />&gt; 	}<br /><br />Right. The above pages it in if it isn't present. In this case, it does<br />nothing, because the page _is_ present (as far as the kernel is<br />concerned), it's just marked non-present as far as hardware is concerned<br />in order to get the right PROT_NONE permissions. <br /><br />&gt; 	page = pte_page(*pgtable);<br />&gt; 	if (!pte_write(*pgtable)) {<br />&gt; 		handle_mm_fault(tsk, vma, addr, 1);<br />&gt; 		goto repeat;<br />&gt; 	}<br /><br />Ahhah. Ok, this is the buggy one. The problem is that we _should_ do a<br />"handle_mm_fault()" if it isn't writable, but we have no current knowledge<br />of that as is..<br /><br />Ok, I have a simple fix, I think. <br /><br />Fix for the above, take two:<br /><br />-	if (!pte_write(*pgtable)) {<br />+	if (!pte_dirty(*pgtable)) {<br />		handle_mm_fault(tsk, vma, addr, 1);<br />		goto repeat;<br />	}<br /><br />The above should correctly do the proper mm fault handling whenever the<br />page hasn't been written to before. <br /><br />Does that finally fix it for you for all cases? <br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
