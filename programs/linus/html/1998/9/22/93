    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/22/69">First message in thread</a></li><li><a href="/lkml/1998/9/22/69">Michael Elizabeth Chastain</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 22 Sep 1998 09:33:53 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PTRACE_POKEDATA on PROT_NONE hangs kernel</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 22 Sep 1998, Michael Elizabeth Chastain wrote:<br />&gt; I figured another way to create a _PAGE_PROTNONE pte that is mapped to<br />&gt; a physical page and has real data in it:<br /><br />Yes, this is quite normal. People use PROT_NONE for persistent data stuff<br />etc, and it's very much meant to exist "underneath" the system - the page<br />is still there, it's just unreadable and unwritable.<br /><br />&gt; This program works on 2.1.122, but once again, I'm suspicious of the<br />&gt; code in mm/memory.c.  What happens if my program sleeps here and this<br />&gt; page gets swapped out?  Now I have a _PAGE_PROTNONE page that can change<br />&gt; between the "present" and "not present" states.<br /><br />If the page gets swapped out, everything still works correctly.<br /><br />&gt; The rule "a _PAGE_PROTNONE pte is always pte_present" looks inadequate<br />&gt; here.<br /><br />No, that rule is fine. It means, for example, that the swap-out logic will<br />consider it present, write it out, and then replace it with a swapped-out<br />entry. Then, when somebody touches the page, the swap-in mechanism will<br />page it in again, and get the protection from the vma list, and the<br />_PAGE_PROTNONE thing will become active again. <br /><br />The _only_ problem is when you use ptrace(), because that really goes past<br />both the normal hardware memory management, and the normal kernel mm<br />layer. It accesses the page directly, and that code has had bugs before,<br />exactly because it needs to do "dirty" things that cannot normally happen. <br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
