    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/13/19">First message in thread</a></li><li><a href="/lkml/1998/9/19/153">"David S. Miller"</a><ul><li><a href="/lkml/1998/9/20/13">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/1998/9/20/84">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/84"> kuznet&#64;ms2 ...</a></li></ul></li><li><a href="/lkml/1998/9/20/18">Donald Becker</a><ul><li><a href="/lkml/1998/9/20/21">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/25">Donald Becker</a></li><li><a href="/lkml/1998/9/20/59">(Alan Cox)</a></li><li><a href="/lkml/1998/9/20/121">"Mr. James W. Laferriere"</a></li></ul></li></ul></li><li><a href="/lkml/1998/9/20/44">Jes Sorensen</a></li><li><a href="/lkml/1998/9/20/47">MOLNAR Ingo</a></li><li><a href="/lkml/1998/9/20/102"> kuznet&#64;ms2 ...</a><ul><li><a href="/lkml/1998/9/20/113">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/125"> kuznet&#64;ms2 ...</a></li><li><a href="/lkml/1998/9/20/158">Gerard Roudier</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 19 Sep 1998 23:11:49 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Today Linus redesigns the networking driver interface (was Re: tulip driver in ...)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 19 Sep 1998, Linus Torvalds wrote:<br />&gt; <br />&gt; The reason we don't get timer interrupts is not spl-levels. I bet it's<br />&gt; just a fairly simple issue of CPU starvation. Fixing it may not be simple:<br />&gt; fairness never is. But let's not panic. <br /><br />Looking at net_bh(), it looks like that's the first suspect.<br /><br />The reason the machine dies when you feed it incoming packets faster than<br />it can handle is very simple: net_bh() essentially becomes an endless<br />loop. What do you expect if you loop forever inside a software interrupt<br />handler?<br /><br />The net_bh() code tries to be nice by looking at "jiffies", but by the<br />time you've spent more than a jiffy on endless incoming packets you've<br />spent way too much time and it's really much much too late.<br /><br />There's code to do something more akin to the right thing with<br />"CONFIG_CPU_IS_SLOW". But even that seems to try to be overly clever. It<br />should be fairly easy to simply limit the maximum number of packets<br />processed in one net_bh() invocation (select a nice random number like 64<br />packets max per invocation and try different values to make sure you don't<br />start dropping until you really need to). And then you just drop the slop. <br />Unconditionally. Long before you've spent a jiffy on it. <br /><br />So the current loop look something like this: <br /><br />	while (!skb_queue_empty(&amp;backlog)) {<br />		skb = skb_dequeue(&amp;backlog);<br />		.. look at jiffies etc ..<br />	}<br /><br />and it should probably just be something like this instead:<br /><br />	int max;<br /><br />	/* get the list off the backlog, empty the backlog */<br />	spin_lock_irq(&amp;skb_queue_lock);<br />	skb = backlog.next;<br />	backlog.prev-&gt;next = NULL;<br />	backlog.next = &amp;backlog;<br />	backlog.prev = &amp;backlog;<br />	backlog.qlen = 0;<br />	spin_unlock_irq(&amp;skb_queue_lock);<br /><br />	/* Go through the list, max X packets */<br />	max = 64;<br />	while (skb) {<br />		struct sk_buff *now = skb;<br />		skb = skb-&gt;next;<br />		now-&gt;next = NULL;<br />		now-&gt;prev = NULL;<br />		now-&gt;list = NULL;<br /><br />		if (!--max)<br />			break;<br /><br />		handle_one_skb(now);<br />	}<br /><br />	/* Free any remaining slop that we didn't have time to take care of */<br />	while (skb) {<br />		struct sk_buff *now = skb;<br />		skb = skb-&gt;next;<br />		kfree_skb(now);<br />	}<br /><br />which, btw, only gets the skb spinlock once instead of once per packet etc<br />etc. <br /><br />The above should essentially guarantee that we spend as little time as<br />possible on handling too deep queues. If that's not enough, then we need<br />to start to flow control the interrupts themselves.<br /><br />Has anybody tried the simple and obvious approach like the above?<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
