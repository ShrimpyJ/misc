    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/13/19">First message in thread</a></li><li><a href="/lkml/1998/9/20/13">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/15">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/84"> kuznet&#64;ms2 ...</a></li></ul></li><li><a href="/lkml/1998/9/20/18">Donald Becker</a><ul><li><a href="/lkml/1998/9/20/21">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/25">Donald Becker</a></li><li><a href="/lkml/1998/9/20/59">(Alan Cox)</a><ul><li><a href="/lkml/1998/9/20/108">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1998/9/20/121">"Mr. James W. Laferriere"</a><ul><li><a href="/lkml/1998/9/20/148">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1998/9/20/44">Jes Sorensen</a></li><li><a href="/lkml/1998/9/20/47">MOLNAR Ingo</a></li><li><a href="/lkml/1998/9/20/102"> kuznet&#64;ms2 ...</a><ul><li class="origin"><a href="/lkml/1998/9/20/125">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/125"> kuznet&#64;ms2 ...</a></li><li><a href="/lkml/1998/9/20/158">Gerard Roudier</a><ul><li><a href="/lkml/1998/9/21/10">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 20 Sep 1998 10:45:37 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Today Linus redesigns the networking driver interface (was Re: tulip driver in ...)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 20 Sep 1998 kuznet&#64;ms2.inr.ac.ru wrote:<br />&gt; <br />&gt; My statement is that exaclty this bad feature allows to get better<br />&gt; performance. We have to make as much things as possible on device<br />&gt; interrupt, it is proven fact for forwarding. It is almost proven<br />&gt; for UDP (though my model is still too poor to be considered seriously).<br />&gt; TCP would require too much of work, but it is not impossible.<br />&gt; Donald's objection on freezing does not play, because we have<br />&gt; hardware flowcontrol (missing in bsd).<br />&gt; <br />&gt; Clustered interrupt blocking is not drawback, but huge advantage.<br />&gt; F.e. with two 100Mbit cards blocking interrupts of second card,<br />&gt; while processing interrupt from the first card results in 30% average<br />&gt; packet processing reduction. The reason seems to be cache locality.<br /><br />Clustered interrupt blocking is just horrible, and not a portable thing to<br />depend on anyway.<br /><br />Note that Linux already has _exactly_ the right semantics for interrupt<br />handling:<br /> - when an interrupt handler is in process, that interrupt handler is<br />   single-threaded. All other interrupts can still happen.<br /><br />This means that in a perfect world we could just do all the network packet<br />handling inside the network device interrupt, and everybody would be<br />happy, because we'd still have good interrupt response times for<br />everything else - because we wouldn't be blocking anything else by running<br />inside the interrupt. We might still want to throttle the rate to make<br />sure we don't starve normal processing, but basically we should still be<br />ok. <br /><br />However, there are just too many broken machines out there that do not<br />support the above (obviously correct) semantics very well. A lot of<br />hardware has a notion of interrupt priorities, and a "higher-priority" <br />interrupt will block all lower-priority interrupts. As a result, even<br />though the Linux approach to interrupts is supposed to be simple and<br />clean, hardware considerations still mean that we do _not_ want to spend<br />much time inside the interrupt handler.<br /><br />This, btw, is not a PC hardware issue. We can use both the IO-APIC and the<br />older PIC essentially without having to care about the priorities by doing<br />a "mask+ack" operation at the beginning of the interrupt handling. But<br />there are other platforms where you cannot avoid the prioritization.<br /><br />And that is why we need to queue the thing, even though queueing does add<br />overhead, and allows us to get interrupts faster than we can process them. <br />I agree completely with you on that point, it's just that we're limited by<br />being portable. <br /><br />And btw, for people worrying about SA_INTERRUPT - I'll probably just make<br />it go away. It doesn't have any real redeeming features. <br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
