    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/9/13/19">First message in thread</a></li><li><a href="/lkml/1998/9/20/106">Linus Torvalds</a><ul><li><a href="/lkml/1998/9/20/122">(Alan Cox)</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 20 Sep 1998 11:48:00 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Today Linus redesigns the networking driver interface (was Re: tulip driver in ...)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 20 Sep 1998, Alan Cox wrote:<br />&gt; <br />&gt; Rephrase that a little - A lot of code wants to claim multiple spin locks<br />&gt; with the _minimal_ local IRQ safety neccessary to realise the requirement.<br /><br />That's fairly expensive. Usually it's really cheap to block the irq's (you<br />can do so essentially in software), but then unblocking the interrupt and<br />re-send pending ones can be really rather nasty.<br /><br />We can do it even on a "per-request_irq()" basis (as opposed to a<br />"per-irq-line" basis), but it gets hairier and hairier (it would really<br />have to be a "per-cpu-and-request_irq()" thing, and suddenly it isn't very<br />cheap at all). <br /><br />There's a _lot_ to be said for just being fast and simple. A normal irq<br />spinlock is exactly that. Yes, it blocks everything on that CPU, but<br />that's where minimizing the critical region comes in. <br /><br />And I'm not claiming that minimizing the critical region is simple. But it<br />can often be done with a good design (the current bottom half code is<br />certainly a good design in that respect). <br /><br />&gt; &gt;    Linux very obviously already supports the "disable_irq(irq)" notion,<br />&gt; &gt;    and it should work correctly these days now that we understand better<br />&gt; <br />&gt; What happens on a pending IRQ that is disabled. Are the semantics of<br />&gt; disable_irq() reliably one of 'leave pending' or 'drop' ?<br /><br />They are certainly meant to be the reliable "leave pending" kind (but for<br />obvious reasons just a single pending event, kind of like traditional unix<br />signals). <br /><br />That can be hard on certain hardware, but it is the nicest behaviour. <br />However, it _is_ fairly expensive (again, the disable itself is not the<br />problem, the enable is). Certainly an order or two more expensive than<br />just a simple spin-lock. <br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
