    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/11/13/95">First message in thread</a></li><li><a href="/lkml/1998/11/13/117">"David S. Miller"</a><ul><li><a href="/lkml/1998/11/13/140">Andi Kleen</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/1998/11/14/2">Andi Kleen</a><ul><li><a href="/lkml/1998/11/14/12">Linus Torvalds</a><ul><li><a href="/lkml/1998/11/14/106">Horst von Brand</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Nov 1998 12:33:18 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: global kernel lock</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 13 Nov 1998, Andi Kleen wrote:<br />&gt; <br />&gt; mm/memory.c:<br />&gt; <br />&gt; static int do_no_page ...<br />&gt; {<br />&gt;         if (!vma-&gt;vm_ops || !vma-&gt;vm_ops-&gt;nopage) {<br />&gt;                 unlock_kernel();<br />&gt;                 return do_anonymous_page(tsk, vma, page_table, write_access);<br />&gt;         }<br />&gt; <br />&gt; <br />&gt; <br />&gt; static inline int handle_pte_fault ...<br />&gt; {<br />&gt;         lock_kernel();<br />&gt;         entry = *pte;<br />&gt; <br />&gt;         if (!pte_present(entry)) {<br />&gt;                 if (pte_none(entry))<br />&gt;                         return do_no_page(tsk, vma, address, write_access, pte);<br />&gt; <br />&gt; The mm semaphore should serialize access to the pte already so the <br />&gt; lock_kernel should not be needed in this common case. Or do I miss something<br />&gt; here?<br /><br />Yes. You missed kswapd and synchronous processes trying to make more<br />memory available, walking and modifying page tables behind your back<br />unless you hold the kernel lock. <br /><br />That's why we can unlock early in the (very common) case of doing an new<br />anonymous page: nobody is going to _add_ entries to the page tables<br />without holding the mm semaphore, and the anonymous page case doesn't need<br />the kernel lock for anything else either.<br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
