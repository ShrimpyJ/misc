    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/11/27/45">First message in thread</a></li><li><a href="/lkml/1998/11/27/174">Kurt Garloff</a><ul><li><a href="/lkml/1998/11/27/186">Andrea Arcangeli</a><ul><li><a href="/lkml/1998/11/27/189">"Brandon S. Allbery KF8NH"</a></li><li class="origin"><a href="/lkml/1998/11/28/28">Linus Torvalds</a><ul><li><a href="/lkml/1998/11/28/28">Andrea Arcangeli</a><ul><li><a href="/lkml/1998/11/29/85">(Linus Torvalds)</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Nov 1998 23:38:04 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] entry.S asm improvement (removed some ugly jmp)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 28 Nov 1998, Andrea Arcangeli wrote:<br />&gt; <br />&gt; But switch_to()/__switch_to() (include/asm-i386/system.h) uses an impair<br />&gt; number of call/ret. Why? Am I missing something (maybe because it' s too<br />&gt; late ;).<br /><br />When you actually end up doing a context switch, the return predictor is<br />hosed anyway - there's no way it can know what is going on, as the stack<br />is getting switched from underneath it. <br /><br />However, the true reason is simply that I'm not consistent either. I've<br />certainly been known to write code that kills call/return predictors, and<br />I don't have anything fundamental against them. I only reacted to your<br />"obviously correct and faster" comment, when it really really isn't that<br />obvious at all.<br /><br />Branch prediction is a big deal for modern CPU's, where a misspredicted<br />branch on a PII easily takes 15+ cycles. Normal call-return sequences tend<br />to be very predictable indeed if the CPU has a return stack and nobody is<br />playing mind-games, and as such it usually pays to try to make it easy for<br />hardware. <br /><br />However, your patches have the potential to sometimes not needing a icache<br />entry for the return path, which is good. The point being that it is not<br />at all obvious which code is actually the faster one.<br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
