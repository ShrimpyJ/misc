    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1998/11/27/45">First message in thread</a></li><li><a href="/lkml/1998/11/28/9">Linus Torvalds</a><ul><li><a href="/lkml/1998/11/28/28">Andrea Arcangeli</a><ul><li class="origin"><a href="">(Linus Torvalds)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] entry.S asm improvement (removed some ugly jmp)</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">29 Nov 1998 19:05:19 GMT</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;Pine.LNX.3.96.981128145704.607B-100000&#64;dragon.bogus&gt;,<br />Andrea Arcangeli  &lt;andrea&#64;e-mind.com&gt; wrote:<br />&gt;On Fri, 27 Nov 1998, Linus Torvalds wrote:<br />&gt;<br />&gt;&gt;When you actually end up doing a context switch, the return predictor is<br />&gt;&gt;hosed anyway - there's no way it can know what is going on, as the stack<br />&gt;<br />&gt;I guess that also when we return in user mode (return_all) we lose the<br />&gt;return predictor...<br /><br />No, the return predictor is certainly able to work past a user/kernel<br />switch: it probably won't even notice. I doubt any x86 chip actually<br />predicts far calls/jumps - they take too much time doing other things<br />that the prediction is fairly useless. <br /><br />So as far as the predictor is concerned, a system call is either just a<br />no-op or just another call/return sequence. <br /><br />What flushes a return predictor is<br /> - context switches: in theory you could have process ID's for return<br />   prediction the same way most modern chips have them for TLB entries,<br />   but in practice it makes no sense at all, and the return predictor is<br />   just screwed.<br /><br />   Note that this doesn't have to be "kernel" context switches at all:<br />   it happens in user mode thread packages too, where the stack is<br />   switched from under the thread so that the call/returns are no longer<br />   nicely nested around the context switch. <br /><br /> - unpredictable call/return sequences. Sometimes people have "returns"<br />   that return not to the caller, but somewhere else (error cases,<br />   exceptions, etc). <br /><br />Your patch falls into the second category, where you made a call/return<br />sequence unpredictable by removing the call and doing the return push it by<br />hand. Another case that used to be common is when a call expects the<br />called function to return to different places depending on whether an<br />error happened or not, so people had code like this:<br /><br />	call function<br />	jmp ok<br />	jmp error<br />	jmp overflow<br /><br />and then the function did something like this:<br /><br />	if (error) {<br />		*return_value += 3;<br />		return;<br />	}<br /><br />I know this used to be fairly common for BIOS/OS kind of interfaces not<br />all that long ago. Other uses that screw up return prediction tends to<br />be stuff like<br /><br />	call printoutfn<br />	.asciiz "Hello world"<br />	hlt	/* "printoutfn" will return to after the string */<br /><br />which was used at least for certain game machines where it was an easy<br />way to set up the arguments (hide them directly after the call, and have<br />the function increment the return point to after the arguments). <br /><br />Few people seem to do stuff like this any more. And most modern CPU's<br />seem to have some kind of return predictor, usually 4 or 8 entries<br />(that's apparently enough to get 99% of all calls).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
