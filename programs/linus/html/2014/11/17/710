    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/11/14/656">First message in thread</a></li><li><a href="/lkml/2014/11/17/651">Thomas Gleixner</a><ul><li><a href="/lkml/2014/11/17/659">Thomas Gleixner</a><ul><li><a href="/lkml/2014/11/17/679">Jens Axboe</a></li><li class="origin"><a href="/lkml/2014/11/17/729">Linus Torvalds</a><ul><li><a href="/lkml/2014/11/17/729">Thomas Gleixner</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Nov 2014 15:59:03 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: frequent lockups in 3.18rc4</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 17, 2014 at 2:43 PM, Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; No, that won't work for synchronous calls:\<br /><br />Right you are.<br /><br />&gt; So a combo of both (Jens and yours) might do the trick. Patch below.<br /><br />Yeah, I guess that would work. The important part is that *if*<br />somebody really reuses the csd, we'd better have a release barrier<br />(which csd_unlock() does, although badly - but this probably isn't<br />that performance-critical) *before* we call the function, because<br />otherwise there's no real serialization for the reuse.<br /><br />Of course, most of these things are presumably always per-cpu data<br />structures, so the whole worry about "csd" being accessed from<br />different CPU's probably doesn't even exist, and this all works fine<br />as-is anyway, even in the presense of odd memory ordering issues.<br /><br />Judging from Jens' later email, it looks like we simply don't need<br />this code at all any more, though, and we could just revert the<br />commit.<br /><br />NOTE! I don't think this actually has anything to do with the actual<br />problem that Dave saw. I just reacted to that WARN_ON() when I was<br />looking at the code, and it made me go "that looks extremely<br />suspicious".<br /><br />Particularly on x86, with strong memory ordering, I don't think that<br />any random accesses to 'csd' after the call to 'csd-&gt;func()' could<br />actually matter. I just felt very nervous about the claim that<br />somebody can reuse the csd immediately, that smelled bad to me from a<br />*conceptual* standpoint, even if I suspect it works perfectly fine in<br />practice.<br /><br />Anyway, I've found *another* race condition, which (again) doesn't<br />actually seem to be an issue on x86.<br /><br />In particular, "csd_lock()" does things pretty well, in that it does a<br />smp_mb() after setting the lock bit, so certainly nothing afterwards<br />will leak out of that locked region.<br /><br />But look at csd_lock_wait(). It just does<br /><br />        while (csd-&gt;flags &amp; CSD_FLAG_LOCK)<br />                cpu_relax();<br /><br />and basically there's no memory barriers there. Now, on x86, this is a<br />non-issue, since all reads act as an acquire, but at least in *theory*<br />we have this completely unordered read going on. So any subsequent<br />memory oeprations (ie after the return from generic_exec_single()<br />could in theory see data from *before* the read.<br /><br />So that whole kernel/smp.c locking looks rather dubious. The smp_mb()<br />in csd_lock() is overkill (a "smp_store_release()" should be<br />sufficient), and I think that the read of csd-&gt;flags in csd_unlock()<br />should be a smp_load_acquire().<br /><br />Again, none of this has anything to do with Dave's problem. The memory<br />ordering issues really cannot be an issue on x86, I'm just saying that<br />there's code there that makes me a bit uncomfortable.<br /><br />                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
