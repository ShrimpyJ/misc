    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/11/10/574">First message in thread</a></li><li><a href="/lkml/2014/11/13/760">Linus Torvalds</a><ul><li><a href="/lkml/2014/11/13/858">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2014/11/13/800">Linus Torvalds</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Nov 2014 17:50:58 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/5] lib: lockless generic and arch independent page table (gpt) v2.</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 13, 2014 at 5:18 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; More importantly, nobody should ever care. Because the whole *point*<br />&gt; of the tree walker is that the user never sees any of this. This is<br />&gt; purely an implementation detail of the tree itself. Somebody who just<br />&gt; *walks* the tree only sees the final end result.<br />&gt;<br />&gt; And *that* is the "walk()" callback. Which gets the virtual address<br />&gt; and the length, exactly so that for a super-page you don't even really<br />&gt; see the difference between walking different levels (well, you do see<br />&gt; it, since the length will differ).<br />&gt;<br />&gt; Now, I didn't actually try to make that whole thing very transparent.<br /><br />Side note: I'm not entirely sure it *can* be made entirely transparent.<br /><br />Just as an example: if what you want to do is actually "access" the<br />data for some copying operation, then for a real CPU page table what<br />you want to do is to actually map the entry. And you definitely do not<br />want to map the entry one single page at a time - if you have a<br />top-level page directory entry, you'd want to map the whole page<br />directory entry, not the sub-pages of it. So mapping the thing is very<br />much level-dependent.<br /><br />Fine, "just add 'map()'/'unmap()' functions to the tree description,<br />the same way we have lookup/walk. Yes, that would be fairly easy, but<br />it only works for CPU page tables. if you want to copy from device<br />data, what you want is more of a physical address thing that you do<br />DMA on, not a "map/unmap" model.<br /><br />So I suspect *some* amount of per-tree knowledge is required. Or just<br />knowledge of what people actually want to do when walking the tree.<br /><br />So don't get me wrong - I'm making excuses for not really having a<br />fleshed-out interface, but I'm making them because I think the<br />interface will either have to be tree-specific, or because we need<br />higher-level interfaces for what we actually want to do while walking.<br />That then decides where these kinds of tree differences will be<br />handled: will they be handled by the caller knowing that certain trees<br />are used in certain ways, or will they be handled by the tree walking<br />abstraction being explicitly extended to do certain operations? Or<br />will it be a bit of both?<br /><br />See what I'm trying to say? There is no way to make the tree-walking<br />"truly generic" in the sense that you can do anything you want with<br />the results, because the *meaning* of the results will inevitably<br />depend a bit on what the trees are actually describing. Are they<br />describing local memory or remote memory?<br /><br />Jerome had a "convert 'struct tree_entry *' to 'struct page *'"<br />function, but that doesn't necessarily work in the generic case<br />either, and is questionable with super-pages anyway (although<br />generally it works fairly well by just saying that they get described<br />by the first page in the superpage). But for actual CPU page tables,<br />some of the pages in those page tables may not *have* a "struct page"<br />associated with them at all, because they are mappings of<br />memory-mapped devices in high memory. So again, in a _generic_ model<br />that you might want to start replacing some of the actual VM code<br />with, you simply cannot use 'struct page' as some kind of generic<br />entry. At some level, the only thing you have is the actual page table<br />entry pointer, and the value behind it.<br /><br />And it may well be ok to just say "the walker isn't generic in _that_<br />sense". A walker that can walk arbitrary page-table-tree-like<br />structures can still be useful just for the walking part, even if the<br />users might then always have to be aware of the final tree details. At<br />least they don't need to re-implement the basic iterator, they'll just<br />have to implement the "what do I do with the end result" for their<br />particular tree layout. So a walker can be generic at _just_<br />walking/iterating, but not necessarily at actually using the end<br />result.<br /><br />I hope I'm explaining that logic well enough..<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
