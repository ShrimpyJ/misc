    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/11/24/818">First message in thread</a></li><li><a href="/lkml/2014/11/24/818">Alexei Starovoitov</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 24 Nov 2014 16:00:55 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH/RFC 7/7] kernel: Force ACCESS_ONCE to work only on scalar types</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 24, 2014 at 2:58 PM, Alexei Starovoitov<br />&lt;alexei.starovoitov&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; I've changed gcc pr58145-1.c reproducer to use<br />&gt; __read_once_size() approach above<br /><br />I don't think you did.<br /><br />&gt; modified reproducer:<br />&gt; struct S { unsigned int data; };<br />&gt; void bar(int val)<br />&gt; {<br />&gt;   struct S _s = { .data = val };<br />&gt;   *(volatile struct S *) 0x880000UL = ACCESS_ONCE(&amp;_s);<br />&gt; }<br /><br />My approach never had "volatile struct S *". The only volatile<br />pointers were the actual byte/word/etc pointers, and those generated<br />temporary values that were then assigned to the final type through a<br />cast.<br /><br />Also, note that the kernel is compiled without strict aliasing, so the<br />casting to 'void *' and various smaller types is "safe" - even if the<br />C standard doesn't like it.<br /><br />With strict aliasing, you'd need to make the read_once() macro not<br />just pass in the size, there would have to be some kind of union of<br />the type, and that would effectively mean that you can't use an inline<br />function, you'd have to do it in a big macro (because the type would<br />be per-site).<br /><br />So with strict aliasing, you'd have to make it something like<br /><br />        #define ACCESS_ONCE(p) \<br />      ({ union { typeof(*p) __val; char __array[sizeof(*p)]} __u;<br />__read_once_size(p, __u.__array, sizeof(__u)); __u.__val; })<br /><br />Pretty? No. But then, the standard C aliasing rules are so broken that<br />"pretty" doesn't really come into play..<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
