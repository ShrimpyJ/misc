    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/11/24/302">First message in thread</a></li><li><a href="/lkml/2014/11/24/343">David Howells</a><ul><li><a href="/lkml/2014/11/24/537">Linus Torvalds</a></li><li><a href="/lkml/2014/11/24/562">Alexei Starovoitov</a><ul><li class="origin"><a href="/lkml/2014/11/24/618">Linus Torvalds</a><ul><li><a href="/lkml/2014/11/24/618">Christian Borntraeger</a><ul><li><a href="/lkml/2014/11/24/625">Linus Torvalds</a></li><li><a href="/lkml/2014/11/24/650">David Howells</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 24 Nov 2014 10:35:39 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH/RFC 7/7] kernel: Force ACCESS_ONCE to work only on scalar types</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 24, 2014 at 10:02 AM, Alexei Starovoitov<br />&lt;alexei.starovoitov&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; If the goal is to catch non-scalar users, the following is shorter:<br />&gt; #define ACCESS_ONCE(x) (((typeof(x))0) + *(volatile typeof(x) *)&amp;(x))<br /><br />Me likey. It probably works well in practice, although I think<br /><br /> - the "(typeof(x))0)" seems unnecessary and wrong. Why not just "0"?<br />The typeof is not just longer, but it is incorrect for pointer types<br />(you can add 0 to a pointer, but you cannot add two pointers together)<br /><br /> - it does mean that the resulting type ends up being upgraded to<br />"int", for the usual C type reasons.<br /><br />Note that the "upgraded to 'int'" is true with or without the<br />"(typeof(x))0". If you add two 'char' values, the addition is still<br />done in 'int'.<br /><br />Maybe you *meant* that typeof to fix the second problem, like so:<br /><br />  (typeof(x)) (0 + *(volatile typeof(x) *)&amp;(x))<br /><br />Hmm? That casts the result of the addition, not the zero.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
