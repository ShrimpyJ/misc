    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/10/19/94">First message in thread</a></li><li><a href="/lkml/2014/10/19/214">Linus Torvalds</a><ul><li><a href="/lkml/2014/10/19/217">Sasha Levin</a><ul><li class="origin"><a href="/lkml/2014/10/20/2">Linus Torvalds</a><ul><li><a href="/lkml/2014/10/20/2">Al Viro</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Oct 2014 17:23:04 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] kernel: use the gnu89 standard explicitly</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Oct 19, 2014 at 4:59 PM, Sasha Levin &lt;sasha.levin&#64;oracle.com&gt; wrote:<br />&gt;<br />&gt;&gt; AndrewP, mind explaing the other difference you mentioned (ie wrt<br />&gt;&gt; "extern inline")? I thought we had already long since ended up<br />&gt;&gt; following the gcc semantics (ie use "static inline" if we don't have<br />&gt;&gt; an external version somehwre), what exactly changed?<br />&gt;<br />&gt; (Stolen from gcc changelog:)<br />&gt;<br />&gt; gnu89: extern inline: Will not generate an out-of-line version, but<br />&gt;         might call one.<br />&gt; gnu99: extern inline: like GNU "inline", externally visible code is<br />&gt;         emitted.<br />&gt;<br />&gt; (So what happens is that with gnu99 you end up with multiple definitions<br />&gt; of the symbol since it was externed from multiple compilation units).<br /><br />Oh Christ. So this got broken yet again, even *after* they had<br />documented the old behavior?<br /><br />Originally, gcc documented that "extern inline" is a good replacement<br />for a macro. Then, that changed, and "static inline" became the<br />replacement for a macro, and "extern inline" was to mean that *if* it<br />gets inlined, that definition is used, but otherwise there's supposed<br />to be an external non-inlined copy somewhere else (so the inline<br />definition of the function is basically entirely ignored when not<br />inlining for one reason or another).<br /><br />So now we have a *third* semantic of "extern inline", and one that<br />seems to be entirely inappropriate to *ever* be used in a header file<br />due to duplicate symbol problems. What a mess.<br /><br />Maybe we should just specify "gnu89" to avoid these kinds of insane<br />semantic changes.<br /><br />                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
