    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/10/30/144">First message in thread</a></li><li><a href="/lkml/2014/10/30/771">Linus Torvalds</a><ul><li><a href="/lkml/2014/10/30/792">Andy Lutomirski</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2014/10/31/119">Christoph Hellwig</a><ul><li><a href="/lkml/2014/10/31/488">Andy Lutomirski</a><ul><li><a href="/lkml/2014/10/31/489">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2014/10/30/810">Eric Rannaud</a><ul><li><a href="/lkml/2014/10/30/815">Linus Torvalds</a><ul><li><a href="/lkml/2014/10/30/848">Eric Rannaud</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 30 Oct 2014 17:59:23 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] fs: allow open(dir, O_TMPFILE|..., 0) with mode 0</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 30, 2014 at 5:01 PM, Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt;<br />&gt; Uh, because it's glibc?<br /><br />Yeah. Bloated, over-engineered, and stupid.<br /><br />&gt; Or because it's trying not to screw up and on<br />&gt; some system where overrunning va_arg is terrible?<br /><br />No. On 99% of architectures the third argument is in a register<br />anyway, and traditionally it's not even va_arg, although glibc has<br />made it so (traditionally it's just pre-ANSI C with three arguments<br />and one of them might be missing - gcc has had hacks for avoiding<br />warnings for traditional C things like that: look at the whole<br />transparent union thing for another traditional "C without prototypes"<br />calling convention case).<br /><br />But even if you make it va_arg, I can't think of a single architecture<br />where that makes sense. Outside of assembly trampolines, you *always*<br />have enough stack space that you can just access a word under the<br />stack anyway.<br /><br />But yes, I could imagine some well-meaning - but not overly smart -<br />glibc developer deciding that doing the va_arg thing conditionally<br />would be a "feature". Despite making the code slower, bigger, and<br />buggier.<br /><br />I guess I'll fetch the git tree and see if they document this braindamage..<br /><br />[ time passes ]<br /><br />Ugh. It seems to predate even the imported history (going back all the<br />way to 1995 - I don't know if that was SVN or CVS and whether there is<br />some even older historical archives that were never imported).<br /><br />Anyway, since the beginning of time, the "stub/open.c" file is a True<br />Work of Art (TM)(also sarcasm), and has an old-style C declaration<br />(not ANSI) for __libc_open(), and uses a conditional va_arg() to get<br />the third parameter *despite* not even being a variadic function (not<br />varargs, not stdarg). So it's not even portable or correct *anyway*,<br />and it unnecessarily generates bad code and seems to have been<br />mindlessly copied into all the actual real non-stub implementations.<br />Most of them seem to have made their definitions match the declaration<br />in the process, so they then really do have the variadic part. Goodie,<br />I guess, except for this all being unnecessary crap and stupid.<br /><br />Oh well. What a cock-up.<br /><br />The code is insane in other ways too. The actual real Linux version of<br />__libc_open() ends up (for no good reason except to compete with<br />cat-ladies in the "crazy person of the year" award) using<br />"openat(AT_FDCWD)", just so you can make sure that the result doesn't<br />possibly work on old versions of the kernel even by mistake. I<br />certainly cannot possibly see any actual *advantage* to using<br />"openat()", but them I'm not a homeless cat-lady.  It also has some<br />magic "LIBC_CANCEL_ASYNC()/LIBC_CANCEL_RESET()" stuff around it, which<br />I'm sure is entirely sane.<br /><br />I can't take it any more. That code is crazy.<br /><br />                        Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
