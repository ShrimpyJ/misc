    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/10/17/336">First message in thread</a></li><li><a href="/lkml/2014/10/20/117">Thomas Gleixner</a><ul><li><a href="/lkml/2014/10/20/176">Catalin Marinas</a><ul><li class="origin"><a href="/lkml/2014/10/20/376">Linus Torvalds</a><ul><li><a href="/lkml/2014/10/20/376">Catalin Marinas</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 20 Oct 2014 08:32:00 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] futex: Ensure get_futex_key_refs() always implies a barrier</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 20, 2014 at 3:49 AM, Catalin Marinas<br />&lt;catalin.marinas&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; Since you mention symmetry, something like below makes the barriers more<br />&gt; explicit.<br /><br />Borken, for two reasons:<br /><br />&gt; diff --git a/kernel/futex.c b/kernel/futex.c<br />&gt; index f3a3a071283c..5b9d857d0816 100644<br />&gt; --- a/kernel/futex.c<br />&gt; +++ b/kernel/futex.c<br />&gt; &#64;&#64; -143,9 +143,7 &#64;&#64;<br />&gt;  static inline void futex_get_mm(union futex_key *key)<br />&gt;  {<br />&gt;         atomic_inc(&amp;key-&gt;private.mm-&gt;mm_count);<br />&gt; -       /*<br />&gt; -        * Ensure futex_get_mm() implies a full barrier such that<br />&gt; -        * get_futex_key() implies a full barrier. This is relied upon<br />&gt; -        * as full barrier (B), see the ordering comment above.<br />&gt; -        */<br />&gt; -       smp_mb__after_atomic();<br />&gt;  }<br /><br />So the thing is, this means that we can't take advantage of the fact<br />that "atomic_inc" is already an atomic. So this is just a performance<br />breakage. But:<br /><br />&gt;<br />&gt;  static inline int hb_waiters_pending(struct futex_hash_bucket *hb)<br />&gt;  {<br />&gt; +       /*<br />&gt; +        * Full barrier (B), see the ordering comment above.<br />&gt; +        */<br />&gt; +       smp_mb__before_atomic();<br />&gt;  #ifdef CONFIG_SMP<br />&gt;         return atomic_read(&amp;hb-&gt;waiters);<br /><br />This is just entirely broken.<br /><br />"atomic_read()" isn't really an "atomic op" at all. despite the name,<br />it's just a read that is basically ACCESS_ONCE.<br /><br />So smp_mb__before_atomic() doesn't work for atomic_read(), and the<br />code is nonsensical and doesn't work. It would need to be a full<br />memory barrier.<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
