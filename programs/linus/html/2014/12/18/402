    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/12/17/441">First message in thread</a></li><li><a href="/lkml/2014/12/18/197">tip-bot for Andy Lutomirski</a><ul><li><a href="/lkml/2014/12/18/351">"H. Peter Anvin"</a><ul><li><a href="/lkml/2014/12/18/394">Andy Lutomirski</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 18 Dec 2014 11:03:33 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [tip:x86/urgent] x86/tls: Don't validate lm in set_thread_area() after all</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 18, 2014 at 8:59 AM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; will leave .lm uninitialized.  This means that anything in the<br />&gt;&gt; kernel that reads user_desc.lm for 32-bit tasks is unreliable.<br />&gt;<br />&gt; No, it won't.  However, if you initialize this dynamically field by<br />&gt; field rather than as an initializer, then you are correct.<br /><br />Actually, even with a full initializer, unnamed parts of a structure<br />(so padding bytes between things, but for bitfields also unnamed<br />alignment fields etc) are basically "all bets are off". They are *not*<br />guaranteed to be initialized to zero.<br /><br />So if you have a structure like<br /><br />   struct {<br />       unsigned int a:5;<br />       unsigned int b;<br />   } x = { .a = 0, .b = 0 };<br /><br />afaik the compiler is not guaranteed to initialize the left-over bits<br />in the first word. Because they simply don't "exist" as far as the C<br />language is concerned.<br /><br />On the other hand, if you do<br /><br />   struct {<br />        unsigned int a:5, unused:27;<br />        unsigned int b;<br />   } x = { .a = 0, .b = 0 };<br /><br />then the 'unused' bits are guaranteed to be initialized to zero.<br /><br />(Static allocations in the BSS are obviously zeroed for other reasons,<br />so there are no "left-over" bits there to worry about,. So in practice<br />the above is only about dynamic initializers).<br /><br />                         Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
