    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/6/12/382">First message in thread</a></li><li><a href="/lkml/2014/7/15/349">"Paul E. McKenney"</a><ul><li><a href="/lkml/2014/7/15/353">Christoph Lameter</a><ul><li class="origin"><a href="/lkml/2014/7/15/411">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/15/411">Christoph Lameter</a><ul><li><a href="/lkml/2014/7/15/495">"Paul E. McKenney"</a></li></ul></li></ul></li><li><a href="/lkml/2014/7/15/489">"Paul E. McKenney"</a><ul><li><a href="/lkml/2014/7/16/377">Christoph Lameter</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Jul 2014 08:41:49 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC] percpu: add data dependency barrier in percpu accessors and operations</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Christoph, stop arguing. Trust me, Paul knows memory ordering. You<br />clearly do *not*.<br /><br />On Tue, Jul 15, 2014 at 8:06 AM, Christoph Lameter &lt;cl&#64;gentwo.org&gt; wrote:<br />&gt;<br />&gt; The cachelines will be evicted from the other processors at<br />&gt; initialization. alloc_percpu *itself* zeroes all data on each percpu areas<br />&gt; before returning the offset to the percpu data structure. See<br />&gt; pcpu_populate_chunk(). At that point *all* other processors have those<br />&gt; cachelines no longer in their caches. The initialization done with values<br />&gt; specific to the subsystem is not that important.<br /><br />In practice, with enough instructions in the CPU queues and<br />sufficiently small write buffers etc (or with a sufficiently ordered<br />CPU core, like x86), that may often be true. But there is absolutely<br />zero reason to think it's always true.<br /><br />On the writer side, if there isn't a write barrier, the actual writes<br />can be visible to other CPU's in arbitrary order. *Including* the<br />visibility of the offset before the zeroing. Really.<br /><br />On the reader side, for all sane CPU's, reading the offset and then<br />reading data from that offset is an implicit barrier. But "all sane"<br />is not "all". On alpha, reading the offset does NOT guarantee that you<br />see later data when you use that offset to read data. In theory, it<br />could be due to value prediction, but in practice it's actually due to<br />segmented caches, so that one part of the cache has seen data that<br />arrived "later" (ie written _after_ the wmb on the writing CPU)<br />_before_ it sees data that arrived earlier. That's what the<br />"smp_read_barrier_depends()" protects against.<br /><br />&gt; The return value of the function is only available after<br />&gt; pcpu_populate_chunk() returns.<br /><br />Really, "before" and "after" have ABSOLUTELY NO MEANING unless you<br />have a barrier. And you're arguing against those barriers. So you<br />cannot use "before" as an argument, since in your world, no such thing<br />even exists!<br /><br />There are other arguments, but they basically boil down to "no other<br />CPU ever accesses the per-cpu data of *this* CPU" (wrong) or "the<br />users will do their own barriers" (maybe true, maybe not). Your "value<br />is only available after" argument really isn't an argument. Not<br />without those barriers.<br /><br />            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
