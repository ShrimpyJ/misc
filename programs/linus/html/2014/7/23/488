    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/7/17/100">First message in thread</a></li><li><a href="/lkml/2014/7/23/366">Peter Zijlstra</a><ul><li><a href="/lkml/2014/7/23/379">=?windows-1252?Q?Michel_D=E4nzer?=</a></li><li><a href="/lkml/2014/7/23/429">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2014/7/23/492">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/23/492">Peter Zijlstra</a><ul><li><a href="/lkml/2014/7/23/500">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2014/7/23/561">Peter Zijlstra</a></li><li><a href="/lkml/2014/7/23/874">Peter Zijlstra</a><ul><li><a href="/lkml/2014/7/23/506">Linus Torvalds</a></li><li><a href="/lkml/2014/7/23/546">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2014/7/23/488/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Jul 2014 09:54:23 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Random panic in load_balance() with 3.16-rc</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 23, 2014 at 8:55 AM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; I haven't seen the full oops, can you forward the screenshot? The<br />&gt;&gt; exact register state might give some clues.<br />&gt;<br />&gt; Sure, here goes.<br /><br />So the length is fine, and the disassembly shows that it is fixed (16<br />32-bit words - why the heck does it use "movsl" rather than "movsq",<br />whatever).<br /><br />The problem is %rdi, which has the value ffff10043c803e8c, which isn't<br />canonical. Which is why it GP-faults.<br /><br />That value is loaded from the stack:<br /><br />        mov    -0x88(%rbp),%rdi<br /><br />so apparently the original "__get_cpu_var(load_balance_mask)" is<br />already corrupted, or something has corrupted it on the stack since<br />loading (but that looks unlikely).<br /><br />And I wonder if I have a clue. Look, load_balance_mask is a<br />"cpumask_var_t", but I don't see a "alloc_cpumask_var()" for it.<br />That's broken with CONFIG_CPUMASK_OFFSTACK.<br /><br />I think you actually want "load_balance_mask" to be a "struct cpumask *", no?<br /><br />Alternatively, keep it a "cpumask_var_t", but then you need to use<br />__get_cpu_pointer() to get the address of it, and use<br />"alloc_cpumask_var()" to allocate area for the OFFSTACK case.<br /><br />TOTALLY UNTESTED AND PROBABLY PURE CRAP PATCH ATTACHED.<br /><br />WARNING! WARNING! WARNING! This is just looking at the code, not<br />really knowing it, and saying "that looks really really wrong". Maybe<br />I'm full of shit.<br /><br />                Linus<br /> kernel/sched/core.c | 2 +-<br /> kernel/sched/fair.c | 4 ++--<br /> 2 files changed, 3 insertions(+), 3 deletions(-)<br /><br />diff --git a/kernel/sched/core.c b/kernel/sched/core.c<br />index bc1638b33449..6980b7ad6da1 100644<br />--- a/kernel/sched/core.c<br />+++ b/kernel/sched/core.c<br />&#64;&#64; -6852,7 +6852,7 &#64;&#64; struct task_group root_task_group;<br /> LIST_HEAD(task_groups);<br /> #endif<br /> <br />-DECLARE_PER_CPU(cpumask_var_t, load_balance_mask);<br />+DECLARE_PER_CPU(struct cpumask *, load_balance_mask);<br /> <br /> void __init sched_init(void)<br /> {<br />diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c<br />index fea7d3335e1f..ef84a37ba19a 100644<br />--- a/kernel/sched/fair.c<br />+++ b/kernel/sched/fair.c<br />&#64;&#64; -6421,7 +6421,7 &#64;&#64; static struct rq *find_busiest_queue(struct lb_env *env,<br /> #define MAX_PINNED_INTERVAL	512<br /> <br /> /* Working cpumask for load_balance and load_balance_newidle. */<br />-DEFINE_PER_CPU(cpumask_var_t, load_balance_mask);<br />+DEFINE_PER_CPU(struct cpumask *, load_balance_mask);<br /> <br /> static int need_active_balance(struct lb_env *env)<br /> {<br />&#64;&#64; -6490,7 +6490,7 &#64;&#64; static int load_balance(int this_cpu, struct rq *this_rq,<br /> 	struct sched_group *group;<br /> 	struct rq *busiest;<br /> 	unsigned long flags;<br />-	struct cpumask *cpus = __get_cpu_var(load_balance_mask);<br />+	struct cpumask *cpus = __this_cpu_read(load_balance_mask);<br /> <br /> 	struct lb_env env = {<br /> 		.sd		= sd,</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
