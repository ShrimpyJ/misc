    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/7/17/100">First message in thread</a></li><li><a href="/lkml/2014/7/25/319">Steven Rostedt</a><ul><li><a href="/lkml/2014/7/25/558">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/25/584">Steven Rostedt</a></li><li class="origin"><a href="/lkml/2014/7/25/620">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/25/620">Steven Rostedt</a></li><li><a href="/lkml/2014/7/25/642">Jakub Jelinek</a></li></ul></li><li><a href="/lkml/2014/7/26/138">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/26/140">Linus Torvalds</a><ul><li><a href="/lkml/2014/7/26/196">Markus Trippelsdorf</a></li></ul></li></ul></li><li><a href="/lkml/2014/8/4/820">Steven Rostedt</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 25 Jul 2014 13:01:11 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Random panic in load_balance() with 3.16-rc</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 25, 2014 at 11:29 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Some simple pattern to make sure that the "sub $frame-size,%rsp" comes<br />&gt; before any accesses to (%rbp) (when frame pointers are enabled)<br />&gt; *might* work, but it might also end up missing things.<br /><br />You're going to have a hard time doing that pattern. Just for fun, I<br />did something really quick in awk:<br /><br />    /&gt;:/ { state = 0 }<br />    /%rsp,%rbp/ { state = 1 }<br />    /\$.*rsp/ { state = 2 }<br />    /lea/ { next }<br />    /\(%rbp\)/ { if (state == 1) print "Error: " $0; state = 2; }<br /><br />which is incomprehensible line noise, but it's a trivial state machine<br />where "beginning of function" starts state 0, "mov %rsp,%rbp" starts<br />state 1 ("have frame pointer in function"), sub/add constant of %rsp<br />starts state 2 ("created frame"), and then we ignore "lea" (because we<br />don't follow address calculations off %rbp) and error out if we see an<br />access through %rbp in a function with a frame pointer but without a<br />frame created.<br /><br />That thing is excessively stupid, in other words, but hey, it's good<br />to see "ok, what does that tell us".<br /><br />And what it tells me is that gcc does some crazy things.<br /><br />For example, gcc will not create a small stack frame with "sub<br />$8,%rsp". No, what gcc does is to use a random "push" instruction.<br />Fair enough, but that really makes things much harder to see. Here's<br />an example:<br /><br />  ffffffff813143a3 &lt;dock_notify&gt;:<br />  ffffffff813143a3:       55                      push   %rbp<br />  ffffffff813143a4:       48 89 e5                mov    %rsp,%rbp<br />  ffffffff813143a7:       41 57                   push   %r15<br />  ffffffff813143a9:       41 56                   push   %r14<br />  ffffffff813143ab:       49 89 fe                mov    %rdi,%r14<br />  ffffffff813143ae:       41 55                   push   %r13<br />  ffffffff813143b0:       41 89 f5                mov    %esi,%r13d<br />  ffffffff813143b3:       41 54                   push   %r12<br />  ffffffff813143b5:       53                      push   %rbx<br />  ffffffff813143b6:       51                      push   %rcx<br />  ...<br />  ffffffff81314501:       48 8b 7e 08             mov    0x8(%rsi),%rdi<br />  ffffffff81314505:       48 89 75 d0             mov    %rsi,-0x30(%rbp)<br />  ffffffff81314509:       e8 5f d1 ff ff          callq<br />ffffffff8131166d &lt;acpi_bus_scan&gt;<br />  ffffffff8131450e:       85 c0                   test   %eax,%eax<br />  ...<br />  ffffffff813145d6:       5a                      pop    %rdx<br />  ffffffff813145d7:       5b                      pop    %rbx<br />  ffffffff813145d8:       44 89 e0                mov    %r12d,%eax<br />  ffffffff813145db:       41 5c                   pop    %r12<br />  ffffffff813145dd:       41 5d                   pop    %r13<br />  ffffffff813145df:       41 5e                   pop    %r14<br />  ffffffff813145e1:       41 5f                   pop    %r15<br />  ffffffff813145e3:       5d                      pop    %rbp<br />  ffffffff813145e4:       c3                      retq<br /><br />note the use (deep down in the function) of -0x30(%rbp), and note how<br />it does "pop %rdx" twice to undo the "push %rcx". It was just to<br />allocate space.<br /><br />So you definitely have to track the actual stack pointer updates, not<br />just the patterns of add/sub to %rsp.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
