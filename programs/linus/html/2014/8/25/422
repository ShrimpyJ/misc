    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/8/22/463">First message in thread</a></li><li><a href="/lkml/2014/8/25/379">Linus Torvalds</a><ul><li><a href="/lkml/2014/8/25/412">Oleg Nesterov</a><ul><li class="origin"><a href="/lkml/2014/8/25/433">Linus Torvalds</a><ul><li><a href="/lkml/2014/8/25/433">Oleg Nesterov</a><ul><li><a href="/lkml/2014/8/27/494">Oleg Nesterov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Aug 2014 10:26:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/5] x86, fpu: don't drop_fpu() in __restore_xstate_sig() if use_eager_fpu()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 25, 2014 at 10:09 AM, Oleg Nesterov &lt;oleg&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; I'd like to change it only because this code is the main source of the<br />&gt; nasty special case, used_math() and/or __thread_has_fpu(current) can be<br />&gt; false even if use_eager_fpu().<br /><br />Well, if you think it is correct (apart from missing preemption), then<br />I disagree *violently* with your "clean it up by restoring things<br />twice" model.<br /><br />The signal handling overhead of floating point restore is not small,<br />and it's not theoretical. It's actually one of the main things that<br />make signal handling slow. I haven't tested with the new optimized<br />fxrstor, but it was one of the main annoyances with the lmbench<br />numbers back when we used to track those closely (and which were one<br />of the only tests to check signal handling performance).<br /><br />Of course, these days people try to avoid signals (because they are<br />slow), but still..<br /><br />              Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
