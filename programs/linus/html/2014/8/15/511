    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/8/15/332">First message in thread</a></li><li><a href="/lkml/2014/8/15/332">Benjamin LaHaise</a><ul><li><a href="/lkml/2014/8/15/333">Oleg Nesterov</a></li><li><a href="/lkml/2014/8/15/334">Oleg Nesterov</a></li><li><a href="/lkml/2014/8/15/335">Benjamin LaHaise</a></li><li><a href="/lkml/2014/8/15/336">Gu Zheng</a></li><li><a href="/lkml/2014/8/15/337">Gu Zheng</a></li><li><a href="/lkml/2014/8/15/338">Gu Zheng</a></li><li><a href="/lkml/2014/8/15/339">Gu Zheng</a><ul><li class="origin"><a href="/lkml/2014/8/15/517">Linus Torvalds</a><ul><li><a href="/lkml/2014/8/15/517">Benjamin LaHaise</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 15 Aug 2014 18:35:25 -0600</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 7/7] aio: use iovec array rather than the single one</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Ben,<br /><br />*please* stop doing this kind of crap.<br /><br />You're creating fake emails with invalid senders. That's simply not acceptable.<br /><br />The way to specify the author of a commit is *not* to fake the email<br />sender information, it's to have<br /><br />   From: Real A U Thor &lt;real.thor&#64;fake.com&gt;<br /><br />at the top of the message body. NOT by sending fake email from that name.<br /><br />Seriously, faking email authorship is too distasteful for words. What<br />the F*CK were you thinking? Fix your scripts immediately. I refuse to<br />have anything to do with people who send fake emails.<br /><br />Not acceptable. Not acceptable AT ALL.<br /><br />                  Linus<br /><br />On Fri, Aug 15, 2014 at 11:25 AM, Gu Zheng &lt;guz.fnst&#64;cn.fujitsu.com&gt; wrote:<br />&gt; Previously, we only offer a single iovec to handle all the read/write cases, so<br />&gt; the PREADV/PWRITEV request always need to alloc more iovec buffer when copying<br />&gt; user vectors.<br />&gt; If we use a tmp iovec array rather than the single one, some small PREADV/PWRITEV<br />&gt; workloads(vector size small than the tmp buffer) will not need to alloc more<br />&gt; iovec buffer when copying user vectors.<br />&gt;<br />&gt; Reviewed-by: Jeff Moyer &lt;jmoyer&#64;redhat.com&gt;<br />&gt; Signed-off-by: Gu Zheng &lt;guz.fnst&#64;cn.fujitsu.com&gt;<br />&gt; Signed-off-by: Benjamin LaHaise &lt;bcrl&#64;kvack.org&gt;<br />&gt; ---<br />&gt;  fs/aio.c | 10 +++++-----<br />&gt;  1 file changed, 5 insertions(+), 5 deletions(-)<br />&gt;<br />&gt; diff --git a/fs/aio.c b/fs/aio.c<br />&gt; index d6d9520..0fd9181 100644<br />&gt; --- a/fs/aio.c<br />&gt; +++ b/fs/aio.c<br />&gt; &#64;&#64; -1243,12 +1243,12 &#64;&#64; static ssize_t aio_setup_vectored_rw(struct kiocb *kiocb,<br />&gt;         if (compat)<br />&gt;                 ret = compat_rw_copy_check_uvector(rw,<br />&gt;                                 (struct compat_iovec __user *)buf,<br />&gt; -                               *nr_segs, 1, *iovec, iovec);<br />&gt; +                               *nr_segs, UIO_FASTIOV, *iovec, iovec);<br />&gt;         else<br />&gt;  #endif<br />&gt;                 ret = rw_copy_check_uvector(rw,<br />&gt;                                 (struct iovec __user *)buf,<br />&gt; -                               *nr_segs, 1, *iovec, iovec);<br />&gt; +                               *nr_segs, UIO_FASTIOV, *iovec, iovec);<br />&gt;         if (ret &lt; 0)<br />&gt;                 return ret;<br />&gt;<br />&gt; &#64;&#64; -1285,7 +1285,7 &#64;&#64; static ssize_t aio_run_iocb(struct kiocb *req, unsigned opcode,<br />&gt;         fmode_t mode;<br />&gt;         aio_rw_op *rw_op;<br />&gt;         rw_iter_op *iter_op;<br />&gt; -       struct iovec inline_vec, *iovec = &amp;inline_vec;<br />&gt; +       struct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;<br />&gt;         struct iov_iter iter;<br />&gt;<br />&gt;         switch (opcode) {<br />&gt; &#64;&#64; -1320,7 +1320,7 &#64;&#64; rw_common:<br />&gt;                 if (!ret)<br />&gt;                         ret = rw_verify_area(rw, file, &amp;req-&gt;ki_pos, req-&gt;ki_nbytes);<br />&gt;                 if (ret &lt; 0) {<br />&gt; -                       if (iovec != &amp;inline_vec)<br />&gt; +                       if (iovec != inline_vecs)<br />&gt;                                 kfree(iovec);<br />&gt;                         return ret;<br />&gt;                 }<br />&gt; &#64;&#64; -1367,7 +1367,7 &#64;&#64; rw_common:<br />&gt;                 return -EINVAL;<br />&gt;         }<br />&gt;<br />&gt; -       if (iovec != &amp;inline_vec)<br />&gt; +       if (iovec != inline_vecs)<br />&gt;                 kfree(iovec);<br />&gt;<br />&gt;         if (ret != -EIOCBQUEUED) {<br />&gt; --<br />&gt; 1.8.2.1<br />&gt;<br />&gt;<br />&gt; --<br />&gt; "Thought is the essence of where you are now."<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
