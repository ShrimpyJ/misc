    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/18/146">First message in thread</a></li><li><a href="/lkml/2005/12/19/7">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/19/46">Steven Rostedt</a><ul><li><a href="/lkml/2005/12/19/100">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2005/12/19/80">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2005/12/19/131">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/19/131">Benjamin LaHaise</a><ul><li><a href="/lkml/2005/12/19/146">Linus Torvalds</a></li><li><a href="/lkml/2005/12/19/154">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2005/12/19/147">Ingo Molnar</a><ul><li><a href="/lkml/2005/12/19/155">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 19 Dec 2005 11:11:03 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/15] Generic Mutex Subsystem</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 19 Dec 2005, Ingo Molnar wrote:<br />&gt; <br />&gt; in fact, generic mutexes are _more_ fair than struct semaphore in their <br />&gt; wait logic. In the stock semaphore implementation, when a waiter is <br />&gt; woken up, it will retry the lock, and if it fails, it goes back to the <br />&gt; _tail_ of the queue again - waiting one full cycle again.<br /><br />Ingo, I don't think that is true.<br /><br />It shouldn't be true, at least. The whole point with the "sleeper" count <br />was to not have that happen. Of course, bugs happen, so I won't guarantee <br />that's actually true, but ..<br /><br />If you are woken up as a waiter on a semaphore, you shouldn't fail to get <br />it. You will be woken first, and nobody else will get at it, because the <br />count has been kept negative or zero even by the waiters, so that a <br />fast-path user shouldn't be able to get the lock without going through the <br />slow path and adding itself (last) to the list.<br /><br />But hey, somebody should test it with &lt;n&gt; kernel threads that just do <br />down()/up() and some make-believe work in between to make sure there <br />really is contention, and count how many times they actually get the <br />semaphore. That code has been changed so many times that it may not work <br />the way it is advertized ;)<br /><br />[ Oh.  I'm looking at the semaphore code, and I realize that we have a <br />  "wake_up(&amp;sem-&gt;wait)" in the __down() path because we had some race long <br />  ago that we fixed by band-aiding over it. Which means that we wake up <br />  sleepers that shouldn't be woken up. THAT may well be part of the <br />  performance problem.. The semaphores are really meant to wake up just <br />  one at a time, but because of that race hack they'll wake up _two_ at a <br />  time - once by up(), once by down().<br /><br />  That also destroys the fairness. Does anybody remember why it's that <br />  way? ]<br /><br />Ho humm.. That's interesting. <br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
