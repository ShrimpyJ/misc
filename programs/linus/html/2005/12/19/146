    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/18/146">First message in thread</a></li><li><a href="/lkml/2005/12/19/127">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/19/131">Benjamin LaHaise</a><ul><li class="origin"><a href="/lkml/2005/12/21/113">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/21/113">Oleg Nesterov</a><ul><li><a href="/lkml/2006/1/10/62">Balbir Singh</a></li></ul></li></ul></li><li><a href="/lkml/2005/12/19/154">Ingo Molnar</a><ul><li><a href="/lkml/2005/12/19/157">Benjamin LaHaise</a></li><li><a href="/lkml/2005/12/19/159">Russell King</a><ul><li><a href="/lkml/2005/12/19/165">Ingo Molnar</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/12/19/147">Ingo Molnar</a><ul><li><a href="/lkml/2005/12/19/155">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/19/195">Christoph Hellwig</a></li><li><a href="/lkml/2005/12/20/14">Nick Piggin</a><ul><li><a href="/lkml/2005/12/20/16">Arjan van de Ven</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 19 Dec 2005 11:55:59 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/15] Generic Mutex Subsystem</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 19 Dec 2005, Benjamin LaHaise wrote:<br />&gt; <br />&gt; The only thing I can see as an improvement that a mutex can offer over <br />&gt; the current semaphore implementation is if we can perform the same <br />&gt; optimization that spinlocks perform in the unlock operation: don't use <br />&gt; a locked, serialising instruction in the up() codepath.  That might be <br />&gt; a bit tricky to implement, but it's definately a win on the P4 where the <br />&gt; cost of serialisation can be quite high.<br /><br />Good point. However, it really _is_ hard, because we also need to know if <br />the mutex was under contention. A spinlock doesn't care, so we can just <br />overwrite the lock value. A mutex would always care, in order to know <br />whether it needs to do the slow wakeup path. <br /><br />So I suspect you can't avoid serializing the unlock path for a mutex. The <br />issue of "was there contention while I held it" fundamentally _is_ a <br />serializing question.<br /><br />&gt; &gt; [ Oh.  I'm looking at the semaphore code, and I realize that we have a <br />&gt; &gt;   "wake_up(&amp;sem-&gt;wait)" in the __down() path because we had some race long <br />&gt; &gt;   ago that we fixed by band-aiding over it. Which means that we wake up <br />&gt; &gt;   sleepers that shouldn't be woken up. THAT may well be part of the <br />&gt; &gt;   performance problem.. The semaphores are really meant to wake up just <br />&gt; &gt;   one at a time, but because of that race hack they'll wake up _two_ at a <br />&gt; &gt;   time - once by up(), once by down().<br />&gt; &gt; <br />&gt; &gt;   That also destroys the fairness. Does anybody remember why it's that <br />&gt; &gt;   way? ]<br />&gt; <br />&gt; History?<br /><br />Oh, absolutely, I already checked the old BK history too, and that extra <br />wake_up() has been there at least since before we even started using BK. <br />So it's very much historical, I'm just wondering if somebody remembers far <br />enough back that we'd know.<br /><br />I don't see why it's needed (since we re-try the "atomic_add_negative()" <br />inside the semaphore wait lock, and any up() that saw contention should <br />have always been guaranteed to do a wakeup that should fill the race in <br />between that atomic_add_negative() and the thing going to sleep). <br /><br />It may be that it is _purely_ historical, and simply isn't needed. That <br />would be funny/sad, in the sense that we've had it there for years and <br />years ;)<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
