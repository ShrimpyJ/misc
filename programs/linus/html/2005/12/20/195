    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/18/148">First message in thread</a></li><li><a href="/lkml/2005/12/20/157">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/20/177">Russell King</a><ul><li class="origin"><a href="/lkml/2005/12/20/232">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/20/232">Nicolas Pitre</a><ul><li><a href="/lkml/2005/12/20/267">Linus Torvalds</a></li><li><a href="/lkml/2005/12/20/317">Nick Piggin</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/12/20/185">Nicolas Pitre</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 20 Dec 2005 12:10:33 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 04/15] Generic Mutex Subsystem, add-atomic-call-func-x86_64.patch</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 20 Dec 2005, Russell King wrote:<br />&gt; <br />&gt; Also, Nico has an alternative idea for mutexes which does not<br />&gt; involve decrementing or incrementing - it's an atomic swap.<br />&gt; That works out at about the same cycle count on non-Intel ARM<br />&gt; CPUs as the present semaphore path.  I'm willing to bet that<br />&gt; it will be faster than the present semaphore path on Intel ARM<br />&gt; CPUs.<br /><br />Don't be so sure, especially not in the future.<br /><br />An atomic "swap" operation is, from a CPU design standpoint, fundamentally <br />more expensive that a "load + store".<br /><br />Now, most ARM architectures don't notice this, because they are all <br />in-order, and not SMP-aware anyway. No suble memory ordering, no nothing. <br />Which is the only case when "swap" basically becomes a cheap "load+store".<br /><br />What I'm trying to say is that a plain "load + store" is almost always <br />going to be the best option in the long run.<br /><br />It's also almost certainly always the best option for UP + non-preempt, <br />for both present and future CPU's. The reason is simply that a <br />microarchitecture will _always_ be optimized for that case, since it's <br />pretty much by definition the common situation.<br /><br />Is preemption even the common case on ARM? I'd assume not. Why are people <br />so interested in the preemption case? IOW, why don't you just do<br /><br />	ldr  lr,[%0]<br />	subs lr, lr, %1<br />	str  lr,[%0]<br />	blmi failure<br /><br />as the _base_ timings, since that should be the common case. That's the <br />drop-dead fastest UP case.<br /><br />There's an additional advantage of the regular load/store case: if some <br />CPU has scheduling issues, you can actually write this out as C code (with <br />an extra empty ASM to make sure that the compiler doesn't move anything <br />out of the critical region). Again, that probably doesn't matter on most <br />ARM chips, but in the general case it sure does matter.<br /><br />(Btw, inlining _any_ of these except perhaps the above trivial case, is <br />probably wrong. None of the ARM chips tend to have caches all that big, I <br />bet).<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
