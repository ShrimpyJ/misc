    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/18/139">First message in thread</a></li><li><a href="/lkml/2005/12/20/191">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/20/200">Adrian Bunk</a><ul><li><a href="/lkml/2005/12/20/209">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/20/211">James Courtier-Dutton</a><ul><li><a href="/lkml/2005/12/20/229">Linus Torvalds</a></li><li><a href="/lkml/2005/12/20/231">Adrian Bunk</a></li></ul></li></ul></li><li><a href="/lkml/2005/12/21/101">Takashi Iwai</a><ul><li><a href="/lkml/2005/12/21/157">Adrian Bunk</a><ul><li><a href="/lkml/2005/12/21/160">Takashi Iwai</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/12/20/204">James Courtier-Dutton</a><ul><li class="origin"><a href="/lkml/2005/12/20/272">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/20/272">Lee Revell</a><ul><li><a href="/lkml/2005/12/20/304">Linus Torvalds</a></li><li><a href="/lkml/2005/12/21/88">Stephen Clark</a></li></ul></li><li><a href="/lkml/2005/12/21/104">Takashi Iwai</a><ul><li><a href="/lkml/2005/12/21/163">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/12/21/141">Steve deRosier</a><ul><li><a href="/lkml/2005/12/21/162">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 20 Dec 2005 13:03:10 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Alsa-devel] 2.6.15-rc6: boot failure in saa7134-alsa.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 20 Dec 2005, James Courtier-Dutton wrote:<br />&gt;<br />&gt; They all load in the correct order if they are modules. The problem comes when<br />&gt; one compiles them into the kernel. They then load in the wrong order and bad<br />&gt; things happen, resulting in the recommendation that alsa should always be<br />&gt; modules.<br /><br />Which, as a recommendation, is pure and utter crap.<br /><br />&gt; In this basis, we should not have to change the code in alsa at all, but<br />&gt; instead change the kernel to understand the load order, even if compiled into<br />&gt; the kernel and not as modules.<br /><br />NO.<br /><br />The kernel does support this (and has supported for a long time).<br /><br />First off, load order matters, even in the kernel. Within one "class" of <br />initializers, you can just specify the right order in the Makefile, and it <br />will honor them. Of course, that ends up often being hard to do across <br />different directories, which is why there's another facility:<br /><br />The kernel has several different classes of ordering. Anybody who thinks <br />that "module_init()" is it, just hasn't looked at &lt;linux/init.h&gt;. There's <br />seven different levels:<br /><br />	#define core_initcall(fn)               __define_initcall("1",fn)<br />	#define postcore_initcall(fn)           __define_initcall("2",fn)<br />	#define arch_initcall(fn)               __define_initcall("3",fn)<br />	#define subsys_initcall(fn)             __define_initcall("4",fn)<br />	#define fs_initcall(fn)                 __define_initcall("5",fn)<br />	#define device_initcall(fn)             __define_initcall("6",fn)<br />	#define late_initcall(fn)               __define_initcall("7",fn)<br /><br />where the next-to-last one is the regular "device_initcall()" (and this is <br />what a "module_init()" in a compiled-in driver will use).<br /><br />Now, something like the basic sound subsystem initialization should <br />obviously NOT be a "device initcall". It's not a device. It's a subsystem <br />that serves devices, and thus the basic sound initialization should <br />probably use "subsys_initcall()" instead.<br /><br />Now, if it's built as a module, that "subsys_initcall()" ends up doing <br />exactly the same thing as a plain "module_init()", and you'll never see <br />any difference. But when it's built into the kernel, it means that it gets <br />initialized with the other subsystems.<br /><br />Now, one thing to look out for is that if your "core sound initialization" <br />depends on PCI probing having completed (ie it's not a pure subsystem with <br />no dependencies on anything else), the common hack for that is to just use <br />the "fs_initicall()" instead. But a truly independent subsystem (which <br />sound hopefully is) should just use subsys_initcall(), and then, if that <br />subsystem internally has more complex ordering, just use the link order in <br />the Makefiles to indicate that.<br /><br />&gt; I have no idea how to get the kernel to do this though. Any pointers?<br /><br />The above should hopefully make the kernel support for this obvious.<br /><br />I thought more people knew about all this. Forcing (or even just <br />encouraging) people to use loadable modules is just horrible. I personally <br />run a kernel with no modules at all: it makes for a simpler bootup, and in <br />some situations (embedded) it has both security and size advantages.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
