    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/15/149">First message in thread</a></li><li><a href="/lkml/2005/12/15/149">	linux&#64;horizon ...</a><ul><li class="origin"><a href="/lkml/2005/12/15/216">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/15/216">Erik Mouw</a><ul><li><a href="/lkml/2005/12/15/224">(Dick Streefland)</a></li><li><a href="/lkml/2005/12/16/61">Erik Mouw</a><ul><li><a href="/lkml/2005/12/17/22">Sander</a></li></ul></li></ul></li><li><a href="/lkml/2005/12/15/269">Nikita Danilov</a></li><li><a href="/lkml/2005/12/15/274">	linux&#64;horizon ...</a><ul><li><a href="/lkml/2005/12/15/286">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/15/422">	linux&#64;horizon ...</a></li></ul></li><li><a href="/lkml/2005/12/15/315">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2005/12/15/304">Steven Rostedt</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Dec 2005 08:15:49 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/19] MUTEX: Introduce simple mutex implementation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Dec 2005, linux&#64;horizon.com wrote:<br />&gt; <br />&gt; A counting semaphore is NOT a perfectly fine mutex, and it SHOULD be changed.<br /><br />Don't be silly.<br /><br />First off, the data structure is called a "semaphore", and always has <br />been. It's _never_ been called a "mutex" in the first place, and the <br />operations have been called "down()" and "up()", because I thought calling <br />them P() and V() was just too damn traditional and confusing (I don't <br />speak dutch, and even if I did, I think shortening names to that degree is <br />just evil).<br /><br />And dammit, a counting semaphore (and usually you don't even say the <br />"counting" part, since counting is really always there) is just about <br />_the_ classical mutual exclusion mechanism. If somebody doesn't know that, <br />he has absolutely _no_ place talking about mutexes etc.<br /><br />And a semaphore _is_ a mutex. Anybody who disputes that is just being a <br />total troll. Even classically, the case where the semaphore was <br />initialized to 1 is very very traditional, and is very much part of the <br />whole point of a semaphore. Sometimes they are called "binary semaphores", <br />but dammit, they are just the same thing.<br /><br />A patch that<br /> - creates a non-counting mutex<br /> - .. that is SLOWER than the current counting one<br /> - .. and keeps the old "semaphore" and "up/down" naming<br /><br />is simply INCREDIBLY BROKEN. It has absolutely _zero_ redeeming features. <br />I can't understand how there are a hundred emails in my mailbox even <br />discussing it. <br /><br />And I can't understand how somebody has the balls to even say that a <br />semaphore isn't a mutex. That's like saying that an object of type "long" <br />isn't an integer, because only "int" objects are integers. That's just <br />INSANE.<br /><br />&gt; People are indeed unhappy with the naming, and whether patching 95%<br />&gt; of the callers of up() and down() is a good idea is a valid and active<br />&gt; subject of debate.  (For an out-of-tree -rt patch, is was certaintly<br />&gt; an extremely practical solution.)<br /><br />Whatever people you claim are unhappy with the naming are<br /> - obviously totally unaware of very basic synchronization primitives<br />   used in concurrent programming<br /> - likely haven't spent any time at all looking at the kernel source code.<br /> - haven't _ever_ complained that I've seen before this totally made-up <br />   discussion.<br /><br />In other words, you are<br /> (a) totally making up the claim that people are really unhappy<br /> (b) jerking people around who _do_ know about semaphores and _have_ <br />     worked with the kernel locking primitives and understand them well<br /><br />So tell me, what do you think about your own arguments in that light?<br /><br />&gt; But regardless of the eventual naming convention, mutexes are a good idea.<br />&gt; A mutex is *safer* than a counting semaphore.  That's the main benefit.<br />&gt; Indeed, unless there's a performance advantage to a counting semaphore,<br />&gt; you should use a mutex!<br /><br />Hey, feel free to introduce a mutex, but DAMMIT, just call it that, <br />instead of switching people over. <br /><br />And even then, it should damn well also:<br /> - really _be_ faster. On platforms that matter. <br /> - have enough real other advantages that it's worth introducing another <br />   abstraction, and more conceptual complexity. At least the RT patches <br />   had a reason for them.<br /><br />And besides, all your "safer" arguments are pretty damn pointless in the <br />face of the fact that we have basically had zero bugs with the semaphores. <br />This is not where the bugs happen. Yeah, yeah, double releases can happen, <br />but it sure as hell isn't on my radar of things I remember people doing.<br /><br />So when you say "This isn't about speed, this is about bug-free code", <br />you're just making that up. It's doubly silly when your "safer" <br />implementation uses totally illogical names. THAT is what creates bugs.<br /><br />So go away.<br /><br />Come back if you have pondered, and accepted reality, and perhaps have an <br />acceptable patch that introduces a separate data structure. <br /><br />And no, we're not switching users over whole-sale. First you introduce the <br />new concept. Only THEN can you can switch over INDIVIDUAL LOCKS with <br />reasons for why it's worth it.<br /><br />And hell yes, performance does matter.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
