    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/12/244">First message in thread</a></li><li><a href="/lkml/2005/12/16/314">Jesse Barnes</a><ul><li><a href="/lkml/2005/12/17/10">"David S. Miller"</a><ul><li class="origin"><a href="/lkml/2005/12/17/45">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/17/45">Jesse Barnes</a></li></ul></li><li><a href="/lkml/2005/12/17/44">Jesse Barnes</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Dec 2005 23:40:55 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/19] MUTEX: Introduce simple mutex implementation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 16 Dec 2005, David S. Miller wrote:<br />&gt; <br />&gt; If there is some test guarding the CAS, yes.<br />&gt; <br />&gt; But if there isn't, for things like atomic increment and<br />&gt; decrement, where the CAS is unconditional, you'll always<br />&gt; eat the two bus transactions without the prefetch for write.<br /><br />Side note: there may be hardware cache protocol _scheduling_ reasons why <br />some particular hw platform might prefer to go through the "Shared" state <br />in their cache protocol.<br /><br />For example, you might have hardware that otherwise ends up being very <br />unfair, where the two-stage lock aquire might actually allow another node <br />to come in at all. Fairness and balance often comes at a cost, both in hw <br />and in sw.<br /><br />Arguably such hardware sounds pretty broken, but the point is that these <br />things can certainly depend on the platform around the CPU as well as on <br />what the CPU itself does.<br /><br />I'm not saying that that is necessarily what Jesse was arguing about, but <br />lock contention behaviour can be "interesting".<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
