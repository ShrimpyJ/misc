    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/12/244">First message in thread</a></li><li><a href="/lkml/2005/12/16/317">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/16/328">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2005/12/17/108">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/17/108">Matthew Wilcox</a><ul><li><a href="/lkml/2005/12/17/110">Lee Revell</a></li><li><a href="/lkml/2005/12/22/90">Bill Huey (hui)</a></li></ul></li><li><a href="/lkml/2005/12/19/85">Ingo Molnar</a></li><li><a href="/lkml/2005/12/22/91">Bill Huey (hui)</a><ul><li><a href="/lkml/2005/12/22/93">Bill Huey (hui)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/12/19/196">Keith Owens</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Dec 2005 23:34:03 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/19] MUTEX: Introduce simple mutex implementation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 16 Dec 2005, Steven Rostedt wrote:<br />&gt; <br />&gt; So how does one handle real-time tasks that must contend with locks within<br />&gt; the kernel that is shared with low priority tasks?  Do you prefer the RTAI<br />&gt; approach?<br /><br />If you want hard real-time, either that, or just make sure you don't get <br />locks that might be slow (for one reason or another). Finer granularities <br />help there.<br /><br />For example, to make things really concrete, please just name a semaphore <br />that is relevant to a real-time task and that isn't fine enough grain that <br />a careful and controlled environment can't avoid it being a bottle-neck <br />for a real-time task.<br /><br />The real problems often end up happening in things like memory management, <br />and waiting for IO, where it's not about the locking at all, it's about <br />event scheduling. And you just have to avoid those (through pre-allocation <br />and buffering) in those kinds of real-time situations.<br /><br />I really can't think of any blocking kernel lock where priority <br />inheritance would make _any_ sense at all. Please give me an example. <br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
