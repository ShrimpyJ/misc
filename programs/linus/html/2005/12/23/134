    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/23/89">First message in thread</a></li><li><a href="/lkml/2005/12/23/89">"Michael Bishop"</a><ul><li><a href="/lkml/2005/12/23/118">"David S. Miller"</a><ul><li class="origin"><a href="/lkml/2005/12/23/197">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/23/197">"David S. Miller"</a><ul><li><a href="/lkml/2005/12/23/205">Hugh Dickins</a></li><li><a href="/lkml/2005/12/24/8">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/12/23/134/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 23 Dec 2005 12:53:16 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: More info for DSM w/r/t sunffb on 2.6.15-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />[ Hugh and Nick added to Cc, just in case they can see anything wrong with <br />  this. It's actually very simple, but I hoped to avoid having to support<br />  the insane cases. I guess it was naive of me to think that there isn't <br />  always _some_ insane user ;^]<br /><br />David: please read the final note before the patch about software <br />dirty/accessed bits. It may or may not be an issue on sparc64, I don't <br />know where you do the dirty/accessed bit handling.<br /><br />On Fri, 23 Dec 2005, David S. Miller wrote:<br />&gt; <br />&gt; Linus, X.org is doing a MAP_PRIVATE mmap() of these discontiguous<br />&gt; I/O mappings of the sparc frame buffer device it seems.  So the<br />&gt; MAP_SHARED check in is_cow_mapping() doesn't pass.<br /><br />Ok. I actually had a backup plan for that too, but was hoping that nobody <br />would be quite that insane.<br /><br />And doing a private mapping on a device and then expecting to do writes <br />through that mapping is just totally insane. The fact that it happened to <br />work before was arguably very much a bug (as it didn't actually create a <br />private mapping).<br /><br />But hey, here's the backup plan. It's entirely untested, but it is <br />actually very simple, and has way more comments than actual code, so <br />hopefully it's understandable and "obviously right" (yeah sure, famous <br />last words ;).<br /><br />NOTE! This very much means that an insane user that first does a private <br />writable mapping of a device like this , and then a fork(), will _not_ see <br />the mapping in the child. It will remain "private" and writable in the <br />parent instead (writable only if the page protections that were passed in <br />to remap_pfn_range() were writable, of course).<br /><br />The reason? Doing a COW after the fork would be insane. Both from a VM <br />complexity issue (it's what all the work has been trying to avoid), but <br />also from a "what the hell does it mean?" kind of issue. <br /><br />So I'm pretty damn sure nobody depends on _that_ at least (old kernels <br />would have done the insane and meaningless thing: it would basically be <br />mapped shared until the fork() happened, and then it would be <br />copy-on-write in _both_ processes after the fork).<br /><br />NOTE NOTE NOTE! This will _not_ work if the pages need a software-dirty <br />and/or software-accessed bit, and the low-level architecture page fault <br />handler says "this is a write to a nonwritable area" and raises a SIGSEGV. <br /><br />So it may be that the insane sparc remap_pfn_range() users need to set the <br />dirty/accessed bits in the page protection flags by hand before to avoid <br />that. David?<br /><br />Michael, can you test this patch (with the note that David may need to <br />change something else too)?<br /><br />So there are certainly some subtle issues left with this, and I'm not <br />saying it's quite this simple, but they should be easy enough to handle.<br /><br />			Linus<br /><br />----<br />diff --git a/mm/memory.c b/mm/memory.c<br />index d8dde07..a93654d 100644<br />--- a/mm/memory.c<br />+++ b/mm/memory.c<br />&#64;&#64; -1326,9 +1326,32 &#64;&#64; int remap_pfn_range(struct vm_area_struc<br /> 	 * un-COW'ed pages by matching them up with "vma-&gt;vm_pgoff".<br /> 	 */<br /> 	if (is_cow_mapping(vma-&gt;vm_flags)) {<br />-		if (addr != vma-&gt;vm_start || end != vma-&gt;vm_end)<br />-			return -EINVAL;<br />-		vma-&gt;vm_pgoff = pfn;<br />+		/*<br />+		 * We can do a real COW mapping _if_ it covers the whole area,<br />+		 * at which point we do the magic "vm_pgoff" trick.<br />+		 *<br />+		 * Otherwise we will have to turn it into non-copyable shared<br />+		 * area which has VM_WRITE turned off.<br />+		 *<br />+		 * NOTE NOTE NOTE! If the remap_pfn_range() was called with<br />+		 * a writable page protection, this means that the pages will<br />+		 * still be writable, but we will refuse to ever take a<br />+		 * write fault on any pages that weren't so.<br />+		 *<br />+		 * Also, we refuse to do the SHARED conversion if we already<br />+		 * have taken a C-O-W fault on the area.<br />+		 *<br />+		 * This is all just for insane old X servers, which map the<br />+		 * video pages private.<br />+		 */<br />+		if (addr == vma-&gt;vm_start &amp;&amp; end == vma-&gt;vm_end) {<br />+			vma-&gt;vm_pgoff = pfn;<br />+		} else {<br />+			if (vma-&gt;anon_vma)<br />+				return -EINVAL;<br />+			vma-&gt;vm_flags |= VM_DONTCOPY | VM_SHARED;<br />+			vma-&gt;vm_flags &amp;= ~(VM_WRITE | VM_MAYWRITE);<br />+		}<br /> 	}<br /> <br /> 	vma-&gt;vm_flags |= VM_IO | VM_RESERVED | VM_PFNMAP;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
