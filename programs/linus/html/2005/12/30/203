    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/27/149">First message in thread</a></li><li><a href="/lkml/2005/12/30/186">Adrian Bunk</a><ul><li><a href="/lkml/2005/12/30/189">Matt Mackall</a><ul><li class="origin"><a href="/lkml/2005/12/30/205">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/30/205">Jan Engelhardt</a><ul><li><a href="/lkml/2005/12/30/208">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/12/31/136">Adrian Bunk</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Dec 2005 16:23:46 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1 of 3] Introduce __memcpy_toio32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 30 Dec 2005, Matt Mackall wrote:<br />&gt; &gt; <br />&gt; &gt; Where's the problem with the __HAVE_ARCH_* mechanism?<br />&gt; <br />&gt; The head penguin peed on it last week.<br /><br />Actually "sprkinling with penguin pee" means that something is blessed <br />(it's like a kernel baptism). Maybe that's not very civilized, but hey, <br />penguins don't have thumbs, and are thus kind of limited in their actions. <br />Don't be speciest.<br /><br />So the head penguin didn't pee on it, it turned its back in disgust, and <br />hoped that it would freeze to death in the arctic winter.<br /><br />And no, I don't like the __HAVE_ARCH_xxx mechanisms at all. They are <br />pointless, and hard to follow. If an architecture wants to use a generic <br />mechanism, it should do one of the following (or a combination):<br /><br /> - use the config file mechanism, and use<br /><br />	obj-$(CONFIG_GENERIC_FOO) += generic-foo.c<br /><br />   in a Makefile to link in the generic version.<br /><br />   Examples: CONFIG_RWSEM_GENERIC_SPINLOCK.<br /><br /> - just include the generic header from its own header, eg just do a<br /><br />	#include &lt;asm-generic/div64.h&gt;<br /><br />   or similar.<br /><br />Now, the latter in particular is very easy to follow: if you look into the <br />&lt;asm/div64.h&gt; file and see that it just includes &lt;asm-generic/div64.h&gt;, <br />it's very obvious what is going on and where to find the real <br />implementation. You never have to wonder what the indirection means. <br /><br />Similarly, anybody that fixes the generic header file can _trivially_ grep <br />for its use. So the code stays clean, and there are absolutely zero <br />compile-time conditionals, and the linkages both ways are obvious. And <br />architectures that do _not_ use the generic routines are totally <br />unaffected by them, and they don't need to specify any flags like "I have <br />my own routines" to disable things.<br /><br />Now, the CONFIG_GENERIC_FOO thing is a bit less obvious, and you may have <br />to know about that config option in order to realize that a particular <br />architecture is using a generic library routine, but at least with those <br />Kconfig options, the language to describe them is clean these days, and <br />it's _the_ standard way to express configuration information. So it may be <br />a bit subtler and more indirect, but once you get used to it, it too is <br />very clean.<br /><br />In contrast, the __HAVE_ARCH_xxx thing has zero upsides. It just causes <br />#ifdef mess in C source files, and unnecessary noise in standard header <br />files. I know it's been there for a long time, but just grep for <br />__HAVE_ARCH_MEMCPY and cry. Why the hell should all the architectures that <br />have their own optimized memcpy() have to tell the rest of the world about <br />it?<br /><br />[ Yeah, I know why: bad implementation choice. It could easily have been <br />  done with the asm-generic approach or CONFIG_GENERIC_MEMCPY, but it <br />  wasn't. Note that the __HAVE_ARCH_xxx thing isn't even a standard form: <br />  sometimes it's the negation: __ARCH_WANT_xxx, and sometimes it's called<br />  something else entirely, like USE_ELF_CORE_DUMP or HAVE_PCI_MMAP, or<br />  ARCH_HAS_PREFETCH or HAVE_CSUM_COPY_USER. My point being that it's <br />  totally ad-hoc and random. ]<br /><br />So we do have tons of ugly stuff, I just am trying to argue for not making <br />more of it (I don't think it's a big enough deal that it would be worth it <br />trying to clean up old uses).<br /><br />If you look at the mutex patches, for example, I think everybody will <br />agree that they look much _better_ after they moved to just using the <br />trivial "#include &lt;asm-generic/mutex-xyzzy.h&gt;" format. At least I don't <br />_think_ this is just a personal weird hang-up of mine. It's literally a <br />cleanliness issue.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
