    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/12/16/277">First message in thread</a></li><li><a href="/lkml/2005/12/18/9">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/18/15">Russell King</a><ul><li class="origin"><a href="/lkml/2005/12/18/84">Linus Torvalds</a><ul><li><a href="/lkml/2005/12/18/84">James Bottomley</a><ul><li><a href="/lkml/2005/12/18/87">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/12/18/162">Nicolas Pitre</a><ul><li><a href="/lkml/2005/12/19/27">Russell King</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/12/18/67">Nicolas Pitre</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 18 Dec 2005 10:42:42 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/12]: MUTEX: Implement mutexes</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 18 Dec 2005, Russell King wrote:<br />&gt;<br />&gt; On Sat, Dec 17, 2005 at 10:30:41PM -0800, Linus Torvalds wrote:<br />&gt; &gt; An interrupt can never change the value without changing it back, except <br />&gt; &gt; for the old-fashioned use of "up()" as a completion (which I don't think <br />&gt; &gt; we do any more - we used to do it for IO completion a looong time ago).<br />&gt; <br />&gt; I doubt you can guarantee that statement, or has the kernel source<br />&gt; been audited for this recently?<br /><br />Well, _if_ it's a noticeable performance win, we should just do it. We <br />already know that people don't call "down()" in interrupts (it just <br />wouldn't work), we can instrument "up()" too.<br /><br />It's easy enough to add a "might_sleep()" to the up(). Not strictly true, <br />but conceptually it would make sense to make up/down match in that sense. <br />We'd have to mark the (few) places that do down_trylock() + up() in <br />interrupt context with a special "up_in_interrupt()", but that would be ok <br />even from a documentation standpoint.<br /><br />&gt; However, the real consideration is stability - if a semaphore was<br />&gt; used for a completion and it was merged, would it be found and<br />&gt; fixed?  Probably not, because it won't cause any problems on<br />&gt; architectures where semaphores have atomic properties.<br /><br />Actually, the reason we have completions is that using semaphores as <br />completions caused some really subtle problems that had nothing to do with <br />atomicity of the operations themselves, so if you find somebody who uses a <br />semaphore from an interrupt, I think we want to know about it.<br /><br />Completions actually have another - and more important - property than the <br />fact that they have a more logical name for a particular usage.<br /><br />The completion has "don't touch me" guarantees. A thread or interrupt that <br />does an "up()" on a semaphore may still touch the memory that was <br />allocated for the semaphore after the "down()" part has been released. <br />And THAT was the reason for the completions: we allocate them on the stack <br />or in temporary allocations, and the thing that does the "down()" to wait <br />for something to finish will also do the _release_ of the memory.<br /><br />With semaphores, that caused problems, because the side doing the "up()" <br />would thus possibly touch memory that got released from under it.<br /><br />This problem happens only on SMP (since you need to have the downer and <br />the upper running at the same time), but it's totally independent of the <br />other atomicity issues. And almost any semaphore that is used as a <br />completion from an interrupt will have this problem, so yes, if you find <br />somebody doing an "up()" in interrupt context, we'll fix it.<br /><br />It would be good to make the rules clear, that you can never touch a <br />semaphore from irq context without changing it back before you return.<br /><br />Of course, that still leaves the following sequence<br /><br />	if (!down_trylock(..)) {<br />		... do something ..<br />		up(..);<br />	}<br /><br />which is actually used from interrupts too. At least the console layer <br />does that (printk() can happen from interrupts, and we do a down_trylock <br />on the console semaphore. But that one shouldn't mess with the _count_, <br />although it does mean that the wait-queue preparation etc (for when the <br />fast case fails) does still need to be protected against interrupts.<br /><br />But that would be the slow case, so from a performance standpoint, it <br />would still allow the case that really _matters_ to be done with <br />interrupts enabled.<br /><br />&gt; Unless of course sparse can be extended to detect the use of unbalanced <br />&gt; semaphores in interrupt contexts.<br /><br />In theory, yes, but in practice I'd much rather just do the stupid brute <br />force things.<br /><br />&gt; &gt; (Of course, maybe it's not worth it. It might not be a big performance <br />&gt; &gt; issue).<br />&gt; <br />&gt; Balancing the elimination of 4 instructions per semaphore operation,<br />&gt; totalling about 4 to 6 cycles, vs stability I'd go for stability<br />&gt; unless we can prove the above assertion via (eg) sparse.<br /><br />I agree, if arm interrupt disables are fast. For example, on x86 (where <br />this isn't needed, because you can have an "interrupt-safe" decrement by <br />just having it as a single instruction, even if it isn't SMP-safe), <br />disabling and re-enabling interrupts is just one instruction each, but the <br />combination is usually something like 50+ cycles. So if this was an issue <br />on x86, we'd definitely care.<br /><br />But if you don't think it's a big issue on ARM, it just doesn't matter.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
