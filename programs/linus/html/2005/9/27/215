    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/25/54">First message in thread</a></li><li><a href="/lkml/2005/9/27/168">Solar Designer</a><ul><li><a href="/lkml/2005/9/27/202">Alan Cox</a><ul><li class="origin"><a href="/lkml/2005/9/27/226">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/27/226">Solar Designer</a></li></ul></li><li><a href="/lkml/2005/9/27/224">Solar Designer</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Sep 2005 13:42:44 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PID reuse safety for userspace apps (Re: [linux-usb-devel] Re: [Security] [vendor-sec] [BUG/PATCH/RFC] Oops while completing async USB via usbdevio)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 27 Sep 2005, Alan Cox wrote:<br />&gt;<br />&gt; On Maw, 2005-09-27 at 21:20 +0400, Solar Designer wrote:<br />&gt; &gt; The idea is to introduce a kernel call (it can be a prctl(2) setting,<br />&gt; &gt; although my pseudo-code "defines" an entire syscall for simplicity)<br />&gt; &gt; which would "lock" the invoking process' view of a given PID (while<br />&gt; &gt; letting the PID get reused - so there's no added risk of DoS).  The<br />&gt; &gt; original posting and subsequent thread can be seen here:<br />&gt; <br />&gt; You can solve it just as well in kernel space without application<br />&gt; changes.<br /><br />Note that for at least signal sending, the security aspect is _not_ about <br />whether the pid has been re-used, but about whether the _user_ matches.<br /><br />This is most trivially seen by thinking about just a suid exec.<br /><br />Sending a signal to a suid process should be disallowed even _if_ the<br />"struct task_struct" is still the same, which is why the oops fix<br />discussed in this thread is totally pointless - it has almost nothing to<br />do with security. Doing "get_task_struct()" may remove the oops, but it <br />doesn't remove the security issues (pid wrapping is a total red herring: <br />with get_task_struct you don't need to wrap pids at all, you just do a <br />single exec on a suid executable, and off you go).<br /><br />Now, the fasync interfaces are a bit inconvenient because they require the <br />"struct file" to be around, since that's what also contains the owner <br />information. That means that you have to track file lifetime in the urb <br />submission.<br /><br />I don't know the code, but if that's inconvenient, then the real solution <br />ends up being to just do the permission checks by hand. Remember the <br />uid/euid/pid at the time of the submission, and use them at completion.<br /><br />I don't even think it's worth any general helper infrastructure: I suspect <br />the interfaces are pretty broken as designed, and we should _not_ <br />encourage them further. But it's not like the security check is more than <br />three lines of code, so..<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
