    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/21/162">First message in thread</a></li><li><a href="/lkml/2005/9/21/246">Andrew Morton</a><ul><li><a href="/lkml/2005/9/22/243">Blaisorblade</a><ul><li><a href="/lkml/2005/9/22/253">Andrew Morton</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 22 Sep 2005 13:54:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [uml-devel] Re: [PATCH 07/10] uml: avoid fixing faults while atomic</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 22 Sep 2005, Blaisorblade wrote:<br />&gt;<br />&gt; Exactly - the point is: is it legal to call copy_from_user() while holding a <br />&gt; spinlock (which is my original question)? Or should copy_from_user try to <br />&gt; satisfy the fault, instead of seeing in_atomic() or something similar and <br />&gt; fail?<br /><br />It is not legal to call copy_to/from_user() under a spinlock in general.<br /><br />But what _is_ legal to do is something slightly more complex, ie<br /><br />	spin_lock(...)<br />	inc_preempt_count();<br />	ret = __copy_from_user_inatomic(..)<br />	dec_preempt_count();<br />	spin_unlock();<br /><br />but you have to realize that the copy-from-user will fail if the target is <br />swapped out (so the code that does things like this has to look at the <br />return value, and if the copy didn't copy anything it needs to release the <br />locks and do it all over again without the atomic thing).<br /><br />We don't do it very much, because it gets more complicated and it hasn't<br />historically been legal, but it could in theory be very useful if you hold<br />a lock and want to avoid releasing and re-taking it just to do a user<br />access.<br /><br />Right now the only case where that happens is the futex code, and maybe <br />that's a very special case. But maybe it isn't. <br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
