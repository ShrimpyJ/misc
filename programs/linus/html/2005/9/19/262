    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/19/260">First message in thread</a></li><li><a href="/lkml/2005/9/19/260">John McCutchan</a><ul><li><a href="/lkml/2005/9/19/255">John McCutchan</a></li><li><a href="/lkml/2005/9/19/256">Al Viro</a></li><li><a href="/lkml/2005/9/19/259">Linus Torvalds</a></li><li><a href="/lkml/2005/9/20/74">Christoph Hellwig</a></li><li><a href="/lkml/2005/9/19/272">John McCutchan</a><ul><li><a href="/lkml/2005/9/19/257">John McCutchan</a></li><li><a href="/lkml/2005/9/20/31">Linus Torvalds</a></li><li><a href="/lkml/2005/9/20/41">John McCutchan</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2005/9/19/267">John McCutchan</a></li><li><a href="/lkml/2005/9/19/268">Al Viro</a></li><li><a href="/lkml/2005/9/20/52">Linus Torvalds</a></li><li><a href="/lkml/2005/9/20/58">Al Viro</a></li><li><a href="/lkml/2005/9/20/75">Al Viro</a></li><li><a href="/lkml/2005/9/20/76">John McCutchan</a></li><li><a href="/lkml/2005/9/20/79">Linus Torvalds</a></li><li><a href="/lkml/2005/9/20/82">Linus Torvalds</a></li><li><a href="/lkml/2005/9/20/84">John McCutchan</a><ul><li><a href="/lkml/2005/9/20/19">Al Viro</a></li><li><a href="/lkml/2005/9/20/40">John McCutchan</a></li><li><a href="/lkml/2005/9/20/57">Al Viro</a></li><li><a href="/lkml/2005/9/20/109">John McCutchan</a><ul><li><a href="/lkml/2005/9/20/168">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/9/19/262/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 19 Sep 2005 19:20:26 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] stop inotify from sending random DELETE_SELF event under load</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 19 Sep 2005, John McCutchan wrote:<br />&gt; <br />&gt; To quote you:<br /><br />Yeah, sometimes I'm more right than other times. That wasn't one of them.<br /><br />It's actually _almost_ right. The problem being that dentry_iput() is <br />called for non-delete events too.<br /><br />However, your patch is _worse_. Your patch will cause it not to report the <br />delete at all, because what will happen is that if the delete() is done <br />while somebody else has a pointer to the dentry, then we won't call <br />"dentry_iput()" with a "delete" AT ALL. We will only call it later when <br />the _other_ person (who didn't do a delete) releases the dentry.<br /><br />See? It's very very wrong to send a flag that depends on the call-chain, <br />because the call-chain is _not_ what determines whether the inode gets <br />deleted or not.<br /><br />The only way to know whether it gets deleted or not is whan the actual<br />i_nlink goes down to 0, and the inode gets deleted. Ie exactly the<br />generic_delete_inode() case.<br /><br />But if you keep a reference to the inode, that will never actually happen. <br />Hmm.<br /><br />Who wants that inode delete event anyway? It's fundamentally harder than <br />removing a name, partly because of the delayed delete, partly because an <br />inode may be reachable multiple ways.<br /><br />Maybe this patch instead? It's not going to be reliable on networked <br />filesystems, though. Nothing is.<br /><br />		Linus<br /><br />---<br />diff --git a/fs/dcache.c b/fs/dcache.c<br />--- a/fs/dcache.c<br />+++ b/fs/dcache.c<br />&#64;&#64; -102,7 +102,8 &#64;&#64; static inline void dentry_iput(struct de<br /> 		list_del_init(&amp;dentry-&gt;d_alias);<br /> 		spin_unlock(&amp;dentry-&gt;d_lock);<br /> 		spin_unlock(&amp;dcache_lock);<br />-		fsnotify_inoderemove(inode);<br />+		if (!inode-&gt;i_nlink)<br />+			fsnotify_inoderemove(inode);<br /> 		if (dentry-&gt;d_op &amp;&amp; dentry-&gt;d_op-&gt;d_iput)<br /> 			dentry-&gt;d_op-&gt;d_iput(dentry, inode);<br /> 		else<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
