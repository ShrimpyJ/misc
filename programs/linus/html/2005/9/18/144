    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/18/29">First message in thread</a></li><li><a href="/lkml/2005/9/18/130">Al Viro</a><ul><li><a href="/lkml/2005/9/18/139">Al Viro</a><ul><li class="origin"><a href="/lkml/2005/9/18/150">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/18/150">Al Viro</a><ul><li><a href="/lkml/2005/9/20/55">Richard Henderson</a></li></ul></li><li><a href="/lkml/2005/9/19/210">Matthias Urlichs</a><ul><li><a href="/lkml/2005/9/19/213">Matthias Urlichs</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 18 Sep 2005 15:25:39 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: p = kmalloc(sizeof(*p), )</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 18 Sep 2005, Al Viro wrote:<br />&gt; <br />&gt; BTW, for some idea of how hard does it actually blow<br /><br />Well, to be slightly more positive: it's not a very easy feature to do <br />properly.<br /><br />The thing about "(cast) { .. }" initializers is that they aren't just <br />initializers: they really are local objects that can be used any way you <br />want to. So in the _generic_ case, gcc does exactly the right thing: it <br />introduces a local object that is filled in with the initializer.<br /><br />So in the generic case, you could have<br /><br />	x = (cast) { ... }.member + 2;<br /><br />instead of just a straight assignment.<br /><br />The problem is just that the generic case is semantically pretty damn far <br />away from the case we actually want to use, ie the special case of an <br />assignment. So some generic top-level code has created the generic code, <br />and now the lower levels of the compiler need to "undo" that generic code, <br />and see what it actually boils down to. And that's quite hard.<br /><br />The sane thing to do for good code generation would be to special-case the <br />assignment of this kind of thing, and just make it very obvious that an <br />assignment of a (cast) {...} is very different from the generic use of <br />same. But that would introduce two totally different cases for the thing.<br /><br />So considering that almost nobody does this (certainly not SpecInt), and <br />it would probably require re-organizations at many levels, I'm not <br />surprised it hasn't gotten a lot of attention.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
