    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/26/102">First message in thread</a></li><li><a href="/lkml/2005/9/26/122">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/26/137">Anton Altaparmakov</a><ul><li class="origin"><a href="/lkml/2005/9/26/147">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/26/147">Al Viro</a></li><li><a href="/lkml/2005/9/26/188">Anton Altaparmakov</a><ul><li><a href="/lkml/2005/9/26/224">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/9/26/143">Al Viro</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 26 Sep 2005 09:41:14 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/4] NTFS: Fix sparse warnings that have crept in over time.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 26 Sep 2005, Anton Altaparmakov wrote:<br />&gt; &gt; <br />&gt; &gt; What was the warning that caused this (and the two other things that look <br />&gt; &gt; the same)?<br />&gt; <br />&gt; fs/ntfs/mft.c:2577:24: warning: incompatible types for operation (&amp;)<br />&gt; fs/ntfs/mft.c:2577:24:    left side has type unsigned long long [unsigned] [usertype] &lt;noident&gt;<br />&gt; fs/ntfs/mft.c:2577:24:    right side has type bad type enum MFT_REF_CONSTS [toplevel] MFT_REF_MASK_CPU<br />&gt; fs/ntfs/mft.c:2577:24: warning: cast from unknown type<br /><br />Ok, not the most wonderful of error messages, I do have to admit ;)<br /><br />That's sparse being very verbose and not saying a lot, but what happens is<br />that the "enum" doesn't have a well-defined type, since the different <br />constants in the enum don't have compatible types.<br /><br />So it's type ends up being a "bad type enum MFT_REF_CONSTS"<br /><br />(It also prints out the name of the symbol with that type, which is why<br />you also see the MFT_REF_MASK_CPU - the "[toplevel]" is just an internal <br />sparse bit saying that it was declared outside of any block scope).<br /><br />I'm actually a bit surprised that the cast even shut sparse up. It<br />probably shouldn't have, and it should have complained about casting an<br />unknown type even _with_ your added cast (ie I think it should have cut<br />your four lines of warning down to one).<br /><br />Did it?<br /><br />&gt; &gt; The issue? "enum" is really an integer type. As in "int". Trying to put a <br />&gt; &gt; larger value than one that fits in "int" is not guaranteed to work.<br />&gt; <br />&gt; Yes, that is true but as you say it does work with gcc.<br /><br />Yes, and sparse will actually conform to gcc behaviour. I think we had a <br />warning about it, but it's sadly quite common in the kernel ;p<br /><br />So if the size of the constants was the only problem, sparse wouldn't <br />actually have complained.<br /><br />The reason it ended up complaining was that it couldn't promote the <br />different enum values to the same type. <br /><br />I suspect it might be more readable had it complained at enum declaration<br />time instead, since at that point it would have been able to describe<br />_why_ it didn't like that enum a bit better. But the problem with that <br />approach is that then it complains whether the thing is used or not (and a <br />lot of things are bad only at usage time, so sparse tends to try to <br />delay any complaints as long as computerly possible).<br /><br />&gt; &gt; There's another issue, namely that the type of the snum is not only of <br />&gt; &gt; undefined size (is it the same size as an "int"? Is it an "unsigned long <br />&gt; &gt; long"?) but the "endianness" of it is also now totally undefined. You have <br />&gt; &gt; two different endiannesses inside the _same_ enum. What is the type of the <br />&gt; &gt; enum?<br />&gt; <br />&gt; Good question.  "confused"?  (-;<br /><br />Well, in gcc it's clear: it's "unsigned long long".  Because gcc doesn't <br />know about little-endian vs big-endian.<br /><br />In sparse, it's not actually confused either, it's "enum of type<br />bad_ctype". But the error message isn't very helpful unless you understand<br />how sparse does that internally (that's why sparse says "right side has<br />type bad type enum ..." - that "bad type enum" is the magic code-word)<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
