    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/9/14/331">First message in thread</a></li><li><a href="/lkml/2005/9/15/236">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/15/243">Andrea Arcangeli</a><ul><li class="origin"><a href="/lkml/2005/9/15/261">Linus Torvalds</a><ul><li><a href="/lkml/2005/9/15/261">Andrea Arcangeli</a><ul><li><a href="/lkml/2005/9/15/316">Daniel Jacobowitz</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Sep 2005 10:52:14 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: ptrace can't be transparent on readonly MAP_SHARED</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Sep 2005, Andrea Arcangeli wrote:<br />&gt;<br />&gt; On Thu, Sep 15, 2005 at 09:34:12AM -0700, Linus Torvalds wrote:<br />&gt; &gt; If you think the data is wrong, then you are arguing against the COW. Yes, <br />&gt; &gt; the COW will make the data "wrong", but you can't escape that. That's what <br />&gt; &gt; a "write" by ptrace does.<br />&gt; <br />&gt; My point is that exactly because this is the wrong page with the wrong<br />&gt; data with the wrong ptrace usage, these kind of things will happen in a<br />&gt; very controlled environment<br /><br />I disagree.<br /><br />_The_ most common use of PTRACE_POKE is debugging. And gdb doesn't "know" <br />what the process is doing.<br /><br />&gt; I don't see why the kernel should bother to fix an unfixable case.<br /><br />I don't see why you argue against trying to do our best.<br /><br />Let me tell you why you're wrong, with a real-life example.<br /><br />I debugged "sparse" with making all de-allocations turn the page <br />protections to PROT_NONE. <br /><br />That's absolutely _wonderful_. It means that when the process does a bad<br />access, I get a SIGSEGV (and the memory hasn't been allocated to something<br />else, as would happen if I had just munmapped it). And when debugging <br />this, I could _see_ what the old contents were - because PTRACE_PEEK <br />could punch through the protections - so I had lots of extra information. <br /><br />For example, I could look at the free'd data to see where it came from, <br />because the free'd data actually contained pointers to other stuff, giving <br />me a very good view of _what_ had gotten free'd too early.<br /><br />Now, in this case, a SIGSEGV was always fatal, but the fact is, some <br />applications actually catch it, and do their own VM management. It's rare, <br />but it definitely exists. So should the fact that I looked at the data <br />make that the protections changed? HELL NO! My debugger may have looked at <br />it, but that doesn't invalidate the notion that the program still expected <br />to get a SIGSEGV on it.<br /><br />And the PTRACE_POKE is _exactly_ the same thing. There's _zero_ <br />difference. The fact that PTRACE_POKE _changes_ the data instead of just <br />reading it doesn't change anything at all - the fact that data got changed <br />in NO WAY invalidates the fact that processes might still depend on <br />getting a SIGSEGV.<br /><br />If you want to change permissions, then add a PTRACE_MPROTECT thing or <br />something, and teach gdb to use that. But if you don't want to change <br />permissions, then you shouldn't change permissions.<br /><br />Now, if you have a technical reason why "maybe_mkwrite()" needs to go <br />away, then that's a different thing. BUT IT HAS NOTHING TO DO WITH THE <br />FACT THAT WE LOOKED AT OR CHANGED THE DATA!<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
