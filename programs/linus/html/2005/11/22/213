    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/11/20/189">First message in thread</a></li><li><a href="/lkml/2005/11/22/159">Linus Torvalds</a><ul><li><a href="/lkml/2005/11/22/189">Matthew Wilcox</a></li><li><a href="/lkml/2005/11/22/196">David Howells</a><ul><li><a href="/lkml/2005/11/22/212">David Woodhouse</a><ul><li><a href="/lkml/2005/11/22/227">Linus Torvalds</a><ul><li><a href="/lkml/2005/11/22/345">David Woodhouse</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2005/11/22/233">Linus Torvalds</a><ul><li><a href="/lkml/2005/11/22/233">David Howells</a><ul><li><a href="/lkml/2005/11/22/243">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 22 Nov 2005 11:05:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 4/5] Centralise NO_IRQ definition</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 22 Nov 2005, David Howells wrote:<br />&gt; <br />&gt; &gt; In short: NO_IRQ _is_ 0. Always has been.<br />&gt; <br />&gt; So what? That hasn't stopped you imposing a blanket change before.<br />&gt; <br />&gt; &gt; It's the only sane value.<br />&gt; <br />&gt; Has anyone ever accused you of being sane? :-)<br /><br />Good arguments, but usually when I'm insane I do blanket changes that I at <br />least personally agree with.<br /><br />So my insanity is a "self-consistent" one, although part of it is that I <br />do tend to change my mind (ie I may be self-consistent at any particular <br />point in time, but I reserve the right to be inconsistent over the span of <br />a day, week, or a year).<br /><br />&gt; &gt; Anybody who does anything else is a bug waiting to happen.<br />&gt; <br />&gt; My three main concerns are this:<br />&gt; <br />&gt;  (1) Changing the no-irq value away from zero is going to cause problems in<br />&gt;      certain drivers that assume they can do !dev-&gt;irq. I'd like my drivers to<br />&gt;      work without me having to do anything to them, but there's a lot of<br />&gt;      rubbish drivers out there, even allowing for this. I suspect this is a<br />&gt;      tiny part of the problem, and easily fixed in the drivers in the kernel.<br /><br />Drivers really are the bulk of the kernel. They are a huge problem spot in <br />general, because quite often driver writers are pretty limited in their <br />understanding of the big picture and the rest of the kernel, which <br />together with the fact that drivers are often hard to write _anyway_ (bad <br />hw docs if you have any at all, coupled with often the hardware itself <br />having strange "features") means that drivers often have the lowest <br />quality of code.<br /><br />To make matters worse, most drivers will have very limited testing anyway, <br />because they have a limited audience. There's a few _very_ common drivers, <br />but there's a lot of drivers that are relevant to only a small percentage <br />of kernel users.<br /><br />Finally, in this particular case, the notion of NO_IRQ is usually an issue <br />only for a small percentage of that small percentage. I bet there are tons <br />of drivers that don't even bother to check, because they simply don't need <br />to: they always have an interrupt available, or the machine would be so <br />broken that it wouldn't ever get used anyway.<br /><br />This is part of the reason why I'm so adamant that _only_ PC's matter in <br />this space. For all other architectures, the small percentage of a small <br />percentage of a small percentage basically means that the driver is <br />totally irrelevant and has never had any users and absolutely zero <br />testing.<br /><br />So when it comes to drivers, other architectures simply _have_ to look <br />like a PC, because if they don't, they'll be sorry. They'll _never_ get <br />the kind of testing overhead that PC's get. And even on bog-standard <br />Linux/x86, we have several times had an issue of a driver being broken for <br />over a _year_ or more, without anybody noticing, and only then being <br />fixed (because the users were so few that it took a long time before they <br />upgraded).<br /><br />And this is why I absolutely _hate_ to make changes that you can only test <br />by actually having the hardware. Sometimes we have to do it (the big <br />interrupt handling changes for SMP), and for all I know we _still_ have <br />drivers that simply don't even compile on SMP because they depend on the <br />old global "cli/sti" behaviour.<br /><br />And in this case, I'm 100% convinced we do not want to change that old PC <br />behaviour. The fact is, -1 really _is_ technically worse than 0. As <br />already mentioned "unsigned int" is actually the canonical form of NO_IRQ, <br />so -1 really ends up being "~0u", and that coupled with the fact that some <br />people use "int", others use "unsigned long" is just clearly not good.<br /><br />So my suggested (very _strongly_ suggested) solution is for people to just <br />consider "irq" to be a cookie, with the magical value 0 meaning "not <br />there" but no inherent meaning otherwise. That just solves all the <br />fundamentally hard problems, and has no fundamental problems of its own.<br /><br />The thing is, we'll have to do that _anyway_ over time.  We _know_ that <br />even PCI interrupts are changing. We're clearly moving towards a world <br />where an interrupt is _literally_ a cookie from the device, and this very <br />much includes PCI. What do you think MSI (message signalled interrupts) <br />are all about?<br /><br />So thinking about "dev-&gt;irq" as a cookie is literally the right thing to <br />do. It is _not_ an index, and it certainly has nothing to do with things <br />like the pci interrupt line register or what the actual hardware <br />connection to the CPU is. It's a cookie. And for historical reasons we <br />have value 0 being the "no cookie" value.<br /><br />There are actually some good reasons to think of interrupts as kernel <br />_pointers_ (and they'd point to the "irq descriptor"), but quite frankly, <br />right now that's just too big of a change. But if we ever do that change, <br />the value 0 would _still_ be the "no cookie" value, and you'd _still_ just <br />use "if (!dev-&gt;irq)" to test whether you had an irq or not.<br /><br />(If somebody wants to try to make "irq" into a pointer, I'd actually be a <br />lot more supportive of it than of this "NO_IRQ" thing. I suspect it's a <br />bigger patch than we really want, for not a lot of gain, but at least it <br />would result in compile warnings for drivers, which is a way to control <br />the damage. That's what we did for the SMP irq disable/enable changes too)<br /><br />&gt; I'd like to see dev-&gt;irq as a pointer to a structure.<br /><br />Yes, indeed. We already even probably have the right structure (ie likely <br />the right thing to do is to just use the current "irq_desc_t *").<br /><br />If somebody wants to do that, I'll happily accept it. I just suspect it's <br />a _lot_ of work.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
