    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/11/9/403">First message in thread</a></li><li><a href="/lkml/2005/11/23/391">Linus Torvalds</a><ul><li><a href="/lkml/2005/11/23/454">(Eric W. Biederman)</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Nov 2005 15:40:18 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] SMP alternatives</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 23 Nov 2005, Eric W. Biederman wrote:<br />&gt; <br />&gt; In fact for being explict we already have PROT_SEM on some architectures<br />&gt; to report if we are going to use atomic operations, in the mmap.  For<br />&gt; x86 we would probably need to introduce a PROT_NOSEM but it is sounds<br />&gt; fairly straight forward to implement.<br /><br />PROT_SEM was a mistake, I feel. It's way too easy to get it wrong. You <br />have most architectures and environments that don't need it, and as a <br />result, applications simply won't have it in their sources.<br /><br />I suspect that with MAP_SHARED + PROT_WRITE being pretty uncommon anyway, <br />we can probably find trivial patterns in the kernel. Like only one process <br />holding that file open - which is what you get with things that use mmap() <br />to write a new file (I think "ld" used to have a config option to write <br />files that way, for example).<br /><br />And if we end up sometimes giving "lock" meaning even when it's not <br />needed, tough. The point of the simple hack is very much a "get 90% of the <br />advantage for very little effort". <br /><br />Regardless, even if we get a flag like that (and the Intel people didn't <br />seem to dismiss the idea), it's likely a more than a few years down the <br />line. So it's not like this is a pressing concern ;)<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
