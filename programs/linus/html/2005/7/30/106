    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/30/32">First message in thread</a></li><li><a href="/lkml/2005/7/30/32">Chuck Ebbert</a><ul><li><a href="/lkml/2005/7/30/63">Alexander Nyberg</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/7/30/106/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Jul 2005 10:08:20 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Making it easier to find which change introduced a bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 30 Jul 2005, Alexander Nyberg wrote:<br />&gt; <br />&gt; Linus, do you think we could have something like<br />&gt; patch-2.6.13-rc4-incremental-broken-out.tar.bz2 that could like Andrew's<br />&gt; be placed into patches/ in a tree?<br /><br />Not really. The thing is, since the git patches really _aren't_ serial, <br />and merging isn't based on patch-merging at all (unlike quilt, that <br />literally merges patches as patches), you can't really linearize a git <br />tree without getting some really strange behaviour.<br /><br />&gt; As it stands today it's easier for us who don't know git to just find<br />&gt; out in which mainline kernel it works and which -mm it doesn't work in,<br />&gt; get the broken-out and start push/pop. And I know I'm not the only one<br />&gt; who has noticed this.<br /><br />What we can do is try to script the git bisection thing so that it's<br />really trivial. It's actually very simple to use, and I think somebody had<br />some example scripts around.<br /><br />Here's a simple starting point for somebody who wants to try.. It's not <br />very well tested, but I've done _some_ testing on it to try to make sure <br />it's at least reasonable. It adds four new git commands:<br /><br /> - "git bisect-start"<br />	reset bisect state<br /><br /> - "git bisect-bad"<br />	mark some version known-bad (if no arguments, then current HEAD)<br /><br /> - "git bisect-good"<br />	mark some version known-good (if no arguments, then current HEAD)<br /><br /> - "git bisect"<br />	do a bisection between the known bad and the known good heads, and <br />	check that version out.<br /><br />Then, the way you use it is:<br /><br />	git bisect-start<br />	git bisect-bad			# Current version is bad<br />	git bisect-good v2.6.13-rc2	# v2.6.13-rc2 was the last version tested that was good<br />	git bisect<br /><br />which will say something like<br /><br />	Bisecting: 675 revisions left to test after this<br /><br />and check out the state in the middle. Now, compile that kernel, and boot <br />it. Now, let's say that this booted kernel works fine, then just do<br /><br />	git bisect-good			# this one is good<br />	git bisect<br /><br />which will now say<br /><br />	Bisecting: 337 revisions left to test after this<br /><br />and you continue along, compiling that one, testing it, and depending on <br />whether it is good or bad, you say "git-bisect-good" or "git-bisect-bad", <br />and ask for the next bisection.<br /><br />Until you have no more left, and you'll have been left with the first bad<br />kernel rev in "refs/bisect/bad".<br /><br />Oh, and then after you want to reset to the original head, do a<br /><br />	git checkout master<br /><br />to get back to the master branch, instead of being in one of the bisection <br />branches ("git bisect-start" will do that for you too, actually: it will <br />reset the bisection state, and before it does that it checks that you're <br />not using some old bisection branch).<br /><br />Not really any harder than doing series of "quilt push" and "quilt pop", <br />now is it?<br /><br />		Linus<br /><br />---<br />diff --git a/Makefile b/Makefile<br />--- a/Makefile<br />+++ b/Makefile<br />&#64;&#64; -62,7 +62,9 &#64;&#64; SCRIPTS=git git-apply-patch-script git-m<br /> 	git-format-patch-script git-sh-setup-script git-push-script \<br /> 	git-branch-script git-parse-remote git-verify-tag-script \<br /> 	git-ls-remote-script git-clone-dumb-http git-rename-script \<br />-	git-request-pull-script<br />+	git-request-pull-script git-bisect-bad-script git-bisect-good-script \<br />+	git-bisect-script git-bisect-start-script<br />+<br /> <br /> PROG=   git-update-cache git-diff-files git-init-db git-write-tree \<br /> 	git-read-tree git-commit-tree git-cat-file git-fsck-cache \<br />diff --git a/git-bisect-bad-script b/git-bisect-bad-script<br />new file mode 100755<br />--- /dev/null<br />+++ b/git-bisect-bad-script<br />&#64;&#64; -0,0 +1,4 &#64;&#64;<br />+#!/bin/sh<br />+. git-sh-setup-script || dir "Not a git archive"<br />+rev=$(git-rev-parse --revs-only --verify --default HEAD "$&#64;") || exit<br />+echo "$rev" &gt; "$GIT_DIR/refs/bisect/bad"<br />diff --git a/git-bisect-good-script b/git-bisect-good-script<br />new file mode 100755<br />--- /dev/null<br />+++ b/git-bisect-good-script<br />&#64;&#64; -0,0 +1,4 &#64;&#64;<br />+#!/bin/sh<br />+. git-sh-setup-script || dir "Not a git archive"<br />+rev=$(git-rev-parse --revs-only --verify --default HEAD "$&#64;") || exit<br />+echo "$rev" &gt; "$GIT_DIR/refs/bisect/good-$rev"<br />diff --git a/git-bisect-script b/git-bisect-script<br />new file mode 100755<br />--- /dev/null<br />+++ b/git-bisect-script<br />&#64;&#64; -0,0 +1,15 &#64;&#64;<br />+#!/bin/sh<br />+. git-sh-setup-script || dir "Not a git archive"<br />+bad=$(git-rev-parse --revs-only --verify refs/bisect/bad) || exit<br />+good=($(git-rev-parse --revs-only --not $(cd "$GIT_DIR" ; ls refs/bisect/good-*))) || exit<br />+rev=$(git-rev-list --bisect $bad ${good[&#64;]}) || exit<br />+nr=$(git-rev-list $rev ${good[&#64;]} | wc -l) || exit<br />+if [ "$nr" = "0" ]; then<br />+	echo "$bad is first bad commit"<br />+	git-diff-tree --pretty $bad<br />+	exit 0<br />+fi<br />+echo "Bisecting: $nr revisions left to test after this"<br />+echo "$rev" &gt; "$GIT_DIR/refs/heads/new-bisect"<br />+git checkout new-bisect || exit<br />+cd "$GIT_DIR" &amp;&amp; mv refs/heads/new-bisect refs/heads/bisect &amp;&amp; ln -sf refs/heads/bisect HEAD<br />diff --git a/git-bisect-start-script b/git-bisect-start-script<br />new file mode 100755<br />--- /dev/null<br />+++ b/git-bisect-start-script<br />&#64;&#64; -0,0 +1,26 &#64;&#64;<br />+#!/bin/sh<br />+. git-sh-setup-script || die "Not a git archive"<br />+<br />+#<br />+# Verify HEAD. If we were bisecting before this, reset to the<br />+# top-of-line master first!<br />+#<br />+head=$(readlink $GIT_DIR/HEAD) || die "Bad HEAD - I need a symlink"<br />+case "$head" in<br />+refs/heads/bisect*)<br />+	git checkout master || exit<br />+	;;<br />+refs/heads/*)<br />+	;;<br />+*)<br />+	die "Bad HEAD - strange symlink"<br />+	;;<br />+esac<br />+<br />+#<br />+# Get rid of any old bisect state<br />+#<br />+cd "$GIT_DIR"<br />+rm -f "refs/heads/bisect"<br />+rm -rf "refs/bisect/"<br />+mkdir "refs/bisect"<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
