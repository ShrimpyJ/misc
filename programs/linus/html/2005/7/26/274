    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/26/267">First message in thread</a></li><li><a href="/lkml/2005/7/26/267">Chuck Ebbert</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Jul 2005 14:47:05 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2.6.13-rc3a] i386: inline restore_fpu</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 26 Jul 2005, Chuck Ebbert wrote:<br />&gt; <br />&gt;  Since fxsave leaves the FPU state intact, there ought to be a better way to do<br />&gt; this but it gets tricky.  Maybe using the TSC to put a timestamp in every thread<br />&gt; save area?<br /><br />We used to have totally lazy FP saving, and not toucht he FP state at <br />_all_ in the scheduler except to just set the TS bit.<br /><br />It worked wonderfully well on UP, but getting it working on SMP is a major<br />pain, since the lazy state you want to switch back into might be cached on<br />some other CPU's registers, so we never did it on SMP. Eventually it got<br />too painful to maintain two totally different logical code-paths between<br />UP and SMP, and some bug or other ended up resulting in the current "lazy<br />on a time slice level" thing which works well in SMP too.<br /><br />Also, a lot of the cost is really the save, and before SSE2 the fnsave<br />would clear the FPU state, so you couldn't just do a save and try to elide <br />just the restore in the lazy case. In SSE2 (with fxsave) we _could_ try to <br />do that, but the thing is, I doubt it really helps.<br /><br />First off, 99% of all programs don't hit the nasty case at all, and for<br />something broken like volanomark that _does_ hit it, I bet that there i<br />smore than one thread using the FP, so you can't just cache the FP state<br />in the CPU _anyway_.<br /><br />So we could enhance the current state by having a "nonlazy" mode like in<br />the example patch, except we'd have to make it a dynamic flag. Which could<br />either be done by explicitly marking binaries we want to be non-lazy, or<br />by just dynamically noticing that the rate of FP restores is very high.<br /><br />Does anybody really care about volanomark? Quite frankly, I think you'd<br />see a _lot_ more performance improvement if you could instead teach the<br />Java stuff not to use FP all the time, so it feels a bit like papering<br />over the _real_ bug if we'd try to optimize this abnormal and silly case<br />in the kernel.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
