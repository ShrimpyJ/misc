    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/27/72">First message in thread</a></li><li><a href="/lkml/2005/7/28/219">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/86">David Woodhouse</a><ul><li><a href="/lkml/2005/7/29/143">"Maciej W. Rozycki"</a></li><li><a href="/lkml/2005/7/29/173">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/7/29/142">"Maciej W. Rozycki"</a><ul><li class="origin"><a href="/lkml/2005/7/29/191">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/191">"Maciej W. Rozycki"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Jul 2005 09:29:47 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] speed up on find_first_bit for i386 (let compiler do the work)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Jul 2005, Maciej W. Rozycki wrote:<br />&gt; <br />&gt;  Hmm, that's what's in the GCC info pages for the relevant functions <br />&gt; (I've omitted the "l" and "ll" variants):<br />&gt; <br />&gt; "-- Built-in Function: int __builtin_ffs (unsigned int x)<br />&gt;      Returns one plus the index of the least significant 1-bit of X, or<br />&gt;      if X is zero, returns zero.<br /><br />This, for example, clashes with the x86 semantics.<br /><br />If X is zero, the bsfl instruction will set the ZF flag, and the result is <br />undefined (on many, but not all, CPU's it will either be zero _or_ <br />unmodified).<br /><br />We don't care, since we actually test the input for being zero separately<br />_anyway_, but my point is that if the builtin is badly done (and I<br />wouldn't be in the least surprised if it was), then it's going to do a<br />totally unnecessary conditional jump of cmov.<br /><br />See? __builtin's can generate _worse_ code, exactly because they try to <br />have portable semantics that may not even matter.<br /><br />In contrast, just doing it by hand allows us to avoid all that crap.<br /><br />Doing it by hand as inline assembly also allows us to do dynamic <br />optimizations like instruction rewriting, so inline assembly is a _lot_ <br />more powerful than builtins can reasonably ever be.<br /><br />&gt; If that's not enough, then what would be?  I'm serious -- if you find it <br />&gt; inadequate, then perhaps it could be improved.<br /><br />It's inadequate because IT IS POINTLESS.<br /><br />The builtin buys you absolutely _nothing_, and the inline asm is simpler, <br />potentially faster, and works with every single version of gcc. <br /><br />USING THE BUILTIN IS A PESSIMISATION!<br /><br />It has absolutely _zero_ upsides, and I've named three _major_ downsides.<br /><br />It has another downside too: it's extra complexity and potential for bugs <br />in the compiler. And if you tell me gcc people never have bugs, I will <br />laugh in your general direction.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
