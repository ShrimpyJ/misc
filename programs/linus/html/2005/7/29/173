    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/27/72">First message in thread</a></li><li><a href="/lkml/2005/7/28/219">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/86">David Woodhouse</a><ul><li><a href="/lkml/2005/7/29/143">"Maciej W. Rozycki"</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/7/29/142">"Maciej W. Rozycki"</a><ul><li><a href="/lkml/2005/7/29/172">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/191">"Maciej W. Rozycki"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Jul 2005 09:23:18 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] speed up on find_first_bit for i386 (let compiler do the work)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 29 Jul 2005, David Woodhouse wrote:<br />&gt;<br />&gt; On Thu, 2005-07-28 at 10:25 -0700, Linus Torvalds wrote:<br />&gt; &gt; Basic rule: inline assembly is _better_ than random compiler extensions. <br />&gt; &gt; It's better to have _one_ well-documented extension that is very generic <br />&gt; &gt; than it is to have a thousand specialized extensions.<br />&gt; <br />&gt; Counterexample: FR-V and its __builtin_read8() et al.<br /><br />There are arguably always counter-examples, but your arguments really are <br />pretty theoretical.<br /><br />Very seldom does compiler extensions end up being (a) timely enough and <br />(b) semantically close enough to be really useful.<br /><br />&gt; Builtins can also allow the compiler more visibility into what's going<br />&gt; on and more opportunity to optimise.<br /><br />Absolutely. In theory. In practice, not so much. All the opportunity to <br />optimize often ends up being lost in semantic clashes, or just because <br />people can't use the extension because it hasn't been there since day one.<br /><br />The fact is, inline asms are pretty rare even when we are talking about<br />every single possible assembly combination. They are even less common when<br />we're talking about just _one_ specific case of them (like something like<br />__builtin_ffs()).<br /><br />What does this mean? It has two results: (a) instruction-level scheduling <br />and register allocation just isn't _that_ important, and the generic "asm" <br />register scheduling is really plenty good enough. The fact that in theory <br />you might get better results if the compiler knew exactly what was going <br />on is just not relevant: in practice it's simply not _true_. The other <br />result is: (b) the compiler people don't end up seeing something like the <br />esoteric builtins as a primary thing, so it's not like they'd be tweaking <br />and regression-testing everything _anyway_.<br /><br />So I argue very strongly that __builtin_xxx() is _wrong_, unless you have <br />very very strong reasons for it:<br /><br /> - truly generic and _very_ important stuff: __builtin_memcpy() is<br />   actually very much worth it, since it's all over, and it's so generic <br />   that the compiler has a lot of choice in how to do it.<br /><br /> - stuff where the architecture (or the compiler) -really- sucks with<br />   inline asms, and has serious problems, and the thing is really <br />   important. Your FR-V example _might_ fall into this category (or it <br />   might not), and ia64 has the problem with instruction packing and<br />   scheduling and so __builtin's have a bigger advantage.<br /><br />Basically, on most normal architectures, there's seldom any reason at<br />_all_ to use builtins except for things like memcpy. On x86, I think the<br />counter-example might be if you want to schedule MMX code from C - which<br />is a special case because it doesn't follow my "rule (a)" above. But we <br />don't do that in the kernel, really, or we just schedule it out-of-line.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
