    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/27/72">First message in thread</a></li><li><a href="/lkml/2005/7/28/208">"Maciej W. Rozycki"</a><ul><li><a href="/lkml/2005/7/28/204">Steven Rostedt</a></li><li><a href="/lkml/2005/7/28/215">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/148">"Maciej W. Rozycki"</a></li></ul></li><li><a href="/lkml/2005/7/28/219">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/86">David Woodhouse</a><ul><li><a href="/lkml/2005/7/29/143">"Maciej W. Rozycki"</a></li><li><a href="/lkml/2005/7/29/173">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/7/29/142">"Maciej W. Rozycki"</a><ul><li><a href="/lkml/2005/7/29/172">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/29/191">"Maciej W. Rozycki"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/7/28/240">Steven Rostedt</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Jul 2005 11:56:39 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] speed up on find_first_bit for i386 (let compiler do the work)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 28 Jul 2005, Steven Rostedt wrote:<br />&gt; <br />&gt; OK, I guess when I get some time, I'll start testing all the i386 bitop<br />&gt; functions, comparing the asm with the gcc versions.  Now could someone<br />&gt; explain to me what's wrong with testing hot cache code. Can one<br />&gt; instruction retrieve from memory better than others?<br /><br />There's a few issues:<br /><br /> - trivially: code/data size. Being smaller automatically means faster if<br />   you're cold-cache. If you do cycle tweaking of something that is <br />   possibly commonly in the L2 cache or further away, you migt as well<br />   consider one byte of code-space to be equivalent to one cycle (a L1 I$ <br />   miss can easily take 50+ cycles - the L1 fill cost may be just a small <br />   part of that, but the pipeline problem it causes can be deadly).<br /><br /> - branch prediction: cold-cache is _different_ from hot-cache. hit-cache <br />   predicts the stuff dynamically, cold-cache has different rules (and it <br />   is _usually_ "forward predicts not-taken, backwards predicts taken", <br />   although you can add static hints if you want to on most architectures).<br /><br />   So hot-cache may look very different indeed - the "normal" case might <br />   be that you mispredict all the time because the static prediction is <br />   wrong, but then a hot-cache benchmark will predict perfectly.<br /><br /> - access patterns. This only matters if you look at algorithmic changes. <br />   Hashes have atrocious locality, but on the other hand, if you know that <br />   the access pattern is cold, a hash will often have a minimum number of <br />   accesses. <br /><br />but no, you don't have "some instructions are better at reading from <br />memory" for regular integer code (FP often has other issues, like reading <br />directly from L2 without polluting L1, and then there are obviously <br />prefetch hints).<br /><br />Now, in the case of your "rep scas" conversion, the reason I applied it<br />was that it was obviously a clear win (rep scas is known bad, and has<br />register allocation issues too), so I'm _not_ claiming that the above<br />issues were true in that case. I just wanted to say that in general it's <br />nice (but often quite hard) if you can give cold-cache numbers too (for <br />example, using the cycle counter and being clever can actually give that).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
