    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/27/72">First message in thread</a></li><li><a href="/lkml/2005/7/27/328">Nick Piggin</a><ul><li><a href="/lkml/2005/7/28/88">Steven Rostedt</a><ul><li><a href="/lkml/2005/7/28/106">Steven Rostedt</a><ul><li><a href="/lkml/2005/7/28/172">Linus Torvalds</a></li></ul></li><li class="origin"><a href="/lkml/2005/7/28/185">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/28/185">Steven Rostedt</a><ul><li><a href="/lkml/2005/7/28/208">"Maciej W. Rozycki"</a></li></ul></li></ul></li><li><a href="/lkml/2005/7/28/223">Mitchell Blank Jr</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Jul 2005 08:30:08 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] speed up on find_first_bit for i386 (let compiler do the work)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 28 Jul 2005, Steven Rostedt wrote:<br />&gt;<br />&gt; In the thread "[RFC][PATCH] Make MAX_RT_PRIO and MAX_USER_RT_PRIO<br />&gt; configurable" I discovered that a C version of find_first_bit is faster<br />&gt; than the asm version now when compiled against gcc 3.3.6 and gcc 4.0.1<br />&gt; (both from versions of Debian unstable).  I wrote a benchmark (attached)<br />&gt; that runs the code 1,000,000 times.<br /><br />I suspect the old "rep scas" has always been slower than <br />compiler-generated code, at least under your test conditions. Many of the <br />old asm's are actually _very_ old, and some of them come from pre-0.01 <br />days and are more about me learning the i386 (and gcc inline asm).<br /><br />That said, I don't much like your benchmarking methodology. I suspect that <br />quite often, the code in question runs from L2 cache, not in a tight loop, <br />and so that "run a million times" approach is not necessarily the best <br />one.<br /><br />I'll apply this one as obvious: I doubt the compiler generates bigger code<br />or has any real downsides, but I just wanted to say that in general I just<br />wish people didn't always time the hot-cache case ;)<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
