    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/31/8">First message in thread</a></li><li><a href="/lkml/2005/7/31/8">"Brown, Len"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2005/7/31/44">"Rafael J. Wysocki"</a></li><li><a href="/lkml/2005/7/31/194">Dave Jones</a><ul><li><a href="/lkml/2005/7/31/224">Andreas Steinmetz</a><ul><li><a href="/lkml/2005/7/31/226">Dave Jones</a><ul><li><a href="/lkml/2005/7/31/227">Andreas Steinmetz</a></li></ul></li></ul></li><li><a href="/lkml/2005/8/3/63">Pavel Machek</a></li></ul></li><li><a href="/lkml/2005/8/1/54">Matthew Garrett</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Jul 2005 22:31:37 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">RE: revert yenta free_irq on suspend</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 31 Jul 2005, Brown, Len wrote:<br />&gt; <br />&gt; If one believes that suspend/resume is working on a large number of<br />&gt; systems -- working to a level that a distro can acutally support it,<br />&gt; then restoring our temporary resume IRQ router hack to make many systems<br />&gt; work is clearly the right thing to do.<br /><br />I don't believe that it works on a huge number of devices as-is, no.<br /><br />But I'm definitely even less likely to believe in this "two steps forward,<br />one step back" dance. Because as far as I can tell, it's equally often<br />"one step forward, two steps back", and nobody can tell when we go forware <br />more than we go backwards.<br /><br />So I'd rather have "one tenth of a step forward, but if we see even a <br />_hint_ of a step back, we revert immediately".<br /><br />I realize that sounds damn timid and boring, but the thing is:<br /><br /> - even _if_ (and quite frankly, judging by the complaints, I find that <br />   unlikely) we're doing more forward progress than backwards progress <br />   ("backwards progress? you moron!"), the "one step back" thing is really <br />   doing a _huge_ amount of psychological damage to the whole thing.<br /><br />   The thing is, we're better off making very very slow progress that is <br />   _steady_, than having people who _used_ to have things work for them <br />   suddenly break.<br /><br />   So I believe that if we fix two machines and break one machine, we've <br />   actually regressed. It doesn't matter that we fixed more than we broke: <br />   we _still_ regressed. Because it means that people can't trust the <br />   progress we make!<br /><br />So this is why I'm a very strong proponent of the fact that if we _ever_<br />have anybody complain that a patch broke things, we should immediately<br />revert it, unless we can fix it asap.<br /><br />Btw, this argument is much less true in areas where we can "think" about<br />the problems. In non-driver/non-firmware cases.<br /><br />When we can logically argue from a purely theoretical standpoint for a<br />"known correct solution", and expect the theoretical argument to actually<br />be reflected in practice, I'm much more open to an argument of "ok, we<br />know where we are going, and we'll have to break a few eggs just because<br />the changes are extensive".<br /><br />But when it comes to device drivers and badly documented stuff that<br />developers can usually not even reproduce, our #1 strength is the people<br />for whom it works, and when something breaks, that's a huge big red flag,<br />and then I really think that "revert or fix immediately" is the only<br />reasonable alternative. Otherwise we'll just oscillate about a point that<br />we don't even know where it is, and have no way to judge if the<br />oscillations are getting more violent or are dampening out - we don't have<br />a reference point.<br /><br />But as with everything, there is no total black-and-white case. Things <br />_do_ break occasionally, and clearly we can't guarantee nonbreakage or <br />we'll end up being static.<br /><br />But this particular thing has clearly caused a _lot_ of noise, with<br />second-order breakage from fixes from the first order one. At the very <br />least alternatives should be tried, and I think there _are_ much less <br />intrusive alternatives that are _much_ less likely to have these kinds of <br />negative side effects.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
