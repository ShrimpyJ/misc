    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/7/21/164">First message in thread</a></li><li><a href="/lkml/2005/7/21/164">Chuck Ebbert</a><ul><li><a href="/lkml/2005/7/21/169">Andrew Morton</a><ul><li><a href="/lkml/2005/7/22/15">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/22/59">Arjan van de Ven</a></li></ul></li></ul></li><li><a href="/lkml/2005/7/22/33">Adrian Bunk</a><ul><li class="origin"><a href="/lkml/2005/7/25/149">Linus Torvalds</a><ul><li><a href="/lkml/2005/7/25/149">Bill Davidsen</a></li></ul></li></ul></li><li><a href="/lkml/2005/7/22/187">Linus Torvalds</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/7/22/125/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 22 Jul 2005 11:13:21 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2.6.13-rc3a] i386: inline restore_fpu</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 22 Jul 2005, Adrian Bunk wrote:<br />&gt; <br />&gt; If this patch makes a difference, could you do me a favour and check <br />&gt; whether replacing the current cpu_has_fxsr #define in<br />&gt; include/asm-i386/cpufeature.h with<br />&gt; <br />&gt;   #define cpu_has_fxsr           1<br />&gt; <br />&gt; on top of your patch brings an additional improvement?<br /><br />It would be really sad if it made a difference. There might be a branch<br />mispredict, but the real expense of the fnsave/fxsave will be that<br />instruction itself, and any cache misses associated with it. The 9%<br />performace difference would almost have to be due to a memory bank<br />conflict or something (likely some unnecessary I$ prefetching that<br />interacts badly with the writeback needed for the _big_ memory write<br />forced by the fxsave).<br /><br />I can't see any way that a single branch mispredict could make that big of <br />a difference, but I _can_ see how bad memory access patterns could do it.<br /><br />Btw, the switch from fnsave to fxsave (and thus the change from a 112-byte<br />save area to a 512-byte one, or whatever the exact details are) caused<br />_huge_ performance degradation for various context switching benchmarks. I<br />really hated that, but obviously the need to support SSE2 made it<br />non-optional. The point being that the real overhead is that big memory <br />read/write in fxrestor/fxsave.<br /><br />What _could_ make a bigger difference is not doing the lazy FPU at all.  <br />That lazy FPU is a huge optimization on 99.9% of all loads, but it sounds<br />like java/volanomark are broken and always use the FPU, and then we take a<br />big hit on doing the FP restore exception (an exception is a lot more<br />expensive than a mispredict).<br /><br />Something like the following (totally untested) should make it be<br />non-lazy. It's going to slow down normal task switches, but might speed up <br />the "restoring FP context all the time" case.<br /><br />Chuck? This should work fine with or without your inline thing. Does it <br />make any difference?<br /><br />		Linus<br /><br />-----<br />diff --git a/arch/i386/kernel/process.c b/arch/i386/kernel/process.c<br />--- a/arch/i386/kernel/process.c<br />+++ b/arch/i386/kernel/process.c<br />&#64;&#64; -678,8 +678,16 &#64;&#64; struct task_struct fastcall * __switch_t<br /> 	struct tss_struct *tss = &amp;per_cpu(init_tss, cpu);<br /> <br /> 	/* never put a printk in __switch_to... printk() calls wake_up*() indirectly */<br />-<br />-	__unlazy_fpu(prev_p);<br />+	if (prev_p-&gt;thread_info-&gt;status &amp; TS_USEDFPU) {<br />+		__save_init_fpu(prev_p);<br />+		if (tsk_used_math(next_p))<br />+			init_fpu(next_p);<br />+		restore_fpu(next_p);<br />+		next_p-&gt;thread_info-&gt;status |= TS_USEDFPU;<br />+	} else {<br />+		stts();<br />+		next_p-&gt;thread_info-&gt;status &amp;= ~TS_USEDFPU;<br />+	}<br /> <br /> 	/*<br /> 	 * Reload esp0, LDT and the page table pointer:<br />&#64;&#64; -710,13 +718,13 &#64;&#64; struct task_struct fastcall * __switch_t<br /> 	 * Now maybe reload the debug registers<br /> 	 */<br /> 	if (unlikely(next-&gt;debugreg[7])) {<br />-		set_debugreg(current-&gt;thread.debugreg[0], 0);<br />-		set_debugreg(current-&gt;thread.debugreg[1], 1);<br />-		set_debugreg(current-&gt;thread.debugreg[2], 2);<br />-		set_debugreg(current-&gt;thread.debugreg[3], 3);<br />+		set_debugreg(next-&gt;debugreg[0], 0);<br />+		set_debugreg(next-&gt;debugreg[1], 1);<br />+		set_debugreg(next-&gt;debugreg[2], 2);<br />+		set_debugreg(next-&gt;debugreg[3], 3);<br /> 		/* no 4 and 5 */<br />-		set_debugreg(current-&gt;thread.debugreg[6], 6);<br />-		set_debugreg(current-&gt;thread.debugreg[7], 7);<br />+		set_debugreg(next-&gt;debugreg[6], 6);<br />+		set_debugreg(next-&gt;debugreg[7], 7);<br /> 	}<br /> <br /> 	if (unlikely(prev-&gt;io_bitmap_ptr || next-&gt;io_bitmap_ptr))<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
