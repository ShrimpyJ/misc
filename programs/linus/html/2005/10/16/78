    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/10/15/51">First message in thread</a></li><li><a href="/lkml/2005/10/15/71">Serge Belyshev</a><ul><li><a href="/lkml/2005/10/16/25">Dipankar Sarma</a><ul><li><a href="/lkml/2005/10/16/34">Serge Belyshev</a><ul><li><a href="/lkml/2005/10/16/37">Dipankar Sarma</a><ul><li><a href="/lkml/2005/10/16/75">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2005/10/16/84">Linus Torvalds</a><ul><li><a href="/lkml/2005/10/16/84">Roland Dreier</a></li><li><a href="/lkml/2005/10/17/75">Dipankar Sarma</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/10/16/78/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 16 Oct 2005 19:34:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: VFS: file-max limit 50044 reached</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 16 Oct 2005, Dipankar Sarma wrote:<br />&gt; <br />&gt; Linus, I don't think this has anything to do with RCU grace periods<br />&gt; like we discussed previously. I measured on my 3.6GHz x86_64 and<br />&gt; found that open()/close() pair on /dev/null takes about 45500<br />&gt; cycles or 12 microseconds. [Does that sound resonable?].<br /><br />That sounds very slow. I can do a million open/close pairs in 4 seconds on <br />a 2.5GHz G5. Maybe you tested a cold-cache case?<br /><br />Of course, a P4 is just about the worst architecture to test system call <br />performance on, so ...<br /><br />Still, that's 4us. I'm pretty sure some machines will do it in 3 or less <br />(in fact, lmbench says 3.17us on another machine of mine for open/close). <br />Still, that's only four times faster, so 2 timer ticks should be less than <br />5000 file structs to free.<br /><br />I suspect this patch is worth it for the 2.6.14 timeframe, but I'll wait <br />for confirmation.<br /><br />In fact, for 2.6.14, I'd almost do an even more minimal one. I agree with <br />your changing the file counter to an atomic, but I'd rather keep that <br />change for later.<br /><br />Serge, does this alternate patch work for you?<br /><br />[ cache constructors and destructors are _stupid_. They act exactly the <br />  wrong way from a cache standpoint. ]<br /><br />		Linus<br /><br />---<br />diff --git a/fs/dcache.c b/fs/dcache.c<br />index fb10386..40aaa90 100644<br />--- a/fs/dcache.c<br />+++ b/fs/dcache.c<br />&#64;&#64; -1731,7 +1731,7 &#64;&#64; void __init vfs_caches_init(unsigned lon<br /> 			SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);<br /> <br /> 	filp_cachep = kmem_cache_create("filp", sizeof(struct file), 0,<br />-			SLAB_HWCACHE_ALIGN|SLAB_PANIC, filp_ctor, filp_dtor);<br />+			SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL, NULL);<br /> <br /> 	dcache_init(mempages);<br /> 	inode_init(mempages);<br />diff --git a/fs/file_table.c b/fs/file_table.c<br />index 86ec8ae..fbda480 100644<br />--- a/fs/file_table.c<br />+++ b/fs/file_table.c<br />&#64;&#64; -39,21 +39,9 &#64;&#64; void filp_ctor(void * objp, struct kmem_<br /> {<br /> 	if ((cflags &amp; (SLAB_CTOR_VERIFY|SLAB_CTOR_CONSTRUCTOR)) ==<br /> 	    SLAB_CTOR_CONSTRUCTOR) {<br />-		unsigned long flags;<br />-		spin_lock_irqsave(&amp;filp_count_lock, flags);<br />-		files_stat.nr_files++;<br />-		spin_unlock_irqrestore(&amp;filp_count_lock, flags);<br /> 	}<br /> }<br /> <br />-void filp_dtor(void * objp, struct kmem_cache_s *cachep, unsigned long dflags)<br />-{<br />-	unsigned long flags;<br />-	spin_lock_irqsave(&amp;filp_count_lock, flags);<br />-	files_stat.nr_files--;<br />-	spin_unlock_irqrestore(&amp;filp_count_lock, flags);<br />-}<br />-<br /> static inline void file_free_rcu(struct rcu_head *head)<br /> {<br /> 	struct file *f =  container_of(head, struct file, f_rcuhead);<br />&#64;&#64; -62,6 +50,13 &#64;&#64; static inline void file_free_rcu(struct <br /> <br /> static inline void file_free(struct file *f)<br /> {<br />+	unsigned long flags;<br />+<br />+	/* Stupid. Use atomics */<br />+	spin_lock_irqsave(&amp;filp_count_lock, flags);<br />+	files_stat.nr_files--;<br />+	spin_unlock_irqrestore(&amp;filp_count_lock, flags);<br />+<br /> 	call_rcu(&amp;f-&gt;f_rcuhead, file_free_rcu);<br /> }<br /> <br />&#64;&#64; -73,6 +68,7 &#64;&#64; struct file *get_empty_filp(void)<br /> {<br /> 	static int old_max;<br /> 	struct file * f;<br />+	unsigned long flags;<br /> <br /> 	/*<br /> 	 * Privileged users can go above max_files<br />&#64;&#64; -85,6 +81,11 &#64;&#64; struct file *get_empty_filp(void)<br /> 	if (f == NULL)<br /> 		goto fail;<br /> <br />+	/* Stupid. Use atomics */<br />+	spin_lock_irqsave(&amp;filp_count_lock, flags);<br />+	files_stat.nr_files++;<br />+	spin_unlock_irqrestore(&amp;filp_count_lock, flags);<br />+<br /> 	memset(f, 0, sizeof(*f));<br /> 	if (security_file_alloc(f))<br /> 		goto fail_sec;<br />diff --git a/include/linux/file.h b/include/linux/file.h<br />index f5bbd4c..55f0572 100644<br />--- a/include/linux/file.h<br />+++ b/include/linux/file.h<br />&#64;&#64; -60,8 +60,6 &#64;&#64; extern void put_filp(struct file *);<br /> extern int get_unused_fd(void);<br /> extern void FASTCALL(put_unused_fd(unsigned int fd));<br /> struct kmem_cache_s;<br />-extern void filp_ctor(void * objp, struct kmem_cache_s *cachep, unsigned long cflags);<br />-extern void filp_dtor(void * objp, struct kmem_cache_s *cachep, unsigned long dflags);<br /> <br /> extern struct file ** alloc_fd_array(int);<br /> extern void free_fd_array(struct file **, int);<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
