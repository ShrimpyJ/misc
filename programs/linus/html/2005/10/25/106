    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2005/10/25/106">First message in thread</a></li><li class="origin"><a href="/lkml/2005/10/25/117">Linus Torvalds</a><ul><li><a href="/lkml/2005/10/25/117">Burton Windle</a><ul><li><a href="/lkml/2005/10/25/121">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/10/25/119">Paulo Marques</a></li><li><a href="/lkml/2005/10/25/122">Andre Noll</a></li><li><a href="/lkml/2005/10/25/135">Mark Lord</a><ul><li><a href="/lkml/2005/10/25/137">Linus Torvalds</a><ul><li><a href="/lkml/2005/10/25/140">Mark Lord</a></li></ul></li></ul></li><li><a href="/lkml/2005/10/25/145">Darren Salt</a><ul><li><a href="/lkml/2005/10/25/149">Linus Torvalds</a><ul><li><a href="/lkml/2005/10/25/153">Ivan Kokshaysky</a><ul><li><a href="/lkml/2005/10/25/166">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2005/10/26/47">=?iso-8859-1?Q?Bj=F8rn_Mork?=</a><ul><li><a href="/lkml/2005/10/26/143">Darren Salt</a></li></ul></li></ul></li><li><a href="/lkml/2005/10/25/152">Tim Schmielau</a></li><li><a href="/lkml/2005/10/25/155">Jean Delvare</a></li><li><a href="/lkml/2005/10/25/159">Sanjoy Mahajan</a></li><li><a href="/lkml/2005/10/25/165">Grant Coady</a><ul><li><a href="/lkml/2005/10/25/168">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2005/10/25/195">Felix Oxley</a></li><li><a href="/lkml/2005/10/25/206">John Benes</a></li><li><a href="/lkml/2005/10/25/223">"Jason R. Martin"</a></li><li><a href="/lkml/2005/10/26/8">Guennadi Liakhovetski</a></li><li><a href="/lkml/2005/10/26/13">Ian McDonald</a></li><li><a href="/lkml/2005/10/26/14">Bernd Eckenfels</a></li><li><a href="/lkml/2005/10/26/120">(Dick Streefland)</a><ul><li><a href="/lkml/2005/10/28/110">Jan Engelhardt</a><ul><li><a href="/lkml/2005/10/30/141">Petr Vandrovec</a><ul><li><a href="/lkml/2005/10/30/173">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2005/10/26/121">Jeffrey Hundstad</a></li><li><a href="/lkml/2005/10/26/131">(Dick Streefland)</a></li><li><a href="/lkml/2005/10/28/164">Krzysztof Halasa</a></li><li><a href="/lkml/2005/10/28/340">Krzysztof Halasa</a></li><li><a href="/lkml/2005/10/30/139">Alberto Bertogli</a><ul><li><a href="/lkml/2005/10/30/186">=?iso-8859-1?Q?Rog=E9rio?= Brito</a></li></ul></li><li><a href="/lkml/2005/11/2/293">	anders&#64;localhos ...</a></li><li><a href="/lkml/2005/11/2/350">Willem Riede</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2005/10/25/106/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 25 Oct 2005 10:51:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Call for PIIX4 chipset testers</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />While trying to figure out why one of Alan's laptops didn't like certain <br />resource allocations, it dawned on Ivan and me that the PIIX4 (aka <br />"82371AB PCI-TO-ISA/IDE Xcelerator", aka "old venerable Intel core <br />chipset") actually has a lot more PCI resources that it decodes than the <br />two big special cases we had been quirking out.<br /><br />It's an old chipset by now, but it was very very common, so I bet people <br />still have them around. If doing /sbin/lspci on your machine mentions <br />something like<br /><br />	Intel Corporation 82371AB/EB/MB PIIX4 ISA<br /><br />can you please test out this patch and report what it says in dmesg?<br /><br />It should report a number of quirks, and the easiest way to get them all <br />is to just do<br /><br />	dmesg -s 1000000 | grep PIIX4<br /><br />and send it to me (and you might as well cc linux-kernel too in this <br />thread, so that we'll get the thing archived for later). Preferably <br />together with the output of "cat /proc/ioport" and "/sbin/lspci -xxx".<br /><br />The patch shouldn't actually change any allocations - right now it only <br />prints out the new PCI quirks it tries to decode. And before I make the <br />PCI layer actually know about these quirks, I'd want to have several <br />reports about the output, just to verify that the code works. I don't <br />actually have any PIIX4-based machine myself any more (the curse of <br />frequent upgrades).<br /><br />Thanks,<br /><br />		Linus<br /><br />---<br />diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c<br />index a6a630a..3300dd0 100644<br />--- a/drivers/pci/quirks.c<br />+++ b/drivers/pci/quirks.c<br />&#64;&#64; -241,7 +241,8 &#64;&#64; static void __devinit quirk_s3_64M(struc<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_S3,	PCI_DEVICE_ID_S3_868,		quirk_s3_64M );<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_S3,	PCI_DEVICE_ID_S3_968,		quirk_s3_64M );<br /> <br />-static void __devinit quirk_io_region(struct pci_dev *dev, unsigned region, unsigned size, int nr)<br />+static void __devinit quirk_io_region(struct pci_dev *dev, unsigned region,<br />+	unsigned size, int nr, const char *name)<br /> {<br /> 	region &amp;= ~(size-1);<br /> 	if (region) {<br />&#64;&#64; -259,6 +260,7 &#64;&#64; static void __devinit quirk_io_region(st<br /> 		pcibios_bus_to_resource(dev, res, &amp;bus_region);<br /> <br /> 		pci_claim_resource(dev, nr);<br />+		printk("PCI quirk: region %04x-%04x claimed by %s\n", region, region + size - 1, name);<br /> 	}<br /> }	<br /> <br />&#64;&#64; -291,25 +293,96 &#64;&#64; static void __devinit quirk_ali7101_acpi<br /> 	u16 region;<br /> <br /> 	pci_read_config_word(dev, 0xE0, &amp;region);<br />-	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES);<br />+	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES, "ali7101 ACPI");<br /> 	pci_read_config_word(dev, 0xE2, &amp;region);<br />-	quirk_io_region(dev, region, 32, PCI_BRIDGE_RESOURCES+1);<br />+	quirk_io_region(dev, region, 32, PCI_BRIDGE_RESOURCES+1, "ali7101 SMB");<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_AL,	PCI_DEVICE_ID_AL_M7101,		quirk_ali7101_acpi );<br /> <br />+static void piix4_io_quirk(struct pci_dev *dev, const char *name, unsigned int port, unsigned int enable)<br />+{<br />+	u32 devres;<br />+	u32 mask, size, base;<br />+<br />+	pci_read_config_dword(dev, port, &amp;devres);<br />+	if ((devres &amp; enable) != enable)<br />+		return;<br />+	mask = (devres &gt;&gt; 16) &amp; 15;<br />+	base = devres &amp; 0xffff;<br />+	size = 16;<br />+	for (;;) {<br />+		unsigned bit = size &gt;&gt; 1;<br />+		if ((bit &amp; mask) == bit)<br />+			break;<br />+		size = bit;<br />+	}<br />+	/*<br />+	 * For now we only print it out. Eventually we'll want to<br />+	 * reserve it (at least if it's in the 0x1000+ range), but<br />+	 * let's get enough confirmation reports first. <br />+	 */<br />+	printk("%s PIO at %04x-%04x\n", name, base, base + size - 1);<br />+}<br />+<br />+static void piix4_mem_quirk(struct pci_dev *dev, const char *name, unsigned int port, unsigned int enable)<br />+{<br />+	u32 devres;<br />+	u32 mask, size, base;<br />+<br />+	pci_read_config_dword(dev, port, &amp;devres);<br />+	if ((devres &amp; enable) != enable)<br />+		return;<br />+	base = devres &amp; 0xffff0000;<br />+	mask = (devres &amp; 0x3f) &lt;&lt; 16;<br />+	size = 128 &lt;&lt; 16;<br />+	for (;;) {<br />+		unsigned bit = size &gt;&gt; 1;<br />+		if ((bit &amp; mask) == bit)<br />+			break;<br />+		size = bit;<br />+	}<br />+	/*<br />+	 * For now we only print it out. Eventually we'll want to<br />+	 * reserve it, but let's get enough confirmation reports first. <br />+	 */<br />+	printk("%s MMIO at %04x-%04x\n", name, base, base + size - 1);<br />+}<br />+<br /> /*<br />  * PIIX4 ACPI: Two IO regions pointed to by longwords at<br />  *	0x40 (64 bytes of ACPI registers)<br />  *	0x90 (32 bytes of SMB registers)<br />+ * and a few strange programmable PIIX4 device resources.<br />  */<br /> static void __devinit quirk_piix4_acpi(struct pci_dev *dev)<br /> {<br />-	u32 region;<br />+	u32 region, res_a;<br /> <br /> 	pci_read_config_dword(dev, 0x40, &amp;region);<br />-	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES);<br />+	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES, "PIIX4 ACPI");<br /> 	pci_read_config_dword(dev, 0x90, &amp;region);<br />-	quirk_io_region(dev, region, 32, PCI_BRIDGE_RESOURCES+1);<br />+	quirk_io_region(dev, region, 32, PCI_BRIDGE_RESOURCES+1, "PIIX4 SMB");<br />+<br />+	/* Device resource A has enables for some of the other ones */<br />+	pci_read_config_dword(dev, 0x5c, &amp;res_a);<br />+<br />+	piix4_io_quirk(dev, "PIIX4 devres B", 0x60, 3 &lt;&lt; 21);<br />+	piix4_io_quirk(dev, "PIIX4 devres C", 0x64, 3 &lt;&lt; 21);<br />+<br />+	/* Device resource D is just bitfields for static resources */<br />+<br />+	/* Device 12 enabled? */<br />+	if (res_a &amp; (1 &lt;&lt; 29)) {<br />+		piix4_io_quirk(dev, "PIIX4 devres E", 0x68, 1 &lt;&lt; 20);<br />+		piix4_mem_quirk(dev, "PIIX4 devres F", 0x6c, 1 &lt;&lt; 7);<br />+	}<br />+	/* Device 13 enabled? */<br />+	if (res_a &amp; (1 &lt;&lt; 30)) {<br />+		piix4_io_quirk(dev, "PIIX4 devres G", 0x70, 1 &lt;&lt; 20);<br />+		piix4_mem_quirk(dev, "PIIX4 devres H", 0x74, 1 &lt;&lt; 7);<br />+	}<br />+	piix4_io_quirk(dev, "PIIX4 devres I", 0x78, 1 &lt;&lt; 20);<br />+	piix4_io_quirk(dev, "PIIX4 devres J", 0x7c, 1 &lt;&lt; 20);<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,	PCI_DEVICE_ID_INTEL_82371AB_3,	quirk_piix4_acpi );<br /> <br />&#64;&#64; -323,10 +396,10 &#64;&#64; static void __devinit quirk_ich4_lpc_acp<br /> 	u32 region;<br /> <br /> 	pci_read_config_dword(dev, 0x40, &amp;region);<br />-	quirk_io_region(dev, region, 128, PCI_BRIDGE_RESOURCES);<br />+	quirk_io_region(dev, region, 128, PCI_BRIDGE_RESOURCES, "ICH4 ACPI/GPIO/TCO");<br /> <br /> 	pci_read_config_dword(dev, 0x58, &amp;region);<br />-	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES+1);<br />+	quirk_io_region(dev, region, 64, PCI_BRIDGE_RESOURCES+1, "ICH4 GPIO");<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,    PCI_DEVICE_ID_INTEL_82801AA_0,		quirk_ich4_lpc_acpi );<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL,    PCI_DEVICE_ID_INTEL_82801AB_0,		quirk_ich4_lpc_acpi );<br />&#64;&#64; -352,7 +425,7 &#64;&#64; static void __devinit quirk_vt82c586_acp<br /> 	if (rev &amp; 0x10) {<br /> 		pci_read_config_dword(dev, 0x48, &amp;region);<br /> 		region &amp;= PCI_BASE_ADDRESS_IO_MASK;<br />-		quirk_io_region(dev, region, 256, PCI_BRIDGE_RESOURCES);<br />+		quirk_io_region(dev, region, 256, PCI_BRIDGE_RESOURCES, "vt82c586 ACPI");<br /> 	}<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C586_3,	quirk_vt82c586_acpi );<br />&#64;&#64; -372,11 +445,11 &#64;&#64; static void __devinit quirk_vt82c686_acp<br /> <br /> 	pci_read_config_word(dev, 0x70, &amp;hm);<br /> 	hm &amp;= PCI_BASE_ADDRESS_IO_MASK;<br />-	quirk_io_region(dev, hm, 128, PCI_BRIDGE_RESOURCES + 1);<br />+	quirk_io_region(dev, hm, 128, PCI_BRIDGE_RESOURCES + 1, "vt82c868 HW-mon");<br /> <br /> 	pci_read_config_dword(dev, 0x90, &amp;smb);<br /> 	smb &amp;= PCI_BASE_ADDRESS_IO_MASK;<br />-	quirk_io_region(dev, smb, 16, PCI_BRIDGE_RESOURCES + 2);<br />+	quirk_io_region(dev, smb, 16, PCI_BRIDGE_RESOURCES + 2, "vt82c868 SMB");<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_82C686_4,	quirk_vt82c686_acpi );<br /> <br />&#64;&#64; -391,11 +464,11 &#64;&#64; static void __devinit quirk_vt8235_acpi(<br /> <br /> 	pci_read_config_word(dev, 0x88, &amp;pm);<br /> 	pm &amp;= PCI_BASE_ADDRESS_IO_MASK;<br />-	quirk_io_region(dev, pm, 128, PCI_BRIDGE_RESOURCES);<br />+	quirk_io_region(dev, pm, 128, PCI_BRIDGE_RESOURCES, "vt8235 PM");<br /> <br /> 	pci_read_config_word(dev, 0xd0, &amp;smb);<br /> 	smb &amp;= PCI_BASE_ADDRESS_IO_MASK;<br />-	quirk_io_region(dev, smb, 16, PCI_BRIDGE_RESOURCES + 1);<br />+	quirk_io_region(dev, smb, 16, PCI_BRIDGE_RESOURCES + 1, "vt8235 SMB");<br /> }<br /> DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_VIA,	PCI_DEVICE_ID_VIA_8235,	quirk_vt8235_acpi);<br /> <br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
