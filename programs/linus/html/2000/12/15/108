    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/12/5/168">First message in thread</a></li><li><a href="/lkml/2000/12/7/124">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/7/186">Martin Diehl</a></li><li><a href="/lkml/2000/12/10/156">Martin Diehl</a></li><li><a href="/lkml/2000/12/15/100">Martin Diehl</a><ul><li class="origin"><a href="/lkml/2000/12/15/144">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/15/144">Martin Diehl</a></li><li><a href="/lkml/2000/12/18/39">Martin Diehl</a></li><li><a href="/lkml/2000/12/18/92">Martin Diehl</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 15 Dec 2000 10:55:26 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: yenta, pm, ioremap(!) problems (was: PCI irq routing..)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 15 Dec 2000, Martin Diehl wrote:<br />&gt; <br />&gt; 3) The TI1131 is apparently not PCI PM 1.0 compliant. At least it seems it<br />&gt; has been replaced by the 12xx series at the moment some major player<br />&gt; required PCI PM 1.0 to get his "Designed for ..." label in '98 ;-)<br />&gt; So I had to add some code to save and restore things like memory and io<br />&gt; windows of the bridge which were lost after resume. This is implemented as<br />&gt; a controller specific addon to the common yenta operations similar to the<br />&gt; open/init case.<br /><br />Fair enough.<br /><br />&gt; 4) The final bang was when I realized that after all that done the<br />&gt; content of the CardBus/ExCA register space was total garbage after<br />&gt; resume. And, even worse, it completely failed to restore - not even<br />&gt; 0's written to it could be read back as such. This turned out to be a<br />&gt; io-mapping issue! Believe it or not - my solution is to disable the<br />&gt; cardbus controller in BIOS setup. The rationale is as follows:<br />&gt; <br />&gt; - When controller is enabled the BIOS assigns BASE_0 to 0xe6000/0xe7000.<br />&gt;   This is mapped to 0xc00e6000 by ioremap(). Everything works fine until<br />&gt;   we suspend. Furthermore I've proved by use of virt_to_bus() and vice<br />&gt;   versa the mapping is still there after resume. However the content is<br />&gt;   not writeable anymore and contains some arbitrary garbage - which always<br />&gt;   stays the same, even over cold reboot. But no Oops or so - just if<br />&gt;   you were writing to /dev/null and reading some hardwired bytes.<br />&gt;   Even unmapping it at suspend and remapping after resume did not help.<br /><br />The ioremap() mappings will definitely still be there - those are kernel<br />data structures, and the suspend/resume won't do anything to them.<br /><br />I'm surprised: "yenta_init()" will re-initialize the yenta<br />PCI_BASE_ADDRESS_0 register, but maybe there's something wrong there. Try<br />adding a pci_enable_device() to turn the device on and also re-route the<br />interrupts if necessary.<br /><br />The above is fairly strange, though. I wonder if the problem is that<br />0xe6000 value: that's a pretty bogus address for a PCI window, as it's in<br />the BIOS legacy area. <br /><br />I suspect that the suspend/resume will do something bad to the BAT<br />registers, which control the BIOS area mapping behaviour, and it just<br />kills the forwarding of the legacy region to the PCI bus, or something.<br /><br />I wonder if the PCI cardbus init code should just notice this, and force<br />all cardbus windows to be re-initialized. That legacy area address really<br />doesn't look right.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
