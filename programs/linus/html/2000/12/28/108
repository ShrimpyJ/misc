    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/12/28/129">First message in thread</a></li><li><a href="/lkml/2000/12/28/134">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/28/21">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2000/12/28/72">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/28/72">Andi Kleen</a><ul><li><a href="/lkml/2000/12/28/113">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/12/31/8">Geert Uytterhoeven</a><ul><li><a href="/lkml/2000/12/31/41">Andi Kleen</a></li><li><a href="/lkml/2001/1/1/35">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/12/28/37">Marcelo Tosatti</a><ul><li><a href="/lkml/2000/12/28/123">Rik van Riel</a><ul><li><a href="/lkml/2000/12/28/25">Marcelo Tosatti</a></li></ul></li></ul></li><li><a href="/lkml/2000/12/28/40">Daniel Phillips</a></li><li><a href="/lkml/2000/12/28/48">"David S. Miller"</a><ul><li><a href="/lkml/2000/12/29/69">Mark Hemment</a><ul><li><a href="/lkml/2000/12/29/12">Tim Wright</a><ul><li><a href="/lkml/2000/12/29/79">Mark Hemment</a></li></ul></li><li><a href="/lkml/2000/12/29/80">"David S. Miller"</a><ul><li><a href="/lkml/2000/12/29/95">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/12/28/85">Andi Kleen</a><ul><li><a href="/lkml/2000/12/28/23">Rik van Riel</a></li></ul></li><li><a href="/lkml/2000/12/28/115">"David S. Miller"</a></li><li><a href="/lkml/2000/12/29/7">Daniel Phillips</a></li><li><a href="/lkml/2000/12/28/132">Marcelo Tosatti</a><ul><li><a href="/lkml/2000/12/28/80">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/12/28/144">Andi Kleen</a><ul><li><a href="/lkml/2000/12/28/43">"David S. Miller"</a></li><li><a href="/lkml/2000/12/28/61">Rik van Riel</a></li><li><a href="/lkml/2000/12/28/102">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/12/29/71">Marcelo Tosatti</a><ul><li><a href="/lkml/2000/12/29/43">(Linus Torvalds)</a></li><li><a href="/lkml/2001/1/3/46">Chris Mason</a><ul><li><a href="/lkml/2001/1/3/73">Daniel Phillips</a></li><li><a href="/lkml/2001/1/4/6">Christoph Rohland</a><ul><li><a href="/lkml/2001/1/4/119">Marcelo Tosatti</a></li><li><a href="/lkml/2001/1/4/148">Chris Mason</a></li></ul></li><li><a href="/lkml/2001/1/3/215">Linus Torvalds</a><ul><li><a href="/lkml/2001/1/3/153">Chris Mason</a></li><li><a href="/lkml/2001/1/3/231">Chris Wedgwood</a></li><li><a href="/lkml/2001/1/4/131">"Stephen C. Tweedie"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/12/28/156">Andi Kleen</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Dec 2000 15:15:01 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: test13-pre5</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 28 Dec 2000, Andi Kleen wrote:<br />&gt; <br />&gt; BTW..<br />&gt; <br />&gt; The current 2.4 struct page could be already shortened a lot, saving a lot<br />&gt; of cache.<br /><br />Not that much, but some.<br /><br />&gt; (first number for 32bit, second for 64bit) <br />&gt; <br />&gt; - Do not compile virtual in when the kernel does not support highmem<br />&gt; (saves 4/8 bytes) <br /><br />Even on UP, "virtual" often helps. The conversion from "struct page" to<br />the linear address is quite common, and if "struct page" isn't a<br />power-of-two it gets slow.<br /><br />&gt; - Instead of having a zone pointer mask use a 8 or 16 byte index into a <br />&gt; zone table. On a modern CPU it is much cheaper to do the and/shifts than<br />&gt; to do even a single cache miss during page aging. On a lot of systems <br />&gt; that zone index could be hardcoded to 0 anyways, giving better code.<br />&gt; - Instead of using 4/8 bytes for the age use only 16bit (FreeBSD which<br />&gt; has the same swapping algorithm even only uses 8bit) <br /><br />This would be good, but can be hard.<br /><br />FreeBSD doesn't try to be portable any more, but Linux does, and there are<br />architectures where 8- and 16-bit accesses aren't atomic but have to be<br />done with read-modify-write cycles.<br /><br />And even for fields like "age", where we don't care whether the age itself<br />is 100% accurate, we _do_ care that the fields close-by don't get strange<br />effects from updating "age". We used to have exactly this problem on alpha<br />back in the 2.1.x timeframe.<br /><br />This is why a lot of fields are 32-bit, even though we wouldn't need more<br />than 8 or 16 bits of them.<br /><br />&gt; - Remove the waitqueue debugging (obvious &#64;)<br /><br />Not obvious enough. There are magic things that could be done, like hiding<br />the wait-queue lock bit in the waitqueue lists themselves etc. That could<br />be done with some per-architecture magic etc.<br /><br />&gt; - flags can be __u32 on 64bit hosts, sharing 64bit with something that<br />&gt; is tolerant to async updates (e.g. the zone table index or the index) <br />&gt; - index could be probably u32 instead of unsigned long, saving 4 bytes<br />&gt; on i386<br /><br />It already _is_ 32-bit on x86. <br /><br />Only the LSF patches made it 64-bit. That never made it into the standard<br />kernel.<br /><br />Sure, we could make it "u32" and thus force it to be 32-bit even on 64-bit<br />architectures, but some day somebody will want to have more than 46 bits<br />of file mappings, and which 46 bits is _huge_ on a 32-bit machine, on a<br />64-bit one in 5 years it will not be entirely unreasonable. <br /><br />Anyway, I don't want to increase "struct page" in size, but I also don't<br />think it's worth micro-optimizing some of these things if the code gets<br />harder to maintain (like the partial-word stuff would be).<br /><br />The biggest win by far would come from increasing the page-size, something<br />we can do even in software. Having a "kernel page size" of 8kB even on x86<br />would basically cut the overhead in half. As that would also improve some<br />other things (like having better throughput due to bigger contiguous<br />chunks), that's something I'd like to see some day.<br /><br />(And user space wouldn't ever have to know - we could map in "half pages"<br />aka "hardware pages" without mappign the whole page).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
