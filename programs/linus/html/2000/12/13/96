    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/12/13/96">First message in thread</a></li><li class="origin"><a href="/lkml/2000/12/13/98">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/13/98">Mike Galbraith</a><ul><li><a href="/lkml/2000/12/13/92">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/13/144">Mike Galbraith</a></li></ul></li><li><a href="/lkml/2000/12/13/117">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/13/97">=?ISO-8859-1?Q?G=E9rard_Roudier?=</a></li><li><a href="/lkml/2000/12/13/99">"Jeff V. Merkey"</a></li><li><a href="/lkml/2000/12/13/113">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/13/127">"Rainer Mager"</a></li><li><a href="/lkml/2000/12/14/54">Mike Galbraith</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2000/12/13/96/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 13 Dec 2000 09:23:13 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Signal 11 - the continuing saga</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 13 Dec 2000, Linus Torvalds wrote:<br />&gt; <br />&gt; Lookin gat "swapoff()", it could easily be something like<br />&gt; <br />&gt;  - swapoff walks theough the processes, marking the pages dirty<br />&gt;    (correctly)<br />&gt;  - swapoff goes on to the next swap entry, and because it needs memory for<br />&gt;    this, the VM layer will swap out old entries by marking them dirty in<br />&gt;    the "struct page".<br />&gt;  - final stages of swapoff() removes the swap cache entry, never minding<br />&gt;    the fact that it is marked dirty again in "struct page", and clean in<br />&gt;    various VM page tables.<br />&gt; <br />&gt; Ho humm.. I don't think that is it exactly, but something along those<br />&gt; lines.<br /><br />Actually, having thought about it for five more minutes, I actually think<br />that that _is_ it.<br /><br />If so, the fix looks like it could be really simple. The whole problem<br />arises from the fact that we remove the page from the swap cache only<br />_after_ we've walked the page-tables to look at it. It looks like the<br />fairly trivial fix is simply to remove it from the swap cache before,<br />getting rid of all such races in swapoff().<br /><br />Mind trying out this patch?<br /><br />NOTE! It's untested. It might not work. It might trigger some sanity-test<br />somewhere else. But it looks like it should do the right thing (the page<br />might be moved to _another_ swap device early, if there are multiple swap<br />areas, but even that should be fine - the unuse_process() stuff doesn't<br />care about what swapcache this actually is any more.<br /><br />Does this patch make a difference (I moved the delete seven lines upwards,<br />and removed the test - the test looks extraneous).<br /><br />		Linus<br /><br />----<br />--- v2.4.0-test12/linux/mm/swapfile.c	Tue Oct 31 12:42:27 2000<br />+++ linux/mm/swapfile.c	Wed Dec 13 09:17:51 2000<br />&#64;&#64; -370,6 +370,7 &#64;&#64;<br /> 			swap_free(entry);<br />   			return -ENOMEM;<br /> 		}<br />+		delete_from_swap_cache(page);<br /> 		read_lock(&amp;tasklist_lock);<br /> 		for_each_task(p)<br /> 			unuse_process(p-&gt;mm, entry, page);<br />&#64;&#64; -377,8 +378,6 &#64;&#64;<br /> 		shm_unuse(entry, page);<br /> 		/* Now get rid of the extra reference to the temporary<br />                    page we've been using. */<br />-		if (PageSwapCache(page))<br />-			delete_from_swap_cache(page);<br /> 		page_cache_release(page);<br /> 		/*<br /> 		 * Check for and clear any overflowed swap map counts.<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
