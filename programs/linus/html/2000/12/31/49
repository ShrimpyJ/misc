    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/12/29/121">First message in thread</a></li><li><a href="/lkml/2000/12/31/78">Linus Torvalds</a><ul><li><a href="/lkml/2000/12/31/12">Daniel Phillips</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/12/31/55">Roman Zippel</a><ul><li><a href="/lkml/2000/12/31/85">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 31 Dec 2000 11:31:17 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] Generic deferred file writing</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, 31 Dec 2000, Daniel Phillips wrote:<br /><br />&gt; Linus Torvalds wrote:<br />&gt; &gt;  I do not believe that "get_block()" is as big of a problem as people make<br />&gt; &gt;  it out to be.<br />&gt;<br />&gt; I didn't mention get_block - disk accesses obviously far outweigh<br />&gt; filesystem cpu/cache usage in overall impact.  The question is, what<br />&gt; happens to disk access patterns when we do the deferred allocation.<br /><br />Note that the deferred allocation is only possible with a full page write.<br /><br />Go and do statistics on a system of how often this happens, and what the<br />circumstances are. Just for fun.<br /><br />I will bet you $5 USD that 99.9% of all such writes are to new files, at<br />the end of the file. I'm sure you can come up with other usage patterns,<br />but they'll be special (big databases etc, and I bet that they'll want to<br />have stuff cached all the time anyway for other reasons).<br /><br />So I seriously doubt that you'll have much of an IO component to the<br />writing anyway - except for the "normal" deferred write of actually<br />writing the stuff out at all.<br /><br />Now, this is where I agree with you, but I disagree with where most of the<br />discussion has been going: I _do_ believe that we may want to change block<br />allocation discussions at write-out-time. That makes sense to me. But that<br />doesn't really impact "ENOSPC" - the write would not be really "deferred"<br />by the VM layer, and the filesystem would always be aware of the writer<br />synchronously.<br /><br />&gt; &gt; One form of deferred writes I _do_ like is the mount-time-option form.<br />&gt; &gt; Because that one doesn't add complexity. Kind of like the "noatime" mount<br />&gt; &gt; option - it can be worth it under some circumstances, and sometimes it's<br />&gt; &gt; acceptable to not get 100% unix semantics - at which point deferred writes<br />&gt; &gt; have none of the disadvantages of trying to be clever.<br />&gt;<br />&gt; And the added attraction of requiring almost no effort.<br /><br />Did I mention my belief in the true meaning of "intelligence"?<br /><br />"Intelligence is the ability to avoid doing work, yet get the work done".<br /><br />Lazy programmers are the best programmers. Think Tom Sawyer painting the<br />fence. That's intelligence.<br /><br />Requireing almost no effort is a big plus in my book.<br /><br />It's the "clever" programmer I'm afraid of. The one who isn't afraid of<br />generating complexity, because he has a Plan (capital "P"), and he knows<br />he can work out the details later.<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
