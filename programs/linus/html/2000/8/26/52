    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/23/120">First message in thread</a></li><li><a href="/lkml/2000/8/25/106">Jamie Lokier</a><ul><li><a href="/lkml/2000/8/25/132">Linus Torvalds</a></li><li><a href="/lkml/2000/8/26/101">dean gaudet</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 26 Aug 2000 10:30:23 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCO: "thread creation is about a thousand times faster than onnative</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 25 Aug 2000, dean gaudet wrote:<br />&gt; On Fri, 25 Aug 2000, Jamie Lokier wrote:<br />&gt; <br />&gt; &gt; There are a couple of really obvious states where you don't need to<br />&gt; &gt; record the full path to where we slept.<br />&gt; &gt; <br />&gt; &gt;    - The schedule() in ret_from_sys_call.<br />&gt; &gt; <br />&gt; &gt;    - do_poll().<br />&gt; &gt; <br />&gt; &gt; The first is used when pre-empting, such as when we have lots of threads<br />&gt; &gt; running.  The second is used by almost every task that sleeps, including<br />&gt; &gt; heavy duty servers.<br />&gt; <br />&gt; hmm, if i'm writing a heavy duty server that uses enough kernel threads to<br />&gt; start worrying about the number of stacks in use, then i'm probably not<br />&gt; calling poll().  i'm probably blocking in disk/net reads/writes directly.<br />&gt; i'd only be using poll() if i'm doing userland threads/state-machines.<br /><br />That's not the problem.<br /><br />I think what Jamie is overlooking is all the details.<br /><br />For example, take the really obvious one: sure, you don't need a kernel<br />stack under some circumstances.<br /><br />What are you going to do when you DO need one?<br /><br />Allocate one dynamically?<br /><br />Good-bye performance.<br /><br />That's why I said "Show me the code". I'm rather unconvinced that you can<br />actually get the details right without huge amounts of complexity.<br /><br />I'm sure it could be done. I'm pretty convinced that there is no way to do<br />it efficiently.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
