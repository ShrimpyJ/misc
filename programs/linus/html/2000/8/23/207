    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/23/194">First message in thread</a></li><li><a href="/lkml/2000/8/23/194">Giuliano Pochini</a><ul><li><a href="/lkml/2000/8/23/174">Jens Axboe</a><ul><li><a href="/lkml/2000/8/24/5">Giuliano Pochini</a></li></ul></li><li><a href="/lkml/2000/8/23/203">Neil Brown</a><ul><li><a href="/lkml/2000/8/24/56">Giuliano Pochini</a></li><li class="origin"><a href="/lkml/2000/8/24/40">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/8/24/40">Neil Brown</a></li><li><a href="/lkml/2000/8/24/136">Jens Axboe</a><ul><li><a href="/lkml/2000/8/24/39">Jens Axboe</a></li><li><a href="/lkml/2000/8/24/84">Linus Torvalds</a></li><li><a href="/lkml/2000/8/26/25">Giuliano Pochini</a></li></ul></li></ul></li><li><a href="/lkml/2000/8/26/29">Giuliano Pochini</a><ul><li><a href="/lkml/2000/8/26/98">Neil Brown</a><ul><li><a href="/lkml/2000/8/26/105">Matti Aarnio</a></li><li><a href="/lkml/2000/8/29/118">Giuliano Pochini</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: ll_rw_blk.c fails to merge requests. Help!</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">23 Aug 2000 20:32:07 -0700</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;14756.25889.655254.332719&#64;notabene.cse.unsw.edu.au&gt;,<br />Neil Brown  &lt;neilb&#64;cse.unsw.edu.au&gt; wrote:<br />&gt;<br />&gt;Not necessarily.  When a request is freed, the oldest waiting thread<br />&gt;is woken, but it might not actually get to run before some other<br />&gt;thread steals the request.  You could force a strict ordering if you<br />&gt;really wanted to, but I don't know how much it would help.  See<br />&gt;STRICT_REQUEST_ORDERING in the patch below.<br /><br />Neil, I suspect the request ordering is secondary, and the real problem<br />is that at some point we get into this awful steady state where we<br />create new requests at the same pace as we get rid of old ones, and we<br />always end up waiting for the next request to be free'd. <br /><br />The "always end up waiting" thing means that we won't do a good job on<br />read-ahead etc (because suddenly all our request stuff will be<br />synchronous wrt the disk), so it _would_ impact performace.  I think. <br /><br />Making the request ordering stricter won't help with this situation - it<br />just makes it more fairly badly behaved.  What _should_ help is to<br />"batch" the freeing of requests, so that you don't end up waking up<br />anybody (and everybody blocks on the requests being empty) until you've<br />free'd up, say, half of the request queue again. <br /><br />Ie something like<br /> - when you free an entry, and there is somebody waiting for entries,<br />   you don't actually put it directly on the "free request" list. You<br />   put it on the "pending to-be-freed" list.<br /> - when the pending-to-be-freed list grows past a certain size, you free<br />   them all in one go and wake up all waiters.<br /><br />Why is read-ahead important? It not only improves through-put, it also<br />improves the bad behaviour when you have multiple "streams" that go to<br />different parts of the disk.  Without read-ahead, you'll have the disk<br />seeking back and forth for every request.  With read-ahead, you can<br />avoid that. <br /><br />The normal elevator thing obviously tries to merge first, so truly<br />contiguous entries should get merged regardless of whether there are any<br />free requests or not.  However, we should try to get the "not quite<br />contiguous" case right too.  And I'm not convinced my theory above is<br />valid, but I can see that there could indeed be some bad behaviour<br />patterns if we only have one request free at any particular time.. <br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
