    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/24/132">First message in thread</a></li><li><a href="/lkml/2000/8/27/121"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/27/102">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/8/27/82">Alexander Viro</a></li></ul></li><li><a href="/lkml/2000/8/28/109"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/31/104">Jamie Lokier</a></li><li><a href="/lkml/2000/8/27/113"> yodaiken&#64;fsmlabs ...</a><ul><li class="origin"><a href="/lkml/2000/8/28/35">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/28/35">"Albert D. Cahalan"</a></li><li><a href="/lkml/2000/8/27/95">Alexander Viro</a><ul><li><a href="/lkml/2000/8/28/82">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/8/27/104"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/27/85">Linus Torvalds</a></li><li><a href="/lkml/2000/8/28/34"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/28/86"> yodaiken&#64;fsmlabs ...</a></li></ul></li><li><a href="/lkml/2000/8/31/147">Erik McKee</a><ul><li><a href="/lkml/2000/9/1/6">Marco Colombo</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/8/28/161">Alan Cox</a><ul><li><a href="/lkml/2000/8/28/117">"Albert D. Cahalan"</a><ul><li><a href="/lkml/2000/8/28/133">Alexander Viro</a><ul><li><a href="/lkml/2000/8/28/153">"Albert D. Cahalan"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Aug 2000 20:06:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCO: "thread creation is about a thousand times faster than on</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 27 Aug 2000 yodaiken&#64;fsmlabs.com wrote:<br /><br />&gt; On Sun, Aug 27, 2000 at 07:33:22PM -0700, Linus Torvalds wrote:<br />&gt; &gt; In article &lt;20000827175449.A7759&#64;hq.fsmlabs.com&gt;,<br />&gt; &gt;  &lt;yodaiken&#64;fsmlabs.com&gt; wrote:<br />&gt; &gt; &gt;<br />&gt; &gt; &gt;In the POSIX spec fork demolishes all threads in the child. This is the<br />&gt; &gt; &gt;only sensible answer and it seems wasteful to ignore the rare sensible<br />&gt; &gt; &gt;parts of the POSIX spec.<br />&gt; &gt; <br />&gt; &gt; What?<br />&gt; <br />&gt; I said it poorly. In the POSIX spec, the child is born single threaded.<br /><br />Ahh. Yes. <br /><br />I thought you meant "fork() kills the threadedness in the parent", which<br />definitely doesn't make sense. And upon re-reading, it wasn't actually<br />what you said at all. Mea culpa.<br /><br />The fork'ed child not having any threads is the only sane semantics. After<br />all, it was just one thread that asked for a fork(), so it is only _that_<br />thread that gets copied. Anything else would be strange, to say the least.<br /><br />Execve() is basically the same thing. Only one thread asked for the<br />execve(), so obviously only one thread is actually involved in it.<br /><br />[ Side note: execve() has a number of interesting issues wrt various<br />  shared state, and Linux has not extended the "sane semantics" to include<br />  the POSIX kind of threads. Our execve() does not split off a new copy of<br />  the file handles etc: it breaks the VM sharing (obviously), and it also<br />  breaks the signal handler sharing (slightly less obvious, but it follows<br />  from breaking the VM sharing).<br /><br />  But execve() does _not_ break the sharing of filesystem data or of file<br />  descriptor data. Which can result in some _strange_ behaviour, but<br />  basically it can be meaningful and may actually be what the user wanted.<br />  I really think that we should have added a "break these connections"<br />  mask to execve(), so that the user woul dget full control - and then we<br />  could truly export the sensible Linux "execve from thread" semantics as<br />  a POSIX extension to pthreads.<br /><br />  As it is, only native threads can take real advantage of the execve()<br />  behaviour. Either by not sharing the state from the very first, or by<br />  taking advantage of the fact that the file descriptor state is actually<br />  shared even after an execve() if you ask for it. But this is certainly<br />  an area where Linux native threads could be more generic.<br /><br />  Take this as a warning about the subtleties of threads. Also, realize<br />  that while I'm very confident that the Linux native threads are the<br />  "RightThing(tm)" conceptually, not everything those concepts might make<br />  possible and desireable has necessarily been implemented: nobody has<br />  ever asked for the extended execve() behaviour, so it's never been an<br />  action item for anybody. ]<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
