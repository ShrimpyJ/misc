    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/24/132">First message in thread</a></li><li><a href="/lkml/2000/8/27/124"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/27/15">Mark Kettenis</a></li><li><a href="/lkml/2000/8/27/16">Mitchell Blank Jr</a></li><li><a href="/lkml/2000/8/27/36">Mitchell Blank Jr</a><ul><li><a href="/lkml/2000/8/27/80">Horst von Brand</a><ul><li><a href="/lkml/2000/8/27/121"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/27/102">(Linus Torvalds)</a></li><li><a href="/lkml/2000/8/28/109"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/31/104">Jamie Lokier</a></li><li><a href="/lkml/2000/8/27/113"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/28/161">Alan Cox</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/8/27/45">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/8/28/168">Martin MaD Douda</a><ul><li><a href="/lkml/2000/8/28/74">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2000/8/27/46"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/27/59">Mark Kettenis</a></li><li><a href="/lkml/2000/8/27/66">Mark Kettenis</a></li><li><a href="/lkml/2000/8/27/76">Mitchell Blank Jr</a><ul><li class="origin"><a href="/lkml/2000/8/28/59">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/8/28/59">Mitchell Blank Jr</a><ul><li><a href="/lkml/2000/8/28/43">(Linus Torvalds)</a></li><li><a href="/lkml/2000/8/28/146">Mitchell Blank Jr</a></li></ul></li><li><a href="/lkml/2000/8/28/145">Horst von Brand</a></li></ul></li></ul></li><li><a href="/lkml/2000/8/27/111">Mitchell Blank Jr</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCO: "thread creation is about a thousand times faster than on</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">27 Aug 2000 19:26:42 -0700</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;20000827071032.D55996&#64;sfgoth.com&gt;,<br />Mitchell Blank Jr  &lt;mitch&#64;sfgoth.com&gt; wrote:<br />&gt;Mark Kettenis wrote:<br />&gt;&gt;    Grumble... and I suppose a failed execve() needs to return an error<br />&gt;&gt;    to that one thread, but a succesful one needs to atomically destroy all<br />&gt;&gt;    the other threads...  And HOW is this supposed to be implemented?<br />&gt;&gt; <br />&gt;&gt; Well, that isn't explicitly demanded by the standard, but I don't<br />&gt;&gt; thing any other behaviour would make much sense.<br />&gt;<br />&gt;Well I guess we'll need a per-thread-group execve semaphore to keep multiple<br />&gt;threads from execve'ing on different CPUs.<br /><br />Oh, Gods. NO!<br /><br />Linux actually has well-defined semantics for "execve()" in a thread.<br />They are very simple:<br /><br /> - the thread executes the execve().<br /><br />Got it? I know it's a radical idea, but hey, it makes sense to me. I<br />asked myself the question "What should execve() do inside a thread?",<br />and the voices in my head told me that "It should execve() the program<br />it asked for, stupid".<br /><br />I always follow the voices in my head. They tend to be right, most of<br />the time.<br /><br />Anyway, somebody else asked "Well, what about the other threads?", and<br />th evoices in my head said "Oh, do they want to execve() too? Sure, they<br />can do that if they want to".<br /><br />Stunningly simple.<br /><br />The fact that POSIX seems to have trouble with this, is purely due to<br />POSIX. Please don't think that execve() is somehow "hard" to do. It's<br />exactly the same case as it always has been. The process drops the old<br />VM context (other threads can continue to use it - why not?) and assumes<br />a new one. Simple.<br /><br />No semaphores needed.<br /><br />Now, if the question is "Ok, I'm a POSIX thread, and I want the stupid<br />POSIX behaviour where an execve() kills all other threads", then you<br />have to do it by hand. Something like "kill all other threads, and then<br />do the execve". It's not rocket science.<br /><br />Anyway, I personally think that it is<br /> (a) meaningful<br /> (b) sensible<br /> (c) unambiguous<br />to have a threaded program where one thread executes a new process. <br />That thread will become the new proces, all the other threads will be<br />utterly, completely and totally unaffected by the fact that one thread<br />decided to do something else.<br /><br />Why would you ever do something like this? Imagine that you're a server,<br />and you have the "one thread per connection" approach to life. Further,<br />imagine that the connection asks you to execute perl. So you do so.<br /><br />		Linus "threads aren't as perverse<br />			as POSIX has made them" Torvalds<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
