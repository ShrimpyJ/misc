    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/27/53">First message in thread</a></li><li><a href="/lkml/2000/8/29/88">Arnaldo Carvalho de Melo</a><ul><li><a href="/lkml/2000/8/30/59">(Rogier Wolff)</a><ul><li><a href="/lkml/2000/8/30/19">Philipp Rumpf</a></li><li class="origin"><a href="/lkml/2000/8/30/83">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/30/83">(Rogier Wolff)</a><ul><li><a href="/lkml/2000/8/31/1">Matthew Wilcox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Aug 2000 10:04:12 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] af_rose.c: s/suser/capable/ + micro cleanups</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 30 Aug 2000, Rogier Wolff wrote:<br />&gt; <br />&gt; &gt; source code smaller and more easier to read (yes, this is debatable,<br />&gt; &gt; I think it becomes more clean, other think otherwise, I'm just<br />&gt; &gt; following what Linus said he prefer).<br />&gt; <br />&gt; The kernel is a multi-million-lines-of-code piece of software.<br />&gt; Software maintenance cost is found to correlate strongly with the<br />&gt; number of lines-of-code.<br />&gt; <br />&gt; So, I would prefer the shorter version. <br /><br />I disagree.<br /><br />Number of lines is irrelevant.<br /><br />The _complexity_ of lines counts.<br /><br />And ?: is a complex construct, that is not always visually very easy to<br />parse because of the "non-local" behaviour. <br /><br />That is not saying that I think you shouldn't use ?: at all. It's a<br />wonderful construct in many ways, and I use it all the time myself. But I<br />actually prefer<br /><br />	if (complex_test)<br />		return complex_expression1;<br /><br />	return complex_expression2;<br /><br />over<br /><br />	return (complex_test) ? complex_expression1 : complex_expression2;<br /><br />because by the time you have a complex ?: thing it's just not very<br />readable any more.<br /><br />Basically, dense lines are bad. And ?: can make for code that ends up "too<br />dense".<br /><br />More specific example: I think<br /><br />	return copy_to_user(dst, src, size) ? -EFAULT : 0;<br /><br />is fine and quite readable. Fits on a simple line.<br /><br />However, it's getting iffy when it becomes something like<br /><br />	return copy_to_user(buf, page_address(page) + offset, size) ? -EFAULT: 0;<br /><br />for example. The "return" is so far removed from the actual return values,<br />that it takes some parsing (maybe you don't even see everything on an<br />80-column screen, or even worse, you split up one expression over several<br />lines..<br /><br />(Basically, I don't like multi-line expressions. Avoid stuff like<br /><br />	x = ...<br />		+ ...<br />		- ...;<br /><br />unless it is _really_ simple. Similarly, some people split up their<br />"for ()" or "while ()" statement things - which usually is just a sign of<br />the loop baing badly designed in the first place. Multi-line expressions<br />are sometimes unavoidable, but even then it's better to try to simplify<br />them as much as possible. You can do it by many means<br /><br /> - make an inline function that has a descriptive name. It's still<br />   complex, but now the complexity is _described_, and not mixed in with<br />   potentially other complex actions.<br /><br /> - Use logical grouping. This is sometimes required especially in "if()"<br />   statements with multiple parts (ie "if ((x || y) &amp;&amp; !z)" can easily<br />   become long - but you might consider just the above inline function or<br />   #define thing).<br /><br /> - Use multiple statements. I personally find it much more readable to<br />   have<br /><br />	if (PageTestandClearReferenced(page))<br />		goto dispose_continue;<br /><br />	if (!page-&gt;buffers &amp;&amp; page_count(page) &gt; 1)<br />		goto dispose_continue;<br /><br />	if (TryLockPage(page))<br />		goto dispose_continue;<br /><br />   rather than the equivalent<br /><br />	if (PageTestandClearReferenced(page) ||<br />	    (!page-&gt;buffers &amp;&amp; page_count(page) &gt; 1) ||<br />	    TryLockPage(page))<br />		goto dispose_continue;<br /><br />   regardless of any grouping issues.<br /><br />Basically, lines-of-code is a completely bogus metric for _anything_.<br />Including maintainability.<br /><br />&gt; If it takes you a few seconds to look this over, that's fine. Even it<br />&gt; the one "complicated" line take twice as long (per line) as the<br />&gt; original 4 lines, then it's a win. <br /><br />I disagree violently.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
