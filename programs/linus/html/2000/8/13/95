    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/11/134">First message in thread</a></li><li><a href="/lkml/2000/8/12/132">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/13/24">Abramo Bagnara</a><ul><li><a href="/lkml/2000/8/13/27">Mo McKinlay</a><ul><li><a href="/lkml/2000/8/13/28">Abramo Bagnara</a><ul><li><a href="/lkml/2000/8/13/32">Mo McKinlay</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/8/13/30">(Rogier Wolff)</a><ul><li><a href="/lkml/2000/8/13/34">Mo McKinlay</a><ul><li><a href="/lkml/2000/8/13/79">(Rogier Wolff)</a></li></ul></li><li><a href="/lkml/2000/8/13/78">Andrew Pimlott</a><ul><li><a href="/lkml/2000/8/13/82">(Rogier Wolff)</a><ul><li><a href="/lkml/2000/8/13/125">Alan Cox</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/8/13/100">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/13/100">Michael Rothwell</a><ul><li><a href="/lkml/2000/8/13/104">Linus Torvalds</a></li><li><a href="/lkml/2000/8/13/129">"Theodore Y. Ts'o"</a></li></ul></li><li><a href="/lkml/2000/8/14/244">(Kai Henningsen)</a></li></ul></li></ul></li><li><a href="/lkml/2000/8/13/40">James Sutherland</a></li><li><a href="/lkml/2000/8/13/123">Alan Cox</a><ul><li><a href="/lkml/2000/8/13/126">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/13/128">Alan Cox</a><ul><li><a href="/lkml/2000/8/13/145">Linus Torvalds</a></li><li><a href="/lkml/2000/8/13/146">James Sutherland</a></li><li><a href="/lkml/2000/8/13/209">Abramo Bagnara</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 13 Aug 2000 10:16:33 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: NTFS-like streams?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 13 Aug 2000, Rogier Wolff wrote:<br />&gt;<br />&gt; the HFS guys made a point of making the filesystem capable of being<br />&gt; tar-copied. I think that this is a useful feature.<br /><br />I don't disagree. On the other hand, I have to say that I personally put<br />ease-of-use before tar-copyability any time.<br /><br />However, there's a stronger argument against the HFS approach: it<br />_definitely_ will never work in the schenario that Al outlined - hard<br />links of complex objects.<br /><br />Now, HFS doesn't actually have hard links as far as I know, so you may say<br />"So what?".<br /><br />The "so what" is simple: are we going to have unified behaviour for<br />resource forks, or is every damn filesystem that has extended attributes<br />(whether they be named streams, binary-only EA's, ACL's, whatever) going<br />to do some ad-hoc name decision for _their_ particular version of their<br />extensions?<br /><br />Me, I'd personally prefer to have a _design_. In fact, to some degree<br />that's actually the only thing I care about.<br /><br />And the HFS approach fails the "design" criterion. It cannot handle the<br />NTFS case at all. <br /><br />Note that some NTFS people have advocated the NTFS design: special<br />functions for setting and accessing the NTFS EA's. And that is _equally_<br />short-sighted. It misses the point entirely: I'm not interested in a<br />HFS-specific hack, and I'm not interested in a NTFS-specific hack.<br /><br />So what I'm looking for in this discussion an acceptable GoodDesign(tm).<br />Something that can (a) handle _arbitrary_ extended attributes, no matter<br />what particular low-level filesystem is underneath and (b) something that<br />is reasonably intuitive on a user level.<br /><br />The HFS design fails (a) quite badly. It's just not a possible layout for<br />the dcache for a hard-linked complex object. Al correctly pointed that out<br />as an interesting case, and also had the solution for it. But that<br />solution implies "encapsulating" the whole complex object. Which means<br />that we cannot spread out the attributes in multiple places.<br /><br />Personally, I think that spreading out the attributes is also not very<br />user-friendly, but that's a matter of taste, not a hard cold "this won't<br />work" kind of argument ;)<br /><br />Of course, maybe people _want_ different filesystems to just look<br />different. Maybe a GoodDesign(tm) is not needed. It certainly hasn't been<br />a big issue so far.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
