    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/23/120">First message in thread</a></li><li><a href="/lkml/2000/8/24/80">"Albert D. Cahalan"</a><ul><li><a href="/lkml/2000/8/24/45"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/32">Linus Torvalds</a></li><li><a href="/lkml/2000/8/24/94"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/73"> almesber&#64;lrc ...</a></li><li><a href="/lkml/2000/8/24/128"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/76">Werner Almesberger</a></li><li><a href="/lkml/2000/8/24/87"> yodaiken&#64;fsmlabs ...</a></li><li><a href="/lkml/2000/8/25/50">Mitchell Blank Jr</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/8/24/46">"Stephen C. Tweedie"</a><ul><li><a href="/lkml/2000/8/24/108">Alan Cox</a></li></ul></li><li><a href="/lkml/2000/8/24/49">Linus Torvalds</a><ul><li><a href="/lkml/2000/8/26/24">"Robert H. de Vries"</a></li></ul></li><li><a href="/lkml/2000/8/24/53">"Andi Kleen"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2000/8/24/28">"Andi Kleen"</a><ul><li><a href="/lkml/2000/8/24/33">Alan Cox</a></li></ul></li><li><a href="/lkml/2000/8/24/65"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/106">"Andi Kleen"</a><ul><li><a href="/lkml/2000/8/24/130"> yodaiken&#64;fsmlabs ...</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/8/24/98"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/14"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/15">Alan Cox</a><ul><li><a href="/lkml/2000/8/24/58"> yodaiken&#64;fsmlabs ...</a></li></ul></li></ul></li><li><a href="/lkml/2000/8/24/83">Alan Cox</a></li></ul></li><li><a href="/lkml/2000/8/24/134">"Andi Kleen"</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Aug 2000 09:23:34 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCO: "thread creation is about a thousand times faster than on native Linux"</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 24 Aug 2000, Andi Kleen wrote:<br />&gt; <br />&gt; Wouldn't it make more sense to extend the current process group concept ? <br />&gt; A process could be in two groups, the thread group and the process group<br />&gt; with the pid of the session group leader.<br /><br />The problem is that I can certainly see a process group leader that is<br />_also_ a "tgid leader".<br /><br />Basically, imagine any process group or session leader that wants to be<br />threaded itself. Now there is a lot of confusion about what "-tgid" means,<br />as "tgid == pgid" and thus obviously "-tgid == -pgid", making sys_kill()<br />have a really hard time deciding which to kill.<br /><br />&gt; &gt; Now, the problem is that the thread group kill thing for true POSIX<br />&gt; &gt; threads signal behaviour probably has to do some strange magic to get the<br />&gt; &gt; pthreads signal semantics right. I don't even know the exact details here,<br />&gt; &gt; so somebody who _really_ knows pthreads needs to look long and hard at<br />&gt; &gt; this (efficiency here may require that we have a circular list of each<br />&gt; &gt; "thread ID group" - ie that we add the proper process pointer list that<br />&gt; &gt; gets updated at fork() and exit() so that we can easily walk every process<br />&gt; &gt; in the process group list).<br />&gt; <br />&gt; POSIX wants to send the signal to the first thread in the group who <br />&gt; doesn't have it blocked.<br />&gt; <br />&gt; Several signals are special cased in POSIX, e.g. SIGSTOP, and need to<br />&gt; handled by all threads in the group.<br /><br />Right, which is why we probably do need the list for efficiency.<br /><br />Note that the "first thread that doesn't block it" decision is the really<br />nasty one. If all threads have it blocked, we need to have it pending. But<br />we can only have it pending for _one_ thread. I think POSIX allows this,<br />but I'm not sure.<br /><br />&gt; For good behaviour you need a shared sigprocmask().  (I just ran into a <br />&gt; situation where shared signal blocking would have been very useful on Linux).<br />&gt; You basically want to protect your data structures that could be accessed<br />&gt; by signals against signals send to any thread, otherwise sigprocmask<br />&gt; are pretty useless.<br /><br />I _really_ really want to avoid this. I think POSIX is vague on the<br />requirement, and quite frankly, a shared sigprocmask() is a horror. It<br />really doesn't fit in, at all.<br /><br />We can add a tgid really easily. The code already exists, and we just need<br />to extend it in the straightforward way with one more test.<br /><br />We can add a new process list really easily. Maintaining the circular list<br />of processes that share the same tgid is trivial. We have all the<br />infrastructure in place, and it basically becomes something like<br /><br /> - fork.c:<br /><br />	INIT_LIST_HEAD(&amp;p-&gt;thread_group);<br />	p-&gt;tgid = p-&gt;pid;<br />	if (flags &amp; CLONE_PID) {<br />		p-&gt;tgid = current-&gt;pid;<br />		list_add(&amp;p-&gt;thread_group, &amp;current-&gt;thread_group);<br />	}<br /><br /> - exit.c:<br /><br />	list_del(&amp;current-&gt;thread_group);<br /><br />and you're pretty much done (the only additional small detail is to make<br />the above happen in the right place: together with the other list handling<br />so that it is all protected by the "tasklist_lock" and is SMP-safe).<br /><br />Basically, we can add thread groups with about 10 lines worth of diffs,<br />and they will be "obviously correct". That means that if this helps<br />LinuxThreads, it can happen before 2.4.0-final.<br /><br />In contrast, a shared sigprocmask() simply isn't going to happen. That is<br />a 2.5.x issue, and even in 2.5.x I'd really like to avoid it, because it<br />would be a design mistake, I suspect.<br /><br />&gt; [Earlier there were proposals to add a CLONE_WAITPID for that, but I think<br />&gt; controlling it via the tid and prctl would be more elegant and flexible] <br /><br />I'd prefer CLONE_WAITPID, I think.<br /><br />&gt; Another thing would be shared credentials. I'm sure there are portd <br />&gt; programs who have security bugs on Linux because they expect setuid() to be <br />&gt; process global, and it is local.<br /><br />Again, this is not going to happen. At least not quickly.<br /><br />I also think that anybody who depends on global credentials is just buggy.<br />You _have_ to synchronize anyway, otherwise you have race city with<br />horrible security issues. Basically, it's a bad idea.<br /><br />&gt; To solve the problem of system management tools (top) etc. counting a single<br />&gt; shared mm_struct multiple times [threaded staroffice looks really funny in<br />&gt; gtop]<br /><br />I'd rather have this just look at the tgid, and be done with it.<br /><br />Basically, a shared tgid says: "this is a thread group". Regardless of<br />whether it shares it's VM space or not. So I think system management tools<br />should honour that, and not care about CLONE_VM.<br /><br />Yes, you can make it do strange things, and it means that top would look<br />nice only after people upgrade to a newer library with newer pthreads()<br />stuff etc, but hey, I'm interested in the _design_, not in making top look<br />pleasant right now.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
