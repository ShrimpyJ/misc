    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/8/23/120">First message in thread</a></li><li><a href="/lkml/2000/8/24/58"> yodaiken&#64;fsmlabs ...</a><ul><li><a href="/lkml/2000/8/24/7">Alan Cox</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/8/24/41"> yodaiken&#64;fsmlabs ...</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Aug 2000 12:51:20 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCO: "thread creation is about a thousand times faster than on native Linux"</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 24 Aug 2000, Alan Cox wrote:<br />&gt; <br />&gt; Assuming we queue signals to arbitary threads then a single thread causing all<br />&gt; the open/close/read events would queue open/close/read events onto arbitary<br />&gt; signal queues. So thread 1 might see open open and thread 2 see close read-ready<br /><br />No.<br /><br />The current sys_kill() logic is not going away. The current "p-&gt;pid" is<br />not changing. None of this changes existing behaviour in the setup you<br />describe.<br /><br />We would _add_ an interface to have a special thread group ID, and that<br />would only be used by sys_tgkill().<br /><br />(An independent issue is then whether to decide to say "ok, we'll actually<br />put the new sys_tgkill() in the same position as the old sys_kill() in the<br />system call table, so that old user binaries automatically get the new<br />pthreads compatible kill capability". Note that this is also backwards<br />compatible, because sys_tgkill() and sys_kill() are actually 100% the same<br />as long as CLONE_PID isn't used ;)<br /><br />So basically the only way to trigger the "thread-group-wide" signals would<br />be by doing so explicitly. Which we can choose to do on a case-by-case<br />basis inside the kernel, of course (so the tty layer may decide to use the<br />thread-group version of signal handling, while the SIGIO layer probably<br />really should _not_ do that).<br /><br />We could make it more dynamic (ie make the exact behaviour a per-signal<br />flag or whatever), but that's beyond the scope of any 2.4.x "Let's get<br />LinuxThreads working well quickly" kind of discussion.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
