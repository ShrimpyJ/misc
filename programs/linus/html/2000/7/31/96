    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/7/28/10">First message in thread</a></li><li><a href="/lkml/2000/7/31/8">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/31/13">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2000/7/31/114">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/31/114">Andi Kleen</a><ul><li><a href="/lkml/2000/7/31/126">Oliver Xymoron</a></li><li><a href="/lkml/2000/7/31/136">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/7/31/88">Chuck Lever</a><ul><li><a href="/lkml/2000/7/31/188">Alan Cox</a><ul><li><a href="/lkml/2000/8/4/84">Matthew Wilcox</a><ul><li><a href="/lkml/2000/8/4/89">Mark Hahn</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 31 Jul 2000 10:58:30 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Decrease hash table memory overhead</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 31 Jul 2000, Andi Kleen wrote:<br /><br />&gt; On Mon, Jul 31, 2000 at 08:03:26AM +0200, Linus Torvalds wrote:<br />&gt; &gt; <br />&gt; &gt; <br />&gt; &gt; On Mon, 31 Jul 2000, Andi Kleen wrote:<br />&gt; &gt; &gt; <br />&gt; &gt; &gt; Ok, it is worth about 13% for iget() on a K6-400 during cache trashing <br />&gt; &gt; &gt; with empty file system read_inode.<br />&gt; &gt; <br />&gt; &gt; I'm not interested in made-up benchmarks that cannot be reproduced under<br />&gt; &gt; real load.<br />&gt; <br />&gt; I don't think it is more made up than e.g. lmbench doing getpid() all <br />&gt; the time to test syscall latency.<br /><br />So make up a benchmark that can be tested with a _system_call_.<br /><br />Not something that requires a filesystem that cannot exist in real life.<br /><br />&gt;					 The other system is simulated by the<br />&gt; cache trashing. Doing it completely from user space would probably<br />&gt; add so many other variables and variances that the results would be hard<br />&gt; to interpret.<br /><br />Yes.<br /><br />The other way to say the same thing is<br /><br />	"Doing it from user space might show that it's not a performance<br />	 optimization that cna be noticed".<br /><br />See?<br /><br />&gt; It stands for hash yes. single_pointer_head_list would be more accurate, but<br />&gt; I didn't like the sphlist name. Its most common use is probably hash tables,<br />&gt; so I chose the h- prefix instead.<br /><br />If it makes you feel any better, I would have hated "sphlist" even more.<br /><br />Basically, I think it's the wrong level of abstraction. If it is<br />abstracted like a list, then I like the current lists more that do not<br />need conditionals in many of the common operations. If it were to be<br />abstraced as a hash thing, then I might like it.<br /><br />Something like "hash_insert()" and "hash_remove()" etc would be<br />acceptable, but then you'd need to really make the abstraction layer<br />higher (ie implement some form of generic "hash_find()" etc). This might<br />well be worthwhile - I suspect there is quite a lot of common code in<br />inode/page/dentry hashing, and at that point the interface would be _more_<br />than "just another list implementation". <br /><br />I do not like two pieces of code that basically do the equivalent thing,<br />is what I guess I'm saying. I prefer simplicity over something that cannot<br />even be measured on the performance side..<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
