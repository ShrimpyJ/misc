    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/7/28/10">First message in thread</a></li><li><a href="/lkml/2000/7/31/96">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/31/114">Andi Kleen</a><ul><li><a href="/lkml/2000/7/31/126">Oliver Xymoron</a><ul><li><a href="/lkml/2000/7/31/160">"Andi Kleen"</a><ul><li><a href="/lkml/2000/8/1/47">Mark Hemment</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/7/31/142">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/31/142">Jeff Garzik</a></li><li><a href="/lkml/2000/7/31/189">Andi Kleen</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 31 Jul 2000 14:40:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Decrease hash table memory overhead</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 31 Jul 2000, Andi Kleen wrote:<br />&gt; <br />&gt; Or it might. It is just too much work for me, because it is takes too long<br />&gt; to do right.<br /><br />Fair enough.<br /><br />&gt; Anyways, hlists are already used all over the kernel (e.g. try grep pprev<br />&gt; net/ipv4/*), just everybody is reinventing the wheel on them all the <br />&gt; time. I did that myself several times. It would be nicer to use list_*()<br />&gt; macros the time, just without the bloat of the list_* list heads.<br /><br />Noe that THIS is a valid argument that I can find no holes in.<br /><br />The argument of "inode.c could be speeded up/shrunk/xxxx" doesn't strike<br />me as being a very good argument especially just before 2.4.x. <br /><br />The argument that "lots of code already does this, except they aren't very<br />clean about it and do it by hand", is an argument I can buy into.<br /><br />You might consider just going about it a different way: pick the places<br />that _already_ use this kind of list, and clean them up using a generic<br />list package. I still don't like "hlists" as a name, because I still don't<br />see the "hash" in them conceptually, but I would certainyl consider any<br />cleanup a good thing.<br /><br />And once you come from that direction, it's going to be a lot easier<br />convincing me to eventually potentially switch over some of the current<br />lists.h users to a new implementation.<br /><br />&gt; I suspect that would either end up with lots of pseudo functional function <br />&gt; pointer (do_foo(hash_list, void (*foo_functor)(void *, void *)) and other slow<br />&gt; horrors) or a disgusting macro mess like the older lists.h that was<br />&gt; recently removed.<br /><br />I'm not convinced. The wnew list.h in my opinion does really well, and<br />_without_ having a lot of ugly macros. It's strange to people using the<br />BSD ones, but it has, in my opinion, a much cleaner interface. I think the<br />same approach could be extended to cover the needs of a nice hash table.<br /><br />For example, the current lists have the list_for_each() thing that walks<br />the list. The "hash_find(list)" thing wouldn't need to be all that<br />different from that one - let people supply their own hash comparison<br />functions etc not by giving them as arguments, but by creating nice<br />constructs together with the helper functions.<br /><br />Something as simple as "list_for_each()" can be a HUGE simplifier, and<br />make code a lot more readable. My favourite example is the PCI suspend<br />code, which is just a lot of grotty code walking the trees this way and<br />that, but that with some good organization resulted in functions that look<br />really simple and obvious. The "list_for_each()" macro is part of that.<br /><br />I bet that all the existing hlist-like code is really for walking<br />hash-chains, no?  I really think there is opportunity for creating more of<br />a _nice_ infrastructure for doing these hash-chains, rather than just<br />doing the list handling. <br /><br />Basically, even if it only ends up being a simple list implementation, I'd<br />prefer to call it "hash_xxxx()" just to avoid confusion with the "normal"<br />lists. And I think it could be more.<br /><br />And I think we'd be better off converting existing users than try to<br />convert code that already looks pretty ;)<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
