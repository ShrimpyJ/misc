    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/7/27/214">First message in thread</a></li><li><a href="/lkml/2000/7/27/214">"Albert D. Cahalan"</a><ul><li><a href="/lkml/2000/7/27/218">Alexander Viro</a><ul><li><a href="/lkml/2000/7/28/24">bert hubert</a><ul><li><a href="/lkml/2000/7/28/27">Christoph Hellwig</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/7/28/122">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/28/122">Ulrich Drepper</a><ul><li><a href="/lkml/2000/7/28/125">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/28/212">"H. Peter Anvin"</a></li></ul></li></ul></li><li><a href="/lkml/2000/7/28/138"> volodya&#64;mindspri ...</a></li><li><a href="/lkml/2000/7/28/141">Frank van Maarseveen</a><ul><li><a href="/lkml/2000/7/28/151">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/7/28/150">Alexander Viro</a></li><li><a href="/lkml/2000/7/28/161">"Albert D. Cahalan"</a><ul><li><a href="/lkml/2000/7/28/231">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/29/60">"Albert D. Cahalan"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 28 Jul 2000 11:38:36 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: sysconf (was Re: RLIM_INFINITY inconsistency between archs)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 28 Jul 2000, Albert D. Cahalan wrote:<br />&gt; <br />&gt; We should export the "user jiffies". Eventually this _may_ become a<br />&gt; real per-arch constant, but for now it is not. For now it is just HZ,<br />&gt; and you can't stop people from adjusting it. User-space already has<br />&gt; to hack around the lack of __SC_CLK_TCK, and I assure you that it is<br />&gt; very gross... the procps code could make you vomit.<br /><br />This is not as hard as it seems. HZ is 100 on intel, as far as user mode<br />is concerned. End of story.<br /><br />When we change the kernel-internal HZ (and yes, it _will_ happen),<br />user-space won't notice. __SC_CLK_TCK is useless, and will so remain.<br /><br />This is _exactly_ the kind of "nifty, far-seeing patch" that I absolutely<br />do not want to see. <br /><br />We have interfaces, and we maintain them. Adding crap for the case where<br />they might not be maintained in the future is _wrong_.<br /><br />&gt; Suggestion for glibc NGROUPS_MAX problem: in the typical way of<br />&gt; hacking around lack of kernel support, have glibc run a setuid-root<br />&gt; executable that reads kernel memory. Use the System.map file to<br />&gt; seek out a suitable spot. You get bonus points for using statistical<br />&gt; methods or arch-specific disassembly of the executable code.<br /><br />Oh, and pray tell what is wrong by just using the value "32"?<br /><br />THERE IS NO LACK OF KERNEL SUPPORT AT ALL!<br /><br />There is only a stupid push to try to be more generic than anybody<br />actually needs! It makes glibc slower and bigger than it needs to be, and<br />quite frankly I don't see the point of having a system call that returns<br />the value "32".<br /><br />If glibc _really_ really doesn't like the fact that Linux has a constant<br />NGROUPS, then create a stupid configuration file in /etc/sysconf, and have<br />some bootup entity recomupte the constants every time. Then, the magic<br />sysctl() call ends up being reading that sysconf file, and it allows<br />sysadmins etc to even edit it (or, because it is probably better off being<br />a binary file, edit the file generator) if they want to artificially<br />report other values.<br /><br />Why people want to push this kind of stupidity into the kernel is beyond<br />me. <br /><br />Read my lips: if it doesn't change value during the running of the<br />machine, it should not be a system call. Getting the maximum amount of<br />memory (_SC_PHYS_PAGES) is another example of where asking for a system<br />call is _stupid_. Same goes for __SC_PAGESIZE - even if it will change in<br />future kernels (possible), it will NOT change dynamically. You can have a<br />config file.<br /><br />Why a config file? Simple: it breaks the linkage between kernel and glibc.<br />There are too many interdependencies as-is (the stupid header files that<br />this flame war started over being one of them). Don't add more. Instead,<br />work on making things more independent, so that there are no features<br />holding up development.<br /><br />Think about this for a moment. Say I add a system call that I call<br />"sys_return_32()", and glibc calls "sys_sysconf_NGROUPS()". What does that<br />result in? glibc will have all that stupid compatibility crap, and the<br />sysconf() routine will look like<br /><br />	int ngroups = sys_return_NGROUPS();<br />	if (ngroups &lt; 0)<br />		ngroups = 32;	/* Or whatever */<br />	return ngroups;<br /><br />Does anybody really think that the above is beatiful? Multiply the above<br />by every single new thing that some deranged POSIX.76c standard comes up<br />with, and it's obviously crap.<br /><br />Now, how about a sysconf() that looks like<br /><br />	long sysconf(int name)<br />	{<br />		static long *sc_map = NULL;<br />		long *map = sc_map;<br /><br />		if (name &lt; 0 || name &gt;= _SC_MAX) {<br />			errno = EBADNAME;<br />			return -1;<br />		}<br /><br />		if (!map) {<br />			int fd = open("/etc/sysconf");<br />			if (fd &lt; 0)<br />				return fd;<br />			map = mmap(NULL, _SC_MAX*sizeof(long),<br />				PROT_READ, MAP_PRIVATE,<br />				fd, 0);<br />			close(fd);<br />			if (map == MAP_FAILED)<br />				return -1;<br />			sc_map = map;<br />		}<br />		return map[name];<br />	}<br /><br />which can (a) handle every single sysconf name in existence with the same<br />code (preferably the sysconf names are well-chosen to not be all over the<br />place, but you can easily group them and take advantage of holes - but<br />remember that not all filesystems like holes). And (b) doesn't need any<br />backwards compatibility crap. And (c) is something glibc can do on it's<br />OWN.<br /><br />And you know what?<br />	It's easily expandable.<br /><br />	It doesn't matter where the values basically come from:<br />		_SC_CHILD_MAX comes from the kernel<br />		_SC_TZNAME_MAX comes from glibc<br />		_SC_BC_BASE_MAX comes from "bc"<br />		_SC_EXPR_NEST_MAX comes from "expr"<br />		_SC_RE_DUP_MAX comes from the regexp library<br />		..etc..<br /><br />	It's faster than a system call too. And simpler. And requires no<br />	infrastructure.<br /><br />So how about some people start using their brains, instead of blaming the<br />kernel for some lack of infrastructure.<br /><br />And yes, I mean you in particular, Uli. Instead of trying to come up with<br />something clever and complicated, why don't you come up with something<br />INTELLIGENT and simple. See above.<br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
