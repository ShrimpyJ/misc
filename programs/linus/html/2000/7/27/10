    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/7/27/5">First message in thread</a></li><li><a href="/lkml/2000/7/27/5">Boszormenyi Zoltan</a><ul><li class="origin"><a href="/lkml/2000/7/27/31">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/7/27/31">Jeff Lightfoot</a><ul><li><a href="/lkml/2000/7/27/37">James Lewis Nance</a></li></ul></li><li><a href="/lkml/2000/7/27/36">=?iso-8859-1?Q?Andr=E9_Dahlqvist?=</a></li><li><a href="/lkml/2000/7/27/39">Jamie Lokier</a><ul><li><a href="/lkml/2000/7/27/48">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/27/53">"Theodore Y. Ts'o"</a></li></ul></li></ul></li><li><a href="/lkml/2000/7/27/41">"Mike A. Harris"</a></li><li><a href="/lkml/2000/7/27/50">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2000/7/27/56">Jesse Pollard</a><ul><li><a href="/lkml/2000/7/27/64">"Theodore Y. Ts'o"</a></li><li><a href="/lkml/2000/7/31/75">(Kai Henningsen)</a></li></ul></li><li><a href="/lkml/2000/7/27/57">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/27/74">Jamie Lokier</a></li></ul></li><li><a href="/lkml/2000/7/28/12">Drew Sanford</a><ul><li><a href="/lkml/2000/7/28/16">Alexander Viro</a></li></ul></li></ul></li><li><a href="/lkml/2000/7/28/26">(Kai Henningsen)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: RLIM_INFINITY inconsistency between archs</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">27 Jul 2000 00:39:51 -0700</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;Pine.LNX.4.02.10007270811460.32194-101000&#64;prins.externet.hu&gt;,<br />Boszormenyi Zoltan  &lt;zboszor&#64;externet.hu&gt; wrote:<br />&gt;<br />&gt;/usr/include/asm is a symlink to /usr/src/linux/include/asm, as in the<br />&gt;original distribution but /usr/src/linux is a 2.4.0-testX tree.<br />&gt;With a 2.2.X source tree, it does not produce any warning.<br /><br />I've asked glibc maintainers to stop the symlink insanity for the last<br />few years now, but it doesn't seem to happen.<br /><br />Basically, that symlink should not be a symlink.  It's a symlink for<br />historical reasons, none of them very good any more (and haven't been<br />for a long time), and it's a disaster unless you want to be a C library<br />developer.  Which not very many people want to be. <br /><br />The fact is, that the header files should match the library you link<br />against, not the kernel you run on. <br /><br />Think about it a bit..  Imagine that the kernel introduces a new "struct<br />X", and maintains binary backwards compatibility by having an old system<br />call in the old place that gets passed a pointer to "struct old_X". <br />It's all compatible, because binaries compiled for the old kernel will<br />still continue to run - they'll use the same old interfaces they are<br />still used to, and they obviously do not know about the new ones. <br /><br />Now, if you start mixing a new kernel header file with an old binary<br />"glibc", you get into trouble.  The new kernel header file will use the<br />_new_ "struct X", because it will assume that anybody compiling against<br />it is after the new-and-improved interfaces that the new kernel<br />provides. <br /><br />But then you link that program (with the new "struct X") to the binary<br />library object archives that were compiled with the old header files,<br />that use the old "struct old_X" (which _used_ to be X), and that use the<br />old system call entry-points that have the compatibility stuff to take<br />"struct old_X". <br /><br />Boom! Do you see the disconnect?<br /><br />In short, the _only_ people who should update their /usr/include/linux<br />tree are the people who actually make library releases and compile their<br />own glibc, because if they want to take advantaged of new kernel<br />features they need those new definitions. That way there is never any<br />conflict between the library and the headers, and you never get warnings<br />like the above..<br /><br />&gt;Mr. Ulrich Drepper (one of the glibc/gcc guys) gave me a standard<br />&gt;"don't use kernel headers directly" answer. But neither gcc.c,   <br />&gt;neither the above small program use kernel headers. I suppose he <br />&gt;referred to /usr/include/linux/* as (I think) he did not understand me.<br /><br />No. He really meant that you should not use the kernel headers: you<br />should use the headers that glibc came with. It is probably a redhat bug<br />that those headers were a symbolic link. <br /><br />I would suggest that people who compile new kernels should:<br /><br /> - NOT do so in /usr/src. Leave whatever kernel (probably only the<br />   header files) that the distribution came with there, but don't touch<br />   it. <br /><br /> - compile the kernel in their own home directory, as their very own<br />   selves. No need to be root to compile the kernel. You need to be root<br />   to _install_ the kernel, but that's different.<br /><br /> - not have a single symbolic link in sight (except the one that the<br />   kernel build itself sets up, namely the "linux/include/asm" symlink<br />   that is only used for the internal kernel compile itself)<br /><br />And yes, this is what I do. My /usr/src/linux still has the old 2.2.13<br />header files, even though I haven't run a 2.2.13 kernel in a _loong_<br />time. But those headers were what glibc was compiled against, so those<br />headers are what matches the library object files.<br /><br />And this is actually what has been the suggested environment for at<br />least the last five years.  I don't know why the symlink business keeps<br />on living on, like a bad zombie.  Pretty much every distribution still<br />has that broken symlink, and people still remember that the linux<br />sources should go into "/usr/src/linux" even though that hasn't been<br />true in a _loong_ time. <br /><br />Is there some documentation file that I've not updated and that people<br />are slavishly following outdated information in? I don't read the<br />documentation myself, so I'd never notice ;)<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
