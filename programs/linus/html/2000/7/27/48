    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/7/27/5">First message in thread</a></li><li><a href="/lkml/2000/7/27/10">(Linus Torvalds)</a><ul><li><a href="/lkml/2000/7/27/31">Jeff Lightfoot</a><ul><li><a href="/lkml/2000/7/27/37">James Lewis Nance</a></li></ul></li><li><a href="/lkml/2000/7/27/36">=?iso-8859-1?Q?Andr=E9_Dahlqvist?=</a></li><li><a href="/lkml/2000/7/27/39">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/2000/7/27/53">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/27/53">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2000/7/27/55">Jamie Lokier</a></li><li><a href="/lkml/2000/7/27/60">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/7/27/41">"Mike A. Harris"</a></li><li><a href="/lkml/2000/7/27/50">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2000/7/27/56">Jesse Pollard</a><ul><li><a href="/lkml/2000/7/27/64">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2000/7/27/75">Christoph Hellwig</a></li></ul></li><li><a href="/lkml/2000/7/31/75">(Kai Henningsen)</a><ul><li><a href="/lkml/2000/7/31/84">"Richard B. Johnson"</a></li><li><a href="/lkml/2000/8/2/112">peter swain</a></li></ul></li></ul></li><li><a href="/lkml/2000/7/27/57">Linus Torvalds</a><ul><li><a href="/lkml/2000/7/27/74">Jamie Lokier</a></li></ul></li><li><a href="/lkml/2000/7/28/12">Drew Sanford</a><ul><li><a href="/lkml/2000/7/28/16">Alexander Viro</a></li></ul></li></ul></li><li><a href="/lkml/2000/7/28/26">(Kai Henningsen)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 27 Jul 2000 07:50:22 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: RLIM_INFINITY inconsistency between archs</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 27 Jul 2000, Jamie Lokier wrote:<br />&gt;<br />&gt; Linus Torvalds wrote:<br />&gt; &gt; In short, the _only_ people who should update their /usr/include/linux<br />&gt; &gt; tree are the people who actually make library releases and compile their<br />&gt; &gt; own glibc, because if they want to take advantaged of new kernel<br />&gt; &gt; features they need those new definitions.<br />&gt; <br />&gt; I've written quite a few programs that use new kernel features that<br />&gt; aren't in Glibc.  A recent one includes &lt;linux/ppdev.h&gt;.  That's easy,<br />&gt; an iocl.  Another use O_NOFOLLOW, which wasn't defined in Glibc for a<br />&gt; while.<br /><br />This is true.<br /><br />However, people who do these kinds of things know what they are doing.<br />People who follow new kernels, and actually write new programs to take<br />advantage of new kernel features are people who can easily handle the<br />issue of getting the new defines etc from the kernel header files.<br /><br />This is obviously why there historically _was_ a symlink. There were tons<br />of new features all the time, and they were usually quite big. Besides,<br />nine years ago _everybody_ who used linux compiled their own kernels and<br />programs and knew exactly what they were up against.<br /><br />These days, you usually need a single small define, or similar. The<br />problems the symlinks bring are not worth it any more. I would suggest<br />that your programs using new features should do something feature-specific<br />these days. For example, you can do one of any number of things (not all<br />are really good for O_NOFOLLOW, but you get the idea):<br /><br /> (a) explicit code to define it. In this case it's not very clean, as<br />     O_NOFOLLOW happens to be one of the things where the value depends on<br />     the architecture, but in many other cases this is a non-issue:<br /><br />	#ifdef __linux__<br />	#ifndef O_NOFOLLOW<br />	#ifdef __i386__<br />	#define O_NOFOLLOW ...<br />	#else<br />	...<br />	#endif<br /><br /> (b) You just use "-I/home/lk" and then use<br /><br />	#include "v2.3/linux/include/asm/fcntl.h"<br /><br />     and because you do this explicitly you'll be much more able to handle<br />     the (in this case fairly unlikely) case of having those defines clash<br />     with whatever the library headers do.<br /><br /> (c) do a simple "generation" script. This is what I'd do in the case of<br />     O_NOFOLLOW. In your makefile, just have<br /><br />	nofollow.h:<br />		grep define.*O_NOFOLLOW $(KERNELDIR)/include/asm-$(ARCH)/fcntl.h &gt; nofollow.h<br /><br />    and you're done.<br /><br />Note that the advantage of (a) is that it will actually compile and work<br />even on a machine that doesn't have the kernel sources installed at all.<br />So your program will compile even on a bog-standard RedHat/SuSE/whatever<br />installation, and if done right it will use the new feature on new kernels<br />and fall back on something else on old kernels.<br /><br />The advantage of (b) is that at least it will be obvious _why_ it doesn't<br />compile when somebody else gets your source-code and notices that you seem<br />to be including header files directly from a development kernel tree..<br /><br />The advantage of (c) is that in the specific case of "O_NOFOLLOW" and a<br />lot of other structures, this is a really easy approach. It doesn't work<br />that well for some other things, but it tends to work really well for the<br />simple "I want this particular #define from the kernel".<br /><br />&gt; I decided to tackle this by having autoconf read the value from<br />&gt; &lt;asm/fcntl.h&gt; and define a macro with that value. (Because you can't<br />&gt; include include &lt;asm/fcntl.h&gt; and &lt;fcntl.h&gt; at the same time).  That<br />&gt; turns out to more complicated than you'd think: &lt;asm/fcntl.h&gt; requires<br />&gt; &lt;linux/types.h&gt;, which is incompatible with &lt;stdio.h&gt;.  But it still<br />&gt; works better, in the tradition of autoconf, than having a copy of the<br />&gt; constant for every known architecture and not being able to use the<br />&gt; feature on other architectures.<br /><br />Hmm. That sounds fairly complex to me - see my (c) suggestion - but the<br />point is that yes, it can be done. And the other point is that by doing<br />it this way the onus of having to know what to do falls on the people who<br />_do_ know what to do.<br /><br />There are a lot of people who want to download sources off the net and<br />compile and run them. Not all of them know (or _should_ know) what to do<br />when the system header files are acting up. So it should be the default<br />action to compile new kernels _without_ messing with the system headers,<br />so that you don't have to worry about other programs..<br /><br />Yes, if you know what you're doing, you're free to do the symlink. But<br />it's not really a supported environment: I do not like making the kernel<br />headers less readable by having various user-level dependencies on them. I<br />_do_ end up accepting silly "#ifdef __KERNEL__" stuff in order to make old<br />libc-5 etc installations happy with the symlink, but I definitely don't<br />guarantee that that will always be the case (and it certainly historically<br />_hasn't_ always been the case that the kernel headers work together with<br />the userland headers).<br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
