    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/9/20/45">First message in thread</a></li><li><a href="/lkml/2000/9/20/45">(Jeremy Higdon)</a><ul><li class="origin"><a href="">(Linus Torvalds)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: __ucmpdi2</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">20 Sep 2000 11:02:32 -0700</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;10009192200.ZM278817&#64;classic.engr.sgi.com&gt;,<br />Jeremy Higdon &lt;jeremy&#64;classic.engr.sgi.com&gt; wrote:<br />&gt;&gt;  - Linux developers often do horribly stupid things, and use 64-bit<br />&gt;&gt;    division etc instead of using a simple shift. Again, not linking<br />&gt;&gt;    against libgcc finds those things early rather than late, because the<br />&gt;&gt;    horribly stupid things end up requireing libgcc support.<br />&gt;<br />&gt;I would have thought that the compiler would generate a shift if it<br />&gt;could (I'm presuming you're talking about shifting by a constant<br />&gt;here -- or are you talking about code that always shifts by a<br />&gt;computed power of two).<br /><br />The compiler is smart, but the compiler doesn't have ESP.<br /><br />For example, what some filesystems did was basically<br /><br />	blocknumber = offset_64bit / filesystem-&gt;blocksize;<br /><br />which is not optimizable. Because while it _is_ a division by a power of<br />two, gcc has no way of knowing that, nor _what_ power of two. Gcc<br />doesn't know that the ext2 blocksize is 1024, 2048 or 4096 ;)<br /><br />The fix is to hit such Linux developers virtually on the head (by having<br />a kernel that doesn't link ;), and rewrite the code as<br /><br />	blocknumber = offset_64bit &gt;&gt; filesystem-&gt;blocksize_bits;<br /><br />which does exactly the same thing, except it is about a hundred times<br />faster.<br /><br />See?<br /><br />&gt;&gt; In the case of __ucmpdi2, it appears to be a combination of kernel and<br />&gt;&gt; compiler stupidity - there's no reason why __ucmpdi2 should not be done<br />&gt;&gt; inline by the compiler, but at the same time there is probably also<br />&gt;&gt; little reason to use a slow "long long" comparison in the kernel.<br />&gt;<br />&gt;Little reason or no reason?  If there is a reason, and it doesn't<br />&gt;work, then the coder is forced to rewrite using 32 bit variables,<br />&gt;synthesizing the result.  Then you have belabored C code as well<br />&gt;as belabored machine code, and it doesn't automatically clean up<br />&gt;when you move to a 64 bit machine.<br /><br />Oh, but usually it does.<br /><br />For example, most of the time these things are due to issues like<br /><br />	if (offset &gt;= page_offset(page))<br />		...<br /><br />where Page_offset() is simply "(unsigned long long)page-&gt;index &lt;&lt;<br />PAGE_CACHE_SHIFT" <br /><br />Very readable, no?<br /><br />But it doesn't get any worse by doing the comparison the other way<br />around, and instead doing<br /><br />	if (index(offset) &gt;= page-&gt;index)<br /><br />which is faster (because now you have only one long long shift, not two<br />shifts and a comparison), and equally readable (yeah, you have to think<br />about it for a bit if you want to convince yourself that it's the same<br />thing due to the low-order bits you lost, but in many cases where we did<br />this conversion the end result was _more_ readable, because the end<br />result was that we always worked on index+offset parts, and there was no<br />confusion). <br /><br />And on 64-bit machines the code is exactly the same too.  No slow-down. <br /><br />This was why I hated the original LFS patches.  They mindlessly just<br />increased a lot of stuff to 64 bits, with no regard for what teh code<br />really _meant_.  I ended up re-writing the core code completely before<br />LFS was accepted into the 2.3.x series - using page index calculations<br />instead, which meant that most of the actual critical routines _still_<br />did the same old 32-bit calculations, they just did them with the part<br />of the values that really mattered - thus giving effectively a 44 bit<br />address space. <br /><br />And btw, doing it this way means that on the alpha we could potentially<br />have a "77-bit address space" for file mapping. So yes, it actually<br />means other improvments too - even for 64-bit machines.<br /><br />(Now, the 77-bit address space that the new VM potentially gives to<br />64-bit architectures is only useful for people who use the page cache<br />directly, because obviously file sizes are still just 64-bit integers.<br />But it could be useful for the internal implementation of distributed<br />memory, for example.)<br /><br />Ehh.. Basically, my argument boils down to the old truism: by thinking<br />about the problem and doign the smart thing, you can often do more with<br />less work.<br /><br />&gt;So what we've said is: 64 bit is okay, except in a switch statement,<br />&gt;or other random expressions that might cause gcc to embed a call to<br />&gt;similar libgcc function.<br /><br />No, what Linux really says is that you should avoid using "long long"<br />(and thus 64-bit values), because on many architectures it is slower. <br /><br />And I further say that it is usually very easy to avoid it. <br /><br />But you shouldn't go overboard. Simple "long long" arithmetic is useful<br />and easy, even on 32-bit platforms. The kernel does quite a lot of it,<br />as all file offsets are basically 64 bits. But by thinking about the<br />problem some more, you can often limit it to those simple operations,<br />which are fast anyway.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
