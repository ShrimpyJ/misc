    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/9/17/80">First message in thread</a></li><li><a href="/lkml/2000/9/17/145">Alexander Viro</a><ul><li><a href="/lkml/2000/9/17/96">Linus Torvalds</a><ul><li><a href="/lkml/2000/9/17/61">Alexander Viro</a><ul><li><a href="/lkml/2000/9/17/140">Linus Torvalds</a><ul><li><a href="/lkml/2000/9/18/140">Alexander Viro</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/9/18/77">Linus Torvalds</a><ul><li><a href="/lkml/2000/9/18/77">Alexander Viro</a><ul><li><a href="/lkml/2000/9/18/115">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/9/18/214">Chris Mason</a><ul><li><a href="/lkml/2000/9/18/160">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Sep 2000 20:30:29 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: The INN/mmap bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 17 Sep 2000, Linus Torvalds wrote:<br />&gt; <br />&gt; I bet your patch fixes the corruption, but I want to understand _why_.<br />&gt; Call me dense, but __block_commit_write() seems to do everything we want<br />&gt; done..<br /><br />Ok, I may be dense, but I see the bug.<br /><br />And no, your patch was not the right thing either. It _will_ make that<br />particular corruption go away, but it's a more insidious problem, and your<br />patch only addreses part of the whole problem.<br /><br />The basic problem is that right now we have code that does <br /><br />	if (!page-&gt;buffers)<br />		create_empty_buffers(page, inode, inode-&gt;i_sb-&gt;s_blocksize);<br />	...<br />	if (!buffer_uptodate(bh))<br />		ll_rw_block(READ, 1, &amp;bh);<br /><br />And this is WRONG.<br /><br />If the whole page is up-to-date, we must NOT try to read the buffer in<br />from disk, because the in-memory copy is always more up-to-date.<br /><br />Normally this bug shows itself only as a small performance issue - if we<br />only use read() and write(), all changes to the page will be done<br />"synchronously" with "page-&gt;buffers" being held, and as such the page will<br />never have contents that are newer than the on-disk image. But whenever<br />somebody writes to the page through a shared mapping, that is no longer<br />true - we MUST NOT do the buffer read, because it's going to overwrite<br />data that is newer than the disk contents.<br /><br />The bug again didn't show up in the trivial test-cases, because it depends<br />on us "losing" the page buffers and having to re-create them in order to<br />show up, and that only happens under memory pressure.<br /><br />Basically, both "truncate()" and "write()" have this bug where they can<br />end up re-reading stuff from disk even though the in-memory copy is newer.<br /><br />And because write() had this bug, the bug also got into<br />block_write_full_page(). Not because block_write_full_page() was buggy in<br />itself, but because it used a buggy routine.<br /><br />And your patch fixes the corruption, not by fixing the bug, but by<br />avoiding the buggy routing in block_write_full_page().<br /><br />We need to fix the real bug - otherwise anybody doing both write() and<br />shared mmap's to the same file is going to be bit by it later on...<br /><br />The easy fix is probably to do something like<br /><br />	/* Map the buffer */<br />	if (!buffer_mapped(bh)) {<br />		...<br />	}<br />+	/* If the page is up-to-date, so is the buffer */<br />+	if (Page_Uptodate(page))<br />+		set_bit(BH_Uptodate, &amp;bh-&gt;b_state);<br /><br />	/* Ok, now it was _truly_ not uptodate */<br />	if (!buffer_uptodate(bh))<br />		ll_rw_block(READ, 1, &amp;bh);<br /><br />Comments? The above should fix block_write_full_page() automatically, as<br />well as fixing the other cases too - and actually improve performance at<br />the same time by getting rid of unnecessary re-reads.<br /><br />Looks fairly simple. It only happens in __block_prepare_write() and in<br />block_truncate_page(), so there's just two places to fix.<br /><br />Can you se anything else wrong?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
