    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/13/196">First message in thread</a></li><li><a href="/lkml/2000/10/17/193">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/18/2">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/18/58">Justin Schoeman</a></li><li><a href="/lkml/2000/10/18/118">Jeff Garzik</a><ul><li><a href="/lkml/2000/10/19/59">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/19/37">Jeff Garzik</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/10/18/17">Andrea Arcangeli</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/18/19">Stephen Tweedie</a></li><li><a href="/lkml/2000/10/18/76">(Gerd Knorr)</a></li><li><a href="/lkml/2000/10/17/172">Stephen Tweedie</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Oct 2000 09:39:39 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mapping user space buffer to kernel address space</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 18 Oct 2000, Andrea Arcangeli wrote:<br />&gt; <br />&gt; &gt; Quite frankly, the way I'd conceptually prefer people do these kinds of<br />&gt; &gt; DMA buffers etc is to just have a "nopage()" function, and let that<br />&gt; &gt; nopage() function just fill in the page from the DMA buffer directly. This<br />&gt; &gt; would work fine, and would get rid of all the playing with PG_reserved<br />&gt; &gt; etc.<br />&gt; <br />&gt; And it would generate useless page faults as well. What's the point<br />&gt; of unmapping a page that can't be freed? Once the page gets freed<br />&gt; the mapping just gone away via munmap anyways. What's the point of<br />&gt; introducing that performance hit?<br /><br />As I explained in the part you snipped, this is why I _do_ accept<br />remap_page_range().<br /><br />But to answer your question: the point is cleanliness.<br /><br />For example, remap_page_range() cannot do many things. Because a reserved<br />page does not maintain any counts (that's the definition of "reserved" as<br />far as the Linux MM is concerned - the pages never count anything), you<br />cannot do proper memory management with it.<br /><br />In the specific case of braindead hardware that needs a 1:1 direct mapping<br />due to DMA limitations etc, that's exactly what you want. You can't let<br />people move pages around anyway or do things like that. You can never let<br />people swap these pages out, because there is no point.<br /><br />But this is NOT how the MM layer should work in general. And it's sure as<br />h*ll not how the direct IO layer is going to work. You can argue until you<br />get blue in the face, I don't care. I'm _not_ going to accept some<br />braindamaged setup where you can only have one concurrent write into a<br />page at the same time. I'm _not_ going to accept some braindamaged setup<br />where you can't unmap such a page in another process or thread.<br /><br />In short, I'm _not_ willing to paper over bugs by just saying "don't touch<br />this page".<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
