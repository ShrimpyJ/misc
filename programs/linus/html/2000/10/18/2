    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/13/196">First message in thread</a></li><li><a href="/lkml/2000/10/17/170">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/17/193">Andrea Arcangeli</a><ul><li class="origin"><a href="/lkml/2000/10/18/58">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/18/58">Justin Schoeman</a></li><li><a href="/lkml/2000/10/18/118">Jeff Garzik</a><ul><li><a href="/lkml/2000/10/19/59">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2000/10/18/17">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/18/73">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/18/19">Stephen Tweedie</a></li><li><a href="/lkml/2000/10/18/76">(Gerd Knorr)</a></li><li><a href="/lkml/2000/10/17/172">Stephen Tweedie</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Oct 2000 21:26:07 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mapping user space buffer to kernel address space</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 18 Oct 2000, Andrea Arcangeli wrote:<br /><br />&gt; On Tue, Oct 17, 2000 at 02:04:10PM -0700, Linus Torvalds wrote:<br />&gt; &gt; It so happens that the vmscan stuff won't ever remove a physical page<br />&gt; &gt; mapping, but that's simply because such a page CANNOT be swapped out. How<br />&gt; <br />&gt; So if I write a mechanism that allows those driver-private-pages that are used<br />&gt; for DMA of a soundcard to be swapped out, then you would remove the<br />&gt; PG_referenced bitflag from them too?<br /><br />PG_referenced?<br /><br />Maybe you mean PG_reserved? <br /><br />Anyway, I didn't realize you were talking about the sound drivers use of<br />remap_page_range(). That's not the original reason for remap_page_range()<br />at all, and in fact it's the _ugly_ way to do things. It's simple and it<br />works, but it's not pretty.<br /><br />Quite frankly, the way I'd conceptually prefer people do these kinds of<br />DMA buffers etc is to just have a "nopage()" function, and let that<br />nopage() function just fill in the page from the DMA buffer directly. This<br />would work fine, and would get rid of all the playing with PG_reserved<br />etc.<br /><br />Obviously, such a page would never really get swapped out: you'd have a<br />"swapout()" function that would be a no-op (as the page would not truly be<br />swapped out: the page is actually held by the driver inside the kernel,<br />and the user mapping is just a _window_ into that kernel buffer). <br /><br />Now, remap_page_range() ends up giving this same functionality without<br />sound drivers needing to have nopage() or swapout() functions at all, and<br />obviously it's trivial to do this way. But you should realize that this<br />use of remap_page_range() is very much a hack - the whole point of<br />remap_page_range() was always to do the PCI (and legacy ISA region)<br />mapping for things like the X server etc that access hardware directly.<br /><br />I hated people mis-using it the way it's being done by the sound drivers,<br />but because I also realize that it allows for some simplifications I do<br />accept it - it's basically an ugly hack that doesn't really matter because<br />the exact same code _is_ needed for the real IO mapping case anyway, and<br />as far as the kernel is concerned the whole thing with PG_reserved is all<br />just a game to make the kernel VM subsystem think that some real RAM is<br />actually IO space and shouldn't be touched.<br /><br />But for going the other way (ie moving a user space page into kernel<br />space, a la kiobuf mapping) is rather different, and I think it would be a<br />big ugly hairy lie to mark such a user space page be "PCI memory", because<br />that user space page might in fact be a page cache page etc. It's not at<br />all the same kind of controlled lie that the sound driver ugly hack is..<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
