    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/29/36">First message in thread</a></li><li><a href="/lkml/2000/10/29/45">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/29/73">Alexander Viro</a><ul><li class="origin"><a href="/lkml/2000/10/29/43">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/29/43">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/29/68">Daniel Phillips</a></li></ul></li></ul></li><li><a href="/lkml/2000/10/29/51">Alan Cox</a><ul><li><a href="/lkml/2000/10/29/8">Alexander Viro</a></li><li><a href="/lkml/2000/10/29/16">"Jeff V. Merkey"</a></li><li><a href="/lkml/2000/10/29/72">Jeff Dike</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 29 Oct 2000 11:12:15 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: page-&gt;mapping == 0</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 29 Oct 2000, Alexander Viro wrote:<br />&gt; <br />&gt; One possible way is to access page-&gt;mapping _only_ under the page lock<br />&gt; and in cases when we call -&gt;i_mapping-&gt;a_ops-&gt;foo check the -&gt;mapping<br />&gt; before the method call.<br /><br />I'm leaning towards this for a 2.4.x solution.<br /><br />As far as I can tell, page-&gt;mapping is _already_ only accessed and<br />modified with the page lock held. It's just that we don't test it for<br />NULL, in case an earlier lock holder decided to clear it.<br /><br />(No, I didn't look through all the users, but at least conceptually it<br />_should_ be true that we only look at "mapping" with the lock held: it's<br />mainly used for pagein, and pageout, buth with the lock held for other<br />reasons already. Certainly all the places where we have had bug-reports<br />have been of this type).<br /><br />Making it policy that we have to re-test page-&gt;mapping after aquireing the<br />page lock might be the simplest fix for 2.4.x. It still means that we<br />might end up allowing people to have a "bad" page in the VM space due to<br />the "test-&gt;insert" race condition, but it woul dmake that event pretty<br />much a harmless bug (and thus move it to the "beauty wart - to be fixed<br />later" category).<br /><br />And the places where we get the page lock and use page-&gt;mapping are not<br />that many, I think. <br /><br />(And notice how we actually _have_ this approach already in<br />do_buffer_fdatasync(), for similar reasons - we use the "re-test the<br />page-&gt;buffers" thing there. Of course, there we do it because the clearing<br />of page-&gt;buffers is easier to see, and can happen as a result of memory<br />pressure, and not just truncate()).<br /><br />So, for example, in __find_lock_page() we should re-test the mapping after<br />we aquired the page lock. Which is fairly easy, just add something like<br /><br />	/* Race: did the mapping go away before we got the page lock? */<br />	if (page &amp;&amp; page-&gt;mapping != mapping) {<br />		page_cache_release(page);<br />		goto repeat;<br />	}<br /><br />to the end of __find_lock_page(). Add similar logic to<br />do_generic_file_read(), filemap_nopage() and filemap_sync_pte() and<br />read_cache_page(), and you're pretty much done.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
