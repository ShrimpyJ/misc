    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/29/36">First message in thread</a></li><li><a href="/lkml/2000/10/29/73">Alexander Viro</a><ul><li><a href="/lkml/2000/10/29/29">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2000/10/29/68">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/29/68">Daniel Phillips</a></li></ul></li></ul></li><li><a href="/lkml/2000/10/29/51">Alan Cox</a><ul><li><a href="/lkml/2000/10/29/8">Alexander Viro</a></li><li><a href="/lkml/2000/10/29/16">"Jeff V. Merkey"</a></li><li><a href="/lkml/2000/10/29/72">Jeff Dike</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 29 Oct 2000 11:33:19 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: page-&gt;mapping == 0</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 29 Oct 2000, Linus Torvalds wrote:<br />&gt; <br />&gt; Making it policy that we have to re-test page-&gt;mapping after aquireing the<br />&gt; page lock might be the simplest fix for 2.4.x. It still means that we<br />&gt; might end up allowing people to have a "bad" page in the VM space due to<br />&gt; the "test-&gt;insert" race condition, but it woul dmake that event pretty<br />&gt; much a harmless bug (and thus move it to the "beauty wart - to be fixed<br />&gt; later" category).<br /><br />I'd like to just re-iterate this point: re-testing "page-&gt;mapping" fixes<br />the oops, but is not a full fix for the conceptual problem.<br /><br />The problem with just re-testing "page-&gt;mapping" is that you still have a<br />nasty potential race where you insert a (bogus) page into the VM space of<br />a process instead of giving a SIGBUS/SIGSEGV.<br /><br />Now, I don't think this is really a valid usage pattern, so it's most<br />likely to be a result of a buggy application, but I can imagine having<br />some strange kind of user-space VM memory management scheme that depends<br />on SIGBUS to maintain a file length. I've never heard of such a thing, but<br />I could imagine somebody doing some kind of persistent data object store<br />in user space this way.<br /><br />Does anybody actually know of an application that does something like<br />this? Because I'm more and more inclined to just going with the half-fix<br />for now. It would at least guarantee internal kernel data consistency (and<br />no oopses, of course).<br /><br />Don't get me wrong - we need to clean this part up, but as far as I can<br />tell we have never done this "right", so in that sense it's not a new<br />2.4.x bug and it can't break existing applications.<br /><br />[ In fact, with the current ordering inside "vmtruncate()" of doing the<br />  "truncate_inode_pages()" thing before doing the "vmtruncate_list()", I<br />  have this suspicion that the race might even be impossible to trigger.<br />  Even when the race "happens" in kernel space, we will end up unmapping<br />  the page immediately afterwards, and the only effect as far as the user<br />  is concerned is the disappearance of the SIGBUS.<br /><br />  And the "disappearing SIGBUS" is actually explainable with a<br />  _user_level_ race: in order to get the kernel race at all, user level<br />  itself must have been inherently racing on the truncate/access, and<br />  depending on which one happened "first" you'd have lost the SIGBUS and<br />  the data you wrote anyway.<br /><br />  So it may actually be that we can honestly claim that the half-fix is<br />  actually a proper fix. I would have to look a lot closer at the issue to<br />  be able to guarantee this, though. Comments? Anybody? ]<br /><br />Al?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
