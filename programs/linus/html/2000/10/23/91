    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/23/43">First message in thread</a></li><li><a href="/lkml/2000/10/23/67">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/23/199">Alexander Viro</a><ul><li class="origin"><a href="/lkml/2000/10/23/115">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/23/115">Alexander Viro</a><ul><li><a href="/lkml/2000/10/23/166">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Oct 2000 14:24:04 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.4.0-test10-pre3:Oops in mm/filemap.c:filemap_write_pa</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 23 Oct 2000, Alexander Viro wrote:<br />&gt; <br />&gt; That's fine, but I'm afraid that we'll need a bit more than that. A couple of<br />&gt; obvious ones:<br />&gt; 	* filemap_nopage() needs the second check for -&gt;i_size. Upon exit.<br /><br />Nope, that just makes the race window smaller. We should check for i_size<br />after we've gotten the page table lock and just before actually entering<br />the page into the page tables. Otherwise we'll still race on SMP (a _very_<br />hard window to get into, admittedly).<br /><br />&gt; Moreover, what is (area-&gt;vm_mm == current-&gt;mm) doing in the existing check?<br /><br />It's for ptrace. You can do ugly things with ptrace that aren't possible<br />for the process itself.<br /><br />&gt; 	* truncate() should zero the page out if it doesn't remove it from<br />&gt; cache.<br /><br />So how about this truncate_complete_page() implementation:<br /><br />	/*<br />	 * Try to get rid of a page.. Clear it if it fails<br />	 * for some reason. The page must be locked upon calling<br />	 * this function.<br />	 *<br />	 * We remove the page from the page cache _after_ we have<br />	 * destroyed all buffer-cache references to it. Otherwise some<br />	 * other process might think this inode page is not in the<br />	 * page cache and creates a buffer-cache alias to it causing<br />	 * all sorts of fun problems ...<br />	 */<br />	static inline void truncate_complete_page(struct page *page)<br />	{<br />	        /* Try to get rid of buffers */<br />	        if (page-&gt;buffers)<br />	                block_flushpage(page, 0);<br />	<br />	        spin_lock(&amp;pagecache_lock);<br />	        spin_lock(&amp;pagemap_lru_lock);<br />	<br />	        if (page_count(page) != 1) {<br />	                memclear_highpage_flush(page, 0, PAGE_CACHE_SIZE);<br />	        } else {<br />	                ClearPageDirty(page);<br />	                __lru_cache_del(page);<br />	                __remove_inode_page(page);<br />	                page_cache_release(page);<br />	        }<br />	        spin_unlock(&amp;pagemap_lru_lock);<br />	        spin_unlock(&amp;pagecache_lock);<br />	}<br /><br />we should probably special-case the "block_flushpage()" failed case, but<br />the above should do reasonable things with it (because page_count() will<br />be &gt; 1 due to buffers).<br /><br />The above is obviously completely and utterly untested. Petr? Willing to<br />give this a go?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
