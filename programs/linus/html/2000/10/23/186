    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/23/43">First message in thread</a></li><li><a href="/lkml/2000/10/23/43">"Petr Vandrovec"</a><ul><li class="origin"><a href="/lkml/2000/10/23/171">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/23/171">Alexander Viro</a><ul><li><a href="/lkml/2000/10/23/67">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/23/199">Alexander Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Oct 2000 12:57:57 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.4.0-test10-pre3:Oops in mm/filemap.c:filemap_write_pa</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 23 Oct 2000, Petr Vandrovec wrote:<br />&gt; &gt; I'll take a better look at the truncate case (I consider the invalidate<br />&gt; &gt; case closed). Do you have a simple test-program around?<br />&gt; <br />&gt; Well, I cannot say simple. As I was not able to reproduce it with only<br />&gt; one task, code below:<br /><br />Ok, without running this I can already guess at what's up.<br /><br />One process does the "truncate()", and races with another process that<br />does a page-in.<br /><br />The truncate code does<br /><br />	notify_change(ATTR_SIZE);<br /><br />which will basically cause a "vmtruncate(inode, newsize)".<br /><br />Just before this happened, the other process gets a page fault, and does a<br />page_cache_read(). Now, because we are low on memory (this is why it only<br />shows up when you're swapping), that read will take a while. During that<br />time, the vmtruncate() starts to execute, and sets inode-&gt;i_size to the<br />new value (that would cause us to no longer accept a page fault - but we<br />already got past that check in the faulting process). It will then<br />invalidate all the inode pages &gt; i_size.<br /><br />Now, the page faulting process comes back, and puts the page into the VM<br />space. Never mind that it has in the meantime gotten i_mapping = NULL due<br />to the other process doing the truncate.<br /><br />Now, if I'm right, you should be able to add something like<br /><br />	if (!old_page-&gt;mapping)<br />		printk("mapping went away from under us\n");<br /><br />to just before the "return old_page()" case in the success path of<br />filemap_nopage() (mm/filemap.c), and you should see that printk() trigger<br />when the bug happens.<br /><br />(There are other users too that are not synchronized wrt inode size<br />changes and could get an access to a page past the end of the file this<br />way - I just think that filemap_nopage is probably the one where this is<br />most easily seen).<br /><br />The above is obviously not a bug-fix, it's just a validation of the<br />theory.<br /><br />Al, any ideas? I have this feeling that the simplest fix is just to leave<br />the race open, and make truncate_complete_page() just leave such a "racy"<br />page in the page cache. It will still race, and the invalid page will<br />still exist, but the end result should be harmless.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
