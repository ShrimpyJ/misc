    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/22/3">First message in thread</a></li><li><a href="/lkml/2000/10/24/10">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/24">Dan Kegel</a><ul><li class="origin"><a href="/lkml/2000/10/24/80">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/80">Edgar Toernig</a></li><li><a href="/lkml/2000/10/24/90">Dan Kegel</a><ul><li><a href="/lkml/2000/10/25/46">Dan Kegel</a></li><li><a href="/lkml/2000/10/25/130">Simon Kirby</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Oct 2000 11:33:57 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 24 Oct 2000, Dan Kegel wrote:<br />&gt; <br />&gt; But user code currently written for poll() has the luxury of dropping<br />&gt; events because poll() will happily report on the current readiness of<br />&gt; the socket every time.  /dev/poll is level-triggered because it's trying<br />&gt; to make conversion of poll()-based code easy.  With your scheme, <br />&gt; whatever user code is receiving the edges better darn well do something<br />&gt; about them, because it's only going to get them once.<br /><br />Oh, I agree. I'm not saying that my approach magically fixes bugs in user<br />space ;)<br /><br />&gt; &gt; The BSD kevent paper goes on about "level and edge triggered" and it<br />&gt; &gt; becomes a big thing for them, and they selected level-triggered events as<br />&gt; &gt; if it made any difference. And sure - it _does_ make a difference, but the<br />&gt; &gt; only difference is in how hard it is to implement, and level-triggered is<br />&gt; &gt; a noticeably harder.<br />&gt; <br />&gt; I don't see why edge triggered is that much harder.  All it adds is<br />                  ^^^^ level<br />&gt; a layer which receives the edges and moves fds back and forth between<br />&gt; a 'ready' list and a 'not ready' list.  Easy as pie.<br /><br />Not true.<br /><br />For example, if you're truly level-triggered, and you have a socket that<br />gets data, the event move onto the event queue. So far so fine: both edge<br />and level agree about this one.<br /><br />The point they disagree is when the event gets removed from the event<br />queue. For edge triggered, this one is trivial: when a get_events() thing<br />happens and moves it into user land. This is basically a one-liner, and it<br />is local to get_events() and needs absolutely no help from anybody else.<br />So obviously event removal is _very_ simple for edge-triggered events -<br />the INTACK basically removes the event (and also re-arms the trigger<br />logic: which is different from most interrupt controllers, so the analogy <br />falls down here).<br /><br />For level, the thing is not as easy at ALL. Suddenly removal becomes a big<br />issue, and needs help from the actual driver. You can do it two ways:<br />calling down to the driver when you remove (to see if the event should be<br />dismissed or not once it has been read) or have the driver pro-actively<br />remove the event whenever a read() happens (or whatever that undoes the<br />event).<br /><br />Both are actually fairly hard. Much harder than they sound. For different<br />reasons.<br /><br /> - the callback approach at get_events() time sounds trivial, but actually<br />   has two problems: cache footprint for "get_events()" grows a _lot_<br />   (because the events are likely to be spread out a lot if there are a<br />   lot of them pending, so you don't get a nice tight inner loop at all),<br />   and you get "double events" - by the time the event first happens, it<br />   will still be active, so we cannot actually remove it at that time<br />   (there is still data to be read - and the event doesn't go away until<br />   we read it) so we'll get the event _again_, and on the next<br />   get_events() it will notice that the event was bogus, and remove it<br />   (and we can optimize it away from reporting it to user land at that<br />   point, so only the kernel needs to look at it twice and do two<br />   callbacks)<br /><br /> - the "proactively remove events when the thing that triggerred them goes<br />   away" approach means that each anti-event (like a read that empties the<br />   buffer) needs to undo it's events, but it also needs to be careful that<br />   it doesn't undo combined events, and it needs to be very careful about<br />   races (new packet coming in), so the proactive remove actually ends up<br />   being less than trivial - and in a performance-critical section.<br /><br />Now, compare that to a one-liner that just does a "list_del(&amp;event-&gt;list)"<br />as it copies over the event to user mode. Woudln't you say that the<br />edge-triggered version is simpler?<br /><br />&gt; &gt; The reason "edge-triggered" (ie only when an event changes) is preferable<br />&gt; &gt; is that it's MUCH simpler, and means that the "get_events()" system call<br />&gt; &gt; doesn't need to actually understand what the events mean at all. <br />&gt; <br />&gt; Not much understanding is required on the part of the edge-to-level filter.<br /><br />Implement it, and see. I bet you'll find that it gets really interesting<br />when you have concurrent accesses to the same file descriptor etc.<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
