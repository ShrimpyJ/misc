    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/22/3">First message in thread</a></li><li><a href="/lkml/2000/10/23/148">Jordan Mendelson</a><ul><li><a href="/lkml/2000/10/24/137">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/125">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/127">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/144">"Linux Kernel Developer"</a></li></ul></li><li><a href="/lkml/2000/10/30/236">"Mike Jagdis"</a><ul><li><a href="/lkml/2000/11/1/49">Dan Kegel</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/10/24/1">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/1">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/10">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/38">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/73">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/54">Abramo Bagnara</a><ul><li><a href="/lkml/2000/10/24/43">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/100">Mark Montague</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Oct 2000 23:35:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 23 Oct 2000, Dan Kegel wrote:<br />&gt; <br />&gt; <a href="http://www.FreeBSD.org/cgi/man.cgi?query=kqueue&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD">http://www.FreeBSD.org/cgi/man.cgi?query=kqueue&amp;apropos=0&amp;sektion=0&amp;manpath=FreeBSD</a>+5.0-current&amp;format=html<br />&gt; describes the FreeBSD kqueue interface for events:<br /><br />I've actually read the BSD kevent stuff, and I think it's classic<br />over-design. It's not easy to see what it's all about, and the whole &lt;kq,<br />ident, filter&gt; tuple crap is just silly. Looks much too complicated.<br /><br />I don't believe in the "library" argument at all, and I think multiple<br />event queues completely detract from the whole point of being simple to<br />use and implement.<br /><br />Now, I agree that my bind_event()/get_event() has limitations, and the<br />biggest one is probably the event "id". It needs to be better, and it<br />needs to have more structure. The "id" really should be something that not<br />only contains the "fd", but also contains the actor function to be called,<br />along with some opaque data for that function.<br /><br />In fact, if you take my example server, and move the "handle[id]()" call<br />_into_ get_events() (and make the "handle[id]()" function pointer a part<br />of the ID of the event), then the library argument goes away too: it<br />doesn't matter _who_ calls the get_event() function, because the end<br />result is always going to be the same regardless of whether it is called<br />from within a library or from a main loop: it's going to call the function<br />handle associated with the ID that triggered.<br /><br />Basically, the main loop would boil down to<br /><br />	for (;;) {<br />		static struct event ev_list[MAXEV];<br />		get_event(ev_list, MAXEV, &amp;tmout);<br />		.. timeout handling here ..<br />	}<br /><br />because get_even() would end up doing all the user-mode calls too (so<br />"get_event()" is no longer a system call: it's a system call + a for-loop<br />to call all the ID handler functions that were associated with the events<br />that triggered).<br /><br />So the "struct event" would just be:<br /><br />	struct event {<br />		int fd;<br />		unsigned long mask;<br />		void *opaque;<br />		void (*event_fn)(ind fd, unsigned long mask, void *opaque);<br />	}<br /><br />and there's no need for separate event queues, because the separate event<br />queues have been completely subsumed by the fact that every single event<br />has a separate event function.<br /><br />So now you'd start everything off (assuming the same kind of "listen to<br />everything and react to it" server as in my previous example) by just<br />setting<br /><br />	bind_event(sock, POLLIN, NULL, accept_fn);<br /><br />which basically creates the event inside the kernel, and will pass it to<br />the "__get_event()" system call through the event array, so the<br />get_event() library function basically looks like<br /><br />	int get_event(struct event *array, int maxevents, struct timeval *tv)<br />	{<br />		int nr = __get_event(array, maxevents, tv);<br />		int i;<br />		for (i = 0; i &lt; nr; i++) {<br />			array-&gt;event_fn(array-&gt;fd, array-&gt;mask, array-&gt;opaque);<br />			array++;<br />		}<br />		return nr;<br />	}<br /><br />and tell me why you'd want to have multiple event queues any more?<br /><br />(In fact, you might as well move the event array completely inside<br />"get_event()", because nobody would be supposed to look at the raw array<br />any more. So the "get_event()" interface would be even simpler: just a<br />timeout, nothing more. Talk about simple programming.<br /><br />(This is also the ideal event programming interface - signals get racy and<br />hard to handle, while in the above example you can trivially just be<br />single-threaded. Which doesn't mean that you CANNOT be multi-threaded if<br />you want to: you multi-thread things by just having multiple threads that<br />all call "get_event()" on their own).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
