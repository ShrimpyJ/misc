    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/22/3">First message in thread</a></li><li><a href="/lkml/2000/10/24/133">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/1">Dan Kegel</a><ul><li class="origin"><a href="/lkml/2000/10/24/24">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/24">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/28">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/10/24/38">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/73">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/54">Abramo Bagnara</a><ul><li><a href="/lkml/2000/10/24/43">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/100">Mark Montague</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Oct 2000 08:33:33 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />[ Moving on to practical matters ]<br /><br />On Tue, 24 Oct 2000, Dan Kegel wrote:<br />&gt; <br />&gt; Might be good to pick more unique names than 'struct event' and 'get_event'.<br />&gt; People probably use those already.<br /><br />I agree. I would never implement them under those names, but it's easier<br />to talk about "event" than about something very specific.<br /><br />&gt; Hiding ev_list is probably ok.  However,<br />&gt; <a href="http://www.citi.umich.edu/techreports/reports/citi-tr-00-7.pdf">http://www.citi.umich.edu/techreports/reports/citi-tr-00-7.pdf</a><br />&gt; suggests that knowing how many events are pending is a useful measure <br />&gt; of server load, and that if more than a certain number of events<br />&gt; are pending, web servers should reject new connections.  Thus it might<br />&gt; be handy to make the return value of get_event be the number of events<br />&gt; gotten.<br /><br />Note that my "get_event()" function actually did return exactly that: it<br />returned the number of events, even though the actual event array handling<br />was hidden inside the library function.<br /><br />&gt; &gt; So now you'd start everything off (assuming the same kind of "listen to<br />&gt; &gt; everything and react to it" server as in my previous example) by just<br />&gt; &gt; setting<br />&gt; &gt; <br />&gt; &gt;         bind_event(sock, POLLIN, NULL, accept_fn);<br />&gt; <br />&gt; A couple questions:<br />&gt; <br />&gt; * how do you unbind?  (By calling bind_event with NULL as the accept_fn?)<br /><br />If done that way, I'd prefer something where an event _mask_ of 0 means<br />that the event obviously no longer exists, as it can no longer trigger.<br />The accept_fn would be part of the identifier, and as such zeroing it out<br />would lose the identification.<br /><br />But I'd personally probably prefer to be more explicit, and have a<br />separate function for it. <br /><br />Note that whether it's a separate function or just making "bind_event()"<br />really be "modify_or_bind_or_remove_event()" is pretty much not anything I<br />care about - it gets to be so low-level details that it would be something<br />that is probably best tried out and something that I don't have any<br />religious issues with.<br /><br />I care about high-level interfaces, because _those_ are the ones that<br />screw me years down the line. For example, select() (and later bind()) was<br />always an interface that did _not_ fit into the UNIX way of doing things<br />AT ALL. It really stands out among all the IO interfaces as being very<br />different. And it's one of the nastier ones to maintain.<br /><br />&gt; * how do you change a mask?  (By calling bind_event with a new mask?)<br /><br />Same as above. Either bind with a new mask (zero being remove), or<br />separate call.<br /><br />&gt; * Is it ok to do these things while in an event_fn?  (Yes?)<br /><br />Oh, absolutely. The kernel doesn't even _know_ when something is in an<br />event function - the kernel only sees "change the event" and "get the list<br />of events".<br /><br />&gt; * Do you get an event whenever an fd is ready for something, or<br />&gt;   only when its readiness changes?  (Presumably whenever an fd is ready for something?)<br /><br />Only when its readiness changes - probably with the addition that it would<br />simplify things that a new event always (unconditionally) gets added to<br />the event queue.<br /><br />Note that there are no races in this implementation - there is no way for<br />events to get lost, even trivially seen in SMP/threaded environments.<br />That's important. <br /><br />The BSD kevent paper goes on about "level and edge triggered" and it<br />becomes a big thing for them, and they selected level-triggered events as <br />if it made any difference. And sure - it _does_ make a difference, but the<br />only difference is in how hard it is to implement, and level-triggered is<br />a noticeably harder.<br /><br />The bind_event()/get_events() interface is edge-triggered, and works<br />fundamentally the same way as SIGCHLD. If you don't keep up, you get<br />SIGCHLD only once, even if ten children died on you in rapid succession.<br />And it's edge-triggered: that doesn't mean that you lose events (like the<br />BSD paper implies), it only means that you have to reap your children with<br />a loop:<br /><br />	while ((err = waitpid(..)) &gt;= 0) {<br />		.. get all children ..<br />	}<br /><br />The reason "edge-triggered" (ie only when an event changes) is preferable<br />is that it's MUCH simpler, and means that the "get_events()" system call<br />doesn't need to actually understand what the events mean at all. It will<br />just take the events off the list. If anythig triggers after that, it will<br />be put back on the list again, but you can guarantee that you don't get<br />any lost events simply by the simple fact that<br /><br /> - by the time get_events() returns to user mode (ie before the action<br />   functions have been called), any new event that happens even before we<br />   have had to react to the old events will cause the event to be queued<br />   up again.<br /><br />What does this mean? It basically means that if you continue to get events<br />on a file descriptor during your event handler function, the event will<br />have moved back to the event list, and next time you _will_ get an event<br />again.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
