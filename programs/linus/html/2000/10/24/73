    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/22/3">First message in thread</a></li><li><a href="/lkml/2000/10/24/133">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/1">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/10">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/24">Dan Kegel</a><ul><li><a href="/lkml/2000/10/24/28">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/10/24/38">Dan Kegel</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/54">Abramo Bagnara</a><ul><li><a href="/lkml/2000/10/24/43">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/24/100">Mark Montague</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Oct 2000 08:42:13 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 24 Oct 2000, Dan Kegel wrote:<br />&gt; Linus Torvalds wrote:<br />&gt; &gt; Basically, the main loop would boil down to<br />&gt; &gt;         for (;;) {<br />&gt; &gt;                 static struct event ev_list[MAXEV];<br />&gt; &gt;                 get_event(ev_list, MAXEV, &amp;tmout);<br />&gt; &gt;                 .. timeout handling here ..<br />&gt; &gt;         }<br />&gt; &gt; <br />&gt; &gt; because get_even() would end up doing all the user-mode calls too (so<br />&gt; &gt; "get_event()" is no longer a system call: it's a system call + a for-loop<br />&gt; &gt; to call all the ID handler functions that were associated with the events<br />&gt; &gt; that triggered).<br />&gt; <br />&gt; Occurs to me that this stuff will be used from other languages<br />&gt; than C, which might prefer to do their own event dispatching,<br />&gt; and would want the system to treat event_fn as another opaque quantity.<br /><br />Yes and no.<br /><br />The KERNEL would treat it as just another opaque quantity: after all, it<br />would never ever touch the thing other than get it as part of<br />"bind_event()" and return it as part of "get_events()". So as far as the<br />kernel is concerned, both "event_fn" and "opaque" are just random<br />information.<br /><br />However, it is very important to have every common user agree about the<br />meaning of the ID's in user space: the whole point of encapsulating<br />"event_fn" as a function pointer is that you can have different parts of<br />the same program use the "bind_event()" interface, and they won't step on<br />each others toes.<br /><br />So if you program in Fortran, for example, and you expect to link against<br />the C library, and the C library uses events for something, then you'd<br />better make sure that the fortran interfaces end up using the event_fn<br />thing in the same wasy as the C one..<br /><br />&gt; So I don't object to a function that dispatches events, e.g.<br />&gt;          int get_event(&amp;tmout);<br />&gt; as long as there's also <br />&gt;          int get_events(ev_list, MAXEV, &amp;tmout)<br />&gt; that treats event_fn as an opaque pointer and *does not* dispatch the events.<br /><br />That's a user-mode issue, and obviously, if you don't care about<br />compatibility with anything else you can do this. The kernel won't know,<br />or care. But I think it is unlikely that you'd ever use the raw events in<br />any other way - most environments under UNIX tend to have a C library<br />component somewhere, because the low-level stuff is written in C and uses<br />the common code that way even when the programmer isn't aware of it.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
