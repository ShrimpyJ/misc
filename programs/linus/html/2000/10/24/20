    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/22/3">First message in thread</a></li><li><a href="/lkml/2000/10/24/145">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/21">Simon Kirby</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2000/10/24/36">Simon Kirby</a></li></ul></li><li><a href="/lkml/2000/10/24/53">Mitchell Blank Jr</a><ul><li><a href="/lkml/2000/10/24/61">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/24/19">Mitchell Blank Jr</a></li><li><a href="/lkml/2000/10/24/93">Evan Jeffrey</a><ul><li><a href="/lkml/2000/10/24/136">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2000/10/24/69">(Miquel van Smoorenburg)</a></li><li><a href="/lkml/2000/10/24/92">"Dan Maas"</a></li><li><a href="/lkml/2000/10/24/131">Dave Zarzycki</a></li><li><a href="/lkml/2000/10/24/134">"H. Peter Anvin"</a></li><li><a href="/lkml/2000/11/16/32">Ingo Molnar</a></li><li><a href="/lkml/2000/10/25/189">(Kai Henningsen)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Oct 2000 10:03:04 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 24 Oct 2000, Simon Kirby wrote:<br />&gt; <br />&gt; However, isn't there already something like this, albeit maybe without<br />&gt; the ability to return multiple events at a time?  When discussing<br />&gt; select/poll on IRC a while ago with sct, sct said:<br />&gt; <br />&gt;  &lt;sct&gt; Simon: You just put your sockets into O_NONBLOCK|FASYNC mode for<br />&gt;        SIGIO as usual.<br /><br />[ siginfo and RT signals, but using "sigwaitinfo()" instead of actual<br />  signal handlers ]<br /><br />The problem with RT signals (whether you use sigwaitinfo() or signal<br />handling overhead) is that they don't scale to lots of events. The memory<br />pressure for keeping track of millions of siginfo structures is more than<br />any system can handle - so all RT signals implementations will have to<br />eventually fall back on something else.<br /><br />Which makes for really hard to debug bugs, and complex programming (you<br />essentially end up having to duplicate all of the event handling, and the<br />"fallback" case has the added difficulty that you won't even see it except<br />under heavy load). <br /><br />&gt; Also, what is different in your above interface that prevents it from<br />&gt; being able to queue up too many events?<br /><br />Basically, with get_events(), there is a maximum of one event per "bind".<br />And the memory for that is statically allocated at bind_event() time. <br /><br />&gt;					  I guess the structure is only<br />&gt; sizeof(int) * 2 bytes per fd, so it would only take, say, 80kB for 20,000<br />&gt; FDs on x86, but I don't see how the other method would be significantly<br />&gt; different.  The kernel would have to store the queued events still,<br />&gt; surely...<br /><br />Oh, the bind information would be more like 32 bytes per bind, so assuming<br />you have 20000 fd's you're waiting for, you'd certainly be using a lot of<br />memory. Still less than the quite complex SIGIO structures, though.<br /><br />But you'd be doing so in a controlled manner: the memory use wouldn't go<br />up just because there is a sudden influx of 50000 packets. So it scales<br />with load by virtue of simply not _caring_ about the load - it only cares<br />about the number of fd's you're waiting on.<br /><br />(Obviously _other_ parts of the system will have to keep up with tons of<br />new packets, but that's why protocols like TCP have flow control, and<br />that is something that is done independently of the event notification,<br />so regardless of _what_ kind of event model you have you have to handle<br />the simple load of TCP ;).<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
