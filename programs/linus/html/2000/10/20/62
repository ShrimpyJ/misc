    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/19/111">First message in thread</a></li><li><a href="/lkml/2000/10/19/124">Trond Myklebust</a><ul><li><a href="/lkml/2000/10/20/77">Alexander Viro</a></li><li><a href="/lkml/2000/10/20/89">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2000/10/20/24">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/20/24">Linus Torvalds</a></li><li><a href="/lkml/2000/10/20/102">Trond Myklebust</a></li><li><a href="/lkml/2000/10/20/105">Alexander Viro</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Oct 2000 17:45:30 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.4.0-test10-pre3:Oops in mm/filemap.c:filemap_write_pa</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 19 Oct 2000, Linus Torvalds wrote:<br />&gt; <br />&gt; I'm saying that we're much much better off guaranteeing local consistency<br />&gt; over knowingly breaking local consistency over a uncertain global<br />&gt; consistency issue. Especially as NFS has never guaranteed global<br />&gt; consistency in the first place, and was not designed to do that.<br /><br />Btw, if you really worry about NFS v3 and want to add consistency<br />guarantees to NFS v3, you can probably do that. It's just that you cannot<br />do it with a simple cache invalidation - you'd need to be much much more<br />careful (the same way a simple CPU cache invalidate does not guarantee SMP<br />cache consistency - it only guarantees data corruption due to missed<br />writes).<br /><br />I don't know what the best way to do a true cache consistency protocol on<br />a page leve would be, especially as you will have a _really_ hard time<br />getting hold of an exclusive pointer to a page with multiple mmap's, but<br />you could probably get something that guarantees cache consistency as long<br />as people do _not_ expect mmap to always be 100% consistent.<br /><br />(The reason you cannot get mmap consistency is just that mmap doesn't have<br />any kernel synchronization point unless you're willing to shoot down every<br />single mapping - which is expensive as hell, but doable).<br /><br />You'd have to do something like<br /><br />	LockPage(page);			/* Nobody gets to write to this page (except through mmaps, ugh) */<br />	gather_all_mmap_users(page);	/* THIS is the nasty one */<br />	nfs_wb_page(page);		/* force write-back on this page */<br />	ClearPageUptodate(page);	/* mark it not up-to-date to force a read-in next time */<br />	UnlockPage(page);		/* Ok, now the client can go wild */<br /><br />where everything but the "gather_all_mmap_users()" part is fairly<br />straightforward.  The "gather" phase is nasty - it would need to figure<br />out every place the page is mapped, make sure those are synchronized (ie<br />something like marking the page table entry write-protected and causing a<br />TLB invalidate SMP cross-call - at which point the resulting page fault<br />and the page lock will catch anybody who tries to write to the page)..<br /><br />In no case could you do something like what the current<br />invalidate_inode_pages() does, which is to just try to drop the page from<br />the cache - that really only works if we're the only user of that page,<br />which the "page_count != 1" test now enforces.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
