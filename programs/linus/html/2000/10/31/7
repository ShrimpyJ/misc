    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/30/194">First message in thread</a></li><li><a href="/lkml/2000/10/30/205">Keith Owens</a><ul><li><a href="/lkml/2000/10/30/153">Keith Owens</a></li><li><a href="/lkml/2000/10/30/228">Rusty Russell</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2000/10/31/96">Peter Samuelson</a><ul><li><a href="/lkml/2000/10/31/13">"H. Peter Anvin"</a><ul><li><a href="/lkml/2000/10/31/115">Horst von Brand</a></li></ul></li><li><a href="/lkml/2000/10/31/61">Linus Torvalds</a></li><li><a href="/lkml/2000/10/31/172">Peter Samuelson</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Oct 2000 22:10:04 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: test10-pre7</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 31 Oct 2000, Rusty Russell wrote:<br />&gt; <br />&gt; Quiet suggestion:<br /><br />If I understood the GNU make syntax correctly (which is possibly not the<br />case - GNU make is possibly the only example of "overkill" to rival GNU<br />emacs), this looks like a reasonable idea.<br /><br />However, it also looks like much more of a change than to change the<br />fairly boiler-plate OX_OBJS etc stuff in new-style makefiles. And quite<br />frankly, I don't see how it would get the multi-part object file case<br />right, but that's probably because you left off some of the black magic<br />required to do that (and it's not as if the current Makefile magic doesn't<br />do black magic for that already).<br /><br />Why do I really care? We actually have the same issue in the SCSI driver<br />directory, where the ordering restraints are much stricter than for USB.<br />Now that case has fewer export-objs, and that case isn't a part of a<br />multi-list, but I really want to have something that works for both these<br />cases with minimal (and reasonably straightforward) surgery.<br /><br />In fact, I suspect the SCSI rules would work almost as-is. They break<br />ordering for the export-objs entry, but that looks fixable. This is how it<br />looks now:<br /><br />	# Extract lists of the multi-part drivers.<br />	# The 'int-*' lists are the intermediate files used to build the multi's.<br />	multi-y         := $(filter $(list-multi), $(obj-y))<br />	multi-m         := $(filter $(list-multi), $(obj-m))<br />	int-y           := $(sort $(foreach m, $(multi-y), $($(basename $(m))-objs)))<br />	int-m           := $(sort $(foreach m, $(multi-m), $($(basename $(m))-objs)))<br /><br />	# Files that are both resident and modular: remove from modular.<br />	obj-m           := $(filter-out $(obj-y), $(obj-m))<br />	int-m           := $(filter-out $(int-y), $(int-m))<br /><br />	O_OBJS          := $(filter-out $(export-objs), $(obj-y))<br />	OX_OBJS         := $(filter     $(export-objs), $(obj-y))<br />	M_OBJS          := $(sort $(filter-out  $(export-objs), $(obj-m)))<br />	MX_OBJS         := $(sort $(filter      $(export-objs), $(obj-m)))<br />	MI_OBJS         := $(sort $(filter-out  $(export-objs), $(int-m)))<br />	MIX_OBJS        := $(sort $(filter      $(export-objs), $(int-m)))<br /><br />In the above, the only problem is OX_OBJS and the breaking of ordering of<br />"export-objs" (which SCSI doesn't care about, unlike USB, partly because<br />SCSI uses the old-fashioned "every export in a special file" approach).<br />And it looks like even THAT could be fixed by changing it to<br /><br />	O_OBJS		:= $(obj-y)<br />	OX_OBJS		:=<br />	MIX_OBJS	:= $(sort $(filter	$(export-objs), $(int-m) $(obj-y)))<br /><br />(and the others are unchanged) which looks like it would handle it all<br />correctly. Basically, the changes would mean that the export-objs subset<br />of $(obj-y) would stay in O_OBJS instead of moving to OX_OBJS, but<br />additionally those objs would also be added to MIX_OBJS.<br /><br />Would this satisfy everybody? It _is_ complex enough that I guess it<br />easily rates having it's own rule-file and be included by new-style<br />Makefiles instead of being copied over and over again..<br /><br />Rusty's suggestion would mean having to actually change all the lists<br />themselves, which at this point sounds a bit dangerous.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
