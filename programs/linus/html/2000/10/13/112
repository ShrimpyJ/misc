    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/13/169">First message in thread</a></li><li><a href="/lkml/2000/10/13/169">Brian Gerst</a><ul><li class="origin"><a href="/lkml/2000/10/14/24">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/14/24">Brian Gerst</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Oct 2000 18:47:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Clean up x86 write-protect test</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 13 Oct 2000, Brian Gerst wrote:<br />&gt; <br />&gt; Also, Could somebody who has a machine with a known buggy processor give<br />&gt; this patch a try?<br /><br />I like the patch. Would you mind re-writing the exception handling the<br />other way around, though:<br /><br />Instead of doing it like this:<br /><br />+       __asm__ __volatile__(<br />+               "       movb %0,%1      \n"<br />+               "1:     movb %1,%0      \n"<br />+               "       jmp 3f          \n"<br />+               "2:     incl %2         \n"<br />+               "3:                     \n"<br />+               ".section __ex_table,\"a\"\n"<br />+               "       .align 4        \n"<br />+               "       .long 1b,2b     \n"<br />+               ".previous              \n"<br />+               :"=m" (*(char *) vaddr),<br />+                "=q" (tmp_reg),<br />+                "=r" (flag)<br />+               :"2" (flag)<br />+               :"memory");<br /><br />it would be nicer to simply to the other way around (if exception happens,<br />"flag" is untouched and jumped over, if not, flag is cleared):<br /><br />+       __asm__ __volatile__(<br />+               "       movb %0,%1      \n"<br />+               "1:     movb %1,%0      \n"<br />+               "       xor %2,%2       \n"<br />+               "2:                     \n"<br />+               ".section __ex_table,\"a\"\n"<br />+               "       .align 4        \n"<br />+               "       .long 1b,2b     \n"<br />+               ".previous              \n"<br />+               :"=m" (*(char *) vaddr),<br />+                "=q" (tmp_reg),<br />+                "=r" (flag)<br />+               :"2" (1)<br />+               :"memory");<br /><br />which basically means that if flag stays as "1", then the exception<br />happened, but if the exception didn't happen the code will fall through<br />the "xor" and clear "flag".<br /><br />After that, and testing that it works on a broken machine, I'd love to<br />apply it.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
