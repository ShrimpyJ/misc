    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/13/44">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Oct 2000 10:27:19 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Updated 2.4 TODO List - more on PCI resources...]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 13 Oct 2000, Dag Bakke wrote:<br />&gt; <br />&gt; This patch enables the expansion ROM, but it still doesn't make the card<br />&gt; work. <br /><br />Ok. It seems that your stuck bit is really stuck, and I was wrong: it's<br />not the cardbus bridge that does something strange, it actually looks like<br />your hardware has a data line that is stuck at 0.<br /><br />&gt; non-working case:<br />&gt; -------------------------<br />&gt; cs: cb_alloc(bus 6): vendor 0x115d, device 0x0003<br />&gt; Found 06:00 [115d/0003] 000200 00<br />&gt; bus res 0 1200 1c000000-1fffffff<br />&gt; bus res 1 200 20000000-23ffffff<br />&gt; bus res 2 100 00001800-000018ff<br />&gt; bus res 0 1200 1c000000-1fffffff<br />&gt; bus res 1 200 20000000-23ffffff<br />&gt; bus res 0 1200 1c000000-1fffffff<br />&gt; bus res 1 200 20000000-23ffffff<br />&gt; bus res 0 1200 1c000000-1fffffff<br />&gt; PCI: Error while updating region 06:00.0/6 (1c000001 != 18000001)<br /><br />Notice how it's bit 0x04000000 again. The 0x18000001 value is the one we<br />read back afterr having written the region address: we wrote 0x1c000001,<br />and bit 0x04000000 simply doesn't stick - the above is a debug message<br />telling us that we read back something different. See the code in<br />arch/i386/kernel/pci-i386.c: pcibios_update_resource() if you're<br />interested in seeing exactly what the logic is.<br /><br />So I'm afraid that it's really starting to look like that particular<br />hardware really has either a broken line somewhere on the motherboard (or<br />a docking connector with a broken pin or similar), or there is some other<br />hardware limitation (maybe the bridge is limited to 64MB and just isn't a<br />valid PCI-PCI bridge).<br /><br />The fact that you apparently have an identical machine that does work<br />makes me suspect it's not a chip limitation, but truly a broken connector<br />or line.<br /><br />In which case there would be no way to make it work - whenever we'd write<br />data to the card, it would lose one bit.<br /><br />If I remember correctly, you said that this card worked under Windows. Was<br />that on the _same_ machine? That would be an important data-point: if it<br />works under Windows, that means that I'm wrong, and that it's some quirk<br />that windows knows how to work around.<br /><br />I have one final test you could do: considering that the lost bit seems to<br />be the same bit that we use as the size of the MEM resource bridge window,<br />and assuming that it is not a physically broken connector or something,<br />but really is some strange quirk of the bridge itself and interactions<br />with the memory window, you could try to change the alignment of the<br />window allocation such that it's always given a window where the upper bit<br />won't matter.<br /><br />The way to do that would be in the same place where you changed the size<br />in drivers/pcmcia/yenta.c: make the alignment be double what the size is,<br />so do something like<br /><br />	size = 128*1024*1024;<br />	align = size &lt;&lt; 1;<br /><br />in yenta_allocate_res() for the MEM case (leave the IO case at 256 and<br />1024).<br /><br />(The reason I'm saying 128*1024*1024 is to see if the "stuck bit" moves).<br /><br />Oh, and also, to see the stuck bit more clearly, please add a line like<br /><br />	printk("base=%08x, size=%08x\n", base, size);<br /><br />to drivers/pci/pci.c: pci_size() just before the return.<br /><br />Ok? I'm getting the feeling that your hardware simply is broken, but I<br />want to debug this to death. Thanks for being patient,<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
