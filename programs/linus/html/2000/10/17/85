    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/17/87">First message in thread</a></li><li><a href="/lkml/2000/10/17/87">"Udo A. Steinberg"</a><ul><li class="origin"><a href="/lkml/2000/10/17/99">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/17/99">Alexander Viro</a><ul><li><a href="/lkml/2000/10/17/95">"Udo A. Steinberg"</a></li></ul></li></ul></li><li><a href="/lkml/2000/10/17/107">Alexander Viro</a><ul><li><a href="/lkml/2000/10/17/114">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/17/126">Roger Larsson</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Oct 2000 11:22:12 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [BUG]: Ext2 Corruption in test10pre3 (incl. Oops)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Hi,<br /><br />On Tue, 17 Oct 2000, Udo A. Steinberg wrote:<br />&gt; <br />&gt; It seems that we were all wrong in assuming that ext2 was fixed<br />&gt; wrt. filesystem corruption. test10pre3 once again has the potential<br />&gt; to eat files (not sure about earlier versions).<br />&gt; <br />&gt; I finally managed to capture an oops (by hand), so bear with me that<br />&gt; I didn't typo anywhere.<br />&gt; <br />&gt; Find attached the decoded oops:<br />&gt; <br />&gt; Kernel bug at ll_rw_blk.c: 713!  <br /><br />Ok, so it claims that we're doing IO on an unmapped buffer. So far so<br />good..<br /><br />&gt; invalid operand: 0000<br />&gt; CPU: 0<br />&gt; EIP: 0010:[&lt;c0184546&gt;]<br />&gt; Using defaults from ksymoops -t elf32-i386 -a i386<br />&gt; EFLAGS: 00010282<br />&gt; eax: 0000001f ebx: 00cc0008 ecx: c4433500 edx: 00000007<br />&gt; esi: c2c650c0 edi: c02fd160 ebp: 00000000 esp: cd28dd90<br />&gt; ds: 0018 es: 0018 ss: 0018<br />&gt; Process netscape (pid: 6456, stackpage=cd28d000)<br />&gt; Stack: c0250fc5 c0251262 000002c9 c2c650c0 00000008 0000000c 00cc0008<br />&gt;        0000d00a 00000000 cee143c0 c02fd170 c0300ac0 c02fd178 c02fd170<br />&gt;        00000000 00000008 00cc0008 00000000 c0183f24 000000fe c0184b84<br />&gt;        c02fd160 00000000 c2c650c0<br />&gt; <br />&gt; Call Trace: [&lt;c0250fc5&gt;] [&lt;c0251262&gt;] [&lt;c0183f24&gt;] [&lt;c0184b84&gt;]<br />&gt;             [&lt;c0184d53&gt;] [&lt;c012fa31&gt;] [&lt;c014efde&gt;] [&lt;c014f240&gt;]<br />&gt;             [&lt;c014f6af&gt;] [&lt;c021e87e&gt;] [&lt;c01523af&gt;] [&lt;c0138db7&gt;]<br />&gt;             [&lt;c0138f59&gt;] [&lt;c012d6bb&gt;] [&lt;c012d9d8&gt;] [&lt;c010a9d7&gt;]<br />&gt; Code: 0f 0b 83 c4 0c 90 0f b7 4e 14 66 89 4c 24 16 0f b6 46 15 8b<br />&gt; <br />&gt; &gt;&gt;EIP; c0184546 &lt;__make_request+a6/630&gt;   &lt;=====<br />&gt; Trace; c0183f24 &lt;blk_get_queue+34/50&gt;<br />&gt; Trace; c0184b84 &lt;generic_make_request+b4/120&gt;<br />&gt; Trace; c0184d53 &lt;ll_rw_block+163/1e0&gt;<br />&gt; Trace; c012fa31 &lt;bread+31/70&gt;<br />&gt; Trace; c014efde &lt;read_inode_bitmap+3e/90&gt;<br />&gt; Trace; c014f240 &lt;load_inode_bitmap+210/230&gt;<br />&gt; Trace; c014f6af &lt;ext2_new_inode+29f/700&gt;<br /><br />[ etc ]<br /><br />and the above is a perfectly fine backtrace, makes tons of sense, looks<br />good.<br /><br />HOWEVER. What doesn't make any sense at all is that bread() calls getblk()<br />to find the buffer, which in turn certainly makes sure that the buffer it<br />tries to read is mapped. In fact, there are two paths to the read: one<br />finds the buffer off the hash queue, and the other creates it. The one<br />that creates the buffer explicitly marks it BH_Mapped, so the only<br />apparent source of problems would be the hash queue.<br /><br />Except for the fact that the only thing that adds buffers to the hash<br />queue is __insert_into_queues(), and the only thing that calls THAT is<br />getblk() itself - again after having marked the buffer mapped.<br /><br />In short, the debug trace looks fine, but it also looks completely<br />incomprehensible. The only thing that would strike me is<br /> - memory corruption<br /> - somebody calls "unmap_buffer()" in a buffer that is hashed. Which we<br />   used to have as a bug, but we definitely don't do that any more.<br /> - we have buffer head list corruption going on.<br /><br />Now, I don't see any recent code that has touched anything like this,<br />which obviously doesn't mean anything at all. It might be a very old bug<br />that just hasn't reared its head before now.<br /><br />Al, do you see anything wrong?<br /><br />Udo, any idea what you are doing differently than anybody else to see<br />this thing? Any special usage patterns that seem to bring on the trouble?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
