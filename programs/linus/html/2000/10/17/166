    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/10/13/196">First message in thread</a></li><li><a href="/lkml/2000/10/17/71">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/17/41">Linus Torvalds</a></li><li><a href="/lkml/2000/10/17/90">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/17/129">Eric Lowe</a></li><li><a href="/lkml/2000/10/17/151">"David S. Miller"</a><ul><li><a href="/lkml/2000/10/17/131">Stephen Tweedie</a></li><li><a href="/lkml/2000/10/17/135">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/17/170">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2000/10/17/167">Linus Torvalds</a><ul><li><a href="/lkml/2000/10/17/167">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/10/18/164">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Oct 2000 13:02:01 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mapping user space buffer to kernel address space</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 17 Oct 2000, Andrea Arcangeli wrote:<br />&gt; <br />&gt; For example if both threads are reading different part of disk using the same<br />&gt; buffer that's also a wrong condition that will provide impredictable result (or<br />&gt; if they're reading the same part of disk why are they doing it twice?).<br /><br />I'm not talking about users that do things that are obviously<br />meaningless.<br /><br />But what about things like:<br /> - linearized circular buffers (where "linearized" means that the buffer<br />   is mapped twice or more consecutively virtually in memory, so that the<br />   user doesn't need to worry about the boundary conditions that normal<br />   circular buffers have)<br /> - multiple buffers per page.<br /><br />And note in particular that you may not be able to page-align everything:<br />and it can be extremely costly (both in memory use and in cache footprint)<br />to always pad out your buffers etc.<br /><br />&gt; But in map_user_kiobuf we can't avoid to play with the virtual memory,<br />&gt; as we can't avoid to do that in the remap_page_range case.<br /><br />map_user_kiobuf() isn't "playing" with the virtual memory.<br /><br />It's a simple lookup function, looking up the physical pages that<br />correspond to a specific range of virtual memory.<br /><br />Nothing more.<br /><br />&gt; In fact the reason I don't like to put VM stuff into rawio is that I like<br />&gt; the clean design that you described:<br />&gt; <br />&gt; o	lookup the physical page<br />&gt; o	do I/O on the physical page<br /><br />If you like it, why do you want to break it?<br /><br />You _say_ that you like it, but yet you want to add extra conditions like<br /><br /> o while I/O is pending the virtual mapping is fixed<br /><br />Which basically means that you suddenly have lots of interactions with the<br />VM layer - even though everybody agrees that is a bad thing.<br /><br />Your solution would be that you'd mark the _virtual_ page dirty, then lock<br />it so that the dirty bit cannot go away (and the page cannot be unmapped),<br />and then keep it locked until the IO is complete, and basically have all<br />dirty handling based on virtual addresses. Even though those virtual<br />addresses have _nothing_ to do with the IO itself, and you say that you<br />want to do IO on the physical page.<br /><br />In contrast, I'm saying that direct IO that reads into a (physical) page<br />should obviously mark that (physical) page dirty. In the meantime, others<br />may choose to do IO to the same page. They could even use the same buffer,<br />because we don't lock things: this has extremely well-defined meaning in<br />the case of "write this page to these 100 devices asynchronously".<br /><br />How would you suggest we handle the "write to 100 clients simulataneously"<br />issue?<br /><br />Are you suggesting something like: if it is reading from a page (ie<br />writing the contents of that page somewhere else), we don't lock it, but<br />if it is writing to a page, we lock it so that the dirty bit won't get<br />lost.<br /><br />Sure, that works (modulo the fact that it still has the issues with<br />serializing mmap's and accesses to other areas in the same page). But do<br />you really claim that it's the clean solution?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
