    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/11/18/131">First message in thread</a></li><li><a href="/lkml/2000/11/18/131">Andrew Morton</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2000/11/19/55">Andrew Morton</a><ul><li><a href="/lkml/2000/11/19/105">Linus Torvalds</a><ul><li><a href="/lkml/2000/11/20/21">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 18 Nov 2000 17:47:05 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] semaphore fairness patch against test11-pre6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 19 Nov 2000, Andrew Morton wrote:<br />&gt; <br />&gt; Has anyone tried it on SMP?  I get fairly repeatable instances of immortal<br />&gt; `D'-state processes with this patch.<br /><br />Too bad. I really thought it should be safe to do.<br /><br />&gt; The patch isn't right - it allows `sleepers' to increase without bound.<br />&gt; But it's a boolean!<br /><br />It's not a boolean. It's really a "bias count". It happens to get only the<br />values 0 and 1 simply becase the logic is that we always account for all<br />the other people when any process goes to sleep, so "sleepers" only ever<br />counts the one process that went to sleep last. <br /><br />But the algorithm itself should allow for other values. In fact, I think<br />that you'll find that it works fine if you switch to non-exclusive<br />wait-queues, and the only reason you see the repeatable D states is<br />exactly the case where we didn't "take" the semaphore even though we were<br />awake, and that basically makes us an exclusive process that didn't react<br />to an exclusive wakeup.<br /><br />(Think of it this way: with the "inside" patch, the process does<br /><br />	tsk-&gt;state = TASK_INTERRUPTIBLE;<br /><br />twice, even though there was only one semaphore that woke it up: we<br />basically "lost" a wakeup event, not because "sleepers" cannot be 2, but<br />because we didn't pick up the wakeup that we might have gotten.<br /><br />Instead of the "goto inside", how about just doing it without the "double<br />sleep", and doing something like<br /><br />	tsk-&gt;state = TASK_INTERRUPTIBLE;<br />	add_wait_queue_exclusive(&amp;sem-&gt;wait, &amp;wait);<br /><br />	spin_lock_irq(&amp;semaphore_lock);<br />	sem-&gt;sleepers ++;<br />+	if (sem-&gt;sleepers &gt; 1) {<br />+		spin_unlock_irq(&amp;semaphore_lock);<br />+		schedule();<br />+		spin_lock_irq(&amp;semaphore_lock);<br />+	}<br />	for (;;) {<br /><br />The only difference between the above and the "goto inside" variant is<br />really that the above sets "tsk-&gt;state = TASK_INTERRUPTIBLE;" just once<br />per loop, not twice as the "inside" case did. So if we happened to get an<br />exclusive wakeup at just the right point, we won't go to sleep again and<br />miss it.<br /><br />But these things are very subtle. The current semaphore algorithm was<br />basically perfected over a week of some serious thinking. The fairness<br />change should similarly get a _lot_ of attention. It's way too easy to<br />miss things.<br /><br />Does the above work for you even in SMP?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
