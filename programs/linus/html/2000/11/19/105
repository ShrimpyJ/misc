    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/11/18/131">First message in thread</a></li><li><a href="/lkml/2000/11/18/131">Andrew Morton</a><ul><li><a href="/lkml/2000/11/18/126">Linus Torvalds</a></li><li><a href="/lkml/2000/11/19/55">Andrew Morton</a><ul><li class="origin"><a href="/lkml/2000/11/20/21">Linus Torvalds</a><ul><li><a href="/lkml/2000/11/20/21">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Nov 2000 10:46:35 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] semaphore fairness patch against test11-pre6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 19 Nov 2000, Andrew Morton wrote:<br />&gt; <br />&gt; I don't see a path where David's patch can cause a lost wakeup in the<br />&gt; way you describe.<br /><br />Basically, if there are two up() calls, they might end up waking up only<br />one process, because the same process goes to sleep twice. That's wrong.<br />It should wake up two processes.<br /><br />However, thinking about it more, that's obviously possible only for<br />semaphores that are used for more than just mutual exclusion, and<br />basically nobody does that anyway. <br /><br />&gt; Next step is to move the waitqueue and wakeup operations so they're<br />&gt; inside the spinlock.  Nope.  That doesn't work either.<br />&gt; <br />&gt; Next step is to throw away the semaphore_lock and use the sem-&gt;wait<br />&gt; lock instead.  That _does_ work.  This is probably just a<br />&gt; fluke - it synchronises the waker with the sleepers and we get lucky.<br /><br />Yes, especially on a two-cpu machine that kind of synchronization can<br />basically end up hiding real bugs.<br /><br />I'll think about this some more. One thing I noticed is that the<br />"wake_up(&amp;sem-&gt;wait);" at the end of __down() is kind of bogus: we don't<br />actually want to wake anybody up at that point at all, it's just that if<br />we don't wake anybody up we'll end up having "sem = 0, sleeper = 0", and<br />when we unlock the semaphore the "__up()" logic won't trigger, and we<br />won't ever wake anybody up. That's just incredibly bogus.<br /><br />Instead of the "wake_up()" at the end of __down(), we should have<br />something like this at the end of __down() instead:<br /><br />			... for-loop ...<br />		}<br />		tsk-&gt;state = TASK_RUNNING;<br />		remove_wait_queue(&amp;sem-&gt;wait, &amp;wait);<br /><br />		/* If there are others, mark the semaphore active */<br />		if (wait_queue_active(&amp;sem_wait)) {<br />			atomic_dec(&amp;sem-&gt;count);<br />			sem-&gt;sleepers = 1;<br />		}<br />		spin_unlock_irq(&amp;semaphore_lock);<br />	}<br /><br />which would avoid an unnecessary reschedule, and cause the wakeup to<br />happen at the proper point, namely "__up()" when we release the<br />semaphore.<br /><br />I suspect this may be part of the trouble with the "sleepers" count<br />playing: we had these magic rules that I know I thought about when the<br />code was written, but that aren't really part of the "real" rules.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
