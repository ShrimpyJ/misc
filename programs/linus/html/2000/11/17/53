    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2000/11/17/178">First message in thread</a></li><li><a href="/lkml/2000/11/17/178"> schwidefsky&#64;de ...</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2000/11/17/168">Andrea Arcangeli</a><ul><li><a href="/lkml/2000/11/17/127">Rik van Riel</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Nov 2000 08:42:38 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Memory management bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 17 Nov 2000 schwidefsky&#64;de.ibm.com wrote:<br />&gt; <br />&gt; &gt;&gt; Whats the reasoning behind these ifs ?<br />&gt; &gt;<br />&gt; &gt;To catch memory corruption or things running out of control in the kernel.<br />&gt; I was refering to the "if (!order) goto try_again" ifs in alloc_pages, not<br />&gt; the "if (something) BUG()" ifs.<br /><br />Basically, if you try to wait for orders &gt; 0, you may have to wait for a<br />LOONG time.<br /><br />It actually works reasonably well on machines with big memories, because a<br />buddy allocator _will_ try to coalesce memory allocations as much as<br />possible. But it has nasty cases where you can be really unlucky. Feel<br />free to run simulations to see, but basically if you have reasonably<br />random allocation and free patterns and you want to get an order-X<br />contiguous allocation, you may have to free up a noticeable portion of<br />your memory before it succeeds.<br /><br />Sure, you could do "directed freeing", where you actually try to look at<br />which pages would be worth freeing to find a large free area, but the<br />complexity is not insignificant, and quite frankly the proper approach has<br />always been "don't do that then". Don't rely on big contiguous chunks of<br />memory. Having an mm that can guarantee contiguous chunks of physical<br />memory would be cool, but I suspect strongly that it would have some<br />serious downsides.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
