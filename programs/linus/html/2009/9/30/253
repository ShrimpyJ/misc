    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/24/294">First message in thread</a></li><li><a href="/lkml/2009/9/30/211">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/30/238">Arnd Bergmann</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Sep 2009 12:14:23 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][v7][PATCH 8/9]: Define clone2() syscall</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 30 Sep 2009, Arnd Bergmann wrote:<br />&gt; <br />&gt; Right, you still need to save all the registers from the entry code.<br />&gt; I was under the wrong assumption that task_pt_regs(current)<br />&gt; would give the full register set on all architectures.<br />&gt; <br />&gt; However, I'd still hope that a new system call can be defined in<br />&gt; a way that you only need to have an assembly wrapper to save<br />&gt; the full pt_regs, but no arch specific code to get the syscall arguments<br />&gt; out of that again. In do_clone(), you need a pointer to pt_regs and<br />&gt; the user stack pointer, but that can be generated from<br />&gt; user_stack_pointer(regs).<br /><br />I don't think it can. You don't know what the system call stack layout is. <br /><br />&gt; Does task_pt_regs(current) give the right pointer on all architectures<br />&gt; or do we also need to pass the regs into the syscall?<br /><br />I do not believe that it gives the right pointer in general. In fact, I <br />can guarantee it doesn't. Even on x86 it only works for certain contexts <br />(non-vm86 mode at a minimum), and on architectures like alpha it's not at <br />all sufficient, because even if you can locate the 'pt_regs' structure, <br />you _also_ need the extra guarantees of the pt_regs being next to the <br />extended signal state register structure - and that only happens for magic <br />sequences like signal handling and explicit setups like fork/clone.<br /><br />So I do repeat: if you think you can do all of this in generic code, then <br />you're sadly and totally mistaken. Don't even try. It may work on some <br />architectures, but it's simply fundamentally _wrong_.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
