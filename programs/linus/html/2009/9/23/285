    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/16/461">First message in thread</a></li><li><a href="/lkml/2009/9/18/283">"Lars Ericsson"</a><ul><li><a href="/lkml/2009/9/21/164">Frederik Deweerdt</a><ul><li class="origin"><a href="/lkml/2009/9/24/240">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/24/240">Sachin Sant</a></li><li><a href="/lkml/2009/9/24/243">Frederik Deweerdt</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/9/23/285/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Sep 2009 09:42:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch -stable] firware_class oops: fix firmware_loading_store locking</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 21 Sep 2009, Frederik Deweerdt wrote:<br />&lt;<br />&gt; I'd rather wait someone picks it up for mainline inclusion. I've added<br />&gt; your {Reported,Tested}-by tags.<br />&gt; <br />&gt; The bug its vanilla 2.6.31, and should be considered for -stable inclusion.<br />&gt; <br />&gt; Regards,<br />&gt; Frederik<br />&gt; <br />&gt; ----<br />&gt; <br />&gt; The code introduced by commit 6e03a201bbe8137487f340d26aa662110e324b20 leads<br />&gt; to a potential null deref. The following patch adds the proper locking<br />&gt; around the accesses to fw_priv-&gt;fw.<br />&gt; See <a href="https://bugzilla.kernel.org/show_bug.cgi?id=14185">http://bugzilla.kernel.org/show_bug.cgi?id=14185</a> for a full bug report.<br /><br />I don't think this is correct.<br /><br />I think you should protect the FW_STATUS_LOADING bit too, shouldn't you?<br /><br />As it is, it does this:<br /><br />	if (test_bit(FW_STATUS_LOADING, &amp;fw_priv-&gt;status)) {<br />		mutex_lock(&amp;fw_lock);<br />		...<br />		clear_bit(FW_STATUS_LOADING, &amp;fw_priv-&gt;status);<br />		mutex_unlock(&amp;fw_lock);<br />		break;<br />	}<br /><br />and if this code can race (which it obviously can, since your addition of <br />fw_lock mutex matters), then I think it can race on that FW_STATUS_LOADING <br />bit too. No?<br /><br />So my gut feel is that the whole damn function should be protected by the <br />mutex_lock thing. IOW, the patch would be something like the appended.<br /><br />UNTESTED. Somebody needs to test this, verify, and send it back to me.<br /><br />Am I missing something?<br /><br />		Linus<br /><br />---<br /> drivers/base/firmware_class.c |    9 ++++-----<br /> 1 files changed, 4 insertions(+), 5 deletions(-)<br /><br />diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c<br />index 7376367..1b803df 100644<br />--- a/drivers/base/firmware_class.c<br />+++ b/drivers/base/firmware_class.c<br />&#64;&#64; -150,13 +150,12 &#64;&#64; static ssize_t firmware_loading_store(struct device *dev,<br /> 	int loading = simple_strtol(buf, NULL, 10);<br /> 	int i;<br /> <br />+	mutex_lock(&amp;fw_lock);<br /> 	switch (loading) {<br /> 	case 1:<br />-		mutex_lock(&amp;fw_lock);<br />-		if (!fw_priv-&gt;fw) {<br />-			mutex_unlock(&amp;fw_lock);<br />+		if (!fw_priv-&gt;fw)<br /> 			break;<br />-		}<br />+<br /> 		vfree(fw_priv-&gt;fw-&gt;data);<br /> 		fw_priv-&gt;fw-&gt;data = NULL;<br /> 		for (i = 0; i &lt; fw_priv-&gt;nr_pages; i++)<br />&#64;&#64; -167,7 +166,6 &#64;&#64; static ssize_t firmware_loading_store(struct device *dev,<br /> 		fw_priv-&gt;nr_pages = 0;<br /> 		fw_priv-&gt;fw-&gt;size = 0;<br /> 		set_bit(FW_STATUS_LOADING, &amp;fw_priv-&gt;status);<br />-		mutex_unlock(&amp;fw_lock);<br /> 		break;<br /> 	case 0:<br /> 		if (test_bit(FW_STATUS_LOADING, &amp;fw_priv-&gt;status)) {<br />&#64;&#64; -195,6 +193,7 &#64;&#64; static ssize_t firmware_loading_store(struct device *dev,<br /> 		fw_load_abort(fw_priv);<br /> 		break;<br /> 	}<br />+	mutex_unlock(&amp;fw_lock);<br /> <br /> 	return count;<br /> }<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
