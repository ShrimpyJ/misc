    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/11/348">First message in thread</a></li><li><a href="/lkml/2009/9/16/10">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/16/15">Joel Becker</a><ul><li class="origin"><a href="/lkml/2009/9/17/255">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/17/255">Arjan van de Ven</a><ul><li><a href="/lkml/2009/9/17/368">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/9/17/302">Roland Dreier</a><ul><li><a href="/lkml/2009/9/17/373">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/9/17/489">Joel Becker</a><ul><li><a href="/lkml/2009/9/18/143">=?ISO-8859-1?Q?P=E1draig_Brady?=</a></li><li><a href="/lkml/2009/9/18/253">"Peter W. Morreale"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Sep 2009 09:29:14 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] ocfs2 changes for 2.6.32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 15 Sep 2009, Joel Becker wrote:<br />&gt; <br />&gt; 	Ok.  Where do you see the exposure level?  What I mean is, I<br />&gt; just defined a vfs op that handles these things, but accessed it via two<br />&gt; syscalls, sys_snapfile() and sys_copyfile().  We could also just provide<br />&gt; one system call and allow userspace to use these flags itself, creating<br />&gt; snapfile(3) and copyfile(3) in libc<br /><br />Why would anybody want to hide it at all? Why even the libc hiding?<br /><br />Nobody is going to use this except for special apps. Let them see what <br />they can do, in all its glory. <br /><br />&gt; &gt; I still worry that especially the non-atomic case will want some kind of <br />&gt; &gt; partial-copy updates (think graphical file managers that want to show the <br />&gt; &gt; progress of the copy), and that (think EINTR and continuing) makes me <br />&gt; &gt; think "that could get really complex really quickly", but that's something <br />&gt; &gt; that the NFS/SMB people would have to pipe up on. I'm pretty sure the NFS <br />&gt; &gt; spec has some kind "partial completion notification" model, I dunno about <br />&gt; &gt; SMB.<br />&gt; <br />&gt; 	I'm really wary of combining a ranged interface with this one.<br />&gt; Not only does it make no sense for snapshots, but I think it falls down<br />&gt; in any "create a new inode" scheme entirely.<br /><br />Oh, I wouldn't suggest a ranged interface, just one that allows for status <br />updates and cancelling - _if_ the initial op isn't atomic to begin with. <br />There's also the issue of concurrency in IO: maybe you want to start <br />several things without necessarily waiting for them (think high-throughput <br />"cp -R" on NFS or something like that).<br /><br />So I'd suggest something like having two system calls: one to start the <br />operation, and one to control it. And for a filesystem that does atomic <br />copies, the 'start' one obviously would also finish it, so the 'control' <br />it would be a no-op, because there would never be any outstanding ones.<br /><br />See what I'm saying? It wouldn't complicate _your_ life, but it would <br />allow for filesystems that can't do it atomically (or even quickly).<br /><br />So the first one would be something like<br /><br />	int copyfile(const char *src, const char *dest, unsigned long flags);<br /><br />which would return:<br /><br /> - zero on success<br /> - negative (with errno) on error<br /> - positive cookie on "I started it, here's my cookie". For extra bonus <br />   points, maybe the cookie would actually be a file descriptor (for <br />   poll/select users), but it would _not_ be a file descriptor to the <br />   resulting _file_, it would literally be a "cookie" to the actual <br />   copyfile event.<br /><br />and then for ocfs2 you'd never return positive cookies. You'd never have <br />to worry about it.<br /><br />Then the second interface would be something like<br /><br />	int copyfile_ctrl(long cookie, unsigned long cmd);<br /><br />where you'd just have some way to wait for completion and ask how much has <br />been copied. The 'cmd' would be some set of 'cancel', 'status' or <br />'uninterruptible wait' or whatever, and the return value would again be<br /><br /> - negative (with errno) for errors (copy failed) - cookie released<br /> - zero for 'done' - cookie released<br /> - positive for 'percent remaining' or whatever - cookie still valid<br /><br />and this would be another callback into the filesystem code, but you'd <br />never have to worry about it, since you'd never see it (just leave it <br />NULL).<br /><br />NOTE! The above is a rough idea - I have not spent tons of time thinking <br />about it, or looking at exactly what something like NFS would really want. <br />But the _concept_ is simple, and usage should be pretty trivial. A simple <br />case would be something like this:<br /><br />   int copy_file(const char *src, const char *dst)<br />   {<br />	/* Start a file copy */<br />	int cookie = copyfile(src, dst, 0);<br /><br />	/* Async case? */<br />	if (cookie &gt; 0) {<br />		int ret;<br /><br />		while ((ret = copyfile_ctrl(cookie, COPYFILE_WAIT)) &gt; 0)<br />			/* nothing */;<br /><br />		/* Error handling is shared for async/sync */<br />		cookie = ret;<br />	}<br />	if (cookie &lt; 0) {<br />		perror("copyfile failed");<br />		return -1;<br />	}<br />	return 0;<br />   }<br /><br />doesn't that look fairly easy to use?<br /><br />And the advantage here is that you _can_ - still fairly easily - do much <br />more involved things. For example, let's say that you wanted to do a very <br />efficient parallel copy, so you'd do something like this:<br /><br />	#define MAX_PEND 10<br />	static int pending[MAX_PEND];<br />	static int nr_pending = 0;<br /><br />	static int wait_for_completion(int nr_left)<br />	{<br />		int ret;<br /><br />		while (nr_pending &gt; nr_left) {<br />			int cookie = pending[0], i;<br /><br />			/* Wait for completion of the oldest entry */<br />			while ((i = copyfile_ctrl(cookie, COPYFILE_WAIT)) &gt; 0)<br />				/* nothing */;<br /><br />			/* Save the "we had an error" case */<br />			if (i &lt; 0)<br />				ret = i;<br /><br />			/* Move the other entries down */<br />			memmove(pending, pending+1, sizeof(int)*--nr_pending);<br />		}<br />		return ret;<br />	}<br /><br />	int start_copy(src, dst)<br />	{<br />		int cookie, ret;<br /><br />		cookie = copyfile(src, dst, 0);<br />		if (cookie &lt;= 0)<br />			return cookie;<br /><br />		ret = 0;<br />		if (nr_pending == MAX_PENDING)<br />			ret = wait_for_completion(pending, MAX_PENDING/2);<br /><br />		pending[nr_pending++] = cookie;<br />		return ret;<br />	}<br /><br />	int stop_copy(void)<br />	{<br />		return wait_for_completion(pending, 0);<br />	}<br /><br />which basically ends up having ten copyfile() calls outstanding (and when <br />we hit the limit, we wait for half of them to complete), so now you can do <br />an efficient "cp -R" with concurrent server-side IO. And it wasn't so <br />hard, was it?<br /><br />(Ok, so the above would need to be fleshed out to remember the filenames <br />so that you can report _which_ file failed etc, but you get the idea).<br /><br />And again, it wouldn't be any more complicated for your case. Your <br />copyfile would always just return 0 or negative for error. But it would be <br />_way_ more powerful for filesystems that want to do potentially lots of IO <br />for the file copy.<br /><br />I dunno. The above seems like a fairly simple and powerful interface, and <br />I _think_ it would be ok for NFS and CIFS. And in fact, if that whole <br />"background copy" ends up being used a lot, maybe even a local filesystem <br />would implement it just to get easy overlapping IO - even if it would just <br />be a trivial common wrapper function that says "start a thread to do a <br />trivial manual copy".<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
