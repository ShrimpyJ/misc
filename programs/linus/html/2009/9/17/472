    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/11/348">First message in thread</a></li><li><a href="/lkml/2009/9/17/373">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/17/379">Joel Becker</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/9/17/384">Roland Dreier</a><ul><li><a href="/lkml/2009/9/17/392">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Sep 2009 17:29:39 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] ocfs2 changes for 2.6.32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 17 Sep 2009, Joel Becker wrote:<br />&gt;<br />&gt; 	I have to say, adding 'undefined behavior' things isn't fun in a<br />&gt; call that is already potentially confusing.  We have a bunch of flags<br />&gt; and behaviors we're covering.<br /><br />I don't think it's "undefined". It's just not complete.<br /><br />From a user standpoint, there is no difference between such a system call <br />and doing the thing as a library routine (which has to be the fallback <br />anyway for something like 'cp').<br /><br />&gt; 	Note that "cleaning up after an error" and "atomic" are not the<br />&gt; same.  Atomicity implies that not only do you see all or none, but that<br />&gt; the contents are a point-in-time of the source file.  A non-atomic<br />&gt; implementation may be affected by writes that happen during the copy<br />&gt; (like any read-write-loop copy would be).<br /><br />Sure. There are middle grounds that may not need the cleanup. I was more <br />looking at the two extreme ends.<br /><br />&gt; &gt; Of course, if the filesystem can do the copy entirely atomically (ie by <br />&gt; &gt; just incrementing a refcount), then it can give atomicity guarantees, but <br />&gt; &gt; then you'd never see the async case either.<br />&gt; <br />&gt; 	Even the atomic copy might take a little time (say, to bump up<br />&gt; and write out the metadata structures).  Do you want to define that as<br />&gt; not being async?  I was figuring COPYFILE_ATOMIC and COPYFILE_WAIT to be<br />&gt; separate flags.<br /><br />I don't think that's wrong, and yeah, you could decide that you actually <br />want to be able to support the "ten outstanding 'copy' commands from user <br />space" model too. So yeah, separate COPYFILE_ATOMIC (only succeed if you <br />can do it as an atomic op in the filesystem) and COPYFILE_WAIT (only <br />return when fully done) bits sounds conceptually fine to me.<br /><br />Whether it's worth it for a filesystem that effectively only needs a <br />couple of writes (that can be buffered too), I dunno. But it's certainly <br />not something I'd object to on an interface level.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
