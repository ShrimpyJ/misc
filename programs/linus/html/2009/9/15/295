    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/11/348">First message in thread</a></li><li><a href="/lkml/2009/9/14/580">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/15/1">Arjan van de Ven</a><ul><li><a href="/lkml/2009/9/15/8">Joel Becker</a></li></ul></li><li><a href="/lkml/2009/9/15/2">Joel Becker</a><ul><li class="origin"><a href="/lkml/2009/9/15/445">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/15/445">Joel Becker</a><ul><li><a href="/lkml/2009/9/16/10">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Sep 2009 09:30:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] ocfs2 changes for 2.6.32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 14 Sep 2009, Joel Becker wrote:<br />&gt; &gt; <br />&gt; &gt; If you're talking about falling back to manually just copying the data, <br />&gt; &gt; then nobody is interested in that. User space can do that better with a <br />&gt; &gt; simple read-write loop or with splice, or whatever. There's no reaason <br />&gt; &gt; what-so-ever to do that.<br />&gt; <br />&gt; 	I'm talking about any facility for copying that isn't just a<br />&gt; userspace loop.  Like your discussion of network filesystems.<br /><br />HOW?<br /><br />We need to have a per-filesystem interface to that. <br /><br />Having a '-&gt;copyfile()' function would be great.<br /><br />But don't you see how _idiotic_ it is to then also having a '-&gt;reflink()' <br />function that does _conceptually_ the exact same thing, except it does it <br />by incrementing a usage count instead?<br /><br />Do you see why I'm so unhappy to add a -&gt;reflink() function? <br /><br />&gt; 	Hence I brought this to the filesystem summit and then fsdevel<br />&gt; rather than just implementing it in ocfs2.  I know NFS folks were in the<br />&gt; room in April, and they said the call definition was workable.  Can't<br />&gt; remember if CIFS folks were there, but I think so.<br /><br />It's not workable if you define the 'reflink()' function to not use any <br />disk space on the filesystem. Because SMB _will_ do a copy (and I presume <br />the NFS thing will too). So it would not in general be what you call <br />reflink, it will not be a "snapshot".<br /><br />So if you _define_ the semantics of "reflink" to be that it's atomic and <br />doesn't use any new diskspace (apart from the new inode/directory entry, <br />of course), then it will be almost totally useless to other filesystems.<br /><br />In fact, it's entirely possible to have filesystems that can avoid copying <br />the _data_ blocks, but would need to copy the indirect blocks - maybe the <br />data blocks are ref-counted, but the metadata needs to be per-file (I can <br />see many reasons to do it that way, even if it's organized as a tree - <br />it's how we do page table COW, for example, and it makes some things much <br />simpler).<br /><br />Would that be a 'reflink()' or not? I have no way of knowing, because you <br />have decided on reflink on a purely ocfs2-specific implementation basis. <br />But I do know that such a filesystem would be perfectly happy to have a <br />'copyfile' function.<br /><br />This is why I want the VFS pointers to be about _semantics_, not about <br />some random implementation detail.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
