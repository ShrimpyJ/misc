    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/27/166">First message in thread</a></li><li><a href="/lkml/2009/9/29/302">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/29/305">Arjan van de Ven</a><ul><li class="origin"><a href="/lkml/2009/9/30/160">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/30/160">Arjan van de Ven</a><ul><li><a href="/lkml/2009/9/30/175">Eric Dumazet</a></li><li><a href="/lkml/2009/9/30/190">Eric Dumazet</a></li><li><a href="/lkml/2009/9/30/213">Stefan Richter</a></li><li><a href="/lkml/2009/9/30/257">Ingo Molnar</a></li><li><a href="/lkml/2009/9/30/261">tip-bot for Arjan van de Ven</a></li><li><a href="/lkml/2009/9/30/262">tip-bot for Arjan van de Ven</a></li><li><a href="/lkml/2009/9/30/267">tip-bot for Eric Dumazet</a></li><li><a href="/lkml/2009/9/30/289">Linus Torvalds</a></li><li><a href="/lkml/2009/9/30/305">tip-bot for Arjan van de Ven</a></li><li><a href="/lkml/2009/9/30/306">tip-bot for Eric Dumazet</a></li><li><a href="/lkml/2009/9/30/313">tip-bot for Arjan van de Ven</a></li><li><a href="/lkml/2009/9/30/314">tip-bot for Eric Dumazet</a></li><li><a href="/lkml/2009/9/30/317">tip-bot for Arjan van de Ven</a></li><li><a href="/lkml/2009/9/30/318">tip-bot for Eric Dumazet</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2009/10/5/194">Peter Zijlstra</a><ul><li><a href="/lkml/2009/10/5/245">=?UTF-8?Q?Maciej_=C5=BBenczykowski?=</a></li><li><a href="/lkml/2009/10/5/257">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/5/262">Peter Zijlstra</a><ul><li><a href="/lkml/2009/10/5/285">Linus Torvalds</a></li><li><a href="/lkml/2009/10/9/186">tip-bot for Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/9/29/314/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 29 Sep 2009 14:56:28 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.32-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 29 Sep 2009, Arjan van de Ven wrote:<br />&gt; <br />&gt; can't we use alternatives() for this, to patch cmpxchg64 in ?<br />&gt; I mean.. it'll be commonly supported nowadays.. the fallback to it not<br />&gt; being supported could be a bit slower by now...<br /><br />Yes, we could. It would limit us to some fixed address format, probably<br /><br />	cmpxchg8b (%esi)<br /><br />or something. Use something like this as a starting point, perhaps?<br /><br />NOTE! Totally untested! And you'd actually need to implement the <br />"cmpxchg8b_emu" function that takes it's arguments in %eax:%edx, %ebx:%ecx <br />and %esi and doesn't trash any other registers..<br /><br />		Linus<br /><br />---<br /> arch/x86/include/asm/cmpxchg_32.h |   27 ++++++++++++++-------------<br /> 1 files changed, 14 insertions(+), 13 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/cmpxchg_32.h b/arch/x86/include/asm/cmpxchg_32.h<br />index 82ceb78..d16a486 100644<br />--- a/arch/x86/include/asm/cmpxchg_32.h<br />+++ b/arch/x86/include/asm/cmpxchg_32.h<br />&#64;&#64; -312,19 +312,20 &#64;&#64; static inline unsigned long cmpxchg_386(volatile void *ptr, unsigned long old,<br /> <br /> extern unsigned long long cmpxchg_486_u64(volatile void *, u64, u64);<br /> <br />-#define cmpxchg64(ptr, o, n)						\<br />-({									\<br />-	__typeof__(*(ptr)) __ret;					\<br />-	if (likely(boot_cpu_data.x86 &gt; 4))				\<br />-		__ret = (__typeof__(*(ptr)))__cmpxchg64((ptr),		\<br />-				(unsigned long long)(o),		\<br />-				(unsigned long long)(n));		\<br />-	else								\<br />-		__ret = (__typeof__(*(ptr)))cmpxchg_486_u64((ptr),	\<br />-				(unsigned long long)(o),		\<br />-				(unsigned long long)(n));		\<br />-	__ret;								\<br />-})<br />+#define cmpxchg64(ptr, o, n)					\<br />+({								\<br />+	__typeof__(*(ptr)) __ret;				\<br />+	__typeof__(*(ptr)) __old = (o);				\<br />+	__typeof__(*(ptr)) __new = (n);				\<br />+	alternative_io(LOCK_PREFIX "cmpxchg8b (%%esi)",		\<br />+		       "call cmpxchg8b_emu",			\<br />+		       X86_FEATURE_CMPXCHG8B,			\<br />+		       "=A" (__ret),				\<br />+		       "m" (*(ptr)), "0" (__old),		\<br />+		       "b" ((unsigned int)__new),		\<br />+		       "c" ((unsigned int)(__new&gt;&gt;32)) );	\<br />+	__ret; })<br />+<br /> #define cmpxchg64_local(ptr, o, n)					\<br /> ({									\<br /> 	__typeof__(*(ptr)) __ret;					\<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
