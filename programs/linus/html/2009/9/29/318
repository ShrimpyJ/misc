    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/24/294">First message in thread</a></li><li><a href="/lkml/2009/9/29/261">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/29/282">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2009/9/29/321">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/29/321">"H. Peter Anvin"</a><ul><li><a href="/lkml/2009/9/30/205">Arnd Bergmann</a></li></ul></li><li><a href="/lkml/2009/9/30/18">Roland McGrath</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 29 Sep 2009 15:11:03 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][v7][PATCH 8/9]: Define clone2() syscall</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 29 Sep 2009, H. Peter Anvin wrote:<br />&gt; <br />&gt; That's not the main issue here, though.  The main issue is that the<br />&gt; prototype of the function now depends on one of its arguments<br /><br />Ok, I agree with that. The kernel side is easy (we have magic calling <br />conventions there and need to turn registers into arguments anyway before <br />you get to the shared code), but your point about the user side prototype <br />is valid.<br /><br />However, that could easily be handled by just having a extended_clone() <br />prototype that then sets the CLONE_EXTINFO (or whatever) bit in the flags. <br />I think most of the time the clone() stuff needs special user-level <br />wrappers anyway to handle the stack setup etc, no?<br /><br />In other words, what I'd suggest we could do is<br /><br /> - the kernel "do_fork()" interface would be made to have the "extended" <br />   format by default - so the _kernel_ never has two formats in its <br />   generic logic.<br /><br /> - the "sys_clone()" system call, that already needs to munge the user <br />   mode registers into the "do_fork()" format, would be the one that <br />   recognizes the new flag and copies the extended data from user mode <br />   memory to the extended info mode.<br /><br />Then each architecture would need to update it's "sys_clone()" function to <br />take advantage of the new extended format, but that's something that the <br />new system call would have had to do anyway, so that's not an added burden <br />in any way.<br /><br />Hmm?<br /><br />I don't feel horribly strongly about this, and as far as I'm concerned <br />it's fine to also do it as a new system call too (we already have 'fork()' <br />and 'vfork()' as special case interfaces to do_fork() - the new 'extended <br />clone' would be no different).<br /><br />I just think that Roland is correct that if the new extended fork handles <br />the "no new info" case itself _anyway_, then there is no upside to making <br />it a new system call, since the complexity is the same as just extending <br />the old one.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
