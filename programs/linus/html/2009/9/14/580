    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/11/348">First message in thread</a></li><li><a href="/lkml/2009/9/14/570">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/14/574">Joel Becker</a><ul><li class="origin"><a href="/lkml/2009/9/15/1">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/15/1">Arjan van de Ven</a><ul><li><a href="/lkml/2009/9/15/8">Joel Becker</a></li></ul></li><li><a href="/lkml/2009/9/15/2">Joel Becker</a><ul><li><a href="/lkml/2009/9/15/295">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 14 Sep 2009 19:01:06 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] ocfs2 changes for 2.6.32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 14 Sep 2009, Joel Becker wrote:<br />&gt;<br />&gt; 	In the reflink discussion before, I proposed that a separate<br />&gt; copyfile() syscall could be written that uses the same -&gt;reflink() inode<br />&gt; operation but allows degradation in the storage handling.<br /><br />.. exactly how?<br /><br />If you're talking about falling back to manually just copying the data, <br />then nobody is interested in that. User space can do that better with a <br />simple read-write loop or with splice, or whatever. There's no reaason <br />what-so-ever to do that.<br /><br />But the thing is, network filesystems may be able to do server-side <br />copies, and the point being that they can do so _without_ transferring the <br />data to the client (and back). And if we do 'copyfile' (under whatever <br />name) for one filesystem, then I think we should strive to make sure that <br />it's useful for other filesystems too.<br /><br />Just google for "NFS Server-side Copy". And SMB has had a COPY command <br />from the very beginning, I think.<br /><br />And as far as I can tell, neither NFS nor CIFS could use your definition <br />of 'reflink()'. They aren't reflinks. Or rather, _could_ be, on the <br />server, of course, but what some people want to do is to avoid moving data <br />over the network. So it's not about "don't use more diskspace" for that <br />kind of application.<br /><br />Do we really want to introduce a new filesystem operation that is likely <br />to be broken for something like that?<br /><br />Now, it's possible that nobody will ever care, and that NFS server-side <br />copy goes the way of a lot of other failed trials. But I really hope you <br />have at least _talked_ to some CIFS/NFS people about this.<br /><br />[ Btw, it's quite possible that CIFS/NFS people would want more than a <br />  single entrypoint. I think they might want partial copies and status <br />  updates etc, which would likely mean that a single -&gt;copyfile() thing <br />  isn't sufficient.<br /><br />  Maybe it's not worth it, and the complexity of something like that gets <br />  to be too annoying. But I don't get the feeling that you've even _tried_ <br />  to see if this can be generalized to something that would be much more <br />  widely useful ]<br /><br />Now, I can see that you might want to say "fail rather than use double <br />the diskspace for data". But why not just do that as a flag? You already <br />have flags for 'copy extended attributes or not'. Why not have a flag that <br />says 'copy only if you can do it without any extra space'?<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
