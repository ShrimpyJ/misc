    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/9/11/348">First message in thread</a></li><li><a href="/lkml/2009/9/14/481">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/14/523">Joel Becker</a><ul><li class="origin"><a href="/lkml/2009/9/14/562">Linus Torvalds</a><ul><li><a href="/lkml/2009/9/14/562">Joel Becker</a><ul><li><a href="/lkml/2009/9/14/570">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2009/9/15/28">Miklos Szeredi</a></li><li><a href="/lkml/2009/9/23/127">Joel Becker</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 14 Sep 2009 16:27:59 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] ocfs2 changes for 2.6.32</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 14 Sep 2009, Joel Becker wrote:<br />&gt; <br />&gt; 	It's a link(2) analogue.  symlink(2) has the loosest coupling,<br />&gt; and reflink(2) the highest.  We're not going to add freflink[at]().<br />&gt; It's a snap, not a copy.  It can be used to implement a copy, and<br />&gt; copyfile() in libc can be written with reflinkat(2), but it isn't just a<br />&gt; copy.<br /><br />From all but a performance standpoint, it's a copy. It has absolutely <br />_zero_ "link" semantics. When you do a symlink or a hardlink, you see it <br />in the resulting semantics: changing one changes the other. <br /><br />This 'reflink' has no such semantics that I can tell. It has purely copy <br />semantics, never mind that it's optimized.<br /><br />And the thing to note is that it doesn't even have to be optimized as a <br />"link". Think about network filesystems: maybe they want to implement this <br />thing as a server-side "copy" operation (with atomicity guarantees).<br /><br />In other words, I can well imagine that for some filesystems, there really <br />is no refcounting or linking implied, and that's why I think naming should <br />be about semantics, not some random implementation issue that just happens <br />to be true for some particular class of filesystems.<br /><br />So tell me - are there actually any non-copying semantics as far as the <br />_user_ is concerned? Is there some reason why a NFS server might not <br />implement this as a server-side copy? Is there something fundamentally in <br />this all that is about reference counting as far as a user is concerned?<br /><br />I also still didn't get any answer to the "freflink()" question. You just <br />said that we wouldn't do it, with no explanation. Why? We've discussed <br />'flink()' in the past, I just want to know that when we do a new system <br />call there is some _reason_ why it's not going to explode into many <br />different variants later...<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
