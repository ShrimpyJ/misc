    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/8/20/21">First message in thread</a></li><li><a href="/lkml/2009/8/24/354">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/24/381">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2009/8/24/410">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/24/410">(Eric W. Biederman)</a></li><li><a href="/lkml/2009/8/24/425">Dave Young</a></li><li><a href="/lkml/2009/8/24/427">Xiaotian Feng</a><ul><li><a href="/lkml/2009/8/25/22">"Zhang, Yanmin"</a></li></ul></li><li><a href="/lkml/2009/8/24/431">Frederic Weisbecker</a><ul><li><a href="/lkml/2009/8/25/1">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/8/27/78">"Zhang, Yanmin"</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/8/24/391/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 24 Aug 2009 17:09:08 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: v2.6.31-rc6: BUG: unable to handle kernel NULL pointer dereference at 0000000000000008</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 24 Aug 2009, Linus Torvalds wrote:<br />&gt; <br />&gt; But I wanted to let people know that the patch is clearly not the "last <br />&gt; word" on this. It's a useful thing to try, but we need something better.<br /><br />This may be better (this is a replacement for the previous patch).<br /><br />Instead of using 'cancel_delayed_work_sync()', it makes tty_ldisc_hangup() <br />do a 'flush_scheduled_work()' afterwards, like the other callers already <br />do.<br /><br />And like 'tty_ldisc_release()' already does, it does this all before even <br />getting the ldisc_mutex, avoiding the deadlock.<br /><br />I'm not 100% happy with this patch either, but my remaining unhappiness is <br />more with the tty locking in general that causes this all. I suspect this <br />patch in itself is not any worse than the other hacks we have.<br /><br />Oh, and in case you didn't guess - this is _STILL_ totally untested. It <br />compiles for me, but that's all I'm going to guarantee. I'm just looking <br />at the code (and getting pretty fed up with it ;)<br /><br />And as already mentioned: I doubt the deadlock on tty-&gt;ldisc_mutex is <br />anything that would be hit in practice. And even if it can be triggered, <br />the previous patch I sent out is still interesting in a "does it make the <br />problem go away" sense. Because if it doesn't (with or without a new <br />deadlock), then I'm looking at all the wrong places.<br /><br />		Linus<br /><br />---<br /> drivers/char/tty_ldisc.c |   10 +++++++---<br /> 1 files changed, 7 insertions(+), 3 deletions(-)<br /><br />diff --git a/drivers/char/tty_ldisc.c b/drivers/char/tty_ldisc.c<br />index 1733d34..f893d18 100644<br />--- a/drivers/char/tty_ldisc.c<br />+++ b/drivers/char/tty_ldisc.c<br />&#64;&#64; -508,8 +508,9 &#64;&#64; static void tty_ldisc_restore(struct tty_struct *tty, struct tty_ldisc *old)<br />  *	be obtained while the delayed work queue halt ensures that no more<br />  *	data is fed to the ldisc.<br />  *<br />- *	In order to wait for any existing references to complete see<br />- *	tty_ldisc_wait_idle.<br />+ *	You need to do a 'flush_scheduled_work()' (outside the ldisc_mutex<br />+ *	in order to make sure any currently executing ldisc work is also<br />+ *	flushed.<br />  */<br /> <br /> static int tty_ldisc_halt(struct tty_struct *tty)<br />&#64;&#64; -753,11 +754,14 &#64;&#64; void tty_ldisc_hangup(struct tty_struct *tty)<br /> 	 * N_TTY.<br /> 	 */<br /> 	if (tty-&gt;driver-&gt;flags &amp; TTY_DRIVER_RESET_TERMIOS) {<br />+		/* Make sure the old ldisc is quiescent */<br />+		tty_ldisc_halt(tty);<br />+		flush_scheduled_work();<br />+<br /> 		/* Avoid racing set_ldisc or tty_ldisc_release */<br /> 		mutex_lock(&amp;tty-&gt;ldisc_mutex);<br /> 		if (tty-&gt;ldisc) {	/* Not yet closed */<br /> 			/* Switch back to N_TTY */<br />-			tty_ldisc_halt(tty);<br /> 			tty_ldisc_reinit(tty);<br /> 			/* At this point we have a closed ldisc and we want to<br /> 			   reopen it. We could defer this to the next open but<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
