    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/8/13/339">First message in thread</a></li><li><a href="/lkml/2009/8/13/345">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/13/386">Thomas Gleixner</a><ul><li><a href="/lkml/2009/8/13/403">Thomas Gleixner</a></li><li class="origin"><a href="/lkml/2009/8/13/475">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/13/475">Thomas Gleixner</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/8/13/433/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2009 13:05:10 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT pull] genirq fixes for 2.6.31</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 13 Aug 2009, Thomas Gleixner wrote:<br /><br />&gt; On Thu, 13 Aug 2009, Linus Torvalds wrote:<br />&gt; &gt; Now, I can see a bug, which is that "action-&gt;tsk" may have been set to <br />&gt; &gt; NULL. But I can't see a race, and I can't see a reason for all the code <br />&gt; &gt; movement. So quite frankly, I think the comments (both in the code and in <br />&gt; &gt; the commit message) are just wrong. And the odd "load it first, then do <br />&gt; &gt; other things" code looks confused.<br />&gt; &gt; <br />&gt; &gt; So why is this not just a<br />&gt; &gt; <br />&gt; &gt; 	if (action-&gt;thread)<br />&gt; &gt; 		wake_up_process(action-&gt;thread);<br />&gt; &gt; <br />&gt; &gt; with appropriate comments?<br />&gt; <br />&gt; What guarantees that the compiler does not dereference action-&gt;thread<br />&gt; twice and the action-&gt;thread = NULL; operation happens between the<br />&gt; check and the wake_up_process() call? I might be paranoid, but ...<br /><br />Aren't we holding the lock here?<br /><br />And if we are _not_ holding the lock, then it's racy anyway, and the right <br />fix is the other one I suggested:<br /><br />&gt; &gt; Or, alternatively, just move all the "clear action-&gt;thread" in free_irq() <br />&gt; &gt; to after having done the "synchronize_irq()" thing, and then - afaik - <br />&gt; &gt; you'll not need that test at all, because you're guaranteed that as long <br />&gt; &gt; as you're in an interrupt handler, the thing shouldn't be cleared.<br />&gt; <br />&gt; Right, I looked at that as well, but we need to do it different than<br />&gt; just calling synchronize_irq(), as we need to keep desc-&gt;lock after we<br />&gt; established that no interrupt is in progress. Otherwise we can run<br />&gt; into the same problem which we have right now. Patch below.<br /><br />But we already _do_ call synchronize_irq().<br /><br />And no, we'd better not be running into the same problem, becaue dang it, <br />if we do, then 'action' itself is unreliable (since we'll be doing a <br />'kfree()' in it in free_irq())<br /><br />IOW, why not just make the patch do something like the appended? <br /><br />NOTE! This is UNTESTED. And I also - on purpose - removed the "set <br />action-&gt;thread to NULL", because we're going to free 'action', so if <br />anything depends on it, it's already buggy.<br /><br />What am I missing?<br /><br />		Linus<br /><br />---<br /> kernel/irq/manage.c |   17 ++++++++---------<br /> 1 files changed, 8 insertions(+), 9 deletions(-)<br /><br />diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c<br />index 61c679d..0747f22 100644<br />--- a/kernel/irq/manage.c<br />+++ b/kernel/irq/manage.c<br />&#64;&#64; -809,9 +809,6 &#64;&#64; static struct irqaction *__free_irq(unsigned int irq, void *dev_id)<br /> 			desc-&gt;chip-&gt;disable(irq);<br /> 	}<br /> <br />-	irqthread = action-&gt;thread;<br />-	action-&gt;thread = NULL;<br />-<br /> 	spin_unlock_irqrestore(&amp;desc-&gt;lock, flags);<br /> <br /> 	unregister_handler_proc(irq, action);<br />&#64;&#64; -819,12 +816,6 &#64;&#64; static struct irqaction *__free_irq(unsigned int irq, void *dev_id)<br /> 	/* Make sure it's not being used on another CPU: */<br /> 	synchronize_irq(irq);<br /> <br />-	if (irqthread) {<br />-		if (!test_bit(IRQTF_DIED, &amp;action-&gt;thread_flags))<br />-			kthread_stop(irqthread);<br />-		put_task_struct(irqthread);<br />-	}<br />-<br /> #ifdef CONFIG_DEBUG_SHIRQ<br /> 	/*<br /> 	 * It's a shared IRQ -- the driver ought to be prepared for an IRQ<br />&#64;&#64; -840,6 +831,14 &#64;&#64; static struct irqaction *__free_irq(unsigned int irq, void *dev_id)<br /> 		local_irq_restore(flags);<br /> 	}<br /> #endif<br />+<br />+	irqthread = action-&gt;thread;<br />+	if (irqthread) {<br />+		if (!test_bit(IRQTF_DIED, &amp;action-&gt;thread_flags))<br />+			kthread_stop(irqthread);<br />+		put_task_struct(irqthread);<br />+	}<br />+<br /> 	return action;<br /> }<br /> <br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
