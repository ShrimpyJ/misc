    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/8/13/339">First message in thread</a></li><li><a href="/lkml/2009/8/13/339">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2009/8/13/386">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/13/386">Thomas Gleixner</a><ul><li><a href="/lkml/2009/8/13/403">Thomas Gleixner</a></li><li><a href="/lkml/2009/8/13/433">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/13/475">Thomas Gleixner</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Aug 2009 12:24:18 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT pull] genirq fixes for 2.6.31</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 13 Aug 2009, Thomas Gleixner wrote:<br />&gt;<br />&gt; Please pull the latest irq-fixes-for-linus git tree from:<br />&gt; <br />&gt;    git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git irq-fixes-for-linus<br /><br />Not without lots more explanations - or at least _fixed_ explanations.<br /><br />&gt; Thomas Gleixner (1):<br />&gt;       genirq: Prevent race between free_irq() and handle_IRQ_event()<br />&gt; <br />&gt; <br />&gt;  kernel/irq/handle.c |   10 +++++++++-<br />&gt;  1 files changed, 9 insertions(+), 1 deletions(-)<br />&gt; <br />&gt; diff --git a/kernel/irq/handle.c b/kernel/irq/handle.c<br />&gt; index 065205b..4e7f17a 100644<br />&gt; --- a/kernel/irq/handle.c<br />&gt; +++ b/kernel/irq/handle.c<br />&gt; &#64;&#64; -403,8 +403,16 &#64;&#64; irqreturn_t handle_IRQ_event(unsigned int irq, struct irqaction *action)<br />&gt;  			 */<br />&gt;  			if (likely(!test_bit(IRQTF_DIED,<br />&gt;  					     &amp;action-&gt;thread_flags))) {<br />&gt; +				struct task_struct *tsk = action-&gt;thread;<br />&gt; +<br />&gt;  				set_bit(IRQTF_RUNTHREAD, &amp;action-&gt;thread_flags);<br />&gt; -				wake_up_process(action-&gt;thread);<br />&gt; +				/*<br />&gt; +				 * Check tsk as we might race against<br />&gt; +				 * free_irq which sets action-&gt;thread<br />&gt; +				 * to NULL<br />&gt; +				 */<br />&gt; +				if (tsk)<br />&gt; +					wake_up_process(tsk);<br /><br />Seriously, this looks entirely bogus.<br /><br />The thing is, if "action" has been free'd, then dammit, 'tsk' is gone too. <br />In fact, just look at _free_irq(), and realise how it does the<br /><br />        if (irqthread) {<br />                if (!test_bit(IRQTF_DIED, &amp;action-&gt;thread_flags))<br />                        kthread_stop(irqthread);<br />                put_task_struct(irqthread);<br />        }<br /><br />_before_ it free's 'action'. So what does that fix?<br /><br />There is no race that I can see - we're holding "action-&gt;lock" while all <br />this happens.<br /><br />Now, I can see a bug, which is that "action-&gt;tsk" may have been set to <br />NULL. But I can't see a race, and I can't see a reason for all the code <br />movement. So quite frankly, I think the comments (both in the code and in <br />the commit message) are just wrong. And the odd "load it first, then do <br />other things" code looks confused.<br /><br />So why is this not just a<br /><br />	if (action-&gt;thread)<br />		wake_up_process(action-&gt;thread);<br /><br />with appropriate comments?<br /><br />Or, alternatively, just move all the "clear action-&gt;thread" in free_irq() <br />to after having done the "synchronize_irq()" thing, and then - afaik - <br />you'll not need that test at all, because you're guaranteed that as long <br />as you're in an interrupt handler, the thing shouldn't be cleared.<br /><br />No?<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
