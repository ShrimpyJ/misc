    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/8/18/400">First message in thread</a></li><li><a href="/lkml/2009/8/18/415">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/18/425">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2009/8/18/454">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/18/454">Steven Rostedt</a><ul><li><a href="/lkml/2009/8/18/476">Kumar Gala</a></li></ul></li><li><a href="/lkml/2009/8/19/390">Scott Wood</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Aug 2009 16:52:20 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] spinlock: __raw_spin_is_locked() should return true for UP</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 18 Aug 2009, Steven Rostedt wrote:<br />&gt;<br />&gt; &gt; The thing is, some people may assert that a lock is held, but others could <br />&gt; &gt; easily be looping until it's not held using something like<br />&gt; &gt; <br />&gt; &gt; 	while (spin_is_locked(lock))<br />&gt; &gt; 		cpu_relax();<br />&gt; <br />&gt; Wouldn't something like that be really racey? And anyone doing such a <br />&gt; thing had better have that code within an #ifdef CONFIG_SMP.<br /><br />Sure, it's hopefully inside a #ifdef CONFIG_SMP.<br /><br />And no, it's not necessarily racy. Sure, it's race in itself if that's all <br />you are doing, but I could imagine writing that kind of code if I knew <br />some lock was likely held, and I wanted to avoid doing a "try_lock()" <br />until it got released.<br /><br />The point is, "spin_is_locked()" is simply not a well-defined operation in <br />this case. It could go either way.<br /><br />And for the original case, we actually have a function for that:<br /><br />	assert_spin_locked(x)<br /><br />which goes away on UP. Exactly because<br /><br />	BUG_ON(!spin_is_locked(x))<br /><br />is not a good thing to do!<br /><br />&gt; &gt; so it's hard to tell whether it should return true or false in the case <br />&gt; &gt; where spin-locking simply doesn't exist.<br />&gt; <br />&gt; Actually, I did have a case where I would use it and would expect a return <br />&gt; of 0. That was in the experimental printk code to see if it was safe to <br />&gt; wakeup the klogd. I once had a check of the current cpu runqueue lock is <br />&gt; locked, and if it was, not to wake up klogd. I'm sure there's other cases <br />&gt; like this as well.<br /><br />Yeah, "spin_is_locked()" can be useful for those kinds of things. A <br />heuristic for whether we should do something based on whether some other <br />CPU holds it (or we migth have recursion).<br /><br />Exactly like it can be useful for doing the BUG_ON thing. But in both <br />cases it's a bit iffy.<br /><br />&gt; Thinking about it, UP probably should have spin_is_locked always return <br />&gt; false, but if you want to make sure you are not in a critical section <br />&gt; with the lock not held, then use assert_spin_locked, which on UP should be <br />&gt; a nop.<br /><br />That's what we do. That said, I also think we should generally try to <br />avoid the kind of code that depends on spin_is_locked always returning <br />false, for the same reason we should try to avoid any code that depends on <br />it always returning true. <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
