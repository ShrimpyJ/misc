    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/7/15/59">First message in thread</a></li><li><a href="/lkml/2009/7/27/425">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2009/7/27/429">Paul Mundt</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 27 Jul 2009 17:41:38 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC/PATCH] mm: Pass virtual address to [__]p{te,ud,md}_free_tlb()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 28 Jul 2009, Paul Mundt wrote:<br />&gt;<br />&gt; Yup, that seems to be what happened. I've never seen a warning about this<br />&gt; with any compiler version, otherwise we would have caught this much<br />&gt; earlier. As soon as the addr -&gt; a rename took place it blew up<br />&gt; immediately as a redefinition. Is there a magical gcc flag we can turn on<br />&gt; to warn on identical definitions, even if just for testing?<br /><br />No, this is actually defined C behavior - identical macro redefinitions <br />are ok. That's very much on purpose, and allows different header files to <br />use an identical #define to define some common macro.<br /><br />Strictly speaking, this is a "safety feature", in that you obviously <br />_could_ just always do a #undef+#define, but such a case would be able to <br />redefine a macro even if the new definition didn't match the old one. So <br />the C pre-processor rules is that you can safely re-define something if <br />you re-define it identically.<br /><br />Of course, we could make the rules for the kernel be stricter, but I don't <br />know if there are any flags to warn about it, since it's such a standard C <br />feature: the lack of warning is _not_ an accident.<br /><br />It would be trivial to teach sparse to warn about it, of course. Look at <br />sparse/pre-process.c, function do_handle_define(). Notice how it literally <br />checks that any previous #define is identical in both expansion and <br />argument list, with:<br /><br />		if (token_list_different(sym-&gt;expansion, expansion) ||<br />		    token_list_different(sym-&gt;arglist, arglist)) {<br /><br />and just make token_list_different() always return true (this is the only <br />use of that function).<br /><br />I haven't checked if such a change would actually result in a lot of <br />warnings.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
