    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/7/31/203">First message in thread</a></li><li><a href="/lkml/2009/7/31/238">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/31/244">Ulrich Drepper</a><ul><li class="origin"><a href="/lkml/2009/8/1/22">Linus Torvalds</a><ul><li><a href="/lkml/2009/8/1/22">Jakub Jelinek</a><ul><li><a href="/lkml/2009/8/1/82">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/8/1/88">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/7/31/262/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 31 Jul 2009 17:28:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] information leak in sigaltstack</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />[ Cc'ing jakub, since that code generation looks crappy, and I think he <br />  has worked on gcc memset(). I wonder if it's because we use -Os, and gcc <br />  tries to avoid one REX prefix on the 'stosq'.<br /><br />  I also wonder why gcc doesn't just notice that it should really only <br />  initialize a single 4-byte word (no rep, no prefix, no nothing, just a <br />  single "movl $0,44(%ebp)") - so even with the -Os, that is just wrong, <br />  and it would have been better to do as multiple stores and then noticing <br />  that most of them end up dead ]<br /><br />On Fri, 31 Jul 2009, Ulrich Drepper wrote:<br />&gt; <br />&gt; I was just composing a reply with basically this.  So  you'll apply this<br />&gt; and don't wait for me to send a new version of the patch, right?<br /><br />Grr. Gcc creates truly crap code for this trivial 24-byte memset. Why does <br />it do that?<br /><br />gcc knows the alignment is 8 bytes, but it still uses 6 4-byte stores <br />instead of 3 8-byte ones. And it does it with this:<br /><br />        xorl    %eax, %eax      # tmp88<br />        leaq    -48(%rbp), %rsi #, tmp86<br />        movl    $6, %ecx        #, tmp89<br />        movq    %rsi, %rdi      # tmp86, tmp87<br />        rep stosl<br /><br />which is just incredibly lame in so many ways.<br /><br />And it doesn't optimize anything away, even though the next lines will <br />then re-initialize 20 of the 24 bytes.<br /><br />Now, maybe this isn't performance-critical, but it just makes me feel that <br />there has to be a better way to make gcc DTRT. <br /><br />Here's the patch I used, just for posterity. I can't decide if I really <br />want to commit this crap. But at least on 32-bit architectures the <br />"alignof" testing should remove the horrid code. I do wonder why gcc <br />thinks that 32-bit writes are a good idea in this case, though.<br /><br />		Linus<br /><br />---<br /> kernel/signal.c |    3 +++<br /> 1 files changed, 3 insertions(+), 0 deletions(-)<br /><br />diff --git a/kernel/signal.c b/kernel/signal.c<br />index ccf1cee..b990dc8 100644<br />--- a/kernel/signal.c<br />+++ b/kernel/signal.c<br />&#64;&#64; -2455,6 +2455,9 &#64;&#64; do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long s<br /> 	int error;<br /> <br /> 	if (uoss) {<br />+		/* Fill cracks around 'ss_flags' */<br />+		if (__alignof__(oss.ss_flags) != __alignof__(oss))<br />+			memset(&amp;oss, 0, sizeof(oss));<br /> 		oss.ss_sp = (void __user *) current-&gt;sas_ss_sp;<br /> 		oss.ss_size = current-&gt;sas_ss_size;<br /> 		oss.ss_flags = sas_ss_flags(sp);<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
