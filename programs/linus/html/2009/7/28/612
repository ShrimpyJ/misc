    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/7/23/289">First message in thread</a></li><li><a href="/lkml/2009/7/28/554">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/28/602">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/29/32">"Aneesh Kumar K.V"</a></li></ul></li><li><a href="/lkml/2009/7/28/606">Alan Cox</a><ul><li class="origin"><a href="/lkml/2009/7/28/617">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/28/617">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/29/108">Alan Cox</a></li></ul></li><li><a href="/lkml/2009/7/29/65">Alan Cox</a><ul><li><a href="/lkml/2009/7/29/269">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2009/7/28/633">Gene Heskett</a><ul><li><a href="/lkml/2009/7/29/5">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/29/6">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/29/9">Gene Heskett</a></li></ul></li><li><a href="/lkml/2009/7/29/7">Gene Heskett</a><ul><li><a href="/lkml/2009/7/29/10">Andrew Morton</a></li></ul></li><li><a href="/lkml/2009/7/29/104">Alan Cox</a><ul><li><a href="/lkml/2009/7/29/320">Gene Heskett</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Jul 2009 18:04:30 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] kdesu broken</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 29 Jul 2009, Alan Cox wrote:<br />&gt; <br />&gt; The rules for hangup and thus hot unplug etc are<br />&gt; <br />&gt; - The driver ensures that it will not call<br />&gt;   tty_flip_buffer_push/flush_to_ldisc again for this port until re-opened<br /><br />That's just bogus.<br /><br />The work is already scheduled to be flushed by a timer. The only thing we <br />do is to make it happen _immediately_ (rather than later) when we do that <br />tty_flush_to_ldisc().<br /><br />IOW, it's not changing what the kernel _does_. It's just moving something <br />that will be done to a slightly earlier point.<br /><br />If that is wrong as per hangup code, then the bug is in the hangup <br />handling, not in the tty_flush_to_ldisc().<br /><br />&gt; - The driver calls tty_hangup<br />&gt; - tty_hangup ensures that tty_flip_buffer_push cannot occur again<br />&gt;   (by killing the workqueue)<br />&gt; - resources may well then get freed before close()<br /><br />They had better not be, since all the data structures touched are inside <br />the 'tty_struct' (which we're dereferencing in other ways anyway in that <br />whole routine).<br /><br />So the only thing that the hangup code needs to do is to make that the <br />"tty-&gt;buf.work.work" function pointer is a nop. And it does, as far as I<br />can tell.<br /><br />&gt; The same rules apply for an ldisc change via TIOCSETD<br />&gt; <br />&gt; Ogawa's patch violates this by calling tty_flush_to_ldisc. If that<br />&gt; bridges a hangup then it will call into the ldisc for the dead port and<br />&gt; that in turn will call the write method of the driver which will in some<br />&gt; cases jump to free memory.<br /><br />What you describe is just crazy talk. If Ogawa's fix really causes <br />problems, then the hangup code is broken, not Ogawa's trivial patch to <br />make sure the work is done when trying to read a tty.<br /><br />So regardless, by now we have moved from "trivial bug that bites people in <br />real life" to "theoretical bug that looks impossible to trigger".<br /><br />That's already a big step forward - along with making the code make more <br />sense. Which is always good in itself.<br /><br />&gt; The hangup is tty_io:do_tty_hangup which calls tty_ldisc:<br />&gt; tty_ldisc_hangup which calls ld-&gt;ops-&gt;hangup which n_tty doesn't<br />&gt; currently have but which it could grow and which may block.<br /><br />Well, put this way: the only thing that actually stops the outstanding <br />timer (for the delayed work) is the tty_ldisc_halt() call in <br />tty_ldisc_hangup(). If that _isn't_ called, then your argument is <br />pointless, since the tty_flush_to_ldisc() will be done by a timer later <br />(and Ogawa's patch thus clearly introduces nothing new).<br /><br />And when it _is_ called, it also clears TTY_LDISC, so now tty_ldisc_ref() <br />will return NULL, so then flush_to_ldisc() will be a no-op.<br /><br />So as far as I can tell, we already protect against this whole case: if we <br />call flush_to_ldisc() after the tty has been HUP'ed, it just won't _do_ <br />anything (unless the work hasn't been canceled, but in that case the timer <br />would have done the same thing, so nothing new is introduced).<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
