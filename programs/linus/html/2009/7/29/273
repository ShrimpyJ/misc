    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/7/20/1">First message in thread</a></li><li><a href="/lkml/2009/7/22/291">Linus Torvalds</a><ul><li><a href="/lkml/2009/7/29/242">Pavel Machek</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 29 Jul 2009 08:59:05 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.27.27</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 29 Jul 2009, Pavel Machek wrote:<br />&gt; <br />&gt; So... we are going to just work around the gcc bug in the kernel?<br /><br />Well, the gcc people hopefully will fix it in the 4.2.4 tree too.<br /><br />Also, it's not exactly the first time we work around compiler bugs. We've <br />done it before, I'm sure we'll do it again.<br /><br />In this case, the work-around is trivial, and in many ways makes the code <br />more "normal" (it's just a loop counter, might as well use an "int" for <br />it), so there are no downsides to it. <br /><br />We could disallow gcc-4.2.4 entirely, of course, and have a big "this <br />compiler is known to generate broken code" message and refuse to compile <br />the kernel with it, but while that would be a "safer" approach, it would <br />be rather user-unfriendly.<br /><br />Compiler bugs happen. They're really really annoying, and nasty to track <br />down. But they aren't the end of the world, and the pattern of this <br />particular bug doesn't seem like it would likely trigger anywhere else.<br /><br />For example, I suspect it really does need that loop induction variable to <br />be 'unsigned char', and it really needs that limit to be exactly 128. It <br />looks like a combination of loop optimization and broken range logic. I <br />doubt it would hit in some random code that just happens to compare an <br />unsigned char against 128 in general.<br /><br />And using 'unsigned char' as a lop induction variable is _very_ rare. <br />Which is probably why the gcc bug happened in the first place - no <br />testing.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
