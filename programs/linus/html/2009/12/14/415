    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/5/107">First message in thread</a></li><li><a href="/lkml/2009/12/14/270">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/14/395">"Rafael J. Wysocki"</a><ul><li class="origin"><a href="/lkml/2009/12/14/416">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/14/416">Linus Torvalds</a></li><li><a href="/lkml/2009/12/14/444">"Rafael J. Wysocki"</a><ul><li><a href="/lkml/2009/12/14/465">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/12/14/415/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 14 Dec 2009 14:41:41 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Async suspend-resume patch w/ completions (was: Re: Async suspend-resume patch w/ rwsems)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 14 Dec 2009, Rafael J. Wysocki wrote:<br />&gt;<br />&gt; OK, what about a two-pass approach in which the first pass only inits the<br />&gt; completions and starts async threads for leaf "async" devices?  I think leaf<br />&gt; devices are most likely to take much time to suspend, so this will give us<br />&gt; a chance to save quite some time.<br /><br />Why?<br /><br />Really.<br /><br />Again, stop making it harder than it needs to be.<br /><br />Why do you make up these crazy schemes that are way more complex than they <br />need to be?<br /><br />Here's an untested one-liner that has a 10-line comment.<br /><br />I agree it is ugly, but it is ugly exactly because the generic device <br />layer _forces_ us to wait for children even when we don't want to. With <br />this, that unnecessary wait is now done asynchronously.<br /><br />I'd rather do it some other way - perhaps having an explicit flag that <br />says "don't wait for children because I'm not going to suspend myself <br />until 'suspend_late' _anyway_". But at least this is _simple_.<br /><br />		Linus<br /><br />---<br /> drivers/pci/probe.c |   11 +++++++++++<br /> 1 files changed, 11 insertions(+), 0 deletions(-)<br /><br />diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c<br />index 98ffb2d..4e0ad7b 100644<br />--- a/drivers/pci/probe.c<br />+++ b/drivers/pci/probe.c<br />&#64;&#64; -437,6 +437,17 &#64;&#64; static struct pci_bus *pci_alloc_child_bus(struct pci_bus *parent,<br /> 	}<br /> 	bridge-&gt;subordinate = child;<br /> <br />+	/*<br />+	 * We don't really suspend PCI buses asyncronously.<br />+	 *<br />+	 * However, since we don't actually suspend them at all until<br />+	 * the late phase, we might as well lie to the device layer<br />+	 * and it to do our no-op not-suspend asynchronously, so that<br />+	 * we end up not synchronizing with any of our child devices<br />+	 * that might want to be asynchronous.<br />+	 */<br />+	bridge-&gt;dev.power.async_suspend = 1;<br />+<br /> 	return child;<br /> }<br /> <br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
