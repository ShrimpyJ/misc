    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/17/243">First message in thread</a></li><li><a href="/lkml/2009/12/23/154">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/23/156">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2009/12/23/162">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/23/162">Andi Kleen</a><ul><li><a href="/lkml/2009/12/25/31">Arjan van de Ven</a></li><li><a href="/lkml/2009/12/28/227">Pavel Machek</a></li></ul></li><li><a href="/lkml/2009/12/23/165">"Pallipadi, Venkatesh"</a><ul><li><a href="/lkml/2009/12/23/168">Andi Kleen</a></li></ul></li><li><a href="/lkml/2009/12/23/236">alain</a></li></ul></li><li><a href="/lkml/2009/12/23/179">Mark Hounschell</a><ul><li><a href="/lkml/2009/12/23/186">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/23/190">Mark Hounschell</a></li></ul></li><li><a href="/lkml/2009/12/23/207">"Pallipadi, Venkatesh"</a><ul><li><a href="/lkml/2009/12/23/215">Mark Hounschell</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/12/23/159/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Dec 2009 08:49:38 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Fdutils] DMA cache consistency bug introduced in 2.6.28</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 23 Dec 2009, Andi Kleen wrote:<br />&gt; <br />&gt; I suspect it's a system where the APIC timer stops in deeper idle<br />&gt; states and it supports them. In this case CPU #0 does timer broadcasts<br />&gt; when needed to wake the other CPUs up from deep C, but for that it has<br />&gt; to run with HPET. At least the other ones can still enjoy the LAPIC<br />&gt; timer.<br /><br />Ahh, ok, that makes sense. I was assuming the broadcast timer would act in <br />that capacity, but..<br /><br />&gt; This might suggest that Mark's floppy controller doesn't like<br />&gt; deep C? Mark, did you try booting with processor.max_cstate=1<br />&gt; and HPET enabled?<br /><br />We have indeed had historical issues with floppy and sleep states before. <br /><br />I do note another issue, though - the floppy driver itself seems totally <br />broken when it comes to using interleaved sectors. Alain, that "place <br />logical sectors" code is simply _broken_ - the "while" kicks in only if <br />the first sector we test is busy _and_ we were at the last sector so that <br />we increment past F_SECT_PER_TRACK.<br /><br />So shouldn't that sector layout be something like the appended?<br /><br />		Linus<br />---<br /> drivers/block/floppy.c |    7 ++-----<br /> 1 files changed, 2 insertions(+), 5 deletions(-)<br /><br />diff --git a/drivers/block/floppy.c b/drivers/block/floppy.c<br />index 3266b4f..9c9148c 100644<br />--- a/drivers/block/floppy.c<br />+++ b/drivers/block/floppy.c<br />&#64;&#64; -2237,13 +2237,10 &#64;&#64; static void setup_format_params(int track)<br /> 	for (count = 1; count &lt;= F_SECT_PER_TRACK; ++count) {<br /> 		here[n].sect = count;<br /> 		n = (n + il) % F_SECT_PER_TRACK;<br />-		if (here[n].sect) {	/* sector busy, find next free sector */<br />+		while (here[n].sect) {	/* sector busy, find next free sector */<br /> 			++n;<br />-			if (n &gt;= F_SECT_PER_TRACK) {<br />+			if (n &gt;= F_SECT_PER_TRACK)<br /> 				n -= F_SECT_PER_TRACK;<br />-				while (here[n].sect)<br />-					++n;<br />-			}<br /> 		}<br /> 	}<br /> 	if (_floppy-&gt;stretch &amp; FD_SECTBASEMASK) {<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
