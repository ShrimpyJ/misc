    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/23/217">First message in thread</a></li><li><a href="/lkml/2009/12/23/217">Greg KH</a><ul><li class="origin"><a href="/lkml/2009/12/23/326">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/23/326">Greg KH</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Dec 2009 13:48:09 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PATCH] USB patches for 2.6.33-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 23 Dec 2009, Greg KH wrote:<br />&gt; <br />&gt; They do:<br />&gt; 	- reorg the device ids in one usb-serial driver.  I took this<br />&gt; 	  now as it's a merge pressure point, and this is just a code<br />&gt; 	  move now, no functionality changed at all.  It's odd that git<br />&gt; 	  didn't show this as a code move in the diffstat, I used:<br />&gt; 	  	git diff -m --stat --summary<br />&gt; 	  to generate the diffstat.  Should I be doing something else?<br />&gt; 	  Or is it because the code is being removed from one file and<br />&gt; 	  placed in another one?<br /><br />Since the old file stays around, git doesn't consider it a rename.<br /><br />Now, you can actually change that a bit. You can use -C instead of -M, <br />which enables copy-detection rather than just renames, and then it changes <br />from<br /><br /> drivers/usb/serial/ftdi_sio.c           |    1 +<br /> drivers/usb/serial/ftdi_sio.h           |  959 +------------------------------<br /> drivers/usb/serial/ftdi_sio_ids.h       |  986 +++++++++++++++++++++++++++++++<br /><br />to<br /><br /> drivers/usb/serial/ftdi_sio.c                     |    1 +<br /> drivers/usb/serial/ftdi_sio.h                     |  959 +-----------<br /> drivers/usb/serial/{ftdi_sio.h =&gt; ftdi_sio_ids.h} | 1785 ++++++++-------------<br /> copy drivers/usb/serial/{ftdi_sio.h =&gt; ftdi_sio_ids.h} (65%)<br /><br />which isn't actually any better (since while it notices the copy of the <br />data, it _removes_ all the code whily copying, so the total number of <br />lines actually goes up!).<br /><br />So -M doesn't really "help" in that the diff itself does end up larger, <br />but at the same time it is somewhat informative in the sense that you do <br />see where the data comes from.<br /><br />To see another facet of it all, you could also use "-B" to say that you <br />want to Break all old name associations if a file has changed a lot, and <br />then enable rename (or copy) detection, and get<br /><br /> drivers/usb/serial/ftdi_sio.c                     |    1 +<br /> drivers/usb/serial/ftdi_sio.h                     | 2063 ++++++---------------<br /> drivers/usb/serial/{ftdi_sio.h =&gt; ftdi_sio_ids.h} | 1785 +++++++------------<br /> rewrite drivers/usb/serial/ftdi_sio.h (68%)<br /> rename drivers/usb/serial/{ftdi_sio.h =&gt; ftdi_sio_ids.h} (65%)<br /><br />which is the largest of all diffs but it shows another side of the <br />situation: that sio.h file has is now a "rewrite", and the end result is <br />substantially different from the original. So git shows it as a "rename in <br />place" where the diff shows up as a total delete followed by a total <br />addition.<br /><br />As you can see, git does see that you moved data around, but since a lot <br />of the data also _stayed_ in the original file, the copy/break operations <br />really don't help. You cannot show "copy this part of this file into that <br />other file" as a diff.<br /><br />Btw, we _do_ do the "copy this part of this file into that other file" <br />when you do "git blame -C", so you can now do<br /><br />	git blame -C drivers/usb/serial/ftdi_sio_ids.h<br /><br />and it will follow the history of the lines in that file back to the <br />ftdi_sio.h file. So the fact that git doesn't show it in the diffs is <br />really because diffs always work on a whole-file basis (ie you can show a <br />"rename file" diff, but you can't show a "move one function or a set of <br />ID's from one file to another" diff.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
