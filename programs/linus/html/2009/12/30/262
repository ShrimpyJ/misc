    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/24/130">First message in thread</a></li><li><a href="/lkml/2009/12/26/12">Borislav Petkov</a><ul><li><a href="/lkml/2009/12/27/175">KOSAKI Motohiro</a><ul><li class="origin"><a href="/lkml/2009/12/30/278">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/30/278">(Eric W. Biederman)</a><ul><li><a href="/lkml/2009/12/30/292">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Dec 2009 13:10:51 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: drm_vm.c:drm_mmap: possible circular locking dependency detected (was: Re: Linux 2.6.33-rc2 - Merry Christmas ...)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 28 Dec 2009, KOSAKI Motohiro wrote:<br />&gt; &gt;        [&lt;ffffffff810694c0&gt;] __lock_acquire+0x1373/0x16fd<br />&gt; &gt;        [&lt;ffffffff8106993c&gt;] lock_acquire+0xf2/0x116<br />&gt; &gt;        [&lt;ffffffff810bb2b5&gt;] might_fault+0x95/0xb8			&lt;- mmap_sem<br />&gt; &gt;        [&lt;ffffffff810e87d6&gt;] filldir+0x75/0xd0				&lt;- sysfs_mutex<br />&gt; &gt;        [&lt;ffffffff8112be2a&gt;] sysfs_readdir+0x10f/0x149<br />&gt; <br />&gt; This output seems to suggest need to fix drm.<br /><br />Actually, this painful dependency may technically be a bug in drm, but at <br />the same time, it's really filldir() that makes it _very_ hard for certain <br />locking scenarios because it has that callback to the VFS layer that takes <br />the mmap_sem, and sysfs itself wants the sysfs_mutex in paths where it is <br />not at all unreasonable to hold the mmap_sem.<br /><br />We've seen it several times (yes, mostly with drm, but it's been seen with <br />others too), and it's very annoying. It can be fixed by having very <br />careful readdir implementations, but I really would blame sysfs in <br />particular for having a very annoying lock reversal issue when used <br />reasonably.<br /><br />So the optimal situation would be for sysfs to not have that annoying lock <br />dependency, and it would really have to be sysfs_readdir() that drops the <br />sysfs_mutex around the filldir call (and that obviously implies having to <br />re-validate and be really careful).<br /><br />Added Eric and Greg to the cc, in case the sysfs people want to solve it.<br /><br />The other alternative would be to fix this on a VFS layer by changing how <br />'readdir/filldir' interacts, and instead make it fill in a kernel buffer - <br />avoiding the mmap_sem issue entirely. And than later (in readdir) that <br />kernel buffer could be copied to user space without holding any other <br />locks.<br /><br />I like the VFS approach because I think we could possibly use that as a <br />first approach to eventually try to think about caching readdir() results <br />at a VFS level - readdir() is currently the _only_ main filesystem <br />callback that always calls into the low-level filesystem, and always takes <br />a lot of locks. I'm adding Al to the Cc for that - he knows about this <br />issue from me previously thinking aloud along these lines.<br /><br />And yes, one option would be to just fix drm - by avoiding calling any <br />sysfs functions while holding the mmap_lock (either in the mmap callback <br />or the page fault paths). However, as mentioned, I really do think that <br />the blame can be laid on sysfs for trying to be a nice generic interface, <br />but having a damn inconvenient locking model.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
