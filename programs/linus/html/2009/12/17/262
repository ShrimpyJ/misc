    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/17/243">First message in thread</a></li><li><a href="/lkml/2009/12/17/243">Alain Knaff</a><ul><li class="origin"><a href="/lkml/2009/12/17/293">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/17/293">Krzysztof Halasa</a></li><li><a href="/lkml/2009/12/17/367">Alain Knaff</a><ul><li><a href="/lkml/2009/12/17/372">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/17/390">Alain Knaff</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Dec 2009 09:27:56 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: DMA cache consistency bug introduced in 2.6.28 (Was: Re: [Fdutils] Cannot format floppies under kernel 2.6.*?)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 17 Dec 2009, Alain Knaff wrote:<br />&gt; <br />&gt; 1. initial contents:  33 44 55 66<br />&gt; 2. one DMA transfer is performed<br />&gt; 3. program changes buffer to: 77 88 99 aa<br />&gt; 4. new DMA transfer is performed =&gt; instead it transmits 33 88 99 aa<br />&gt;    (i.e. first byte is from previous contents)<br />&gt; <br />&gt; This used to work in 2.6.27.41, but broke in 2.6.28 . It doesn't happen on<br />&gt; all hardware though.<br /><br />Do you have a list of hardware it works on? Especially chipsets.<br /><br />On x86, where all caches are supposed to be totally coherent (except for <br />I$ under very special circumstances), the above should never be able to <br />happen. At least not unless there is really buggy hardware involved.<br /><br />&gt; It does indeed seem to be related to a DMA-side cache (rather than the<br />&gt; processor's cache not being flushed to main memory), as doing lots of<br />&gt; memory intensive work (kernel compilation) between 2 and 3 doesn't fix the<br />&gt; problem.<br /><br />I'm not entirely surprised. Actual CPU bugs are pretty rare in the x86 <br />world. But chipset bugs? Another thing entirely. There are buffers and <br />caches there, and those are sometimes software-visible. The most obvious <br />case of that is just the IOMMU's themselves, but from your description I <br />don't think you actually change the DMA _mappings_ do you? Just the <br />actual buffer (that was then mapped earlier)?<br /><br />So I don't think it's the IOMMU code itself necessarily, although an IOMMU <br />may well be involved (eg I could easily see a few cachelines worth of <br />actual DMA data caching going on in the whole IOMMU too)<br /><br />And to some degree the floppy driver might be _more_ likely to see some <br />kinds of bugs, because it uses that crazy legacy DMA engine. So it's not <br />going to go through the regular PCI DMA hardware paths, it's going to go <br />through its own special paths that nobody else uses any more (and thus has <br />probably not had as much testing).<br /><br />&gt; In the diff between 2.6.27.41 and 2.6.28, I noticed a lot of changes in<br />&gt; arch/x86/kernel/amd_iommu.c and related files, could any of these have<br />&gt; triggered this behavior?<br /><br />Could it have triggered? Sure. Chipset caches are often flushed by certain <br />trivial operations (often the caches are small, and operations like "any <br />PIO access" will make sure they are flushed). Different IOMMU flush <br />patterns could easily account for it.<br /><br />But I think we'd like to see a list of hardware where this can be <br />triggered, and quite frankly, a 'git bisect' would be absolutely wonderful <br />especially if the list of hardware is not showing any really obvious <br />patterns (and I assume they aren't all _that_ obvious, or you'd have <br />mentioned them).<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
