    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/15/669">First message in thread</a></li><li><a href="/lkml/2009/12/17/226">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/17/233">	tytso&#64;mit ...</a><ul><li class="origin"><a href="/lkml/2009/12/17/247">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/17/247">Christoph Hellwig</a><ul><li><a href="/lkml/2009/12/17/268">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2009/12/17/267">	tytso&#64;mit ...</a><ul><li><a href="/lkml/2009/12/17/272">Linus Torvalds</a></li><li><a href="/lkml/2009/12/17/439">FUJITA Tomonori</a></li></ul></li></ul></li><li><a href="/lkml/2009/12/17/249">Christoph Hellwig</a><ul><li><a href="/lkml/2009/12/17/265">	tytso&#64;mit ...</a></li><li><a href="/lkml/2009/12/17/304">Andi Kleen</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Dec 2009 08:46:33 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git patches] xfs and block fixes for virtually indexed arches</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 17 Dec 2009, tytso&#64;mit.edu wrote:<br />&gt; <br />&gt; That's because apparently the iSCSI and DMA blocks assume that they<br />&gt; have Real Pages (tm) passed to block I/O requests, and apparently XFS<br />&gt; ran into problems when sending vmalloc'ed pages.  I don't know if this<br />&gt; is a problem if we pass the bio layer addresses coming from the SLAB<br />&gt; allocator, but oral tradition seems to indicate this is problematic,<br />&gt; although no one has given me the full chapter and verse explanation<br />&gt; about why this is so.<br /><br />kmalloc() memory should be ok. It's backed by "real pages". Doing the DMA <br />translations for such pages is trivial and fundamental.<br /><br />In contrast, vmalloc is pure and utter unadulterated CRAP. The pages <br />may be contiguous virtually, but it makes no difference for the block <br />layer, that has to be able to do IO by DMA anyway, so it has to look up <br />the page translations in the page tables etc crazy sh*t.<br /><br />So passing vmalloc'ed page addresses around to something that will <br />eventually do a non-CPU-virtual thing on them is fundamentally insane. The <br />vmalloc space is about CPU virtual addresses. Such concepts simpyl do not <br />-exist- for some random block device.<br /><br />&gt; Now that I see Linus's complaint, I'm wondering if the issue is really<br />&gt; about kernel virtual addresses (i.e., coming from vmalloc), and not a<br />&gt; requirement for Real Pages (i.e., coming from the SLAB allocator as<br />&gt; opposed to get_free_page).  And can this be documented someplace?  I<br />&gt; tried looking at the bio documentation, and couldn't find anything<br />&gt; definitive on the subject.<br /><br />The whole "vmalloc is special" has always been true. If you want to <br />treat vmalloc as normal memory, you need to look up the pages yourself. We <br />have helpers for that (including helpers that populate vmalloc space from <br />a page array to begin with - so you can _start_ from some array of pages <br />and then lay them out virtually if you want to have a convenient CPU <br />access to the array).<br /><br />And this whole "vmalloc is about CPU virtual addresses" is so obviously <br />and fundamentally true that I don't understand how anybody can ever be <br />confused about it. The "v" in vmalloc is for "virtual" as in virtual <br />memory.<br /><br />Think of it like virtual user addresses. Does anybody really expect to be <br />able to pass a random user address to the BIO layer?<br /><br />And if you do, I would suggest that you get out of kernel programming <br />pronto. You're a danger to society, and have a lukewarm IQ. I don't want <br />you touching kernel code.<br /><br />And no, I do _not_ want the BIO layer having to walk page tables. Not for <br />vmalloc space, not for user virtual addresses.<br /><br />(And don't tell me it already does. Maybe somebody sneaked it in past me, <br />without me ever noticing. That wouldn't be an excuse, that would be just <br />sad. Jesus wept)<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
