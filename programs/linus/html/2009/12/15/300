    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/5/107">First message in thread</a></li><li><a href="/lkml/2009/12/15/285">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/15/289">Alan Stern</a><ul><li class="origin"><a href="/lkml/2009/12/15/357">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/15/357">Linus Torvalds</a></li><li><a href="/lkml/2009/12/15/435">Alan Stern</a><ul><li><a href="/lkml/2009/12/15/470">"Rafael J. Wysocki"</a></li><li><a href="/lkml/2009/12/15/502">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2009/12/15/627">"Rafael J. Wysocki"</a><ul><li><a href="/lkml/2009/12/16/54">Dmitry Torokhov</a><ul><li><a href="/lkml/2009/12/19/63">"Rafael J. Wysocki"</a><ul><li><a href="/lkml/2009/12/19/83">Dmitry Torokhov</a></li></ul></li></ul></li><li><a href="/lkml/2009/12/16/147">Alan Stern</a><ul><li><a href="/lkml/2009/12/16/311">"Rafael J. Wysocki"</a></li></ul></li><li><a href="/lkml/2009/12/16/160">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/16/313">"Rafael J. Wysocki"</a><ul><li><a href="/lkml/2009/12/16/344">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Dec 2009 08:28:22 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Async suspend-resume patch w/ completions (was: Re: Async suspend-resume patch w/ rwsems)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 15 Dec 2009, Alan Stern wrote:<br />&gt; <br />&gt; It doesn't feel like an ugly hack to me.  It seems like exactly the <br />&gt; Right Thing To Do: Make as many devices as possible use async <br />&gt; suspend/resume.<br /><br />The reason it's a ugly hack is that it's actually not a simple decision to <br />make. The devil is in the details:<br /><br />&gt; The only reason we don't make every device async is because we don't<br />&gt; know whether it's safe.  In the case of PCI bridges we _do_ know --<br />&gt; because they don't have any work to do outside of<br />&gt; late_suspend/early_resume -- and so they _should_ be async.<br /><br />That's the theory, yes. And it was worth the comment to spell out that <br />theory. But..<br /><br />It's a very subtle theory, and it's not necessarily always 100% true. For <br />example, a cardbus bridge is strictly speaking very much a PCI bridge, but <br />for cardbus bridges we _do_ have a suspend/resume function.<br /><br />And perhaps worse than that, cardbus bridges are one of the canonical <br />examples where two different PCI devices actually share registers. It's <br />quite common that some of the control registers are shared across the two <br />subfunctions of a two-slot cardbus controller (and we generally don't even <br />have full docs for them!)<br /><br />&gt; The same goes for devices that don't have suspend or resume methods.<br /><br />Yes and no. <br /><br />Again, the "async_suspend" flag is done at the generic device layer, but <br />99% of all suspend/resume methods are _not_ done at that level: they are <br />bus-specific functions, where the bus has a generic suspend-resume <br />function that it exposes to the generic device layer, and that knows about <br />the bus-specific rules.<br /><br />So if you are a PCI device (to take just that example - but it's true of <br />just about all other buses too), and you don't have any suspend or resume <br />methods, it's actually impossible to see that fact from the generic device <br />layer.<br /><br />And even when you know it's PCI, our rules are actually not simple at all. <br />Our rules for PCI devices (and this strictly speaking is true for bridges <br />too) are rather complex:<br /><br /> - do we have _any_ legacy PM support (ie the "direct" driver <br />   suspend/resume functions in the driver ops, rather than having a <br />   "struct dev_pm_ops" pointer)? If so, call "-&gt;suspend()"<br /><br /> - If not - do we have that "dev_pm_ops" thing? If so, call it.<br /><br /> - If not - just disable the device entirely _UNLESS_ you're a PCI bridge.<br /><br />Notice? The way things are set up, if you have no suspend routine, you'll <br />not get suspended, but you will get disabled. <br /><br />So it's _not_ actually safe to asynchronously suspend a PCI device if that <br />device has no driver or no suspend routines - because even in the absense <br />of a driver and suspend routines, we'll still least disable it. And if <br />there is some subtle dependency on that device that isn't obvious (say, it <br />might be used indirectly for some ACPI thing), then that async suspend is <br />the wrong thing to do.<br /><br />Subtle? Hell yes.<br /><br />So the whole thing about "we can do PCI bridges asynchronously because <br />they are obviously no-op" is kind of true - except for the "obviously" <br />part. It's not obvious at all. It's rather subtle.<br /><br />As an example of this kind of subtlety - iirc PCIE bridges used to have <br />suspend and resume bugs when we initially switched over to the "new world" <br />suspend/resume exactly because they actually did things at "suspend" time <br />(rather than suspend_late), and that broke devices behind them (this was <br />not related to async, of course, but the point is that even when you look <br />like a PCI bridge, you might be doing odd things).<br /><br />So just saying "let's do it asynchronously" is _not_ always guaranteed to <br />be the right thing at all. It's _probably_ safe for at least regular PCI <br />bridges. Cardbus bridges? Probably not, but since most modern laptop have <br />just a single slot - and people who have multiple slots seldom use them <br />all - most people will probably never see the problems that it _could_ <br />introduce.<br /><br />And PCIE bridges? Should be safe these days, but it wasn't quite as <br />obvious, because a PCIE bridge actually has a driver unlike a regular <br />plain PCI-PCI bridge.<br /><br />Subtle, subtle.<br /><br />&gt; There remains a separate question: Should async devices also be forced<br />&gt; to wait for their children?  I don't see why not.  For PCI bridges it<br />&gt; won't make any significant difference.  As long as the async code<br />&gt; doesn't have to do anything, who cares when it runs?<br /><br />That's why I just set the "async_resume = 1" thing.<br /><br />But there might actually be reasons why we care. Like the fact that we <br />actually throttle the amount of parallel work we do in async_schedule(). <br />So doing even a "no-op" asynchronously isn't actually a no-op: while it is <br />pending (and those things can be pending for a long time, since they have <br />to wait for those slow devices underneath them), it can cause _other_ <br />async work - that isn't necessarily a no-op at all - to be then done <br />synchronously.<br /><br />Now, admittedly our async throttling limits are high enough that the above <br />kind of detail will probably never ever realy matter (default 256 worker <br />threads etc). But it's an example of how practice is different from theory <br />- in _theory_ it doesn't make any difference if you wait for something <br />asynchronously, but in practice it could make a difference under some <br />circumstances.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
