    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/12/18/108">First message in thread</a></li><li><a href="/lkml/2009/12/22/60">Peter Zijlstra</a><ul><li><a href="/lkml/2009/12/22/363">Tejun Heo</a><ul><li class="origin"><a href="/lkml/2009/12/23/5">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/23/5">Ingo Molnar</a><ul><li><a href="/lkml/2009/12/23/7">Jeff Garzik</a></li><li><a href="/lkml/2009/12/23/14">Tejun Heo</a></li><li><a href="/lkml/2009/12/23/100">Stefan Richter</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 22 Dec 2009 20:42:41 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: workqueue thing</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 23 Dec 2009, Tejun Heo wrote:<br />&gt; <br />&gt; So, if we can have a mehanism which can solve these issues, it's an<br />&gt; obvious plus.  Shifting complexity out of peripheral code to better<br />&gt; crafted and managed core code is the right thing to do and it will<br />&gt; shift a lot of complexity out of peripheral codes.<br /><br />I really think this is key. I don't think Peter really has worked much <br />outside of very core code (direct CPU-related stuff), and hasn't seen the <br />kind of annoying problems our current workqueue code has.<br /><br />Half the kernel is drivers. And 95% of all workqueue users are those <br />drivers.<br /><br />Workqueues generally aren't about heavy CPU usage, although some workqueue <br />usage has scalability issues. And the most common scalability problem is <br />not "I need more than one CPU", but often "I need to run even though <br />another workqueue entry is blocked on IO" - iow, it's not about lacking <br />CPU power, it's about in-fighting with other workqueue users.<br /><br />That said, if we can improve on this further, I'd be all for it. I'd love <br />to have some generic async model that really works. So far, our async <br />models have tended to not really work out well, whether they be softirq's <br />or kernel threads (many of the same issues: some subsystems start tons of <br />kernel threads just because one kernel thread blocks, not because you need <br />multi-processor CPU usage per se). And AIO/threadlets never got anywhere <br />etc etc.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
