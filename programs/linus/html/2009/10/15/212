    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/11/195">First message in thread</a></li><li><a href="/lkml/2009/10/14/439">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/15/171">Oleg Nesterov</a><ul><li><a href="/lkml/2009/10/15/203">Oleg Nesterov</a><ul><li><a href="/lkml/2009/10/15/215">Linus Torvalds</a></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Oct 2009 08:53:51 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug #14388] keyboard under X with 2.6.31</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Oct 2009, Oleg Nesterov wrote:<br /><br />&gt; On 10/14, Linus Torvalds wrote:<br />&gt; &gt;<br />&gt; &gt; It's just that we didn't have any way to do that "force the pending<br />&gt; &gt; delayed work to be scheduled", so instead we ran the scheduled function by<br />&gt; &gt; hand synchronously. Which then seems to have triggered other problems.<br />&gt; <br />&gt; Yes. But I am not sure these problems are new.<br /><br />Oh, I agree. I think the locking bug in the tty layer was long-standing, <br />it just was impossible to trigger in practice as long as it was only <br />called through keventd. The window is fairly small, and for many things <br />(like the X keyboard), the amount of data transferred is tiny and you <br />don't actually schedule the workqueue very often at all.<br /><br />&gt; I do not understand this code even remotely, but from a quick grep it <br />&gt; seems to me it is possible that flush_to_ldisc() can race with itself <br />&gt; even without tty_flush_to_ldisc() which calls work-&gt;func() by hand.<br /><br />Yes, but only in the _very_ special case of scheduling the callback at <br />just the right moment. And in fact, traditionally it was always scheduled <br />with a timeout, which makes it even less likely to happen.<br /><br />&gt; Perhaps it makes sense to introduce something like<br />&gt; <br />&gt; 	// same as queue_work(), but ensures work-&gt;func() can't race with itself<br />&gt; <br />&gt; 	int queue_work_xxx(struct workqueue_struct *wq, struct work_struct *work)<br />&gt; 	{<br />&gt; 		int ret = 0;<br />&gt; <br />&gt; 		if (!test_and_set_bit(WORK_STRUCT_PENDING, work_data_bits(work))) {<br />&gt; 			struct cpu_workqueue_struct *cwq = get_wq_data(work);<br />&gt; 			int cpu = get_cpu();<br />&gt; <br />&gt; 			// "cwq-&gt;current_work != work" is not strictly needed,<br />&gt; 			// but we don't want to pin this work to the single CPU.<br />&gt; <br />&gt; 			if (!cwq || cwq-&gt;current_work != work)<br />&gt; 				cwq = wq_per_cpu(wq, cpu);<br />&gt; <br />&gt; 			__queue_work(cwq, work);<br /><br />Yes. Looks good to me. Just forcing the new one to be on the same CPU as <br />the previous one should solve it.<br /><br />And it should even be good for performance to make it "sticky" to the CPU, <br />so I think this could even be done without any new flags or functions.<br /><br />The people who actually want to run work on multiple CPU's in parallel end <br />up always having multiple work structures, so I think the CPU-stickiness <br />is good for everybody.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
