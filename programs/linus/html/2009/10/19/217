    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/14/37">First message in thread</a></li><li><a href="/lkml/2009/10/14/213">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/19/2">Michael Ellerman</a><ul><li class="origin"><a href="/lkml/2009/10/19/312">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/19/312">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2009/10/20/23">Michael Ellerman</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 20 Oct 2009 03:09:57 +0900 (JST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Characters vanishing in the tty layer? (maybe related to [Bug #14388] keyboard under X with 2.6.31)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 19 Oct 2009, Michael Ellerman wrote:<br />&gt; <br />&gt; As Benh said it's not really bisectable on our kernel. But I got Mikey<br />&gt; to bisect it on upstream using a different simulator model, and he<br />&gt; couldn't tie it down. It becomes easier to hit in more recent kernels<br />&gt; (since 27), but he could hit in 25 too.<br /><br />Ok, thanks to the verification.<br /><br />And I think I see why it got easier to hit lately, and to some degree I <br />think we can at least partially avoid it:<br /><br />&gt;       * hvc_console reads all our input and passes it to the tty code<br />&gt;         via tty_insert_flip_char()<br />&gt;       * flush_to_ldisc() runs calling n_tty_receive_buf(), which fills<br />&gt;         4K of tty-&gt;read_buf<br />&gt;       * Once read_buf is full, tty-&gt;receive_room becomes 0 and<br />&gt;         flush_to_ldisc() reschedules itself to run again in 1 jiffy.<br />&gt;       * Bash reads 1 character, causing receive_room to become 1.<br />&gt;       * flush_to_ldisc() runs again and inserts 1 more char because<br />&gt;         receive_room is now 1.<br /><br />.. ok, I agree that our behavior in the "buffer full" case is likely not <br />wonderful. And that's especially true in the 'icanon' case..<br /><br />&gt;       * (repeat the last two steps a few times)<br />&gt;       * Bash sets tty-&gt;icanon = 1 via n_tty_set_termios(), which calls<br />&gt;         n_tty_set_room(). Because icanon is enabled, n_tty_set_room()<br />&gt;         lies and says we have space for 1 character even though we<br />&gt;         don't.<br /><br />So just to clarify - icanon wasn't set before?<br /><br />&gt;       * flush_to_ldisc() runs, sees that receive_room is 1 and calls<br />&gt;         n_tty_receive_buf()<br />&gt;       * n_tty_receive_buf() calls n_tty_receive_char() which drops the<br />&gt;         character because there's no room (~ line 1132).<br />&gt;       * We keep dropping characters until we see a newline, which<br />&gt;         increments tty-&gt;canon_data, causing n_tty_set_room() to report 0<br />&gt;         space left, and so flush_to_ldisc() reschedules again.<br /><br />Did you have newlines in the big bulk dump?<br /><br />If there really aren't any newlines, I don't think we can do a lot. icanon <br />handling kind of fundamentally doesn't work if there is no newline at all, <br />since it is all about line buffering, and we obviously have to limit the <br />lines _somewhere_.<br /><br />But I also thihk that we only update that whole 'canon_data' thing if we <br />_received_ the newlines while we were in icanon mode (but I didn't really <br />check very closely), so if we actually switch from -icanon to +icanon, I <br />think canon_data can be confused, and we thus handle the buffer-full case <br />worse than we _could_ have.<br /><br />&gt; It's a bit unfortunate that n_tty_set_room() lies about the available<br />&gt; space when icanon = 1, but it makes sense in order to handle erase. It<br />&gt; would be nice if n_tty_receive_buf() returned a status to<br />&gt; flush_to_disc() to say "actually I could only fit X chars after all,<br />&gt; please take them back" - but I don't grok how that would play with all<br />&gt; the other logic in there.<br /><br />Yeah, I don't think that is even worth it. The thing is, we do have to <br />start dropping characters at some point, so trying to extend the non-drop <br />case just moves it somewhere else. If you are in canon mode, and the line <br />is longer than &lt;some-number-that-happens-to-be-4kB&gt;, you're basically <br />screwed.<br /><br />But what we _might_ do is to handle the "turn on canon mode" case better, <br />in case the old buffer had newlines. IOW, instead of always setting <br />'canon_data' to 0 when icanon changes (and setting canon_head to the tail <br />of the data), maybe we should simply _count_ the number of newlines (and <br />set canon_head to the last one in the buffer).<br /><br />IOW, if you do have newlines in your bulk data before icanon got set, we <br />could probably make n_tty handle that case better.<br /><br />That said, as far as I know, the tty layer behavior in this area has <br />basically always been the way it is. The fact that you can see it more <br />easily is almost certainly just related to just how the buffers that lead <br />up to flush_to_ldisc have grown, and are now allowed to fill up further. <br />So it probably got much easier to trigger, but it is likely not in any way <br />a really new case, and goes back not just to 2.6.25, but probably <br />forever...<br /><br />I wonder a bit what in your particular environment makes this problem show <br />up, but I assume that your simulation environment ends up just blindly <br />stuffing the tty buffers through the virtual console, so you basically <br />have "simulated typing" that was (a) started long before the reader was <br />interested in accepting it and (b) was a huge dump rather than what any <br />real load would be.<br /><br />But if you change n_tty_set_termios() to count newlines when it sets <br />icanon, you might get the behaviour you want, and it would seem to me to <br />be an improvement over what we have now, so I wouldn't object to it, even <br />if I suspect nobody else has ever cared, and would ever care in the <br />future.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
