    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/11/4">First message in thread</a></li><li><a href="/lkml/2009/10/13/242">Simon Kagstrom</a><ul><li><a href="/lkml/2009/10/13/245">Simon Kagstrom</a></li><li><a href="/lkml/2009/10/13/246">Simon Kagstrom</a></li><li><a href="/lkml/2009/10/13/247">Simon Kagstrom</a></li><li><a href="/lkml/2009/10/13/249">Simon Kagstrom</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2009/11/26/119">=?utf-8?B?SsO2cm4=?= Engel</a><ul><li><a href="/lkml/2009/11/30/36">Artem Bityutskiy</a><ul><li><a href="/lkml/2009/11/30/41">=?utf-8?B?SsO2cm4=?= Engel</a></li></ul></li><li><a href="/lkml/2009/11/30/84">Artem Bityutskiy</a><ul><li><a href="/lkml/2009/11/30/98">Simon Kagstrom</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2009/10/13/250">Simon Kagstrom</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 13 Oct 2009 08:37:10 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH/RFC v5 4/5]: core: Add dump device to call on oopses and panics</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 13 Oct 2009, Simon Kagstrom wrote:<br />&gt; +<br />&gt; +struct dump_device {<br /><br />I know I used that name myself in the example code I sent out, but <br />thinking about it more, I hate the name.<br /><br />Most people think a "dump" is something much more than just the kernel <br />messages, so "dump_device" ends up being misleading. And the "device" part <br />is kind of pointless and redundant (it need not be a real device).<br /><br />So I suspect it would be better to name it by what it does, and make it <br />clear what that is.<br /><br />Maybe something like "struct kmsg_dumper" or similar. That is pretty <br />unambiguous, and nobody is going to get confused about what the semantics <br />are.<br /><br />&gt; +	void	(*oops)(struct dump_device *, const char *, unsigned long,<br />&gt; +			const char *, unsigned long);<br />&gt; +	void	(*panic)(struct dump_device *, const char *, unsigned long,<br />&gt; +			const char *, unsigned long);<br /><br />I don't much like this. Why separate 'oops' and 'panic' functions, <br />especially since we migth have many more causes to do a kmsg dump in the <br />future (ie 'shutdown', 'sysrq', 'suspend' etc etc)?<br /><br />So separating them out as two different functions is just wrong. Make it <br />one function, and then perhaps you can add a<br /><br />	enum kmsg_dump_reason {<br />		kmsg_dump_panic,<br />		kmsg_dump_oops,<br />		..<br />	};<br /><br />and pass it as an argument.<br /><br />&gt; +	int	(*setup)(struct dump_device *);<br /><br />Why?<br /><br />There seems to be no reason for this. Who ever registers the dumper should <br />just do the setup call itself. Why would we have a callback that just gets <br />called immediately, rather than have the registration code just do the <br />call itself?<br /><br />&gt; +int register_dumpdevice(struct dump_device *dump, void *priv)<br />&gt; +{<br />&gt; +	/* We need at least one of these set */<br />&gt; +	if (!dump-&gt;oops &amp;&amp; !dump-&gt;panic)<br />&gt; +		return -EINVAL;<br />&gt; +	if (dump-&gt;setup &amp;&amp; dump-&gt;setup(dump) != 0)<br />&gt; +		return -EINVAL;<br /><br />So the above two tests should be pointless.<br /><br />&gt; +	dump-&gt;priv = priv;<br />&gt; +<br />&gt; +	INIT_LIST_HEAD(&amp;dump-&gt;list);<br /><br />Don't do "INIT_LIST_HEAD()" here. It's pointless as far as I can tell (the <br />list_add() will initialize it), but even in general we should basically <br />have basic initialization done by callers if needed.<br /><br />And judging by historical problems in areas like that, we should protect <br />against people registering the same dumper twice. One way to do that would <br />be to perhaps _require_ that the caller has initialized it, and then do a <br /><br />	if (!list_empty(&amp;dump-&gt;list))<br />		return -EBUSY;<br /><br />(but I could also see using just a "registered" flag)<br /><br />&gt; +	write_lock(&amp;dump_list_lock);<br /><br />This looks dubious. Dumping can obviously happen from interrupts, so _if_ <br />you were to protect against dumpers, you'd need to use an interrupt-safe <br />lock.<br /><br />Of course, you do not actually take the lock at dump time (which may be <br />intentional, and that is not necessarily wrong - taking locks at oops time <br />is generally not a good thing to do, and it may be entirely reasonable to <br />say "we take the risk of not locking properly in order to _maybe_ work <br />even if the lock is scrogged").<br /><br />But if you don't take the lock at dump time (or, perhaps preferably, if <br />you make the dump-time lock be a "try_lock()" - maybe the oops is due to <br />dump list corruption, and if the dump_list_lock is held thew oopser <br />should simply not dump!), then you should probably use a spinlock rather <br />than an rwlock.<br /><br />&gt; +	list_for_each_entry(dump, &amp;dump_list, list) {<br />&gt; +		if (panic &amp;&amp; dump-&gt;panic)<br />&gt; +			dump-&gt;panic(dump, s1, l1, s2, l2);<br />&gt; +		else if (!panic &amp;&amp; dump-&gt;oops)<br />&gt; +			dump-&gt;oops(dump, s1, l1, s2, l2);<br />&gt; +	}<br /><br />So this would just become<br /><br />	list_for_each_entry(dump, &amp;dump_list, list)<br />		dump-&gt;fn(dump, s1, l1, s2, l2, reason);<br /><br />or something.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
