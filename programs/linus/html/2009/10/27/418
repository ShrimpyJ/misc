    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/27/13">First message in thread</a></li><li><a href="/lkml/2009/10/27/400">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/27/404">Stephen Hemminger</a><ul><li class="origin"><a href="/lkml/2009/10/27/430">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/27/430">Stephen Hemminger</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Oct 2009 17:58:53 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] dcache: better name hash function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 27 Oct 2009, Stephen Hemminger wrote:<br />&gt; <br />&gt; Agreed. Here is the reduced version of the program.<br />&gt; To run:<br />&gt;   find /home -printf '%f\n' 2&gt;/dev/null | ./htest -n 100<br /><br />The timings are very sensitive to random I$ layout at least on Nehalem. <br />The reason seems to be that the inner loop is _so_ tight that just <br />depending on exactly where the loop ends up, you can get subtle <br />interactions with the loop cache.<br /><br />Look here:<br /><br />	[torvalds&#64;nehalem ~]$ find /home -printf '%f\n' 2&gt;/dev/null | ./htest -n 100<br />	Algorithm             Time       Ratio       Max   StdDev<br />	full_name_hash       1.141899     1.03      4868 263.37<br />	djb2                 0.980200     1.03      4835 266.05<br />	string10             0.909175     1.03      4850 262.67<br />	string10a            0.673915     1.03      4850 262.67<br />	string10b            0.909374     1.03      4850 262.67<br />	string_hash17        0.966050     1.03      4805 263.68<br />	string_hash31        1.008544     1.03      4807 259.37<br />	fnv32                0.774806     1.03      4817 259.17<br /><br />what do you think the difference between 'string10', 'string10a' and <br />'string10b' are?<br /><br />None. None what-so-ever. The source code is identical, and gcc generates <br />identical assembly language. Yet those timings are extremely stable for <br />me, and 'string10b' is 25% faster than the identical string10 and <br />string10a functions.<br /><br />The only difference? 'string10a' starts aligned to just 16 bytes, but that <br />in turn happens to mean that the tight inner loop ends up aligned on a <br />128-byte boundary. And being cacheline aligned just there seems to matters <br />for some subtle micro-architectural reason.<br /><br />The reason I noticed this is that I wondered what small modifications to <br />'string10' would do for performance, and noticed that even _without_ the <br />small modifications, performance fluctuated.<br /><br />Lesson? Microbenchmarks like this can be dangerous and misleading. That's <br />_especially_ true if the loop ends up being just tight enough that it can <br />fit in some trace cache or similar. In real life, the name hash is <br />performance-critical, but at the same time almost certainly won't be run <br />in a tight enough loop that you'd ever notice things like that.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
