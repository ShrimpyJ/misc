    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/27/13">First message in thread</a></li><li><a href="/lkml/2009/10/27/47">Eric Dumazet</a><ul><li><a href="/lkml/2009/10/27/252">Stephen Hemminger</a><ul><li class="origin"><a href="/lkml/2009/10/27/392">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/27/392">Stephen Hemminger</a><ul><li><a href="/lkml/2009/10/27/400">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2009/10/27/264">Stephen Hemminger</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Oct 2009 10:32:44 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] dcache: better name hash function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 27 Oct 2009, Stephen Hemminger wrote:<br />&gt; <br />&gt; Rather than wasting space, or doing expensive, modulus; just folding<br />&gt; the higher bits back with XOR redistributes the bits better.<br /><br />Please don't make up any new hash functions without having a better input <br />set than the one you seem to use.<br /><br />The 'fnv' function I can believe in, because the whole "multiply by big <br />prime number" thing to spread out the bits is a very traditional model. <br />But making up a new hash function based on essentially consecutive names <br />is absolutely the wrong thing to do. You need a much better corpus of path <br />component names for testing.<br /><br />&gt; The following seems to give best results (combination of 16bit trick<br />&gt; and string17).<br /><br />.. and these kinds of games are likely to work badly on some <br />architectures. Don't use 16-bit values, and don't use 'get_unaligned()'. <br />Both tend to work fine on x86, but likely suck on some other <br />architectures.<br /><br />Also remember that the critical hash function needs to check for '/' and <br />'\0' while at it, which is one reason why it does things byte-at-a-time. <br />If you try to be smart, you'd need to be smart about the end condition <br />too.<br /><br />The loop to optimize is _not_ based on 'name+len', it is this code:<br /><br />                this.name = name;<br />                c = *(const unsigned char *)name;<br /><br />                hash = init_name_hash();<br />                do {<br />                        name++;<br />                        hash = partial_name_hash(c, hash);<br />                        c = *(const unsigned char *)name;<br />                } while (c &amp;&amp; (c != '/'));<br />                this.len = name - (const char *) this.name;<br />                this.hash = end_name_hash(hash);<br /><br />(which depends on us having already removed all slashed at the head, and <br />knowing that the string is not zero-sized)<br /><br />So doing things multiple bytes at a time is certainly still possible, but <br />you would always have to find the slashes/NUL's in there first. Doing that <br />efficiently and portably is not trivial - especially since a lot of <br />critical path components are short.<br /><br />(Remember: there may be just a few 'bin' directory names, but if you do <br />performance analysis, 'bin' as a path component is probably hashed a lot <br />more than 'five_slutty_bimbos_and_a_donkey.jpg'. So the relative weighting <br />of importance of the filename should probably include the frequency it <br />shows up in pathname lookup)<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
