    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/10/27/13">First message in thread</a></li><li><a href="/lkml/2009/10/27/262">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/27/392">Stephen Hemminger</a><ul><li class="origin"><a href="/lkml/2009/10/27/404">Linus Torvalds</a><ul><li><a href="/lkml/2009/10/27/404">Stephen Hemminger</a><ul><li><a href="/lkml/2009/10/27/418">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Oct 2009 16:41:52 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] dcache: better name hash function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 27 Oct 2009, Stephen Hemminger wrote:<br />&gt; <br />&gt; Going back to basics. Run tests across different input sets.<br />&gt; Dropping off the slow ones like crc, md5, ...<br />&gt; Not using jhash because it doesn't have good character at a time<br />&gt; interface.<br />&gt; <br />&gt; Also, the folding algorithm used matters. Since the kernel<br />&gt; already uses hash_long() to fold back to N bits, all the<br />&gt; tests were rerun with that.<br /><br />Yeah, the 'hash_long()' folding matters for anything that doesn't multiply <br />big some big number to spread the bits out, because otherwise the bits <br />from the last character hashed will always be in the low bits.<br /><br />That explains why our current hash looked so bad with your previous code.<br /><br />From your numbers, I think we can dismiss 'kr_hash()' as having horrible <br />behavior with names like pppXXX (and that isn't just a special case: it's <br />also noticeably worse for your /home directory case, which means that the <br />bad behavior shows up in practice too, not just in some special cases).<br /><br />'elf' and 'pjw' don't have quite the same bad case, but the stddev for the <br />pppXXX cases are still clearly worse than the other alternatives. They <br />also seem to always be slower than what we already have. <br /><br />The 'fnv32' algorithm gets fairly good behavior, but seems bad on Itanium. <br />Looks like it depends on a fast multiplication unit, and all even your <br />"slow" ULV chip seems to be a Core2 one, so all your x86 targets have <br />that. And our current name hash still actually seems to do better in all <br />cases (maybe I missed some case) even if fnv32 is slightly faster on x86.<br /><br />From your list 'string10' seems to get consistently good results and is at <br />or near the top of performance too. It seems to be the one that <br />consistently beats 'full_name_hash()' both in performance and in behavior <br />(string_hash17/31 come close, but aren't as clearly better performing).<br /><br />But I haven't actually seen the hashes. Maybe there's something that makes <br />string10 bad?<br /><br />Regardless, one thing your new numbers do say is that our current hash <br />really isn't that bad.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
