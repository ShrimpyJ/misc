    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/11/18/370">First message in thread</a></li><li><a href="/lkml/2009/11/19/333">Steven Rostedt</a><ul><li><a href="/lkml/2009/11/19/338">Steven Rostedt</a><ul><li><a href="/lkml/2009/11/19/346">Frederic Weisbecker</a></li></ul></li><li><a href="/lkml/2009/11/19/343">Frederic Weisbecker</a><ul><li class="origin"><a href="/lkml/2009/11/19/350">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/19/350">Steven Rostedt</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Nov 2009 12:36:25 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BUG: GCC-4.4.x changes the function frame on some functions</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 19 Nov 2009, Frederic Weisbecker wrote:<br />&gt;<br />&gt; &gt; That way the lr would have the current function, and the parent would<br />&gt; &gt; still be at 8(%sp)<br />&gt; <br />&gt; Yeah right, we need at least such very tiny prologue for<br />&gt; archs that store return addresses in a reg.<br /><br />Well, it will be architecture-dependent.<br /><br />For example, alpha can store the return value in _any_ register if I <br />recall correctly, so you can do the "call to __fentry__" by just picking <br />another register than the default one as the return address.<br /><br />And powerpc has two special registers: link and ctr, but iirc you can only <br />load 'link' with a branch instruction. Which means that you could do <br />something like <br /><br />	mflr 0<br />	bl __fentry__<br /><br />in the caller (I forget if R0 is actually a call-trashed register or not), <br />and then __fentry__ could do something like<br /><br />	mflr 12		# save _new_ link<br />	mtlr 0		# restore original link<br />	mtctr 12	# move __fentry__ link to ctr<br />	.. do whatever ..<br />	bctr		# return to __fentry__ caller<br /><br />to return with 'link' restored (but ctr and r0/r12 trashed - I don't <br />recall the ppc calling conventions any more, but I think that is ok).<br /><br />Saving to stack seems unnecessary and pointless.<br /><br />            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
