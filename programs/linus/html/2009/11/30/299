    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/11/23/225">First message in thread</a></li><li><a href="/lkml/2009/11/30/292">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/30/295">Nick Piggin</a><ul><li class="origin"><a href="/lkml/2009/12/1/258">Linus Torvalds</a><ul><li><a href="/lkml/2009/12/1/258">Arnd Bergmann</a><ul><li><a href="/lkml/2009/12/1/263">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2009/11/30/325">"Paul E. McKenney"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Nov 2009 09:18:31 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc] "fair" rw spinlocks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 30 Nov 2009, Nick Piggin wrote:<br />&gt; <br />&gt; Two questions. Firstly, does tasklist_lock benefit much from read<br />&gt; side paralellism? Looking at some of the critical sections some seem<br />&gt; to hold it for quite a while (over task and thread iterations). So<br />&gt; it might not be the right thing to convert it to a spinlock?<br /><br />I do agree that it's a potential problem.<br /><br />&gt; Secondly:<br />&gt; <br />&gt; &gt; 	static void tasklist_read_lock(void)<br />&gt; &gt; 	{<br />&gt; &gt; 		preempt_disable();<br />&gt; &gt; 		if (!current-&gt;tasklist_count++)<br />&gt; <br />&gt; What happens if an interrupt and nested tasklist_read_lock() happens<br />&gt; here?<br /><br />You're right. We'd still need to disable hardware interrupts. Very <br />annoying, because that is pretty much _guaranteed_ to eat up any advantage <br />of the faster spin_unlock path. <br /><br />So scratch that approach. My earlier suggestion still looks technically <br />correct, but has all the performance disadvantages.<br /><br />The best option really would be to try to make it all use RCU, rather than <br />paper over things. That _really_ should improve performance.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
