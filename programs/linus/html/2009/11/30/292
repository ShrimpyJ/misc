    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/11/23/225">First message in thread</a></li><li><a href="/lkml/2009/11/30/266">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/30/276">Nick Piggin</a></li><li><a href="/lkml/2009/11/30/286">"Paul E. McKenney"</a><ul><li class="origin"><a href="/lkml/2009/11/30/295">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/30/295">Nick Piggin</a><ul><li><a href="/lkml/2009/11/30/299">Linus Torvalds</a></li><li><a href="/lkml/2009/11/30/325">"Paul E. McKenney"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Nov 2009 09:05:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc] "fair" rw spinlocks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 30 Nov 2009, Paul E. McKenney wrote:<br />&gt; <br />&gt; My suggestion would be to put the nesting counter in the task structure<br />&gt; to avoid this problem.<br /><br />It still doesn't end up being all that cheap. Now you'd need to disable <br />preemption in order to fix the race between the local counter and the real <br />lock.<br /><br />That should be cheaper than cli/sti, but the downside is that now you need <br />that task struct pointer (both for the preemption disable and the <br />counter), so now you're adding some register pressure too. Of course, <br />maybe you don't even want to inline it anyway, in which case that doesn't <br />matter.<br /><br />One advantage with your suggestion of using preemption is that (unlike irq <br />disables) you can keep the preemt counter over the whole lock, so you <br />don't need to re-do the preempt disable/enable in both read-lock and <br />read-unlock.<br /><br />So you might end up with something like (UNTESTED!):<br /><br />	static void tasklist_write_lock(void)<br />	{<br />		spin_lock_irq(&amp;tasklist_lock);<br />	}<br /><br />	static void tasklist_write_unlock(void)<br />	{<br />		spin_unlock_irq(&amp;tasklist_lock);<br />	}<br /><br />	static void tasklist_read_lock(void)<br />	{<br />		preempt_disable();<br />		if (!current-&gt;tasklist_count++)<br />			spin_lock(&amp;tasklist_lock);<br />	}<br /><br />	static void tasklist_read_unlock(void)<br />	{<br />		if (!--current-&gt;tasklist_count)<br />			spin_unlock(&amp;tasklist_lock);<br />		preempt_enable();<br />	}<br /><br />And the upside, of course, is that a spin_unlock() is cheaper than a <br />read_unlock() (no serializing atomic op), so while there is overhead, <br />there are also some advantages.. Maybe that atomic op advantage is enough <br />to offset the extra instructions.<br /><br />And maybe we could use 'raw_spin_[un]lock()' in the above read-[un]lock <br />sequences, since tasklist_lock is pretty special, and since we do the <br />preempt disable by hand (no need to do it again in the spinlock code). <br />That looks like it might cut down the overhead of all of the above to <br />almost nothing for what is probably the common case today (ie preemption <br />enabled).<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
