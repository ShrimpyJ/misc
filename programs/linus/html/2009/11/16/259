    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/11/15/118">First message in thread</a></li><li><a href="/lkml/2009/11/16/28">Ingo Molnar</a><ul><li><a href="/lkml/2009/11/16/257">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2009/11/16/260">Alan Cox</a></li><li><a href="/lkml/2009/11/16/289">Stijn Devriendt</a><ul><li><a href="/lkml/2009/11/16/297">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2009/11/21/31">Stijn Devriendt</a></li></ul></li><li><a href="/lkml/2009/11/16/281">Stijn Devriendt</a><ul><li><a href="/lkml/2009/11/16/301">Ingo Molnar</a><ul><li><a href="/lkml/2009/11/18/75">Stijn Devriendt</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Nov 2009 10:18:59 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] observe and act upon workload parallelism: PERF_TYPE_PARALLELISM (Was: [RFC][PATCH] sched_wait_block: wait for blocked threads)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 16 Nov 2009, Linus Torvalds wrote:<br />&gt; <br />&gt; Think of it like a classic user-level threading package, where one process <br />&gt; implements multiple threads entirely in user space, and switches between <br />&gt; them. Except we'd do the exact reverse: create multiple threads in the <br />&gt; kernel, but only run _one_ of them at a time. So as far as the scheduler <br />&gt; is concerned, it acts as just a single thread - except it's a single <br />&gt; thread that has multiple instances associated with it.<br /><br />Side note: before anybody asks why not do threads in user space to begin <br />with, it's simple: IO, exceptions, and timers. All need kernel support. <br /><br />User-level threading works very well, and is usually efficient as hell. <br />It's not that long since people constantly claimed that thread libraries <br />in user space were much better, and tried to use complex NxM models to do <br />them, exactly because user threads are so great.<br /><br />But almost nobody does user-level threading now, except for specific <br />languages that are built around threading. Why? It's not because they <br />don't work, it's because they have a few very annoying problems that make <br />them not work at all for enough situations that it gets very painful. And <br />it's usually about IO and system calls, but sometimes it's about page <br />faults, and sometimes it's about the pain of multiplexing that annoying <br />timer signal and all the crap that involves.<br /><br />So I'm suggesting that maybe we could look at doing kernel threads that do <br />what user-level threading does. It sounds idiotic, and maybe it is - after <br />all, traditionally one of the reasons for user-level threads is that you <br />can avoid all the kernel overheads. But if we can make some really <br />low-overhead "thread within a thread" model, maybe we could have close to <br />the best of both worlds.<br /><br />Some people really want threads for multi-CPU workloads and spreading <br />things out. That's what we have now. But other loads want threads for <br />entirely different reasons, like just hiding IO latencies.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
