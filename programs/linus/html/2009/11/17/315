    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2009/11/17/284">First message in thread</a></li><li><a href="/lkml/2009/11/17/284">=?UTF-8?q?Uwe=20Kleine-K=C3=B6nig?=</a><ul><li><a href="/lkml/2009/11/17/308">Andreas Schwab</a></li><li class="origin"><a href="/lkml/2009/11/17/332">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/17/332">Michael Buesch</a><ul><li><a href="/lkml/2009/11/17/340">Linus Torvalds</a></li><li><a href="/lkml/2009/11/17/365">Andreas Schwab</a></li></ul></li><li><a href="/lkml/2009/11/17/344">Uwe =?iso-8859-1?Q?Kleine-K=F6nig?=</a><ul><li><a href="/lkml/2009/11/17/348">Linus Torvalds</a><ul><li><a href="/lkml/2009/11/17/351">Linus Torvalds</a></li><li><a href="/lkml/2009/11/17/359">Joe Perches</a></li></ul></li></ul></li><li><a href="/lkml/2009/11/18/414">=?UTF-8?q?Uwe=20Kleine-K=C3=B6nig?=</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2009/11/17/315/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Nov 2009 09:41:58 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] strcmp: fix overflow error</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 17 Nov 2009, Uwe Kleine-König wrote:<br />&gt;<br />&gt; strcmp("\x01", "\xef") returns 18 but it should return something &lt; 0.<br />&gt; The reason is that the variable holding the result of the subtraction is<br />&gt; too small and overflows.<br /><br />No. The reason is that whoever wrote that function is a moron and doesn't <br />know the standard. And your fix is not correct _either_<br /><br />The comparison should be done as *unsigned char*. As specified by POSIX<br /><br />  "The sign of a non-zero return value shall be determined by the sign of <br />   the difference between the values of the first pair of bytes (both <br />   interpreted as type unsigned char) that differ in the strings being <br />   compared."<br /><br />and both the original code and your change gets it wrong in different <br />ways.<br /><br />&gt;  int strcmp(const char *cs, const char *ct)<br />&gt;  {<br />&gt; -	signed char __res;<br />&gt; +	int __res;<br />&gt; <br />&gt;  	while (1) {<br />&gt;  		if ((__res = *cs - *ct++) != 0 || !*cs++)<br /><br />So this is fundamentally incorrect both with "signed char __res" _and_ <br />with "int __res", because '*cs' and '*ct' are both (possibly - it depends <br />on the compiler and architecture) signed chars.<br /><br />So in the case you mention, strcmp() _should_ return a negative value, <br />because "\x01" is smaller than "\xef", but you have:<br /><br /> - *cs = 1, *ct = (char) 0xef = -17 _OR_ 239 depending on sign of 'char'<br /><br />and as a result:<br /><br /> - signed char __res = 18 (incorrect, regardless: ct is larger)<br /><br /> - int __res = 18 (incorrect) or -238 (correct) depending on sign of char<br /><br />so your patch doesn't actually help at all.<br /><br />What would help is something like the appended, but I have not tested it <br />AT ALL. It may be total and utter crap too. Maybe it doesn't compile, <br />maybe it buggers your pet hedgehog. I just don't know.<br /><br />		Linus<br /><br />---<br /> lib/string.c |   20 ++++++++++++++------<br /> 1 files changed, 14 insertions(+), 6 deletions(-)<br /><br />diff --git a/lib/string.c b/lib/string.c<br />index b19b87a..e96421a 100644<br />--- a/lib/string.c<br />+++ b/lib/string.c<br />&#64;&#64; -246,13 +246,17 &#64;&#64; EXPORT_SYMBOL(strlcat);<br /> #undef strcmp<br /> int strcmp(const char *cs, const char *ct)<br /> {<br />-	signed char __res;<br />+	unsigned char c1, c2;<br /> <br /> 	while (1) {<br />-		if ((__res = *cs - *ct++) != 0 || !*cs++)<br />+		c1 = *cs++;<br />+		c2 = *ct++;<br />+		if (c1 != c2)<br />+			return c1 &lt; c2 ? -1 : 1;<br />+		if (!c1)<br /> 			break;<br /> 	}<br />-	return __res;<br />+	return 0;<br /> }<br /> EXPORT_SYMBOL(strcmp);<br /> #endif<br />&#64;&#64; -266,14 +270,18 &#64;&#64; EXPORT_SYMBOL(strcmp);<br />  */<br /> int strncmp(const char *cs, const char *ct, size_t count)<br /> {<br />-	signed char __res = 0;<br />+	unsigned char c1, c2;<br /> <br /> 	while (count) {<br />-		if ((__res = *cs - *ct++) != 0 || !*cs++)<br />+		c1 = *cs++;<br />+		c2 = *ct++;<br />+		if (c1 != c2)<br />+			return c1 &lt; c2 ? -1 : 1;<br />+		if (!c1)<br /> 			break;<br /> 		count--;<br /> 	}<br />-	return __res;<br />+	return 0;<br /> }<br /> EXPORT_SYMBOL(strncmp);<br /> #endif<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
