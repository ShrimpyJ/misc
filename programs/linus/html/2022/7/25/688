    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/24/302">First message in thread</a></li><li><a href="/lkml/2022/7/24/302">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/25/612">Guenter Roeck</a><ul><li class="origin"><a href="/lkml/2022/7/25/727">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/25/727">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/25/828">Yury Norov</a></li></ul></li><li><a href="/lkml/2022/7/25/749">Yury Norov</a></li><li><a href="/lkml/2022/7/26/294">"Russell King (Oracle)"</a><ul><li><a href="/lkml/2022/7/26/716">Yury Norov</a></li><li><a href="/lkml/2022/7/28/919">"Russell King (Oracle)"</a></li></ul></li><li><a href="/lkml/2022/7/26/836">Dennis Zhou</a><ul><li><a href="/lkml/2022/7/26/868">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/7/25/823">Geert Uytterhoeven</a><ul><li><a href="/lkml/2022/7/25/829">Geert Uytterhoeven</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2022/7/25/688/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Jul 2022 10:55:18 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 5.19-rc8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 25, 2022 at 9:11 AM Guenter Roeck &lt;linux&#64;roeck-us.net&gt; wrote:<br />&gt;<br />&gt; BUG: KFENCE: out-of-bounds read in _find_next_bit_le+0x10/0x48<br /><br />Ok, I was hoping somebody more ARMy would look at this, particularly<br />since there is no call trace beyond the actual fault.<br /><br />So it shows that it happens in _find_next_bit_le(), but not who called it.<br /><br />It does show "who allocated the page", and I can see the message that<br />is printed afterwards, so it comes from that<br /><br />   static void __init test_bitmap_printlist(void)<br /><br />function, so I guess we know the call chain:<br /><br />  test_bitmap_printlist -&gt;<br />    bitmap_print_to_pagebuf -&gt;<br />      scnprintf "%*pbl\n" -&gt;<br />        pointer -&gt;<br />          bitmap_list_string -&gt;<br />            for_each_set_bitrange<br /><br />and I think I see what's wrong in there. That thing does<br /><br />             (b) = find_next_bit((addr), (size), (e) + 1),      \<br />             (e) = find_next_zero_bit((addr), (size), (b) + 1))<br /><br />for the end of the range, and looking at the oops, the instruction<br />that oopses is<br /><br />         ldrb    r3, [r0, r2, lsr #3]<br /><br />where 'r2' is the bit position, and 'r0' is the start of the bitmap.<br /><br />And:<br /><br />&gt; r10: 00000000  r9 : 0000002d  r8 : ef59d000<br />&gt; r7 : c0e55514  r6 : c2215000  r5 : 00008000  r4 : 00008000<br />&gt; r3 : 845cac12  r2 : 00008001  r1 : 00008000  r0 : ef59d000<br /><br />Lookie here: r1 contains the size, and r2 is past the end of the size.<br /><br />So pick your poison: either the bug is in<br /><br /> (a) the bitmap region iterators shouldn't even ask for past-the-end results<br /><br />     I've added Dennis Zhou who did that first<br />bitmap_for_each_set_region() in commit e837dfde15a4 ("bitmap:<br />genericize percpu bitmap region iterators"), and Yuri Norov who<br />renamed and moved it to for_each_set_bitrange() in commit ec288a2cf7ca<br />("bitmap: unify find_bit operations").<br /><br />or<br /><br /> (b) the ARM find_next_bit() implementation, which doesn't check<br />whether the position is past the end<br /><br />     I've added Russell King (ARM stuff) and Catalin Marinas who<br />touched that last many many years ago in 8b592783a2e8 ("Thumb-2:<br />Implement the unified arch/arm/lib functions")<br /><br />I think it's arguably a little bit of both, but mostly (b).<br /><br />Note how the genetic find_next_bit() (and _find_next_bit()) does<br /><br />        if (unlikely(start &gt;= nbits))<br />                return nbits;<br /><br />but the arm version of it does not.<br /><br />I think the fix might be something like this:<br /><br />  diff --git a/arch/arm/lib/findbit.S b/arch/arm/lib/findbit.S<br />  index b5e8b9ae4c7d..b36ca301892e 100644<br />  --- a/arch/arm/lib/findbit.S<br />  +++ b/arch/arm/lib/findbit.S<br />  &#64;&#64; -83,6 +83,8 &#64;&#64; ENDPROC(_find_first_bit_le)<br />   ENTRY(_find_next_bit_le)<br />                teq     r1, #0<br />                beq     3b<br />  +             cmp     r2, r1<br />  +             bhs     3b<br />                ands    ip, r2, #7<br />                beq     1b                      &#64; If new byte, goto old routine<br />    ARM(                ldrb    r3, [r0, r2, lsr #3]    )<br />but my ARM asm is so broken that the above is just really random noise<br />that may or may not build - much less work.<br /><br />I'll leave it to Russell &amp;co to have a tested and working patch.<br /><br />Hmm?<br /><br />                    Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
