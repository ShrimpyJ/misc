    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/16/390">First message in thread</a></li><li><a href="/lkml/2022/7/20/848">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/20/871">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2022/7/20/900">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/20/900">Steven Rostedt</a></li></ul></li></ul></li><li><a href="/lkml/2022/7/20/934">Kees Cook</a><ul><li><a href="/lkml/2022/7/20/944">Steven Rostedt</a></li><li><a href="/lkml/2022/7/20/1008">Peter Zijlstra</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2022/7/20/878/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 20 Jul 2022 11:43:37 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/38] x86/retbleed: Call depth tracking mitigation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 20, 2022 at 11:31 AM Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; Thus, is there a way to keep this file from being entered into the<br />&gt; return_sites section?<br /><br />I think the whole concept is broken.<br /><br />Testing known-broken code on the expectation that "this won't work<br />anyway, so we can jump off to code that is broken" is not acceptable.<br /><br />*If* the test were to fail, it would start executing random code that<br />hasn't been relocated or fixed up properly.<br /><br />So I think the whole concept is broken. It relies on the compiler<br />generating code that can work in a read-only data section, and it's<br />not clear that that is even physically possible (ie the data section<br />might be far enough away from a code section that any relocation just<br />fundamentally cannot happen).<br /><br />I think it worked purely by mistake, because the code was simple<br />enough that it didn't need any relocation at all before. But even<br />without RETHUNK, that was never guaranteed, because any random tracing<br />or debug code or whatever could have made even that empty function<br />have code in it that just fundamentally wouldn't work in a non-text<br />section.<br /><br />So honestly, I think that test should be removed as a "we used this,<br />it happened to work almost by mistake, but it doesn't work any more<br />and it is unfixably broken".<br /><br />Maybe somebody can come up with an entirely different way to do that<br />test that isn't so broken, but if so, I think it's going to be using<br />some other machinery (eg bpf and explicitly marking it read-only and<br />non-executable), and removing this broken model is the right thing<br />regardless.<br /><br />So unless somebody has some one-liner workaround, I really suspect the<br />fix is to remove all this. The amount of hackery to make it work in<br />the first place is kind of disgusting anyway.<br /><br />Since this was a WARN_ONCE(), can you make sure that with this case<br />removed, nothing else triggers?<br /><br />                Linus<br /> drivers/misc/lkdtm/Makefile | 11 -----------<br /> drivers/misc/lkdtm/lkdtm.h  |  3 ---<br /> drivers/misc/lkdtm/perms.c  |  7 -------<br /> drivers/misc/lkdtm/rodata.c | 11 -----------<br /> 4 files changed, 32 deletions(-)<br /><br />diff --git a/drivers/misc/lkdtm/Makefile b/drivers/misc/lkdtm/Makefile<br />index 2e0aa74ac185..4f1059f0cae9 100644<br />--- a/drivers/misc/lkdtm/Makefile<br />+++ b/drivers/misc/lkdtm/Makefile<br />&#64;&#64; -6,21 +6,10 &#64;&#64; lkdtm-$(CONFIG_LKDTM)		+= bugs.o<br /> lkdtm-$(CONFIG_LKDTM)		+= heap.o<br /> lkdtm-$(CONFIG_LKDTM)		+= perms.o<br /> lkdtm-$(CONFIG_LKDTM)		+= refcount.o<br />-lkdtm-$(CONFIG_LKDTM)		+= rodata_objcopy.o<br /> lkdtm-$(CONFIG_LKDTM)		+= usercopy.o<br /> lkdtm-$(CONFIG_LKDTM)		+= stackleak.o<br /> lkdtm-$(CONFIG_LKDTM)		+= cfi.o<br /> lkdtm-$(CONFIG_LKDTM)		+= fortify.o<br /> lkdtm-$(CONFIG_PPC_64S_HASH_MMU)	+= powerpc.o<br /> <br />-KASAN_SANITIZE_rodata.o		:= n<br /> KASAN_SANITIZE_stackleak.o	:= n<br />-KCOV_INSTRUMENT_rodata.o	:= n<br />-CFLAGS_REMOVE_rodata.o		+= $(CC_FLAGS_LTO)<br />-<br />-OBJCOPYFLAGS :=<br />-OBJCOPYFLAGS_rodata_objcopy.o	:= \<br />-			--rename-section .noinstr.text=.rodata,alloc,readonly,load,contents<br />-targets += rodata.o rodata_objcopy.o<br />-$(obj)/rodata_objcopy.o: $(obj)/rodata.o FORCE<br />-	$(call if_changed,objcopy)<br />diff --git a/drivers/misc/lkdtm/lkdtm.h b/drivers/misc/lkdtm/lkdtm.h<br />index 015e0484026b..e58f69077fcd 100644<br />--- a/drivers/misc/lkdtm/lkdtm.h<br />+++ b/drivers/misc/lkdtm/lkdtm.h<br />&#64;&#64; -94,7 +94,4 &#64;&#64; void __init lkdtm_perms_init(void);<br /> void __init lkdtm_usercopy_init(void);<br /> void __exit lkdtm_usercopy_exit(void);<br /> <br />-/* Special declaration for function-in-rodata. */<br />-void lkdtm_rodata_do_nothing(void);<br />-<br /> #endif<br />diff --git a/drivers/misc/lkdtm/perms.c b/drivers/misc/lkdtm/perms.c<br />index b93404d65650..d1a69ef865c2 100644<br />--- a/drivers/misc/lkdtm/perms.c<br />+++ b/drivers/misc/lkdtm/perms.c<br />&#64;&#64; -191,12 +191,6 &#64;&#64; static void lkdtm_EXEC_VMALLOC(void)<br /> 	vfree(vmalloc_area);<br /> }<br /> <br />-static void lkdtm_EXEC_RODATA(void)<br />-{<br />-	execute_location(dereference_function_descriptor(lkdtm_rodata_do_nothing),<br />-			 CODE_AS_IS);<br />-}<br />-<br /> static void lkdtm_EXEC_USERSPACE(void)<br /> {<br /> 	unsigned long user_addr;<br />&#64;&#64; -280,7 +274,6 &#64;&#64; static struct crashtype crashtypes[] = {<br /> 	CRASHTYPE(EXEC_STACK),<br /> 	CRASHTYPE(EXEC_KMALLOC),<br /> 	CRASHTYPE(EXEC_VMALLOC),<br />-	CRASHTYPE(EXEC_RODATA),<br /> 	CRASHTYPE(EXEC_USERSPACE),<br /> 	CRASHTYPE(EXEC_NULL),<br /> 	CRASHTYPE(ACCESS_USERSPACE),<br />diff --git a/drivers/misc/lkdtm/rodata.c b/drivers/misc/lkdtm/rodata.c<br />deleted file mode 100644<br />index baacb876d1d9..000000000000<br />--- a/drivers/misc/lkdtm/rodata.c<br />+++ /dev/null<br />&#64;&#64; -1,11 +0,0 &#64;&#64;<br />-// SPDX-License-Identifier: GPL-2.0<br />-/*<br />- * This includes functions that are meant to live entirely in .rodata<br />- * (via objcopy tricks), to validate the non-executability of .rodata.<br />- */<br />-#include "lkdtm.h"<br />-<br />-void noinstr lkdtm_rodata_do_nothing(void)<br />-{<br />-	/* Does nothing. We just want an architecture agnostic "return". */<br />-}</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
