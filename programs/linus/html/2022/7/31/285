    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/31/82">First message in thread</a></li><li><a href="/lkml/2022/7/31/192">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/31/205">"Paul E. McKenney"</a><ul><li><a href="/lkml/2022/7/31/319">Matthew Wilcox</a><ul><li><a href="/lkml/2022/7/31/428">"Paul E. McKenney"</a></li></ul></li><li><a href="/lkml/2022/8/1/818">Will Deacon</a><ul><li><a href="/lkml/2022/8/1/1068">"Paul E. McKenney"</a><ul><li><a href="/lkml/2022/8/2/200">Will Deacon</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/7/31/281">Mikulas Patocka</a><ul><li><a href="/lkml/2022/7/31/282">Mikulas Patocka</a><ul><li><a href="/lkml/2022/7/31/288">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/1/250">Mikulas Patocka</a></li><li><a href="/lkml/2022/8/1/253">Mikulas Patocka</a></li></ul></li><li><a href="/lkml/2022/7/31/327">Alan Stern</a></li></ul></li><li><a href="/lkml/2022/7/31/283">Mikulas Patocka</a><ul><li><a href="/lkml/2022/7/31/287">Linus Torvalds</a></li><li><a href="/lkml/2022/7/31/298">Matthew Wilcox</a><ul><li><a href="/lkml/2022/7/31/301">Ard Biesheuvel</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 31 Jul 2022 13:46:15 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] make buffer_locked provide an acquire semantics</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 31, 2022 at 1:39 PM Mikulas Patocka &lt;mpatocka&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Do you think that wait_event also needs a read memory barrier?<br /><br />Not really, no.<br /><br />__wait_event() uses prepare_to_wait(), and it uses set_current_state()<br />very much so that the process state setting is serialized with the<br />test afterwards.<br /><br />And the only race wait_event should worry about is exactly the "go to<br />sleep" vs "make the event true and then wake up" race, so that it<br />doesn't wait forever.<br /><br />There is no guarantee of memory ordering wrt anything else, and I<br />don't think there is any need for such a guarantee.<br /><br />If somebody wants that guarantee, they should probably make the<br />condition for wait_event() to be a "load_acquire()" or similar. Those<br />cases do exist.<br /><br />                       Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
