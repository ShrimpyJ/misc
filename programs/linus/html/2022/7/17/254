    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/361">First message in thread</a></li><li><a href="/lkml/2022/7/17/246">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/17/248">Sudip Mukherjee</a><ul><li><a href="/lkml/2022/7/17/249">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/7/17/253">Segher Boessenkool</a><ul><li class="origin"><a href="/lkml/2022/7/17/263">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/17/263">Segher Boessenkool</a><ul><li><a href="/lkml/2022/7/17/323">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Jul 2022 14:11:52 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mainline build failure of powerpc allmodconfig for prom_init_check</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 17, 2022 at 2:00 PM Segher Boessenkool<br />&lt;segher&#64;kernel.crashing.org&gt; wrote:<br />&gt;<br />&gt; Calling mem* on a volatile object (or a struct containing one) is not<br />&gt; valid.  I opened gcc.gnu.org/PR106335.<br /><br />Well, that very quickly got marked as a duplicate of a decade-old bug.<br /><br />So I guess we shouldn't expect this to be fixed any time soon.<br /><br />That said, your test-case of copying the whole structure is very<br />different from the one in the kernel that works on them one structure<br />member at a time.<br /><br />I can *kind of* see the logic that when you do a whole struct<br />assignment, it turns into a "memcpy" without regard for volatile<br />members. You're not actually accessing the volatile members in some<br />particular order, so the struct assignment arguably does not really<br />have an access ordering that needs to be preserved.<br /><br />But the kernel code in question very much does access the members<br />individually, and so I think that the compiler quite unequivocally did<br />something horribly horribly bad by turning them into a memset.<br /><br />So I don't think your test-case is really particularly good, and maybe<br />that's why that old bug has languished for over a decade - people<br />didn't realize just *how* incredibly broken it was.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
