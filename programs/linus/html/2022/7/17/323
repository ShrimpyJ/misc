    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/361">First message in thread</a></li><li><a href="/lkml/2022/7/17/254">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/17/263">Segher Boessenkool</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Jul 2022 18:38:56 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mainline build failure of powerpc allmodconfig for prom_init_check</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 17, 2022 at 2:49 PM Segher Boessenkool<br />&lt;segher&#64;kernel.crashing.org&gt; wrote:<br />&gt;<br />&gt; &gt; I can *kind of* see the logic that when you do a whole struct<br />&gt; &gt; assignment, it turns into a "memcpy" without regard for volatile<br />&gt; &gt; members. You're not actually accessing the volatile members in some<br />&gt; &gt; particular order, so the struct assignment arguably does not really<br />&gt; &gt; have an access ordering that needs to be preserved.<br />&gt;<br />&gt; The order is not defined, correct.  But a "volatile int" can only be<br />&gt; accessed as an int, and an external memcpy will typically use different<br />&gt; size accesses, and can even access some fields more than once (or<br />&gt; partially); all not okay for a volatile object.<br /><br />That is not actually a valid or realistic argument in the general case.<br /><br />The thing is, an operation on an aggregate type in C is fundamentally<br />different from the "do the same operation on the individual parts of<br />the struct".<br /><br />Just to make a very concrete example of that, it's not at all<br />unreasonable to have a struct like this:<br /><br />    struct io_accessor {<br />        union {<br />            volatile unsigned char byte[8];<br />            volatile unsigned short word[4];<br />        ...<br /><br />and while that wasn't the example here, it's not completely insane as<br />a concept to use as a helper type so that you can do volatile accesses<br />of different sizes.<br /><br />And while you'd be right to say that "assigning that kind of struct is<br />probably insane", and I wouldn't argue against it, I also think that<br />basically *any* union member is basically an argument that a structure<br />assignment is *NOT* about "assign all the individual members", and<br />never really can be.<br /><br />In the above union, make one union member be a non-volatile type, and<br />suddenly it actually *can* be ok to copy the struct. Even though it<br />also has volatile bytes.<br /><br />So once you start doing structure assignments but argue about<br />individual fields being volatile, I think you're on very shaky ground.<br /><br />And I think "memcpy" is a reasonable way to say "we don't care - and<br />in the general case we CANNOT know - what the individual members are,<br />so we'll just copy it as one thing".<br /><br />So the compiler emitting a "memcpy()" to assign a structure sounds<br />fine. Even in theory. Because the "but individual fields.." argument<br />just cannot work in general.<br /><br />In contrast, when you access the members individually (like the kernel<br />does in this powerpc case), there is no such ambiguity.<br /><br />There is no way in hell that it is ever ok to do a "memcpy()" when the<br />user has done the assignments one volatile member at a time.<br /><br />So that's why I don't think your test-case with the struct assignment<br />is very good. I think it's very reasonable for a compiler person to<br />say "you assigned the whole struct, you get what you asked for, you<br />get a memcpy".<br /><br />But when you do a loop that assigns individual volatile fields? No<br />such problem. Completely unambiguous that you need to do them one at a<br />time as individual accesses.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
