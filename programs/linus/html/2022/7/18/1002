    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/16/390">First message in thread</a></li><li><a href="/lkml/2022/7/16/392">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/16/442">Andrew Cooper</a><ul><li><a href="/lkml/2022/7/17/174">Linus Torvalds</a></li><li><a href="/lkml/2022/7/17/224">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/17/238">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/17/241">Thomas Gleixner</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/7/18/955">Thomas Gleixner</a></li><li><a href="/lkml/2022/7/18/956">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2022/7/18/1013">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1013">Thomas Gleixner</a></li></ul></li></ul></li><li><a href="/lkml/2022/7/18/957">Thomas Gleixner</a></li><li><a href="/lkml/2022/7/18/958">Thomas Gleixner</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2022 11:43:19 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 1/3] x86/cpu: Remove segment load from switch_to_new_gdt()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">So I appreciate the added big comments in this code, but looking at this patch:<br /><br />On Mon, Jul 18, 2022 at 10:52 AM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt; +/**<br />&gt; + * switch_to_new_gdt - Switch form early GDT to the direct one<br />&gt; + * &#64;cpu:       The CPU number for which this is invoked<br />&gt; + *<br />&gt; + * Invoked during early boot to switch from early GDT and early per CPU<br />&gt; + * (%fs on 32bit, GS_BASE on 64bit) to the direct GDT and the runtime per<br />&gt; + * CPU area.<br />&gt;   */<br />&gt;  void switch_to_new_gdt(int cpu)<br />&gt;  {<br />&gt; -       /* Load the original GDT */<br />&gt;         load_direct_gdt(cpu);<br />&gt; -       /* Reload the per-cpu base */<br />&gt; -       load_percpu_segment(cpu);<br />&gt; +<br />&gt; +       /*<br />&gt; +        * No need to load the %gs (%fs for 32bit) segment. It is already<br />&gt; +        * correct, %gs is 0 on 64bit and %fs is __KERNEL_PERCPU on 32 bit.<br />&gt; +        *<br />&gt; +        * Writing %gs on 64bit would zero GSBASE which would make any per<br />&gt; +        * CPU operation up to the point of the wrmsrl() fault.<br />&gt; +        *<br />&gt; +        * 64bit requires to point GSBASE to the new offset. Until the<br />&gt; +        * wrmsrl() happens the early mapping is still valid. That means<br />&gt; +        * the GSBASE update will lose any prior per CPU data which was<br />&gt; +        * not copied over in setup_per_cpu_areas().<br />&gt; +        *<br />&gt; +        * For secondary CPUs this is not a problem because they start<br />&gt; +        * already with the direct GDT and the real GSBASE. This invocation<br />&gt; +        * is pointless and will be removed in a subsequent step.<br />&gt; +        */<br />&gt; +       if (IS_ENABLED(CONFIG_X86_64))<br />&gt; +               wrmsrl(MSR_GS_BASE, cpu_kernelmode_gs_base(cpu));<br />&gt;  }<br /><br />... while those comments are nice and all, I do think this retains the<br />basic insanity of having "switch_to_new_gdt()" do magical things on<br />x86-64 that don't really match the name.<br /><br />So honestly, I'd be happier of that whole<br /><br />       if (IS_ENABLED(CONFIG_X86_64))<br />               wrmsrl(MSR_GS_BASE, cpu_kernelmode_gs_base(cpu));<br /><br />was migrated to the callers instead. There aren't *that* many callers.<br /><br />I expect that it is then quite possible that several of the call-sites<br />would go "GS_BASE is already correct here, I can remove this".<br /><br />But even if every single caller keeps that wrmsrl() around, at least<br />it wouldn't be hidden behind a function call that has a name that<br />implies something completely different is happening.<br /><br />And no, I don't care *that* deeply, so this is just a suggestion.<br /><br />But wouldn't it be nice if this function was actually named by what it<br />does, rather than by what it used to do back in the i386 days when the<br />GDT affected the segment bases?<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
