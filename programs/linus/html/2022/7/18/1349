    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/16/390">First message in thread</a></li><li><a href="/lkml/2022/7/18/1321">Peter Zijlstra</a><ul><li><a href="/lkml/2022/7/18/1343">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2022/7/18/1377">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1377">Peter Zijlstra</a><ul><li><a href="/lkml/2022/7/18/1401">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/7/19/1590">Sami Tolvanen</a><ul><li><a href="/lkml/2022/7/20/997">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2022 17:11:27 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/38] x86/retbleed: Call depth tracking mitigation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 18, 2022 at 5:03 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So it already only adds the pattern to things that have their address<br />&gt; taken, not all functions?<br />&gt;<br />&gt; If so, that's simple enough to sort out: don't do any RSB stack<br />&gt; adjustment for those thunks AT ALL.<br />&gt;<br />&gt; Because they should just then end up with a jump to the "real" target,<br />&gt; and that real target will do the RSB stack thing.<br /><br />Put another way, let's say that you have a function that looks like this:<br /><br />  int silly(void)<br />  {<br />       return 0;<br />  }<br /><br />and now you have two cases:<br /><br /> - the "direct callable version" of that function looks exactly the<br />way it always has looked, and gets the 16 bytes of padding for it, and<br />the RSB counting can happen in that padding<br /><br /> - the "somebody took the address of this function" creates code that<br />has the hash marker before it, and has the hash check, and then does a<br />"jmp silly" to actually jump to the real code.<br /><br />So what the RSB counting does is just ignore that second case entirely<br />as far as the RSB code generation goes. No need to have any padding<br />for it at all, it has that (completely different) kCFI padding<br />instead.<br /><br />Instead, only the "real" silly function gets that RSB code, and the<br />"jmp silly" from the kCFI thunk needs to be updated to point to the<br />RSB thunk in front of it.<br /><br />Yes, yes, it makes indirect calls slightly more expensive than direct<br />calls (because that kCFI thing can't just fall through to the real<br />thing), but considering all the *other* costs of indirect calls, the<br />cost of having that one "jmp" instruction doesn't really seem to<br />matter, does it?<br /><br />                    Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
