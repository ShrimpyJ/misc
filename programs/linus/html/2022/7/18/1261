    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/361">First message in thread</a></li><li><a href="/lkml/2022/7/18/1026">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1233">Segher Boessenkool</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/7/19/1305">Michael Ellerman</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2022 15:55:51 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mainline build failure of powerpc allmodconfig for prom_init_check</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 18, 2022 at 3:12 PM Segher Boessenkool<br />&lt;segher&#64;kernel.crashing.org&gt; wrote:<br />&gt;<br />&gt; Assembler language is unforgiving.  It isn't easy to write, and most<br />&gt; mistakes will not be diagnosed.  If the assmbler language makes it<br />&gt; easier to read the code, that makes it more likely correct code will be<br />&gt; written, and that correct code will be written in less time.<br /><br />What's your argument? That it's unforgiving, so it has to be<br />unreadable and easy to make mistakes in too?<br /><br />You can get the order of operands wrong, and it will still build -<br />just to completely the wrong thing.<br /><br />&gt; &gt; Oddities, yes ("$" as a prefix for register? Alpha asm is also very<br />&gt; &gt; odd), but nothing *quite* as broken as "simple constants have entirely<br />&gt; &gt; different meanings depending on the exact instruction and argument<br />&gt; &gt; position".<br />&gt;<br />&gt; What is broken about that?  It makes everything very consistent, and<br />&gt; very readable.  Sigils are just nasty, and having the register names the<br />&gt; same as valid symbol names is also problematic.<br /><br />Oh, I agree that sigils are good to make the type clear. So '%r4' is<br />better than 'r4' because the latter could be ambiguous and you could<br />have a symbol 'r4'.<br /><br />But just '4' is plain garbage.  There's no "could be ambiguous" about it.<br /><br />Type checking matters. Not just in C. In asm too.<br /><br />The reason '$0' is odd because it's *just* a sigil and a number.<br /><br />Which certainly is not unusual in itself, but it reads like it's a<br />number to me. Not just because of x86 gas ('$' means 'immediate'), but<br />Z80 ('$' means HEX), or at least 'Nth argument' (shell).<br /><br />And yeah, alpha got it from MIPS, afaik.<br /><br />And presumably MIPS got it from "we're hacking up the simplest<br />assembler we can".<br /><br />&gt; &gt; The human-written asm files have those #define's in headers just to<br />&gt; &gt; make things slightly more legible, because apparently the assembler<br />&gt; &gt; doesn't even *accept* the sane names.<br />&gt;<br />&gt; That was true a long time ago.  And the "#define r0 0" thing caused<br />&gt; quite a few bugs itself btw.<br /><br />Those #define's still exist. Look it up.<br /><br />And yes, they are horrible, and they are wrong, and they shouldn't exist.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
