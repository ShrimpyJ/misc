    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/16/390">First message in thread</a></li><li><a href="/lkml/2022/7/18/1260">Sami Tolvanen</a><ul><li><a href="/lkml/2022/7/18/1287">Joao Moreira</a></li><li><a href="/lkml/2022/7/18/1300">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2022/7/18/1317">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1317">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1321">Peter Zijlstra</a></li><li><a href="/lkml/2022/7/18/1334">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2022 16:42:29 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/38] x86/retbleed: Call depth tracking mitigation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 18, 2022 at 4:19 PM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt; But that's an implementation detail, right? Whatever we put in between<br />&gt; will still be a fixed offset, no? It's a different offset, but that's<br />&gt; what patching can deal with.<br /><br />No, what Sami is sayin that because the "cmpl" *inside* the function<br />that checks the hash value will have that same (valid) hash value<br />encoded as part of it, then you actually have *two* valid markers with<br />that hash value.<br /><br />You have the "real" marker before the function.<br /><br />But you also have the "false" marker that is part of the hash check<br />that is *inside* the function.<br /><br />The "real marker + 6" points to the function head itself, and so is ok<br />as a target (normal operation).<br /><br />The "false marker + 6" points to the "UD2", and so is *also* ok as a<br />target (bad guy trying to mis-use the false marker gets trapped by<br />UD2).<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
