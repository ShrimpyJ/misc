    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/24/302">First message in thread</a></li><li><a href="/lkml/2022/7/26/905">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/26/943">"Russell King (Oracle)"</a><ul><li class="origin"><a href="/lkml/2022/7/26/1053">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/26/1053">"Russell King (Oracle)"</a><ul><li><a href="/lkml/2022/7/26/1094">Yury Norov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Jul 2022 13:20:23 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 5.19-rc8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 26, 2022 at 12:44 PM Russell King (Oracle)<br />&lt;linux&#64;armlinux.org.uk&gt; wrote:<br />&gt;<br />&gt; Overall, I would say it's pretty similar (some generic perform<br />&gt; marginally better, some native perform marginally better) with the<br />&gt; exception of find_first_bit() being much better with the generic<br />&gt; implementation, but find_next_zero_bit() being noticably worse.<br /><br />The generic _find_first_bit() code is actually sane and simple. It<br />loops over words until it finds a non-zero one, and then does trivial<br />calculations on that last word.<br /><br />That explains why the generic code does so much better than your byte-wise asm.<br /><br />In contrast, the generic _find_next_bit() I find almost offensively<br />silly - which in turn explains why your byte-wide asm does better.<br /><br />I think the generic _find_next_bit() should actually do what the m68k<br />find_next_bit code does: handle the first special word itself, and<br />then just call find_first_bit() on the rest of it.<br /><br />And it should *not* try to handle the dynamic "bswap and/or bit sense<br />invert" thing at all. That should be just four different (trivial)<br />cases for the first word.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
