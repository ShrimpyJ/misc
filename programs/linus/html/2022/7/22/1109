    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/16/390">First message in thread</a></li><li><a href="/lkml/2022/7/18/1129">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/18/1164">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1209">Peter Zijlstra</a><ul><li><a href="/lkml/2022/7/18/1241">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/18/1318">Peter Zijlstra</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/7/18/1172">Peter Zijlstra</a><ul><li><a href="/lkml/2022/7/18/1238">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/18/1253">Joao Moreira</a><ul><li><a href="/lkml/2022/7/18/1260">Sami Tolvanen</a></li></ul></li></ul></li><li><a href="/lkml/2022/7/18/1254">Sami Tolvanen</a><ul><li><a href="/lkml/2022/7/18/1280">Thomas Gleixner</a><ul><li><a href="/lkml/2022/7/18/1289">Sami Tolvanen</a></li><li><a href="/lkml/2022/7/18/1310">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/7/18/1315">Peter Zijlstra</a><ul><li><a href="/lkml/2022/7/20/205">Thomas Gleixner</a></li><li><a href="/lkml/2022/7/20/755">Sami Tolvanen</a></li><li><a href="/lkml/2022/7/20/940">Sami Tolvanen</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/7/22/1016">Tim Chen</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 22 Jul 2022 15:18:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/38] x86/retbleed: Call depth tracking mitigation</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 22, 2022 at 1:11 PM Tim Chen &lt;tim.c.chen&#64;linux.intel.com&gt; wrote:<br />&gt;<br />&gt; Here are some performance numbers for FIO running on a SKX server with<br />&gt; Intel Cold Stream SSD. Padding improves performance significantly.<br /><br />That certainly looks oh-so-much better than those disgusting ibrs numbers.<br /><br />One thing that I wonder about - gcc already knows about leaf functions<br />for other reasons (stack setup is often different anyway), and I<br />wonder it it might be worth looking at making leaf functions avoid the<br />whole depth counting, and just rely on a regular call/ret.<br /><br />The whole call chain thing is already not entirely exact and is<br />counting to a smaller value than the real RSB size.<br /><br />And leaf functions are generally the smallest and most often called,<br />so it might be noticeable on profiles and performance numbers to just<br />say "we already know this is a leaf, there's no reason to increment<br />the depth for this only to decrement it when it returns".<br /><br />The main issue is obviously that the return instruction has to be a<br />non-decrementing one too for the leaf function case, so it's not just<br />"don't do the counting on entry", it's also a "don't do the usual<br />rethunk on exit".<br /><br />So I just wanted to raise this, not because it's hugely important, but<br />just to make people think about it - I have these very clear memories<br />of the whole "don't make leaf functions create a stack frame" having<br />been a surprisingly big deal for some loads.<br /><br />Of course, sometimes when I have clear memories, they turn out to be<br />just some drug-induced confusion in the end. But I know people<br />experimented with "-fno-omit-frame-pointer -momit-leaf-frame-pointer"<br />and that it made a big difference (but caused some issue with pvops<br />hidden in asm so that gcc incorrectly thought they were leaf functions<br />when they weren't).<br /><br />                    Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
