    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/1420">First message in thread</a></li><li><a href="/lkml/2022/7/14/1420">Nick Desaulniers</a><ul><li><a href="/lkml/2022/7/14/1434">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/14/1454">Nick Desaulniers</a><ul><li><a href="/lkml/2022/7/14/1463">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2022/7/14/1435">Nathan Chancellor</a></li><li><a href="/lkml/2022/7/14/1508">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2022/7/21/712">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/21/712">Nick Desaulniers</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Jul 2022 10:34:17 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] ubsan: disable UBSAN_DIV_ZERO for clang</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 14, 2022 at 4:15 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; There are still the "__ubsan_handle_load_invalid_value() with UACCESS<br />&gt; enabled" messages, but those are misfeatures of the kvm cmpxchg<br />&gt; implementation.<br /><br />Ok, so it really is independent of the non-optimal kvm cmpxchg implementation.<br /><br />The kvm code is fine - yes, it runs a bit too much code under the<br />CLAC/STAC pair, but that "too much code" really is just a few local<br />variable assignments.<br /><br />So any reasonable compiler will keep them in registers, and even if<br />that's not the case, it would just be a stack spill or reload with AC<br />set, which is not really a problem.<br /><br />But calling out to external functions within that SMAP region is<br />invalid, and objdump warns about it.  Because we really want to<br />minimize the area where user accesses are ok, and it's a "don't do<br />this, you now lost the SMAP protection".<br /><br />ANYWAY.<br /><br />The reason the clang build warns - but the gcc build does not - is<br />simply that clang code generation is just nasty.<br /><br />I decided to make a non-kernel test-case so that clang people can look<br />at it without having to worry about any kernel code issues or the<br />details of the SMAP rules, and it really shows how clang generates<br />horribly pointless and wrong code.<br /><br />I'm not sure what the right thing to do is to get this sorted out, but<br />I created an "issue" on github for this:<br /><br />    <a href="https://github.com/llvm/llvm-project/issues/56568">https://github.com/llvm/llvm-project/issues/56568</a><br /><br />in the hope that this can get fixed. Because it's very clearly a clang<br />misfeature, where clang basically generates insane code that violates<br />the rules we try to enforce with objdump.<br /><br />Nick / Nathan / clang-built-linux people - if there are other better<br />ways than that github issue thing to make people aware of this, that<br />would be lovely, and please forward that issue to the right people.<br /><br />                         Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
