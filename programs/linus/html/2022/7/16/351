    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/1635">First message in thread</a></li><li><a href="/lkml/2022/7/15/916">Nathan Chancellor</a><ul><li><a href="/lkml/2022/7/16/339">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2022/7/17/219">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/17/219">"Vivi, Rodrigo"</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2022/7/16/351/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Jul 2022 15:08:39 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] drm fixes for 5.19-rc7</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Jul 16, 2022 at 2:35 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; That said, even those type simplifications do not fix the fundamental<br />&gt; issue. That "DIV_ROUND_UP()" still ends up being a 64-bit divide,<br />&gt; although now it's at least a "64-by-32" bit divide.<br /><br />Hmm. The "DIV_ROUND_UP()" issue could be solved by just making the<br />rule be that the max_segment size is always a power of two.<br /><br />Then you don't need the (expensive!) DIV_ROUND_UP(), and can just use<br />the regular "round_up()" that works on powers-of-two.<br /><br />And the simplest way to do that is to just make "max_segments" be 2GB.<br /><br />The whole "round_down(UINT_MAX, page_alignment)" seems entirely<br />pointless. Do you really want segments that are some odd number just<br />under the 4GB mark, and force expensive divides?<br /><br />For consistency, I used the same value in<br />i915_rsgt_from_buddy_resource(). I have no idea if that makes sense.<br /><br />Anyway, the attached patch is COMPLETELY UNTESTED. But it at least<br />seems to compile. Maybe.<br /><br />                  Linus<br /> drivers/gpu/drm/i915/i915_scatterlist.c | 8 +++++---<br /> 1 file changed, 5 insertions(+), 3 deletions(-)<br /><br />diff --git a/drivers/gpu/drm/i915/i915_scatterlist.c b/drivers/gpu/drm/i915/i915_scatterlist.c<br />index f63b50b71e10..830dcd833d4e 100644<br />--- a/drivers/gpu/drm/i915/i915_scatterlist.c<br />+++ b/drivers/gpu/drm/i915/i915_scatterlist.c<br />&#64;&#64; -81,7 +81,9 &#64;&#64; struct i915_refct_sgt *i915_rsgt_from_mm_node(const struct drm_mm_node *node,<br /> 					      u64 region_start,<br /> 					      u64 page_alignment)<br /> {<br />-	const u64 max_segment = round_down(UINT_MAX, page_alignment);<br />+	// Make sure max_segment (and thus segment_pages) is<br />+	// a power of two that fits in 32 bits.<br />+	const u64 max_segment = 1ul &lt;&lt; 31;<br /> 	u64 segment_pages = max_segment &gt;&gt; PAGE_SHIFT;<br /> 	u64 block_size, offset, prev_end;<br /> 	struct i915_refct_sgt *rsgt;<br />&#64;&#64; -96,7 +98,7 &#64;&#64; struct i915_refct_sgt *i915_rsgt_from_mm_node(const struct drm_mm_node *node,<br /> <br /> 	i915_refct_sgt_init(rsgt, node-&gt;size &lt;&lt; PAGE_SHIFT);<br /> 	st = &amp;rsgt-&gt;table;<br />-	if (sg_alloc_table(st, DIV_ROUND_UP(node-&gt;size, segment_pages),<br />+	if (sg_alloc_table(st, round_up(node-&gt;size, segment_pages),<br /> 			   GFP_KERNEL)) {<br /> 		i915_refct_sgt_put(rsgt);<br /> 		return ERR_PTR(-ENOMEM);<br />&#64;&#64; -159,7 +161,7 &#64;&#64; struct i915_refct_sgt *i915_rsgt_from_buddy_resource(struct ttm_resource *res,<br /> {<br /> 	struct i915_ttm_buddy_resource *bman_res = to_ttm_buddy_resource(res);<br /> 	const u64 size = res-&gt;num_pages &lt;&lt; PAGE_SHIFT;<br />-	const u64 max_segment = round_down(UINT_MAX, page_alignment);<br />+	const u64 max_segment = 1u &lt;&lt; 31;<br /> 	struct drm_buddy *mm = bman_res-&gt;mm;<br /> 	struct list_head *blocks = &amp;bman_res-&gt;blocks;<br /> 	struct drm_buddy_block *block;</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
