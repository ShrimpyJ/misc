    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/14/1635">First message in thread</a></li><li><a href="/lkml/2022/7/14/1635">Dave Airlie</a><ul><li><a href="/lkml/2022/7/15/746">   pr-tracker-bot&#64;kernel ...</a></li><li><a href="/lkml/2022/7/15/916">Nathan Chancellor</a><ul><li class="origin"><a href="/lkml/2022/7/16/351">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/16/351">Linus Torvalds</a><ul><li><a href="/lkml/2022/7/17/219">"Vivi, Rodrigo"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 16 Jul 2022 14:35:54 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git pull] drm fixes for 5.19-rc7</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 15, 2022 at 2:09 PM Nathan Chancellor &lt;nathan&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; On Fri, Jul 15, 2022 at 01:36:17PM +1000, Dave Airlie wrote:<br />&gt; &gt; Matthew Auld (1):<br />&gt; &gt;       drm/i915/ttm: fix sg_table construction<br />&gt;<br />&gt; This patch breaks i386_defconfig with both GCC and clang:<br />&gt;<br />&gt;   ld: drivers/gpu/drm/i915/i915_scatterlist.o: in function `i915_rsgt_from_mm_node':<br />&gt;   i915_scatterlist.c:(.text+0x1a7): undefined reference to `__udivdi3'<br /><br />Yeah, we definitely don't want arbitrary 64x64 divides in the kernel,<br />and the fact that we don't include libgcc.a once again caught this<br />horrid issue.<br /><br />The offending code is<br /><br />        if (sg_alloc_table(st, DIV_ROUND_UP(node-&gt;size, segment_pages),<br />                           GFP_KERNEL)) {<br /><br />and I have to say that all of those games with "u64 page_alignment"<br />that commit aff1e0b09b54 ("drm/i915/ttm: fix sg_table construction")<br />introduces are absolutely disgusting.<br /><br />And they are just *pointlessly* disgusting.<br /><br />Why is that "page_alignment" a "u64"?<br /><br />And why is it a "size", instead of being a "number of bits"?<br /><br />The code literally does things like<br /><br />        const u64 max_segment = round_down(UINT_MAX, page_alignment);<br /><br />which means that<br /><br /> (a) page_alignment must be a power-of-two for this to work<br />(round_down() only works in powers of two)<br /><br /> (b) the result obviously must fit in an "unsigned int", since it's<br />rounding down a UINT_MAX!<br /><br />So (a) makes it doubtful that "page_alignment" should have been a<br />value (as opposed to mask), and (b) then questions why was that made<br />an "u64" value when it cannot have a u64 range?<br /><br />And if max_segments cannot have a 64-bit range, then segment_pages here:<br /><br />        u64 segment_pages = max_segment &gt;&gt; PAGE_SHIFT;<br /><br />sure cannot.<br /><br />Fixing those then uncovers other things:<br /><br />                len = min(block_size, max_segment - sg-&gt;length);<br /><br />now complains about mixing types ("max_segment - sg-&gt;length" being<br />u32), because 'block_size' is 64, bit, and that does seem to make some<br />amount of sense:<br /><br />        block_size = node-&gt;size &lt;&lt; PAGE_SHIFT;<br /><br />with the 'node-&gt;size' being from drm_mm_node, and that size is a<br />'u64'. That I *could* see being more than 32 bits on a 64-bit<br />architecture. Ok.<br /><br />But then that means that 'len' cannot be a 64-bit value either, and it<br />should probably have been<br /><br />                u32 len;<br />    ..<br />                len = min_t(u64, block_size, max_segment - sg-&gt;length);<br /><br />and that would just have been a lot nicer on 32-bit x86, avoiding a<br />lot of pointlessly 64-bit things.<br /><br />That said, even those type simplifications do not fix the fundamental<br />issue. That "DIV_ROUND_UP()" still ends up being a 64-bit divide,<br />although now it's at least a "64-by-32" bit divide.<br /><br />Which needs to be handled by "do_div()" rather than the generic<br />DIV_ROUND_UP() helper, because sadly, at least gcc still generates a<br />full __udivdi3() even for the 64-by-32 divides.<br /><br />Can Intel GPU people please take a look?<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
