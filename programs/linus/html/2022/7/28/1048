    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/7/28/935">First message in thread</a></li><li><a href="/lkml/2022/7/28/935">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2022/8/1/981">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/1/981">Nick Desaulniers</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Jul 2022 14:49:24 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/5] lib/find: optimize find_bit() functions</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 28, 2022 at 11:49 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; It builds for me and seems to generate reasonable code, although I<br />&gt; notice that clang messes up the "__ffs()" inline asm and forces the<br />&gt; source into memory.<br /><br />I have created a llvm issue for this at<br /><br />        <a href="https://github.com/llvm/llvm-project/issues/56789">https://github.com/llvm/llvm-project/issues/56789</a><br /><br />and while I noticed this while looking at the rather odd code<br />generation for the bit finding functions, it seems to be a general<br />issue with clang inline asm.<br /><br />It looks like any instruction that takes a mod/rm input (so a register<br />or memory) will always force the thing to be in memory. Which is very<br />pointless in itself, but it actually causes some functions to have a<br />stack frame that they wouldn't otherwise need or want. So it actually<br />has secondary downsides too.<br /><br />And yes, that particular case could be solved with __builtin_ctzl(),<br />which seems to DTRT. But that uses plain bsf, and we seem to really<br />want tzcnt ("rep bsf") here, although I didn't check why (the comment<br />explicitly says "Undefined if no bit exists", which is the main<br />difference between bsf and tzcnt).<br /><br />I _think_ it's because tzcnt is faster when it exists exactly because<br />it always writes the destination, so 'bsf' is actually the inferior<br />op, and clang shouldn't generate it.<br /><br />But the "rm" thing exists elsewhere too, and I just checked - this<br />same issue seems to happen with "g" too (ie "any general integer<br />input").<br /><br />                      Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
