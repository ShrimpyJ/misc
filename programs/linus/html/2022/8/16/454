    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/8/15/860">First message in thread</a></li><li><a href="/lkml/2022/8/15/2076">Tejun Heo</a><ul><li><a href="/lkml/2022/8/16/405">Herbert Xu</a><ul><li class="origin"><a href="/lkml/2022/8/16/469">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/16/469">Hector Martin</a><ul><li><a href="/lkml/2022/8/16/525">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/8/16/530">Herbert Xu</a><ul><li><a href="/lkml/2022/8/16/500">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2022/8/16/1139">Will Deacon</a><ul><li><a href="/lkml/2022/8/16/1196">Boqun Feng</a></li><li><a href="/lkml/2022/8/16/1325">Linus Torvalds</a></li><li><a href="/lkml/2022/8/16/1344">Tejun Heo</a></li></ul></li></ul></li><li><a href="/lkml/2022/8/16/1303">Tejun Heo</a><ul><li><a href="/lkml/2022/8/16/1360">Hector Martin</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2022/8/16/454/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Aug 2022 22:27:10 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] workqueue: Fix memory ordering race in queue_work*()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 15, 2022 at 9:15 PM Herbert Xu &lt;herbert&#64;gondor.apana.org.au&gt; wrote:<br />&gt;<br />&gt; Please revert this as test_and_set_bit was always supposed to be<br />&gt; a full memory barrier.  This is an arch bug.<br /><br />Yes, the bitops are kind of strange for various legacy reasons:<br /><br /> - set/clear_bit is atomic, but without a memory barrier, and need a<br />"smp_mb__before_atomic()" or similar for barriers<br /><br /> - test_and_set/clear_bit() are atomic, _and_ are memory barriers<br /><br /> - test_and_set_bit_lock and test_and_clear_bit_unlock are atomic and<br />_weaker_ than full memory barriers, but sufficient for locking (ie<br />acquire/release)<br /><br />Does any of this make any sense at all? No. But those are the<br />documented semantics exactly because people were worried about<br />test_and_set_bit being used for locking, since on x86 all the atomics<br />are also memory barriers.<br /><br />From looking at it, the asm-generic implementation is a bit<br />questionable, though. In particular, it does<br /><br />        if (READ_ONCE(*p) &amp; mask)<br />                return 1;<br /><br />so it's *entirely* unordered for the "bit was already set" case.<br /><br />That looks very wrong to me, since it basically means that the<br />test_and_set_bit() can return "bit was already set" based on an old<br />value - not a memory barrier at all.<br /><br />So if you use "test_and_set_bit()" as some kind of "I've done my work,<br />now I am going to set the bit to tell people to pick it up", then that<br />early "bit was already set" code completely breaks it.<br /><br />Now, arguably our atomic bitop semantics are very very odd, and it<br />might be time to revisit them. But that code looks very very buggy to<br />me.<br /><br />The bug seems to go back to commit e986a0d6cb36 ("locking/atomics,<br />asm-generic/bitops/atomic.h: Rewrite using atomic_*() APIs"), and the<br />fix looks to be as simple as just removing that early READ_ONCE return<br />case (test_and_clear has the same bug).<br /><br />Will?<br /><br />IOW, the proper fix for this should, I think, look something like this<br />(whitespace mangled) thing:<br /><br />   --- a/include/asm-generic/bitops/atomic.h<br />   +++ b/include/asm-generic/bitops/atomic.h<br />   &#64;&#64; -39,9 +39,6 &#64;&#64; arch_test_and_set_bit(<br />        unsigned long mask = BIT_MASK(nr);<br /><br />        p += BIT_WORD(nr);<br />   -    if (READ_ONCE(*p) &amp; mask)<br />   -            return 1;<br />   -<br />        old = arch_atomic_long_fetch_or(mask, (atomic_long_t *)p);<br />        return !!(old &amp; mask);<br />    }<br />   &#64;&#64; -53,9 +50,6 &#64;&#64; arch_test_and_clear_bit<br />        unsigned long mask = BIT_MASK(nr);<br /><br />        p += BIT_WORD(nr);<br />   -    if (!(READ_ONCE(*p) &amp; mask))<br />   -            return 0;<br />   -<br />        old = arch_atomic_long_fetch_andnot(mask, (atomic_long_t *)p);<br />        return !!(old &amp; mask);<br />    }<br />but the above is not just whitespace-damaged, it's entirely untested<br />and based purely on me looking at that code.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
