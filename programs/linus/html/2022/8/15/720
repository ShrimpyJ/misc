    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/8/14/684">First message in thread</a></li><li><a href="/lkml/2022/8/14/684">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/14/718">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2022/8/14/719">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/14/838">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/15/7">"Kirill A. Shutemov"</a></li><li><a href="/lkml/2022/8/15/228">Mike Rapoport</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2022/8/15/168">Peter Zijlstra</a><ul><li class="origin"><a href="/lkml/2022/8/15/848">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/15/848">Peter Zijlstra</a></li><li><a href="/lkml/2022/8/15/3792">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/16/718">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Aug 2022 08:58:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Simplify load_unaligned_zeropad() (was Re: [GIT PULL] Ceph updates for 5.20-rc1)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 15, 2022 at 12:17 AM Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; So obviously we could use _ASM_EXTABLE_TYPE_REG together with something<br />&gt; like: "mov (%[reg]), %[reg]" to not depend on these fixed registers, but<br />&gt; yeah, that doesn't seem needed. Code-gen is fine as is.<br /><br />I looked at using TYPE_REG, but it got *much* more complicated for no<br />obvious gain.<br /><br />The biggest downside of the fixed registers is actually the address,<br />which in the fs/dcache.c case doesn't matter (the address is just in a<br />register anyway, and the compiler can pick the register it wants to<br />and seems to happily pick %rdx).<br /><br />But in fs/namei.c, the code *used* to be able to use register indexed<br />addressing, and now needs to use a 'lea' to generate the address into<br />a single register.<br /><br />Using _ASM_EXTABLE_TYPE_REG wouldn't help that case - we'd have to<br />actually disassemble the instruction that faulted, and figure out the<br />address that way. Because while the fault itself gives us an address,<br />it gives us the address of the fault, which will be the first byte of<br />the next page, not the beginning address for the access that we want.<br /><br />And no, disassembling the instruction wouldn't kill us either (we know<br />it's a "mov" instruction, so it's just the modrm bytes), but again it<br />really didn't seem worth the pain. The generated code with the fixed<br />registers wasn't optimal, but it was close enough that it really<br />doesn't seem to matter.<br /><br />&gt; &gt; +     regs-&gt;ip = ex_fixup_addr(e);<br />&gt; &gt; +     return true;<br />&gt;<br />&gt; I think the convention here is to do:<br />&gt;<br />&gt;         return ex_handler_default(e, regs);<br /><br />Ahh, yes, except for the FP case where we restore it first (because<br />the code seems to want to print out the restored address for some<br />reason).<br /><br />I had just started with the ex_handler_default() implementation as the<br />boiler plate, which is why I did that thing by hand.<br /><br />Will fix.<br /><br />The other question I had was actually the "return false" above - I<br />decided that if the address of the fault does *not* match the expected<br />"round %rdx up" address, we shouldn't do any fixup at all, and treat<br />it as a regular kernel oops - as if the exception table hadn't been<br />found at all.<br /><br />That seems to be a good policy, but no other exception handler does<br />anything like that, so maybe somebody has comments about that thing?<br />All the other exception handler fixup functions always return true<br />unconditionally, but the fixup_exception() code is clearly written to<br />be able to return 0 for "no fixup".<br /><br />I may have written that code originally, but it's _soo_ long ago that ....<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
