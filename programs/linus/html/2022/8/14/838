    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2022/8/14/684">First message in thread</a></li><li><a href="/lkml/2022/8/14/718">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2022/8/14/719">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2022/8/15/7">Linus Torvalds</a><ul><li><a href="/lkml/2022/8/15/7">"Kirill A. Shutemov"</a></li><li><a href="/lkml/2022/8/15/228">Mike Rapoport</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Aug 2022 20:43:09 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Simplify load_unaligned_zeropad() (was Re: [GIT PULL] Ceph updates for 5.20-rc1)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Aug 14, 2022 at 3:59 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; If TDX has problems with it, then TDX needs to be fixed. And it's<br />&gt; simple enough - just make sure you have a guard page between any<br />&gt; kernel RAM mapping and whatever odd crazy page.<br /><br />.. thinking about this more, I thought we had already done that in the<br />memory initialization code - ie make sure that we always leave a gap<br />between any page we mark and any IO memory after it.<br /><br />But it's possible that I'm confused with the IO window allocation<br />code, which does the reverse (ie actively try to avoid starting<br />allocations close to the end-of-RAM because there is often<br />undocumented stolen memory there)<br /><br />I'd much rather lose one page from the page allocator at the end of a<br />RAM region than lose the ability to do string word operations.<br /><br />Of course, it's also entirely possible that even if my memory about us<br />already trying to do that is right (which it might not be), we might<br />also have lost that whole thing over time, since we've had a lot of<br />updates to the bootmem/memblock setup.<br /><br />Bringing in Mike Rapoport in case he can point to the code (or lack there-of).<br /><br />Mike?<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
