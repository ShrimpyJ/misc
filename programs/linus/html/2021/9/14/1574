    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/14/869">First message in thread</a></li><li><a href="/lkml/2021/9/14/1384">Steven Rostedt</a><ul><li><a href="/lkml/2021/9/14/1545">Vlastimil Babka</a><ul><li class="origin"><a href="/lkml/2021/9/15/274">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/15/274">Vlastimil Babka</a></li></ul></li></ul></li><li><a href="/lkml/2021/9/14/1588">Masami Hiramatsu</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Sep 2021 16:29:27 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] tracing: Fixes to bootconfig memory management</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 14, 2021 at 3:48 PM Vlastimil Babka &lt;vbabka&#64;suse.cz&gt; wrote:<br />&gt;<br />&gt; Well, looks like I can't. Commit 77e02cf57b6cf does boot fine for me,<br />&gt; multiple times. But so now does the parent commit 6a4746ba06191. Looks like<br />&gt; the magic is gone. I'm now surprised how deterministic it was during the<br />&gt; bisect (most bad cases manifested on first boot, only few at second).<br /><br />Well, your report was clearly memory corruption by the invalid<br />memblock_free() just ending up causing random problems later on.<br /><br />So it could easily be 100% deterministic with a certain memory layout<br />at a particular commit. And then enough other changes later, and it's<br />all gone, because the memory corruption now hits something else that<br />didn't even care.<br /><br />The code for your oops was<br /><br />   0: 48 8b 17              mov    (%rdi),%rdx<br />   3: 48 39 d7              cmp    %rdx,%rdi<br />   6: 74 43                je     0x4b<br />   8: 48 8b 47 08          mov    0x8(%rdi),%rax<br />   c: 48 85 c0              test   %rax,%rax<br />   f: 74 23                je     0x34<br />  11: 49 89 c0              mov    %rax,%r8<br />  14:* 48 8b 40 10          mov    0x10(%rax),%rax &lt;-- trapping instruction<br /><br />and that's the start of rb_next(), so what's going on is that<br />"rb-&gt;rb_right" (the second word of 'struct rb_node') ends up having<br />that value in %rax:<br /><br />  RAX: 343479726f6d656d<br /><br />which is ASCII "44yromem" rather than a valid pointer if I looked that up right.<br /><br />And just _slightly_ different allocation patterns, and your 'struct<br />rb_node' gets allocated somewhere else, and you don't see the oops at<br />all, or you get it later in some different place.<br /><br />Most memory corruption doesn't cause oopses, because most memory isn't<br />used as pointers etc.<br /><br />What you _could_ try if you care enough is<br /><br /> - go back to the thing you bisectted to where you can still hopefully<br />recreate the problem<br /><br /> - apply that patch at that point with no other changes<br /><br />and then the test would hopefully be closer to the state you could<br />re-create the problem.<br /><br />And hopefully it would still not reproduce, just because the bug is<br />fixed, of course ;)<br /><br />The very unlikely alternative is that your bisect was just pure random<br />bad luck and hit the wrong commit entirely, and the oops was due to<br />some other problem.<br /><br />But it does seem unlikely to be something else. Usually when bisects<br />go off into the weeds due to not being reproducible, they go very<br />obviously off into the weeds rather than point to something that ends<br />up having a very similar bug.<br /><br />           Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
