    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/14/869">First message in thread</a></li><li><a href="/lkml/2021/9/14/869">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2021/9/14/1206">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/14/1206">Steven Rostedt</a><ul><li><a href="/lkml/2021/9/14/1213">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/14/1234">Steven Rostedt</a></li><li><a href="/lkml/2021/9/14/1261">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2021/9/17/1022">Mike Rapoport</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Sep 2021 11:01:31 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] tracing: Fixes to bootconfig memory management</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 14, 2021 at 7:56 AM Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; A couple of memory management fixes to the bootconfig code<br /><br />These may be fixes, but they are too ugly to merit the tiny<br />theoretical leak fix.<br /><br />All of these are just plain wrong:<br /><br />&gt; +static void *init_xbc_data_copy __initdata;<br />&gt; +static phys_addr_t init_xbc_data_size __initdata;<br />&gt; +               init_xbc_data_copy = copy;<br />&gt; +               init_xbc_data_size = size + 1;<br />&gt; +       memblock_free(__pa(init_xbc_data_copy), init_xbc_data_size);<br /><br />because the xbc code already saves these as xbc_data/xbc_data_size and<br />that final free should just be done in xbc_destroy_all().<br /><br />So this fix is pointlessly ugly to begin with.<br /><br />But what I _really_ ended up reacting to was that<br /><br />&gt; +               memblock_free(__pa(copy), size + 1);<br /><br />where that "copy" was allocated with<br /><br />        copy = memblock_alloc(size + 1, SMP_CACHE_BYTES);<br /><br />so it should damn well be free'd without any crazy "__pa()" games.<br /><br />This is a memblock interface bug, plain and simple.<br /><br />Mike - this craziness needs to just be fixed. If memblock_alloc()<br />returns a virtual address, then memblock_free() should take one.<br /><br />And if somebody has physical addresses because they aren't freeing<br />previously allocated resources, but because they are initializing the<br />memblock data from physical resources, then it shouldn't be called<br />"memblock_free()".<br /><br />Alternatively, it should just _all_ be done in physaddr_t - that would<br />at least be consistent. But it would be *bad*.<br /><br />Let's just get these interfaces fixed. It might be as simple as having<br />a "memblock_free_phys()" interface, and doing a search-and-replace<br />with coccinelle of<br /><br />     memblock_free(__pa(xyz), .. -&gt; memblock_free(xyz, ...<br />     memblock_free(other, .. -&gt; memblock_free_phys(other, ..<br /><br />and adding the (trivial) internal helper functions to memblock,<br />instead of making the atcual _users_ of memblock do insanely stupid<br />and confusing things.<br /><br />Doing that automatic replacement might need an intermediate to avoid<br />the ambiguous case - first translate<br /><br />     memblock_free(__pa(xyz), .. -&gt; memblock_free_sane(xyz, ..<br /><br />and then do any remaining<br /><br />     memblock_free(xyz, .. -&gt; memblock_free_phys(xyz, ..<br /><br />and then when there are no remaining cases of 'memblock_free()' left,<br />do a final rename<br /><br />     memblock_free_sane(.. -&gt; memblock_free(..<br /><br />but the actual commit can and should be just a single commit that just<br />fixes 'memblock_free()' to have sane interfaces.<br /><br />Happily at least the type ends up making sure that we don't have<br />subtle mistakes (ie physaddr_t is an integer type, and a virtual<br />pointer is a pointer, so any missed conversions would cause nice<br />compile-time errors).<br /><br />I hadn't noticed this insanity until now, but now that I do, I really<br />don't want to add to the ugliness for some unimportant theoretical<br />leak fix.<br /><br />The memblock code has had enough subtleties that having inconsistent<br />and illogical basic interfaces is certainly not a good idea.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
