    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/10/848">First message in thread</a></li><li><a href="/lkml/2021/9/10/848">Kees Cook</a><ul><li><a href="/lkml/2021/9/10/868">Alexei Starovoitov</a><ul><li><a href="/lkml/2021/9/10/927">Kees Cook</a></li></ul></li><li class="origin"><a href="/lkml/2021/9/14/1050">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/14/1050">Kees Cook</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Sep 2021 12:40:41 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] treewide: Remove unnamed static initializations to 0</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 10, 2021 at 3:52 PM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; Since "= { 0 }" and "= { }" have the same meaning ("incomplete<br />&gt; initializer") they will both initialize the given variable to zero<br />&gt; (modulo padding games).<br />&gt;<br />&gt; After this change, I can almost build the "allmodconfig" target with<br />&gt; GCC 4.9 again.<br />&gt;<br />&gt; Signed-off-by: Kees Cook &lt;keescook&#64;chromium.org&gt;<br />&gt; ---<br />&gt; With this patch and the following three, I can build with gcc 4.9 again:<br />&gt; <a href="https://lore.kernel.org/lkml/20210910223332.3224851-1-keescook&#64;chromium.org/">https://lore.kernel.org/lkml/20210910223332.3224851-1-keescook&#64;chromium.org/</a><br />&gt; <a href="https://lore.kernel.org/lkml/20210910223409.3225001-1-keescook&#64;chromium.org/">https://lore.kernel.org/lkml/20210910223409.3225001-1-keescook&#64;chromium.org/</a><br />&gt; <a href="https://lore.kernel.org/lkml/20210910223613.3225685-1-keescook&#64;chromium.org/">https://lore.kernel.org/lkml/20210910223613.3225685-1-keescook&#64;chromium.org/</a><br />&gt; I look forward to raising our minimum GCC version again! :)<br /><br />So this was one of the patches I left in my pending queue, and I don't<br />exactly hate it, but given the option to just say "don't use gcc-4.9"<br />and applying this big patch, I did the former.<br /><br />That said, one of the reasons I didn't like the patch that much is<br />that it seems to be a mindless "just search-and-replace everything",<br />very much for initializers that didn't complain even with gcc-4.9, and<br />that were entirely correct.<br /><br />I would _not_ mind a patch that actually fixed only the places where<br />it actually _is_ a question of missing braces, and we have an unnamed<br />union or something like that.<br /><br />So some of the gcc-4.9 warnings certainly looked at least _somewhat_<br />reasonable for a compiler that didn't do unnamed unions or structures<br />very well.<br /><br />And I wouldn't mind replacing those. But this patch seems to then<br />change entirely correct code that no reasonable compiler could<br />possibly warn about. I wonder if some coccinelle script or other would<br />find a much more reasonable subset?<br /><br />With the gcc-4.9 support being dropped, that probably doesn't matter<br />any more, of course. But I just wanted to say that I didn't hate the<br />patch, but that it seemed to be too much of an automated hammer for<br />the problem that could be solved a lot more surgically.<br /><br />The three remaining patches you point at look interesting, although I<br />think that third one looks decidedly odd. Why not add the 'const' in<br />the callers instead of removing it from the function? And why don't I<br />see those warnings - is this some compiler bug?<br /><br />          Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
