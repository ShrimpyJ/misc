    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/19/200">First message in thread</a></li><li><a href="/lkml/2021/9/19/200">Thomas Gleixner</a><ul><li><a href="/lkml/2021/9/19/201">Thomas Gleixner</a><ul><li><a href="/lkml/2021/9/19/236">   pr-tracker-bot&#64;kernel ...</a></li></ul></li><li><a href="/lkml/2021/9/19/202">Thomas Gleixner</a><ul><li><a href="/lkml/2021/9/19/204">Borislav Petkov</a><ul><li><a href="/lkml/2021/9/19/205">Borislav Petkov</a><ul><li><a href="/lkml/2021/9/19/239">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul></li></ul></li><li class="origin"><a href="/lkml/2021/9/20/260">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/20/260">Peter Zijlstra</a><ul><li><a href="/lkml/2021/9/20/566">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2021/9/19/237">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2021/9/19/226/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Sep 2021 13:10:45 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT pull] locking/urgent for v5.15-rc2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 19, 2021 at 11:28 AM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt;<br />&gt; -       atomic_add(READER_BIAS - bias, &amp;rwb-&gt;readers);<br />&gt; +       /*<br />&gt; +        * _release() is needed in case that reader is in fast path, pairing<br />&gt; +        * with atomic_try_cmpxchg() in rwbase_read_trylock(), provides RELEASE<br />&gt; +        */<br />&gt; +       (void)atomic_add_return_release(READER_BIAS - bias, &amp;rwb-&gt;readers);<br /><br />Ugh. This really needs fixing.<br /><br />atomic_add() is already much more than release-ordered on x86, and<br />atomic_add_return_release() is much more expensive on some uarchs.<br /><br />I think it should be easy to add a atomic_add_release() function, and<br />it might be as simple as the attached patch, allowing architectures to<br />add their own arch_atomic_add_release() as needed.<br /><br />I've pulled this, but please don't do things like the above hack.<br /><br />            Linus<br /> arch/x86/include/asm/atomic.h               | 2 ++<br /> include/linux/atomic/atomic-arch-fallback.h | 4 ++++<br /> include/linux/atomic/atomic-instrumented.h  | 7 +++++++<br /> 3 files changed, 13 insertions(+)<br /><br />diff --git a/arch/x86/include/asm/atomic.h b/arch/x86/include/asm/atomic.h<br />index 5e754e895767..6c5814177c73 100644<br />--- a/arch/x86/include/asm/atomic.h<br />+++ b/arch/x86/include/asm/atomic.h<br />&#64;&#64; -55,6 +55,8 &#64;&#64; static __always_inline void arch_atomic_add(int i, atomic_t *v)<br /> 		     : "ir" (i) : "memory");<br /> }<br /> <br />+#define arch_atomic_add_release arch_atomic_add<br />+<br /> /**<br />  * arch_atomic_sub - subtract integer from atomic variable<br />  * &#64;i: integer value to subtract<br />diff --git a/include/linux/atomic/atomic-arch-fallback.h b/include/linux/atomic/atomic-arch-fallback.h<br />index a3dba31df01e..ae437d961bd1 100644<br />--- a/include/linux/atomic/atomic-arch-fallback.h<br />+++ b/include/linux/atomic/atomic-arch-fallback.h<br />&#64;&#64; -165,6 +165,10 &#64;&#64; arch_atomic_set_release(atomic_t *v, int i)<br /> #define arch_atomic_set_release arch_atomic_set_release<br /> #endif<br /> <br />+#ifndef arch_atomic_add_release<br />+#define arch_atomic_add_release (void)arch_atomic_add_return_release<br />+#endif<br />+<br /> #ifndef arch_atomic_add_return_relaxed<br /> #define arch_atomic_add_return_acquire arch_atomic_add_return<br /> #define arch_atomic_add_return_release arch_atomic_add_return<br />diff --git a/include/linux/atomic/atomic-instrumented.h b/include/linux/atomic/atomic-instrumented.h<br />index a0f654370da3..485b89804b9d 100644<br />--- a/include/linux/atomic/atomic-instrumented.h<br />+++ b/include/linux/atomic/atomic-instrumented.h<br />&#64;&#64; -56,6 +56,13 &#64;&#64; atomic_add(int i, atomic_t *v)<br /> 	arch_atomic_add(i, v);<br /> }<br /> <br />+static __always_inline void<br />+atomic_add_release(int i, atomic_t *v)<br />+{<br />+	instrument_atomic_read_write(v, sizeof(*v));<br />+	arch_atomic_add_release(i, v);<br />+}<br />+<br /> static __always_inline int<br /> atomic_add_return(int i, atomic_t *v)<br /> {</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
