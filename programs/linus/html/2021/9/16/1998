    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/14/1749">First message in thread</a></li><li><a href="/lkml/2021/9/15/955">Linus Torvalds</a><ul><li><a href="/lkml/2021/9/16/65">Anders Larsen</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 16 Sep 2021 09:25:38 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 0/4] Introduce and use absolute_pointer macro</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 16, 2021 at 12:02 AM Anders Larsen &lt;al&#64;alarsen.net&gt; wrote:<br />&gt;<br />&gt; On Wednesday, 2021-09-15 23:19 Linus Torvalds wrote:<br />&gt; &gt;<br />&gt; &gt; But hey, maybe it just works so well for the very specialized user base ...<br />&gt;<br />&gt; it's actually the latter (although I guess the user base is shrinking)<br /><br />Hey, so if it's actively used, maybe you can answer a question or two<br />that I have just because I looked at the code..<br /><br />In particular, the inode number calculation is odd. Is there a reason<br />for the "-1"? Because iboth the link case and the direct inode case<br />have it, but t's a _different_ "-1":<br /><br />For the "inode_entry", it does<br /><br />                ino = blknum * QNX4_INODES_PER_BLOCK + ix - 1;<br /><br />but it's worth noting that "ix" is zero-based (index within the<br />block), so this kind of oddly removes one from a zero-based thing, and<br />the 'ino' for the very first entry ends up being -1.<br /><br />Of course, it's possible that the first entry is always empty, but it<br />does seem a bit odd.<br /><br />For the "link_info" case, it does<br /><br />            ino = ( le32_to_cpu(de-&gt;link.dl_inode_blk) - 1 ) *<br />                    QNX4_INODES_PER_BLOCK +<br />                    de-&gt;link.dl_inode_ndx;<br /><br />so now it takes the _block_ index, and does that "-1" on it, and then<br />multiplies it by the "entries per block" number, and adds the index.<br /><br />So now if both are zero, the inode number is -8, not -1.<br /><br />But all of this matches what the *lookup* code does. It's very odd, though.<br /><br />But to make it stranger, then in "qnx4_iget()", the calculations all<br />makes sense. There it just does "take the inode number, and look up<br />block and index into the block using it".<br /><br />Very strange and confusing. Because it means that iget() seems to look<br />up a *different* inode entry than "lookup" and "readdir" actually look<br />at.<br /><br />I must be missing something. I obviously didn't touch any of this<br />logic, I was just doing the "make the type system clearer for the<br />compiler".<br /><br />Also, I have to say, since I was looking at compiler output, the<br />calculations in readdir() are made much worse by the fact that the<br />dir-&gt;pos is a "loff_t". That's signed. And then you use "%" to get the<br />index within a block. Using '%' instead of bitops is fairly<br />equivalent, but only for<br /><br /> (a) unsigned types<br /><br /> (b) when the divisor is a compile-time power-of-2<br /><br />In the qnx4 case, (b) is true, but (a) is not.<br /><br />Not a big deal. But usually, I tell people to avoid '% ENTRIES',<br />because it really has very different behavior from '&amp; MASK' for signed<br />numbers.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
