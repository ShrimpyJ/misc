    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/3/1093">First message in thread</a></li><li><a href="/lkml/2021/8/3/1138">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/16/1153">Andreas Gruenbacher</a><ul><li class="origin"><a href="/lkml/2021/8/19/838">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/19/838">Andreas Gruenbacher</a><ul><li><a href="/lkml/2021/8/19/886">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Aug 2021 14:49:28 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v5 00/12] gfs2: Fix mmap + page fault deadlocks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Sorry for the delay, I was on the road and this fell through the cracks ]<br /><br />On Mon, Aug 16, 2021 at 12:14 PM Andreas Gruenbacher<br />&lt;agruenba&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On Tue, Aug 3, 2021 at 9:45 PM Linus Torvalds<br />&gt; &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt; &gt;<br />&gt; &gt; Hmm. Have you tried to figure out why that "still returns 0" happens?<br />&gt;<br />&gt; The call stack is:<br />&gt;<br />&gt; gup_pte_range<br />&gt; gup_pmd_range<br />&gt; gup_pud_range<br />&gt; gup_p4d_range<br />&gt; gup_pgd_range<br />&gt; lockless_pages_from_mm<br />&gt; internal_get_user_pages_fast<br />&gt; get_user_pages_fast<br />&gt; iov_iter_get_pages<br />&gt; __bio_iov_iter_get_pages<br />&gt; bio_iov_iter_get_pages<br />&gt; iomap_dio_bio_actor<br />&gt; iomap_dio_actor<br />&gt; iomap_apply<br />&gt; iomap_dio_rw<br />&gt; gfs2_file_direct_write<br />&gt;<br />&gt; In gup_pte_range, pte_special(pte) is true and so we return 0.<br /><br />Ok, so that is indeed something that the fast-case can't handle,<br />because some of the special code wants to have the mm_lock so that it<br />can look at the vma flags (eg "vm_normal_page()" and friends.<br /><br />That said, some of these cases even the full GUP won't ever handle,<br />simply because a mapping doesn't necessarily even _have_ a 'struct<br />page' associated with it if it's a VM_IO mapping.<br /><br />So it turns out that you can't just always do<br />fault_in_iov_iter_readable() and then assume that you can do<br />iov_iter_get_pages() and repeat until successful.<br /><br />We could certainly make get_user_pages_fast() handle a few more cases,<br />but I get the feeling that we need to have separate error cases for<br />EFAULT - no page exists - and the "page exists, but cannot be mapped<br />as a 'struct page'" case.<br /><br />I also do still think that even regardless of that, we want to just<br />add a FOLL_NOFAULT flag that just disables calling handle_mm_fault(),<br />and then you can use the regular get_user_pages().<br /><br />That at least gives us the full _normal_ page handling stuff.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
