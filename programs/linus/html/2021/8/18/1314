    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/17/1156">First message in thread</a></li><li><a href="/lkml/2021/8/17/1156">Jens Axboe</a><ul><li class="origin"><a href="/lkml/2021/8/19/565">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/19/565">Jens Axboe</a><ul><li><a href="/lkml/2021/8/22/244">Olivier Langlois</a></li><li><a href="/lkml/2022/3/21/1184">Tony Battersby</a><ul><li><a href="/lkml/2022/3/22/673">"Eric W. Biederman"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2021/8/23/10">Olivier Langlois</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Aug 2021 19:57:32 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] kernel: make TIF_NOTIFY_SIGNAL and core dumps co-exist</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 17, 2021 at 8:06 PM Jens Axboe &lt;axboe&#64;kernel.dk&gt; wrote:<br />&gt;<br />&gt; task_work being added with notify == TWA_SIGNAL will utilize<br />&gt; TIF_NOTIFY_SIGNAL for signaling the targeted task that work is available.<br />&gt; If this happens while a task is going through a core dump, it'll<br />&gt; potentially disturb and truncate the dump as a signal interruption.<br /><br />This patch seems (a) buggy and (b) hacky.<br /><br />&gt; --- a/kernel/task_work.c<br />&gt; +++ b/kernel/task_work.c<br />&gt; &#64;&#64; -41,6 +41,12 &#64;&#64; int task_work_add(struct task_struct *task, struct callback_head *work,<br />&gt;                 head = READ_ONCE(task-&gt;task_works);<br />&gt;                 if (unlikely(head == &amp;work_exited))<br />&gt;                         return -ESRCH;<br />&gt; +               /*<br />&gt; +                * TIF_NOTIFY_SIGNAL notifications will interfere with<br />&gt; +                * a core dump in progress, reject them.<br />&gt; +                */<br />&gt; +               if (notify == TWA_SIGNAL &amp;&amp; (task-&gt;flags &amp; PF_SIGNALED))<br />&gt; +                       return -ESRCH;<br /><br />This basically seems to check task-&gt;flags with no serialization.<br /><br />I'm sure it works 99.9% of the time in practice, since you'd be really<br />unlucky to hit any races, but I really don't see what the<br />serialization logic is.<br /><br />Also, the main user that actually triggered the problem already has<br /><br />        if (unlikely(tsk-&gt;flags &amp; PF_EXITING))<br />                goto fail;<br /><br />just above the call to task_work_add(), so this all seems very hacky indeed.<br /><br />Of course, I don't see what the serialization for _that_ one is either.<br /><br />Pls explain. You can't just randomly add tests for random flags that<br />get modified by other random code.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
