    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/24/668">First message in thread</a></li><li><a href="/lkml/2021/8/24/1423">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/25/191">Oliver Sang</a></li><li><a href="/lkml/2021/8/25/535">(Eric W. Biederman)</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Aug 2021 10:25:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [pipe] 3b844826b6: stress-ng.sigio.ops_per_sec -99.3% regression</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 25, 2021 at 7:11 AM Eric W. Biederman &lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt;<br />&gt; We have two things going on, a pipe wake up and signal wake up.<br />&gt;<br />&gt; Does their order matter?  It feels weird that it is possible that<br />&gt; the data can be read from the pipe and the reader woken up to write<br />&gt; more when the signal that notifies the reader of that state has<br />&gt; not even been queued for delivery.<br /><br />I don't think the order matters.<br /><br />The only thing that matters is that the signal (and the regular<br />wakeup, for that matter) is donme *after* the operation that triggers<br />them is complete. It would be problematic if we sent the signal for<br />"you can read more now" before we had actually done the write, so that<br />the recipient would then try to read and get a "nothing there".<br /><br />But if you have both a pending reader, and something that asked for<br />SIGIO, they'll both get notified. Not in any particular orfder between<br />those two, but both will be notified after the write (or read) that<br />triggered it has been done.<br /><br />Of course, the pending reader/writer that gets notified might be the<br />_same_ one that also gets the SIGIO, so you could then have the SIGIO<br />mean that the reader/writer gets EINTR and needs to read/write again.<br />If you asked for both, you'll get it.<br /><br />The way our pipe code is organized, the _likely_ case is that you'll<br />do the read/write and take the signal handler without ever getting<br />-EAGAIN.  Because we'll test for "do we have more data" before we test<br />for "do we have signals pending" - but that's not really relevant for<br />correctness (it's more a greedy "let's try to read while possible" and<br />could be good for avoiding extra system calls).<br /><br />And I think it was actually a historical mistake to tie the "send<br />SIGIO" together so tightly with "wake up other side". So my untested<br />patch (well, it's now tested by Oliver) is likely the right thing to<br />do regardless.<br /><br />Basically, the "wake up readers/writers" thing is the one where we<br />*know* the other side - it's just the other end, and it's the kernel<br />code in the same fs/pipe.c file. So we can - and should - optimize<br />against doing unnecessary wakeups.<br /><br />But as has now been shown several times, we shouldn't optimize the<br />case where the wakups are sent to code we don't control - ie user<br />space. Whether that be as a result of epoll, or as a signal delivery,<br />that "other side" is not under our control and clearly doesn't want<br />the optimal minimal wakeups for just state transition cases.<br /><br />Of course, I could always wish that the receiving side always did the<br />right thing, and worked with the minimal state transition data, but<br />that clearly simply isn't the case. It wasn't the case for EPOLLET,<br />and it wasn't the case for SIGIO.<br /><br />"If wishes were horses ..."<br /><br />So I'll commit that SIGIO fix, even if Colin has already changed<br />stress-ng. No real harm in just doing both belt and suspenders, and I<br />was wrong last time when I thought the EPOLLET thing was purely a<br />test-suite issue.<br /><br />Let nobody say that I can't learn from my mistakes..<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
