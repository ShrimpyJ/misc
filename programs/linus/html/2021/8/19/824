    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/7/18/303">First message in thread</a></li><li><a href="/lkml/2021/8/19/519">Peter Zijlstra</a><ul><li><a href="/lkml/2021/8/19/593">Peter Zijlstra</a><ul><li class="origin"><a href="/lkml/2021/8/20/64">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/20/64">Peter Zijlstra</a><ul><li><a href="/lkml/2021/8/20/111">Kees Cook</a></li><li><a href="/lkml/2021/8/20/139">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Aug 2021 12:09:37 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm/rmap: Convert from atomic_t to refcount_t on anon_vma-&gt;refcount</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 19, 2021 at 8:21 AM Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; If we can skip the OF... we can do something like this:<br /><br />Honestly, I think a lot of the refcount code is questionable. It was<br />absolutely written with no care for performance AT ALL.<br /><br />I'm not sure it helps to then add arch-specific code for it without<br />thinking it through a _lot_ first.<br /><br />It might be better to just have a "atomic_t with overflow handling" in<br />general, exactly because the refcount_t was designed and written<br />without any regard for code that cares about performance.<br /><br />&gt; static inline bool refcount_dec_and_test(refcount_t *r)<br />&gt; {<br />&gt;         asm_volatile_goto (LOCK_PREFIX "decl %[var]\n\t"<br />&gt;                            "jz %l[cc_zero]\n\t"<br />&gt;                            "jns 1f\n\t"<br /><br />I think you can use "jl" for the bad case.<br /><br />You want to fail if the old value was negative, or if the old value<br />was less than what you subtracted. That's literally the "less than"<br />operator.<br /><br />I think it's better to handle that case out-of-line than play games<br />with UD, though - this is going to be the rare case, the likelihood<br />that we get the fixup wrong is just too big. Once it's out-of-line<br />it's not as critical any more, even if it does add to the size of the<br />code.<br /><br />So if we do this, I think it should be something like<br /><br />   static inline __must_check bool refcount_dec_and_test(refcount_t *r)<br />   {<br />        asm_volatile_goto (LOCK_PREFIX "decl %[var]\n\t"<br />                "jz %l[cc_zero]\n\t"<br />                "jl %l[cc_error]"<br />                : : [var] "m" (r-&gt;refs.counter)<br />                : "memory" : cc_zero, cc_error);<br /><br />        return false;<br /><br />   cc_zero:<br />        return true;<br />   cc_error:<br />        refcount_warn_saturate(r, REFCOUNT_SUB_UAF);<br />        return false;<br />   }<br /><br />and we can discuss whether we could improve on the<br />refcount_warn_saturate() separately.<br /><br />But see above: maybe just make this a separate "careful atomic_t",<br />with the option to panic-on-overflow. So then we could get rid of<br />refcount_warn_saturate() enmtirely above, and instead just have a<br />(compile-time option) BUG() case, with the non-careful version just<br />being our existing atomic_dec_and_test.<br /><br />Giving people who want a smaller kernel the option to do so, while<br />giving people who want checking the option too.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
