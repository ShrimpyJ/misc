    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/24/668">First message in thread</a></li><li><a href="/lkml/2021/8/24/668">kernel test robot</a><ul><li><a href="/lkml/2021/8/24/769">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2021/8/24/1423">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/24/1423">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/25/191">Oliver Sang</a></li><li><a href="/lkml/2021/8/25/535">(Eric W. Biederman)</a></li></ul></li><li><a href="/lkml/2021/8/24/1476">Colin Ian King</a></li><li><a href="/lkml/2021/8/24/1572">Colin Ian King</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Aug 2021 10:32:32 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [pipe] 3b844826b6: stress-ng.sigio.ops_per_sec -99.3% regression</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Added Colin King, as this looks to be related to stress-sigio.c ]<br /><br />On Tue, Aug 24, 2021 at 9:22 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; On Tue, Aug 24, 2021 at 7:56 AM kernel test robot &lt;oliver.sang&#64;intel.com&gt; wrote:<br />&gt; &gt;<br />&gt; &gt; FYI, we noticed a -99.3% regression of stress-ng.sigio.ops_per_sec due to commit:<br />&gt;<br />&gt; Well, that's bad.<br />&gt;<br />&gt; &gt; commit: 3b844826b6c6 ("pipe: avoid unnecessary EPOLLET wakeups under normal loads")<br />&gt;<br />&gt; You fix one benchmark, you break another..<br />&gt;<br />&gt; What's a bit odd is that this commit basically reverts commit<br />&gt; 3a34b13a88ca ("pipe: make pipe writes always wake up readers") which<br />&gt; did *not* result in any kernel test robot report.<br /><br />Hmm. I have a possible clue.<br /><br />I suspect this may be timing-related, and I wonder if the kernel test<br />robot just didn't happen to notice - or report - the other edge of<br />this performance regression because it ends up being random enough.<br /><br />In particular, I think stress-sigio.c is subtly buggy, and the "send<br />SIGIO on every write" may have effectively hidden the bug.<br /><br />Here's my theory on what's going on, and why it has tghat odd -99.3% regression:<br /><br /> - the child in stress-sigio.c does multiple writes in quick<br />succession, while the parent is scheduled away<br /><br /> - the pipe was empty at the beginning, but we send just *one* SIGIO<br />for all these writes<br /><br /> - the parent gets the SIGIO, and goes to stress_sigio_handler(), and<br />reads the buffer<br /><br />but the parent doesn't necessarily *empty* the buffer, so it won't get<br />any more SIGIO signals from subsequent writes.<br /><br />The reason this is timing-dependent and about luck is because the<br />*read* size is BUFFER_SIZE (4kB), but the write sizes are BUFFER_SIZE<br />&gt;&gt; 4 (256 bytes), so 99% of the time if the parent is at all timely,<br />it will do that big read and empty the buffer.<br /><br />But if the child ends up able to do more than 16 writes in a row<br />before the parent wakes up and reads data, the buffer will have more<br />than 4kB of data in it, and when the parent SIGIO handler happens it<br />won't empty the data, and so it will never see another SIGIO.<br /><br />And again - I think this all happened before too (ie before commit<br />3a34b13a88ca) and so 3b844826b6c6 ("pipe: avoid unnecessary EPOLLET<br />wakeups under normal loads") isn't a _new_ regression, it just exposed<br />the bug in the test-case again, and this time the kernel test robot<br />caught it.<br /><br />In other words, I think this is very similar to the EPOLLET problem:<br />user space expected (perhaps not _intentionally_) that SIGIO would<br />happen over and over again when you add new data, even if the pipe<br />already had data.<br /><br />So then commit 1b6b26ae7053 ("pipe: fix and clarify pipe write wakeup<br />logic") came around back in 2019, and only sent SIGIO when the pipe<br />buffer status _changed_ (ie went from empty to having data, rather<br />than "there's new data") and at that point stress-sigio.c became very<br />fragile.<br /><br />We could do the same ugly thing for FASYNC that we do for EPOLLET -<br />make it always fasync on new data, exactly because the previous SIGIO<br />might not have emptied the buffer completely.<br /><br />I'm a _bit_ surprised that the kernel test robot didn't catch this<br />back in 2019, and also didn't report this when commit 3a34b13a88ca<br />("pipe: make pipe writes always wake up readers") should have sped<br />things up again, but I guess the "it's very timing-dependent" might<br />explain it.<br /><br />Colin, comments?<br /><br />Anyway, the above blathering is not based on any actual real data. I'm<br />just looking at stress-sigio.c to see what could be going wrong, and<br />what would explain the test robot report. It's the only thing I see,<br />but maybe somebody else sees anything else..<br /><br />                      Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
