    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/24/668">First message in thread</a></li><li><a href="/lkml/2021/8/24/769">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/24/1420">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2021/8/25/191">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/25/191">Oliver Sang</a></li><li><a href="/lkml/2021/8/25/535">(Eric W. Biederman)</a><ul><li><a href="/lkml/2021/8/25/788">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2021/8/24/1476">Colin Ian King</a></li><li><a href="/lkml/2021/8/24/1572">Colin Ian King</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2021/8/24/1423/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Aug 2021 10:39:25 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [pipe] 3b844826b6: stress-ng.sigio.ops_per_sec -99.3% regression</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 24, 2021 at 10:32 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; We could do the same ugly thing for FASYNC that we do for EPOLLET -<br />&gt; make it always fasync on new data, exactly because the previous SIGIO<br />&gt; might not have emptied the buffer completely.<br /><br />The patch would be something like the attached (UNTESTED!)<br /><br />                  Linus<br /> fs/pipe.c | 20 ++++++++------------<br /> 1 file changed, 8 insertions(+), 12 deletions(-)<br /><br />diff --git a/fs/pipe.c b/fs/pipe.c<br />index 678dee2a8228..6d4342bad9f1 100644<br />--- a/fs/pipe.c<br />+++ b/fs/pipe.c<br />&#64;&#64; -363,10 +363,9 &#64;&#64; pipe_read(struct kiocb *iocb, struct iov_iter *to)<br /> 		 * _very_ unlikely case that the pipe was full, but we got<br /> 		 * no data.<br /> 		 */<br />-		if (unlikely(was_full)) {<br />+		if (unlikely(was_full))<br /> 			wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br />-			kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br />-		}<br />+		kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br /> <br /> 		/*<br /> 		 * But because we didn't read anything, at this point we can<br />&#64;&#64; -385,12 +384,11 &#64;&#64; pipe_read(struct kiocb *iocb, struct iov_iter *to)<br /> 		wake_next_reader = false;<br /> 	__pipe_unlock(pipe);<br /> <br />-	if (was_full) {<br />+	if (was_full)<br /> 		wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br />-		kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br />-	}<br /> 	if (wake_next_reader)<br /> 		wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br />+	kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br /> 	if (ret &gt; 0)<br /> 		file_accessed(filp);<br /> 	return ret;<br />&#64;&#64; -565,10 +563,9 &#64;&#64; pipe_write(struct kiocb *iocb, struct iov_iter *from)<br /> 		 * become empty while we dropped the lock.<br /> 		 */<br /> 		__pipe_unlock(pipe);<br />-		if (was_empty) {<br />+		if (was_empty)<br /> 			wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br />-			kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br />-		}<br />+		kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br /> 		wait_event_interruptible_exclusive(pipe-&gt;wr_wait, pipe_writable(pipe));<br /> 		__pipe_lock(pipe);<br /> 		was_empty = pipe_empty(pipe-&gt;head, pipe-&gt;tail);<br />&#64;&#64; -591,10 +588,9 &#64;&#64; pipe_write(struct kiocb *iocb, struct iov_iter *from)<br /> 	 * Epoll nonsensically wants a wakeup whether the pipe<br /> 	 * was already empty or not.<br /> 	 */<br />-	if (was_empty || pipe-&gt;poll_usage) {<br />+	if (was_empty || pipe-&gt;poll_usage)<br /> 		wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br />-		kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br />-	}<br />+	kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br /> 	if (wake_next_writer)<br /> 		wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br /> 	if (ret &gt; 0 &amp;&amp; sb_start_write_trylock(file_inode(filp)-&gt;i_sb)) {</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
