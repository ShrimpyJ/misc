    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/8/26/413">First message in thread</a></li><li><a href="/lkml/2021/8/26/683">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/27/93">Christoph Hellwig</a><ul><li class="origin"><a href="/lkml/2021/8/27/571">Linus Torvalds</a><ul><li><a href="/lkml/2021/8/27/571">Christoph Hellwig</a><ul><li><a href="/lkml/2021/8/27/586">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Aug 2021 10:03:29 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] arm64 fix for 5.14</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 27, 2021 at 12:40 AM Christoph Hellwig &lt;hch&#64;lst.de&gt; wrote:<br />&gt;<br />&gt; &gt; In a PC world that would be (for example) the legacy PCI space at<br />&gt; &gt; 0xa0000-0xfffff, but I could easily imagine other platforms having<br />&gt; &gt; other situations.<br />&gt;<br />&gt; So what would be the correct check for "this is not actually page backed<br />&gt; normal RAM"?<br /><br />It would probably be interesting to have the arm people explain the<br />call chain for the warning that caused that revert, so we'd have a<br />very concrete example of the situation that goes wrong, but taking a<br />wild stab at it, the code might be something like<br /><br />            /* Don't allow RAM to be mapped */<br />            if (WARN_ON_ONCE(phys_addr_is_ram(phys_addr)))<br />                    return DMA_MAPPING_ERROR;<br /><br />and then having something like<br /><br />  static inline bool phys_addr_is_ram(phys_addr_t phys_addr)<br />  {<br />        unsigned long pfn = PHYS_PFN(phys_addr);<br /><br />        if (!pfn_valid(pfn))<br />                return false;<br />        return is_zero_pfn(pfn) || !PageReserved(pfn_to_page(pfn));<br />  }<br /><br />might be close to right.<br /><br />The ARM code actually uses that complex pfn_to_section_nr() and<br />memblock_is_memory() etc. That seems a bit of an overkill, since the<br />memblock code should have translated all that into being reserved.<br /><br />But again, I don't actually know exactly what triggered the issue on<br />ARM, so the above is just my "this seems to be a more proper check"<br />suggestion.<br /><br />Will?<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
