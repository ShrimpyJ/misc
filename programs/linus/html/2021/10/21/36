    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/19/663">First message in thread</a></li><li><a href="/lkml/2021/10/20/1014">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/20/1116">Catalin Marinas</a><ul><li class="origin"><a href="/lkml/2021/10/22/760">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/22/760">Catalin Marinas</a><ul><li><a href="/lkml/2021/10/22/852">Linus Torvalds</a></li><li><a href="/lkml/2021/10/25/1038">Andreas Gruenbacher</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 20 Oct 2021 20:19:40 -1000</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v8 00/17] gfs2: Fix mmap + page fault deadlocks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 20, 2021 at 12:44 PM Catalin Marinas<br />&lt;catalin.marinas&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; However, with MTE doing both get_user() every 16 bytes and<br />&gt; gup can get pretty expensive.<br /><br />So I really think that anything that is performance-critical had<br />better only do the "fault_in_write()" code path in the cold error path<br />where you took a page fault.<br /><br />IOW, the loop structure should be<br /><br /><br />     repeat:<br />                take_locks();<br />                pagefault_disable();<br />                ret = do_things_with_locks();<br />                pagefault_enable();<br />                release_locks();<br /><br />                // Failure path?<br />                if (unlikely(ret == -EFAULT)) {<br />                        if (fault_in_writable(..))<br />                                goto repeat;<br />                        return -EFAULT;<br />                }<br /><br />rather than have it be some kind of "first do fault_in_writable(),<br />then do the work" model.<br /><br />So I wouldn't worry too much about the performance concerns. It simply<br />shouldn't be a common or hot path.<br /><br />And yes, I've seen code that does that "fault_in_xyz()" before the<br />critical operation that cannot take page faults, and does it<br />unconditionally.<br /><br />But then it isn't the "fault_in_xyz()" that should be blamed if it is<br />slow, but the caller that does things the wrong way around.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
