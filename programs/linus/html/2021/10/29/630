    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/29/475">First message in thread</a></li><li><a href="/lkml/2021/10/29/475">David Howells</a><ul><li><a href="/lkml/2021/10/29/477">David Howells</a></li><li><a href="/lkml/2021/10/29/478">David Howells</a></li><li><a href="/lkml/2021/10/29/479">David Howells</a></li><li><a href="/lkml/2021/10/29/481">David Howells</a></li><li><a href="/lkml/2021/10/29/482">David Howells</a></li><li><a href="/lkml/2021/10/29/483">David Howells</a></li><li><a href="/lkml/2021/10/29/485">David Howells</a></li><li><a href="/lkml/2021/10/29/486">David Howells</a></li><li><a href="/lkml/2021/10/29/488">David Howells</a></li><li><a href="/lkml/2021/10/29/489">David Howells</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2021/10/29/675">David Howells</a><ul><li><a href="/lkml/2021/10/29/690">Linus Torvalds</a></li><li><a href="/lkml/2021/10/29/727">David Howells</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Oct 2021 09:49:34 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v4 00/10] fscache: Replace and remove old I/O API</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 29, 2021 at 7:09 AM David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt;  (1) A simple fallback API is added that can read or write a single page<br />&gt;      synchronously.  The functions for this have "fallback" in their names<br />&gt;      as they have to be removed at some point.<br /><br />David, I still don't understand WHY.<br /><br />I read the explanations in the commits, and that didn't help either.<br /><br />Why, of why, do you insist of adding this intermediate interface that<br />is already documented to "must be removed" at the point it is even<br />added?<br /><br />What's the point of adding garbage that is useless in the long run?<br /><br />Why is the first step not just "remove fscache"?<br /><br />Why is there this addition of the "deprecated" interface - that you<br />have now renamed "fallback"?<br /><br />I agree that "fallback" is a less annoying name, so that renaming is<br />an improvement, but WHY?<br /><br />I absolutely detested your whole "move old garbage around before<br />removal", and I also detest this "add new garbage that will be<br />removed".<br /><br />What's the point? Why isn't the fix just "remove CONFIG_FSCACHE and<br />all the code".<br /><br />You already *HAVE* the "fallback" code - it's all that<br /><br />    #else /* CONFIG_NFS_FSCACHE */<br />    static inline int nfs_fscache_register(void) { return 0; }<br />    static inline void nfs_fscache_unregister(void) {}<br />    ...<br /><br />stuff in &lt;nfs/fscache.h&gt; and friends. So why do you need _new_<br />fallback code, when CONFIG_FSCACHE already exists and already has a<br />"this disables fscache"?<br /><br />Maybe there is some really good reason, but that really good reason<br />sure as hell isn't documented anywhere, and I really don't see the<br />point.<br /><br />So let me say this again:<br /><br /> - it would be much better if you could incrementally just improve the<br />existing FSCACHE so that it just _works_ all the time, and fixes the<br />problems in it, and a bisection works, and there is no flag-day.<br /><br /> - but dammit, if you have to have a flag-day, then there is NO POINT<br />in all this "move the old code around before moving it", or "add a<br />fallback interface before removing it again".<br /><br />Oh, I can understand wanting to keep the header files around in case<br />the interfaces end up being similar enough in the end that it all<br />matters.<br /><br />But I don't understand why you do this kind of crud:<br /><br /> fs/cachefiles/io.c      |   28 ++++++++-<br /> fs/fscache/io.c         |  137 +++++++++++++++++++++++++++++++++++++++------<br /><br />when the neither of those directories will ever even be *compiled* if<br />CONFIG_FSCACHE isn't true (because CACHEFILES has a "depends on<br />FSCACHE").<br /><br />See my argument? If FSCACHE isn't usable during the transition, then<br />don't make these kinds of pointless code movement or creation things<br />that are just dead.<br /><br />There's absolutely no point in having some "fallback" interface that<br />allows people to test some configuration that simply isn't relevant.<br />It doesn't help anything. It just adds more noise and more<br />configurations, and no actual value that I can see.<br /><br />It doesn't help bisectability: if some bug ever bisects to the<br />fallback code, what does that tell us? Nothing. Sure, it trivially<br />tells us the fallback code was buggy, but since the fallback code has<br />been removed afterwards, the _value_ of that information is nil,<br />zilch, nada. It's not "information", it's just "worthless data".<br /><br />And hey, maybe there's some issue that I don't understand, and I don't<br />see. But if there is some subtle value here, it should  have been<br />documented.<br /><br />So I say exactly the same thing I said last time: if the old fscache<br />code is not usable, and you can't incrementally fix it so that it<br />works all the time, then JUST REMOVE IT ALL. Moving it elsewhere<br />before the removal is only pointless noise. But adding some fallback<br />intermediate code before removal is ALSO just pointless noise.<br /><br />Doing a flag-day with "switch from A to B" is already painful and<br />wrong. I don't like it. But I like it even _less_, if it's a "switch<br />from A to B to C".<br /><br />If you do want t9o have a "halfway state", the only halfway state that<br />makes sense to me is something like<br /><br /> (a) make all the changes to the old FSCACHE - keeping it all<br />_working_ during this phase - to make it have the same _interfaces_ as<br />the new fscache will have.<br /><br /> (b) then remove the old FSCACHE entirely<br /><br /> (c) then plop in the new FSCACHE<br /><br />But note how there was no "fallback" stage anywhere. No code that lies<br />around dead at any point. At each point it was either all working old<br />or all working new (or nothing at all).<br /><br />Yes, in this case that "step (a)" is extra work and you're basically<br />modifying code that you know will be removed, but the advantage now is<br /><br /> -  at least the fscache _users_ are being modified while the old and<br />tested world is still working, and the interface change is<br />"bisectable" in that sense. That's useful in itself.<br /><br /> - if it turns out that people have problems with the new generation<br />FSCACHE, they can reverse steps (b) and (c) without having to touch<br />and revert all the other filesystems changes.<br /><br />IOW, if a "same interfaces" state exists, that's fine. But for it to<br />make sense, those same interfaces have to be actually _useful_, not<br />some fallback code that is neither the old nor the new.<br /><br />And maybe you can't do that "step (a)" because the interfaces are part<br />of the fundamental problem with the old FSCACHE. But if you drop (a),<br />then don't add some stage between (b) and (c), because it's not<br />helpful.<br /><br />And again, maybe I'm missing something. But really, I don't see why<br />this "remove old FSCACHE" stage should *ever* make any modifications<br />to fs/fscache/* and fs/cachefiles/* when disabling the config option<br />means that it just won't get built at all.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
