    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/19/663">First message in thread</a></li><li><a href="/lkml/2021/10/28/1030">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/29/671">Catalin Marinas</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Oct 2021 11:47:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v8 00/17] gfs2: Fix mmap + page fault deadlocks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 29, 2021 at 10:50 AM Catalin Marinas<br />&lt;catalin.marinas&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; First of all, a uaccess in interrupt should not force such signal as it<br />&gt; had nothing to do with the interrupted context. I guess we can do an<br />&gt; in_task() check in the fault handler.<br /><br />Yeah. It ends up being similar to the thread flag in that you still<br />end up having to protect against NMI and other users of asynchronous<br />page faults.<br /><br />So the suggestion was more of a "mindset" difference and modified<br />version of the task flag rather than anything fundamentally different.<br /><br />&gt; Second, is there a chance that we enter the fault-in loop with a SIGSEGV<br />&gt; already pending? Maybe it's not a problem, we just bail out of the loop<br />&gt; early and deliver the signal, though unrelated to the actual uaccess in<br />&gt; the loop.<br /><br />If we ever run in user space with a pending per-thread SIGSEGV, that<br />would already be a fairly bad bug. The intent of "force_sig()" is not<br />only to make sure you can't block the signal, but also that it targets<br />the particular thread that caused the problem: unlike other random<br />"send signal to process", a SIGSEGV caused by a bad memory access is<br />really local to that _thread_, not the signal thread group.<br /><br />So somebody else sending a SIGSEGV asynchronsly is actually very<br />different - it goes to the thread group (although you can specify<br />individual threads too - but once you do that you're already outside<br />of POSIX).<br /><br />That said, the more I look at it, the more I think I was wrong. I<br />think the "we have a SIGSEGV pending" could act as the per-thread<br />flag, but the complexity of the signal handling is probably an<br />argument against it.<br /><br />Not because a SIGSEGV could already be pending, but because so many<br />other situations could be pending.<br /><br />In particular, the signal code won't send new signals to a thread if<br />that thread group is already exiting. So another thread may have<br />already started the exit and core dump sequence, and is in the process<br />of killing the shared signal threads, and if one of those threads is<br />now in the kernel and goes through the copy_from_user() dance, that<br />whole "thread group is exiting" will mean that the signal code won't<br />add a new SIGSEGV to the queue.<br /><br />So the signal could conceptually be used as the flag to stop looping,<br />but it ends up being such a complicated flag that I think it's<br />probably not worth it after all. Even if it semantically would be<br />fairly nice to use pre-existing machinery.<br /><br />Could it be worked around? Sure. That kernel loop probably has to<br />check for fatal_signal_pending() anyway, so it would all work even in<br />the presense of the above kinds of issues. But just the fact that I<br />went and looked at just how exciting the signal code is made me think<br />"ok, conceptually nice, but we take a lot of locks and we do a lot of<br />special things even in the 'simple' force_sig() case".<br /><br />&gt; Third is the sigcontext.pc presented to the signal handler. Normally for<br />&gt; SIGSEGV it points to the address of a load/store instruction and a<br />&gt; handler could disable MTE and restart from that point. With a syscall we<br />&gt; don't want it to point to the syscall place as it shouldn't be restarted<br />&gt; in case it copied something.<br /><br />I think this is actually independent of the whole "how to return<br />errors". We'll still need to return an error from the system call,<br />even if we also have a signal pending.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
