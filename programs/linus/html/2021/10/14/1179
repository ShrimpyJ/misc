    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/9/28/1260">First message in thread</a></li><li><a href="/lkml/2021/10/14/987">Florian Weimer</a><ul><li><a href="/lkml/2021/10/14/1117">"Paul E. McKenney"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 14 Oct 2021 18:36:28 -0400</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] LKMM: Add ctrl_dep() macro for control dependency</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 14, 2021 at 5:10 PM Paul E. McKenney &lt;paulmck&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; In all the weakly ordered architectures I am aware of, spilling to<br />&gt; the stack and reloading preserves the ordering.  The ordering from<br />&gt; the initial load to the spill is an assembly-language data dependency,<br />&gt; the ordering from the spill to the reload is single-variable SC, and<br />&gt; the ordering beyond that is the original control dependency.<br /><br />I think the thing about a control dependency is that any way to<br />optimize it differently only strengthens it.<br /><br />That was very different from the problems we had with describing the<br />RCU dependencies - they were data dependencies, and if they could ever<br />be turned into control dependencies, they would have been weakened.<br /><br />But the only way to really weaken a control dependency and the write<br />behind it is to get rid of it entirely.<br /><br />So turning it into a data dependency (by turning the conditional into<br />a 'select' instruction, for example) only makes it stronger. And no<br />amount of register spilling or data movement any other way makes any<br />difference.<br /><br />That's why all the examples of what could go wrong were about same<br />code on both sides of the conditional, which allowed removing the<br />conditional entirely (or at least moving parts of the "protected" code<br />to before it.<br /><br />(The other way to remove the conditional is to just optimize away the<br />conditional itself, but that's defeated by "READ_ONCE()" being part of<br />the source of the conditional, and any data or control dependency from<br />that fundamental "the compiler cannot remove this logic" is always<br />sufficient).<br /><br />So I really don't think this is even about "any weakly ordered<br />architecture". I think this is fundamentally about causality. You<br />simply cannot make a conditional write visible before the condition<br />has been resolved, and resolving the condition requires the read to<br />have happened.<br /><br />This is not open to "speculation". Not by hardware, not by compilers.<br /><br />There are only two ways you can break this fundamental construct:<br /><br /> - outright bugs<br /><br /> - a perfect oracle<br /><br />And honestly, if you have a perfect oracle, you're better off making<br />money playing the lotto than you would ever be doing hardware or<br />software development, so that second option isn't really even<br />interesting.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
