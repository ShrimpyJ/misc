    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/18/1413">First message in thread</a></li><li><a href="/lkml/2021/10/18/1484">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/18/1512">Nick Desaulniers</a><ul><li class="origin"><a href="/lkml/2021/10/19/23">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/19/23">Nathan Chancellor</a><ul><li><a href="/lkml/2021/10/19/114">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Oct 2021 17:38:09 -1000</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] platform/x86: thinkpad_acpi: Fix bitwise vs. logical warning</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 18, 2021 at 10:14 AM Nick Desaulniers<br />&lt;ndesaulniers&#64;google.com&gt; wrote:<br />&gt;<br />&gt; Right, the patch that added the warning explicitly checks for side effects.<br /><br />Well, it's a bit questionable. The "side effects" are things like any<br />pointer dereference, because it could fault, but if you know that<br />isn't an issue, then clang basically ends up complaining about code<br />that is perfectly fine. Maybe it was written that way on purpose, like<br />the kvm code.<br /><br />Now, it's probably not worth keeping that "bitops of booleans" logic -<br />if it is a noticeable optimization, it's generally something that the<br />compiler should do for us, but basically clang is warning about<br />perfectly valid code.<br /><br />And what I find absolutely disgusting is the suggested "fix" that<br />clang gives you.<br /><br />If the warning said "maybe you meant to use a logical or (||)", then<br />that would be one thing. But what clang suggests as the "fix" for the<br />warning is just bad coding practice.<br /><br />If a warning fix involves making the code uglier, then the warning fix is wrong.<br /><br />This is not the first time we've had compilers suggesting garbage. Gcc<br />used to suggest (perhaps still does) the "extra parenthesis" for<br />"assignment used as a truth value" situation. Which is - once again -<br />disgusting garbage.<br /><br />Writing code like<br /><br />        if (a = b) ..<br /><br />is bad and error prone. But the suggestion to "fix" the warning with<br /><br />        if ((a = b)) ..<br /><br />is just completely unacceptably stupid, and is just BAD CODE.<br /><br />The proper fix might be to write it like<br /><br />        if ((a = b) != 0) ...<br /><br />which at least makes the truth value part explicit - in ways that a<br />silly double parenthesis does not. Or, better yet, write it as<br /><br />        a = b;<br />        if (a) ..<br /><br />instead, which is legible and fine.<br /><br />The clang suggestion to add a cast to 'int' to avoid the warning is<br />the same kind of "write bad code" suggestion. Just don't do it.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
