    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/25/1035">First message in thread</a></li><li><a href="/lkml/2021/10/25/1841">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/25/1891">Linus Torvalds</a></li><li><a href="/lkml/2021/10/25/1894">Kees Cook</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/10/25/1932">Matthew Wilcox</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Oct 2021 18:10:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] secretmem: Prevent secretmem_users from wrapping to zero</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 25, 2021 at 5:18 PM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; Right, sure, but it's not a rare pattern.<br /><br />Well, for an actual reference count it certainly isn't a rare pattern,<br />and zero _is_ special, because at zero, you are now in use-after-free<br />territory.<br /><br />But that's kind of the issue here: that really isn't what<br />'secretmem_users' was ever about.<br /><br />Zero isn't some "now we're use-after-free" situation. Quite the<br />reverse. Zero ends up being the safe thing.<br /><br />So with that kind of "just count number of existing users", where zero<br />isn't special, then refcount_t doesn't make sense.<br /><br />And refcount_t is for non-core stuff that has a lot of random kernel<br />users that you can't easily verify.<br /><br />In contrast, 'secretmem_users' had exactly two sites that modified it,<br />and one that tested it.<br /><br />&gt; But these places need to check for insane<br />&gt; conditions too ("we got a -1 back -- this means there's a bug but what<br />&gt; do we do?"). Same for atomic_inc(): "oh, we're at our limit, do<br />&gt; something", but what above discovering ourselves above the limit?<br /><br />So honestly, "above the limit" is often perfectly fine too.<br /><br />It can be fine for two very different reasons:<br /><br /> (a) racy checks are often much simpler and faster, and perfectly safe<br />when the limit is "far away from overflow".<br /><br /> (b) limits can change<br /><br />And (a) isn't just about "avoid special atomics". It's about doing the<br />limit check optimistically outside locking etc.<br /><br />And (b) wasn't an issue here (where the only real use was ltierally<br />"are there any users at all"), but in most _proper_ use cases you will<br />want to have some resource limit that might be set by MIS. And might<br />be changed dynamically.<br /><br />So it's entirely possible that somebody sets the limit to something<br />smaller than the current user (prep for shutdown, whatever), without<br />it being an error at all.<br /><br />The limit is for future work, not for past work. Easily happens with<br />things like rlimits etc.<br /><br />&gt; There's nothing about using the atomic_t primitives that enforces these<br />&gt; kinds of checks. (And there likely shouldn't be for atomic_t -- it's a<br />&gt; plain type.) But we likely need something that fills in this API gap<br />&gt; between atomic_t and refcount_t.<br /><br />I dispute the "need". This isn't as common as you claim. Most resource<br />counting _is_ for "free when no longer used".<br /><br />And on the other end, you have the users that don't want refcount_t<br />because they can't live with the limitations of that interface, like<br />the page counts etc, that do it properly.<br /><br />So I think in 99% of all situations, the proper fix is to embed an<br />"atomic_t" in the type it protects, and then have the helper functions<br />that actually do it properly. Like we do for "get_page()" and friends.<br />The "new type" isn't about the reference counting, it's about the data<br />itself, and the atomic_t is just a part of it.<br /><br />Could we do something new type that warns on the "decrement past zero"<br />and "overflow on increment"? Sure. But since they by _definition_<br />aren't about data lifetimes, they probably don't need saturation - you<br />want the _warning_, but they aren't protecting data, since they aren't<br />refcounts.<br /><br />Or could we have something even fancier, that is an actual defined<br />range, and "overflow" is not "overflow in 32 bits", but "becomes<br />bigger than X")? That gets more complex because now you'd have to<br />encode the range in the type somehow.<br /><br />You could do it with actual static types (generate typedef names and<br />code), or you could do it with types that have a more dynamic pointer<br />to ranges (kind of like the sysfs interfaces do) or have the ranges<br />embedded in the data structure itself.<br /><br />But honestly, the complexity downside seems to just dwarf the upside.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
