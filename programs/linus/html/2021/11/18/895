    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/12/843">First message in thread</a></li><li><a href="/lkml/2021/10/22/859">Linus Torvalds</a><ul><li><a href="/lkml/2021/10/22/955">Steven Rostedt</a></li><li><a href="/lkml/2021/11/18/792">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2021/11/18/922">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/18/922">Steven Rostedt</a></li><li><a href="/lkml/2021/11/22/33">Anshuman Khandual</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 18 Nov 2021 10:33:39 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [BUG] WARNING: CPU: 3 PID: 1 at mm/debug_vm_pgtable.c:493</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 18, 2021 at 8:47 AM Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; Triggered it again with the new update:<br />&gt;<br />&gt; [   24.751779] IPI shorthand broadcast: enabled<br />&gt; [   24.761177] sched_clock: Marking stable (23431856262, 1329270511)-&gt;(28163092341, -3401965568)<br />&gt; [   24.770495] device: 'cpu_dma_latency': device_add<br />&gt; [   24.775232] PM: Adding info for No Bus:cpu_dma_latency<br />&gt; [   24.780929] debug_vm_pgtable: [debug_vm_pgtable         ]: Validating architecture page table helpers<br />&gt; [   24.799490] mtrr_type_lookup() returned 0 (0)<br /><br />Ok, so that's MTRR_TYPE_UNCACHABLE, and "uniform" is 0.<br /><br />Anyway, either the mtrr code is confused, or more likely it just does<br />the right thing, and  pud_set_huge() is simply expected to return 0 in<br />this situation, and that WARN_ON() in pud_huge_tests() is simply wrong<br />to trigger at all.<br /><br />I didn't look at what all the code in debug_vm_pgtable() is trying to<br />set up to test. Honestly, it's all very opaque.<br /><br />But I do notice that the pfn that the test uses ends up basically<br />being something random, where the "fixed" pfn is<br /><br />        phys = __pa_symbol(&amp;start_kernel);<br />        ...<br />        args-&gt;fixed_pud_pfn = __phys_to_pfn(phys &amp; PUD_MASK);<br /><br />rather than being an allocated real PUD-sized page. That can be a<br />problem in itself.<br /><br />So I think the problem is that depending on where the kernel is<br />allocated, the fixed_pud_pfn ends up being in an area with MTRR<br />settings. In fact, I'm surprised it's not *always* in that area, since<br />presumabl;y you have the normal fixed MTRR issues with the 640k-1M<br />range.<br /><br />But I didn't look - probably the MTRR code doesn't actually check the<br />special fixed MTRR's.<br /><br />Anyway, I think that the end result is simply that the tests in<br />mm/debug_vm_pgtable.c are simply buggy, and the WARN_ON() is not a<br />sign of anything wrong in the mm, but with the tests themselves.<br /><br />So the fixed_pud_pfn is dodgy, but it looks like the non-fixed<br />'pud_pfn' allocation may be dodgy too:<br /><br />  #ifdef CONFIG_CONTIG_ALLOC<br />        if (order &gt;= MAX_ORDER) {<br />                page = alloc_contig_pages((1 &lt;&lt; order), GFP_KERNEL,<br />                                          first_online_node, NULL);<br /><br />because afaik, alloc_contig_pages() does allocate a contiguous region,<br />but it doesn't necessarily allocate a _aligned_ contiguous region.<br /><br />So I think _all_ those PUD tests are likely broken, but honestly, I<br />don't know the code well enough to be entirely sure, I'm just seeing<br />code that looks dodgy to me.<br /><br />I don't think the breakage is x86-specific. Quite the reverse. I think<br />the x86 code just happens to randomly show it when some MTRR ends up<br />being used.<br /><br />Maybe pfn_pud() should verify that it's actually given an aligned argument?<br /><br />Gavin, Anshuman? Feel free to tell me what I missed.<br /><br />Otherwise, we should disable those PUD tests (or fix them, of course).<br /><br />For now, I consider this WARN_ON() to be a failure of the testing<br />infrastructure, not of the VM code.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
