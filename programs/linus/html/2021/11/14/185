    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/11/14/84">First message in thread</a></li><li><a href="/lkml/2021/11/14/84">Thomas Gleixner</a><ul><li><a href="/lkml/2021/11/14/85">Thomas Gleixner</a><ul><li><a href="/lkml/2021/11/14/187">   pr-tracker-bot&#64;kernel ...</a></li></ul></li><li><a href="/lkml/2021/11/14/86">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2021/11/14/193">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/14/193">Thomas Gleixner</a></li><li><a href="/lkml/2021/11/15/677">Peter Zijlstra</a><ul><li><a href="/lkml/2021/11/15/698">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2021/11/14/188">   pr-tracker-bot&#64;kernel ...</a></li></ul></li><li><a href="/lkml/2021/11/14/186">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Nov 2021 11:02:31 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT pull] timers/urgent for v5.16-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Nov 14, 2021 at 5:31 AM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt; +       /*<br />&gt; +        * A copied work entry from the old task is not meaningful, clear it.<br />&gt; +        * N.B. init_task_work will not do this.<br />&gt; +        */<br />&gt; +       memset(&amp;p-&gt;posix_cputimers_work.work, 0,<br />&gt; +              sizeof(p-&gt;posix_cputimers_work.work));<br />&gt; +       init_task_work(&amp;p-&gt;posix_cputimers_work.work,<br />&gt; +                      posix_cpu_timers_work);<br /><br />Ugh.<br /><br />Instead of the added four lines of comment, and two lines of<br />"memset()", maybe this should just have made init_task_work() DTRT?<br /><br />Yes,. I see this:<br /><br />        /* Protect against double add, see task_tick_numa and task_numa_work */<br />        p-&gt;numa_work.next               = &amp;p-&gt;numa_work;<br />        ...<br />        init_task_work(&amp;p-&gt;numa_work, task_numa_work);<br /><br />but I think that one is so subtle and such a special case that it<br />should have been updated - just make that magic special flag happen<br />after the init_task_work.<br /><br />A lot of the other cases seem to zero-initialize things elsewhere<br />(generally with kzalloc()), but I note that at least<br />io_ring_exit_work() seems to have this:<br /><br />        struct io_tctx_exit exit;<br />        ...<br />        init_task_work(&amp;exit.task_work, io_tctx_exit_cb);<br /><br />and the -&gt;next pointer is never set to NULL.<br /><br />Now, in 99% of all cases the -&gt;next pointer simply doesn't matter,<br />because task_work_add() will only set it, not caring about the old<br />value.<br /><br />But apparently it matters for posix_cputimers_work and for numa_work,<br />and so I think it's very illogical that init_task_work() will not<br />actually initialize it properly.<br /><br />Hmm?<br /><br />I've pulled this, but it really looks like the wrong solution to the<br />whole "uninitialized data".<br /><br />And that task_tick_numa() special case is truly horrendous, and really<br />should go after the init_task_work() regardless, exactly because you'd<br />expect that init_task_work() to initialize the work even if it doesn't<br />happen to right now.<br /><br />Or is somebody doing init_task_work() to only change the work-function<br />on an already initialized work entry? Becuase that sounds both racy<br />and broken to me, and none of the things I looked at from a quick grep<br />looked like that at all.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
