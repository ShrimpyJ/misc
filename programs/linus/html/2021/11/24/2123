    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/11/24/1889">First message in thread</a></li><li><a href="/lkml/2021/11/24/1889">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2021/11/24/2124">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/24/2124">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/24/2218">Jiri Olsa</a></li></ul></li><li><a href="/lkml/2021/11/24/2129">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2021/11/24/2127">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2021/11/24/2123/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 24 Nov 2021 10:27:27 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] tracing/uprobe: Fix uprobe_perf_open probes iteration</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 24, 2021 at 7:10 AM Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; tracing: Fix wrong uprobe variable in iterator<br /><br />I've pulled this, but:<br /><br />&gt;         list_for_each_entry(pos, trace_probe_probe_list(tp), list) {<br />&gt; +               tu = container_of(pos, struct trace_uprobe, tp);<br /><br />honestly, the "list_for_each_entry()" followed by a "container_of()"<br />like this makes me think you used the wrong entry to walk the list in.<br /><br />You actually don't want to ever use that<br /><br />        struct trace_probe *pos;<br /><br />at all, and I think you should remove it.<br /><br />Instead, you should do something like<br /><br />        list_for_each_entry(pu, trace_probe_probe_list(tp), tp.list) {<br /><br />ie simply walk the list _as_ the uprobe entry, not as some<br />intermediate internal probe list entry only to convert to the uprobe.<br /><br />Now, I may be entirely off my meds here, and maybe there is something<br />I'm missing, but I _think_ the attached patch should work, and avoid<br />all that indirection through 'pos' that you don't care about and that<br />seems to just have been a mistake.<br /><br />Feel free to call me funny names for when I missed some detail.<br /><br />Again - I *have* pulled your fix, and in fact the attached patch is<br />relative to your fix. That fix isn't _wrong_. I just think it's a bit<br />silly, and I think the cause of the bug in the first place was that<br />unnecessary intermediate pointer.<br /><br />               Linus<br /> kernel/trace/trace_uprobe.c | 5 ++---<br /> 1 file changed, 2 insertions(+), 3 deletions(-)<br /><br />diff --git a/kernel/trace/trace_uprobe.c b/kernel/trace/trace_uprobe.c<br />index f5f0039d31e5..ee5408f2a68a 100644<br />--- a/kernel/trace/trace_uprobe.c<br />+++ b/kernel/trace/trace_uprobe.c<br />&#64;&#64; -1300,7 +1300,7 &#64;&#64; static int uprobe_perf_close(struct trace_event_call *call,<br /> static int uprobe_perf_open(struct trace_event_call *call,<br /> 			    struct perf_event *event)<br /> {<br />-	struct trace_probe *pos, *tp;<br />+	struct trace_probe *tp;<br /> 	struct trace_uprobe *tu;<br /> 	int err = 0;<br /> <br />&#64;&#64; -1312,8 +1312,7 &#64;&#64; static int uprobe_perf_open(struct trace_event_call *call,<br /> 	if (trace_uprobe_filter_add(tu-&gt;tp.event-&gt;filter, event))<br /> 		return 0;<br /> <br />-	list_for_each_entry(pos, trace_probe_probe_list(tp), list) {<br />-		tu = container_of(pos, struct trace_uprobe, tp);<br />+	list_for_each_entry(tu, trace_probe_probe_list(tp), tp.list) {<br /> 		err = uprobe_apply(tu-&gt;inode, tu-&gt;offset, &amp;tu-&gt;consumer, true);<br /> 		if (err) {<br /> 			uprobe_perf_close(call, event);</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
