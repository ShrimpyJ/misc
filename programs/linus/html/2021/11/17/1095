    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/11/17/843">First message in thread</a></li><li><a href="/lkml/2021/11/17/949">(Eric W. Biederman)</a><ul><li><a href="/lkml/2021/11/17/1007">Kees Cook</a><ul><li class="origin"><a href="/lkml/2021/11/17/1118">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/17/1118">Kees Cook</a><ul><li><a href="/lkml/2021/11/17/1125">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/11/17/1142">Kyle Huey</a><ul><li><a href="/lkml/2021/11/17/1153">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2021/11/17/1063">Kyle Huey</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Nov 2021 15:24:24 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [REGRESSION] 5.16rc1: SA_IMMUTABLE breaks debuggers</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 17, 2021 at 1:54 PM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; The SA_IMMUTABLE change was to deal with failures seen in the seccomp<br />&gt; test suite after the recent fatal signal refactoring. Mainly that a<br />&gt; process that should have effectively performed do_exit() was suddenly<br />&gt; visible to the tracer.<br /><br />I think this basically shows that the conversion from do_exit() to<br />fatal_signal() was just wrong. The "do_exit()" wasn't really a signal,<br />and can't be treated as such.<br /><br />That said, instead of reverting, maybe we can just mark the cases<br />where it really is about sending a synchronous signal, vs sending an<br />explicitly fatal signal.<br /><br />It's basically the "true" condition to force_sig_info_to_task(), so<br />the fix might be just<br /><br />  &#64;&#64; -1323,7 +1323,8 &#64;&#64; force_sig_info_to_task(struct kernel_siginfo<br />*info, struct task_struct *t, bool<br />        blocked = sigismember(&amp;t-&gt;blocked, sig);<br />        if (blocked || ignored || sigdfl) {<br />                action-&gt;sa.sa_handler = SIG_DFL;<br />  -             action-&gt;sa.sa_flags |= SA_IMMUTABLE;<br />  +             if (sigdfl)<br />  +                     action-&gt;sa.sa_flags |= SA_IMMUTABLE;<br />                if (blocked) {<br />                        sigdelset(&amp;t-&gt;blocked, sig);<br />                        recalc_sigpending_and_wake(t);<br /><br />Kyle, does that fix your test-case? And Kees - yours?<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
