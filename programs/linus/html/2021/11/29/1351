    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/11/24/2186">First message in thread</a></li><li><a href="/lkml/2021/11/29/421">Andreas Gruenbacher</a><ul><li><a href="/lkml/2021/11/29/629">Catalin Marinas</a><ul><li class="origin"><a href="/lkml/2021/11/29/1041">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/29/1041">Andreas Gruenbacher</a></li><li><a href="/lkml/2021/11/29/1505">Catalin Marinas</a><ul><li><a href="/lkml/2021/11/29/1219">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 29 Nov 2021 10:40:38 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/3] btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 29, 2021 at 7:36 AM Catalin Marinas &lt;catalin.marinas&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; That's what this series does when it probes the whole range in<br />&gt; fault_in_writeable(). The main reason was that it's more efficient to do<br />&gt; a read than a write on a large range (the latter dirtying the cache<br />&gt; lines).<br /><br />The more this thread goes on, the more I'm starting to think that we<br />should just make "fault_in_writable()" (and readable, of course) only<br />really work on the beginning of the area.<br /><br />Not just for the finer-granularity pointer color probing, but for the<br />page probing too.<br /><br />I'm looking at our current fault_in_writeable(), and I'm going<br /><br /> (a) it uses __put_user() without range checks, which is really not great<br /><br /> (b) it looks like a disaster from another standpoint: essentially<br />user-controlled loop size with no limit checking, no preemption, and<br />no check for fatal signals.<br /><br />Now, (a) should be fixed with a access_ok() or similar.<br /><br />And (b) can easily be fixed multiple ways, with one option simply just<br />being adding a can_resched() call and checking for fatal signals.<br /><br />But faulting in the whole region is actually fundamentally wrong in<br />low-memory situations - the beginning of the region might be swapped<br />out by the time we get to the end. That's unlikely to be a problem in<br />real life, but it's an example of how it's simply not conceptually<br />sensible.<br /><br />So I do wonder why we don't just say "fault_in_writable will fault in<br />_at_most_ X bytes", and simply limit the actual fault-in size to<br />something reasonable.<br /><br />That solves _all_ the problems. It solves the lack of preemption and<br />fatal signals (by virtue of just limiting the amount of work we do).<br />It solves the low memory situation. And it solves the "excessive dirty<br />cachelines" case too.<br /><br />Of course, we want to have some minimum bytes we fault in too, but<br />that minimum range might well be "we guarantee at least a full page<br />worth of data" (and in practice make it a couple of pages).<br /><br />It's not like fault_in_writeable() avoids page faults or anything like<br />that - it just moves them around. So there's really very little reason<br />to fault in a large range, and there are multiple reasons _not_ to do<br />it.<br /><br />Hmm?<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
