    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/11/24/2186">First message in thread</a></li><li><a href="/lkml/2021/11/24/2414">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/25/270">Catalin Marinas</a><ul><li class="origin"><a href="/lkml/2021/11/25/833">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/25/833">Catalin Marinas</a><ul><li><a href="/lkml/2021/11/25/844">Matthew Wilcox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Nov 2021 10:13:25 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/3] btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 25, 2021 at 3:10 AM Catalin Marinas &lt;catalin.marinas&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; For this specific btrfs case, if we want go with tuning the offset based<br />&gt; on the fault address, we'd need copy_to_user_nofault() (or a new<br />&gt; function) to be exact.<br /><br />I really don't see why you harp on the exactness.<br /><br />I really believe that the fix is to make the read/write probing just<br />be more aggressive.<br /><br />Make the read/write probing require that AT LEAST &lt;n&gt; bytes be<br />readable/writable at the beginning, where 'n' is 'min(len,ALIGN)', and<br />ALIGN is whatever size that copy_from/to_user_xyz() might require just<br />because it might do multi-byte accesses.<br /><br />In fact, make ALIGN be perhaps something reasonable like 512 bytes or<br />whatever, and then you know you can handle the btrfs "copy a whole<br />structure and reset if that fails" case too.<br /><br />Don't require that the fundamental copying routines (and whatever<br />fixup the code might need) be some kind of byte-precise - it's the<br />error case that should instead be made stricter.<br /><br />If the user gave you a range that triggered a pointer color mismatch,<br />then returning an error is fine, rather than say "we'll do as much as<br />we can and waste time and effort on being byte-exact too".<br /><br />Your earlier argument was that it was too expensive to probe things.<br />That was based on looking at the whole range that migth be MB (or GB)<br />in size. So just make it check the first &lt;n&gt; bytes, and problem<br />solved.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
