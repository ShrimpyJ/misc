    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/10/27/1155">First message in thread</a></li><li><a href="/lkml/2021/11/12/790">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/13/172">Alexander Popov</a><ul><li class="origin"><a href="/lkml/2021/11/14/99">Linus Torvalds</a><ul><li><a href="/lkml/2021/11/14/99">Marco Elver</a></li></ul></li><li><a href="/lkml/2021/11/15/515">Lukas Bulwahn</a><ul><li><a href="/lkml/2021/11/15/678">Gabriele Paoloni</a><ul><li><a href="/lkml/2021/11/16/169">Alexander Popov</a></li></ul></li><li><a href="/lkml/2021/11/15/697">Steven Rostedt</a><ul><li><a href="/lkml/2021/11/15/2774">Kees Cook</a></li><li><a href="/lkml/2021/11/16/114">Christophe Leroy</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 13 Nov 2021 11:58:13 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 0/2] Introduce the pkill_on_warn parameter</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Nov 13, 2021 at 10:14 AM Alexander Popov &lt;alex.popov&#64;linux.com&gt; wrote:<br />&gt;<br />&gt; Killing the process that hit a kernel warning complies with the Fail-Fast<br />&gt; principle [1].<br /><br />The thing is a WARNING.<br /><br />It's not even clear that the warning has anything to do with the<br />process that triggered it. It could happen in an interrupt, or in some<br />async context (kernel threads, whatever), or the warning could just be<br />something that is detected by a different user than the thing that<br />actually caused the warning to become an issue.<br /><br />If you want to reboot the machine on a kernel warning, you get that<br />fail-fast thing you want. There are two situations:<br /><br /> - kernel testing (pretty much universally done in a virtual machine,<br />or simply just checking 'dmesg' afterwards)<br /><br /> - hyperscalers like google etc that just want to take any suspect<br />machines offline asap<br /><br />But sending a signal to a random process is just voodoo programming,<br />and as likely to cause other very odd failures as anything else.<br /><br />I really don't see the point of that signal.<br /><br />I'm happy to be proven wrong, but that will require some major<br />installation actually using it first and having a lot of strong<br />arguments to counter-act the above.<br /><br />Seriously, WARN_ON() can happen in situations where sending a signal<br />may be a REALLY BAD idea, never mind the issue that it's not even<br />clear who the signal should be sent to.<br /><br />Yes, yes, your patches have some random "safety guards", in that it<br />won't send the signal to a PF_KTHREAD or the global init process. But<br />those safety guards literally make my argument for me: sending a<br />signal to whoever randomly triggered a warning is simply _wrong_.<br />Adding random "don't do it in this case" doesn't make it right, it<br />only shows that "yes, it happens to the wrong person, and here's a<br />hack to avoid generating obvious problems".<br /><br />Honestly, if the intent is to not have to parse the dmesg output, then<br />I think it would be much better to introduce a new /proc file to read<br />the kernel tainting state, and then some test manager process could be<br />able to poll() that file or something. Not sending a signal to random<br />targets, but have a much more explicit model.<br /><br />That said, I'm not convinced that "just read the kernel message log"<br />is in any way wrong either.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
