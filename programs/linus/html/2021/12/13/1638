    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/10/663">First message in thread</a></li><li><a href="/lkml/2021/12/13/1515">Peter Zijlstra</a><ul><li><a href="/lkml/2021/12/13/1566">Marco Elver</a></li><li><a href="/lkml/2021/12/13/1628">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/13/1635">Marco Elver</a><ul><li><a href="/lkml/2021/12/13/1642">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/13/1734">Marco Elver</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Dec 2021 10:21:03 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 8/9] atomic,x86: Alternative atomic_*_overflow() scheme</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Dec 13, 2021 at 10:11 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; But then on x86 - and other architectures that might prefer to use<br />&gt; that offset trick because they have flags - I'm not sure it even makes<br />&gt; sense to have anything to do with 'atomic_t' at all [..]<br /><br />Side note: it might not be just about flags, and not just about things<br />like "offset-by-one".<br /><br />We used to have special code for old 32-bit sparc because there you<br />couldn't actually sanely do 32-bit atomics: you could only really do<br />24 bits, because the whole first (upper) byte was the atomic lock<br />byte.<br /><br />Now, that was too painful because nobody else did that, so these days<br />32-bit sparc just uses a hashed spinlock instead.<br /><br />But I think it would be lovely to _design_ the atomic_ref_t to be able<br />to deal with that odd sparc32 issue too. Not because anybody cares<br />about 32-bit sparc any more, and not because I think anybody would<br />ever actually bother to write such code, but because I think it's a<br />good design goal to kind of aim for: if we're doing an actual<br />ref-counting data structure, where we do *not* have "int" semantics,<br />and very much have a concept of overflow, then I think it should<br />conceptually also work with that odd sparc32 24-byte atomic integer<br />model.<br /><br />Was it a broken model? Was it stupid? Yes. Do I ever expect to see it<br />again? No. But I do think that conceptually we should strive to have<br />that as a _possible_ model.<br /><br />In fact, it might be interesting to have something like that as a<br />debug model, where you have a smaller range for ref-counting, just to<br />make it easier to test that the code does the right thing for<br />overflow. 24 bits is a lot easier to overflow, while still being big<br />enough to work in practice.<br /><br />So I do think that having a separate type system that simply does not<br />_work_ with somebody trying to do "atomic_xyz()" on it is the right<br />way to go.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
