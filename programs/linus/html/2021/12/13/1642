    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/10/663">First message in thread</a></li><li><a href="/lkml/2021/12/13/1628">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/13/1635">Marco Elver</a><ul><li class="origin"><a href="/lkml/2021/12/13/1734">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/13/1734">Marco Elver</a></li></ul></li></ul></li><li><a href="/lkml/2021/12/13/1638">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Dec 2021 10:24:45 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 8/9] atomic,x86: Alternative atomic_*_overflow() scheme</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Dec 13, 2021 at 10:19 AM Marco Elver &lt;elver&#64;google.com&gt; wrote:<br />&gt;<br />&gt; I'm still genuinely worried about this:<br />&gt;<br />&gt; &gt;       2. Yet another potentially larger issue is if some code<br />&gt; &gt;          kmalloc()s some structs containing refcount_t, and relies on<br />&gt; &gt;          GFP_ZERO (kzalloc()) to initialize their data assuming that a<br />&gt; &gt;          freshly initialized refcount_t contains 0.<br />&gt;<br />&gt; Even with everything properly wrapped up in atomic_ref_t, it's not going<br />&gt; to prevent mis-initialization via kzalloc() and friends.<br /><br />I agree that it's an issue, but it's not a new issue. We've had the<br />exact same thing with a lot of other core data structures.<br /><br />And a ref-count of zero isn't valid _anyway_. When you allocate a<br />structure, a zero ref-count by definition is wrong. You need to set<br />the ref-count to the user that allocated it.<br /><br />So I don't actually think the "implicit zero" is an issue in practice,<br />because it would be wrong in the first place. Code that relies on<br />kzmalloc() to initialize a refcount cannot work right.<br /><br />(And by "cannot" I obviously mean "can, if you do wrong things" - it's<br />not like it's *impossible* to do an "atomic_inc_ref()" to change a 0<br />refcount to a 1, but it's both wrong *AND* actively stupid, since an<br />allocation does not need to set the refcount atomically).<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
