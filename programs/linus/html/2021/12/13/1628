    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/10/663">First message in thread</a></li><li><a href="/lkml/2021/12/10/664">Peter Zijlstra</a><ul><li><a href="/lkml/2021/12/10/729">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/10/782">Linus Torvalds</a></li><li><a href="/lkml/2021/12/16/1533">Herbert Xu</a></li></ul></li><li><a href="/lkml/2021/12/13/1515">Peter Zijlstra</a><ul><li><a href="/lkml/2021/12/13/1566">Marco Elver</a></li><li class="origin"><a href="/lkml/2021/12/13/1635">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/13/1635">Marco Elver</a><ul><li><a href="/lkml/2021/12/13/1642">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/12/13/1638">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 13 Dec 2021 10:11:28 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 8/9] atomic,x86: Alternative atomic_*_overflow() scheme</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Dec 13, 2021 at 8:43 AM Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; So Marco was expressing doubt about this exact interface for the<br />&gt; atomic_*_overflow() functions, since it's extremely easy to get the<br />&gt; whole ATOMIC_OVERFLOW_OFFSET thing wrong.<br /><br />I missed that discussion (maybe it was on irc? Or maybe I just get too<br />much email).<br /><br />Anyway, my preferred solution would simply be to make the ref-counting<br />atomics use a different type.<br /><br />Voilà, problem solved. You can't really misuse them by mistake,<br />because you can't access it by mistake.<br /><br />Sure, it could be a wrapper around 'atomic_t' on architectures that<br />end up using the generic fallback, so it might be as simple as<br /><br />   typedef atomic_t atomic_ref_t;<br /><br />in some asm-generic implementation, although I suspect that you'd want<br />type safety even there, and do<br /><br />  typedef struct { atomic_t atomic_val; } atomic_ref_t;<br /><br />But then on x86 - and other architectures that might prefer to use<br />that offset trick because they have flags - I'm not sure it even makes<br />sense to have anything to do with 'atomic_t' at all, since there would<br />basically be zero overlap with the regular atomic operations (partly<br />due to the offset, but partly simply because the 'ref' operations are<br />simply different).<br /><br />(Wrt naming: I do think this is more about the "ref" part than the<br />"overflow" part - thus I'd suggest the "atomic_ref_t" rather than your<br />ofl naming).<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
