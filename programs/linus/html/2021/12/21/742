    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/20/1368">Jason Gunthorpe</a><ul><li><a href="/lkml/2021/12/20/1522">Matthew Wilcox</a></li><li><a href="/lkml/2021/12/21/174">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/21/511">Jason Gunthorpe</a><ul><li><a href="/lkml/2021/12/21/600">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/21/1074">Jason Gunthorpe</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2021/12/21/773">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/21/773">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/21/810">Linus Torvalds</a></li><li><a href="/lkml/2021/12/21/812">Jan Kara</a></li><li><a href="/lkml/2021/12/21/902">Jason Gunthorpe</a></li><li><a href="/lkml/2021/12/21/1085">Jason Gunthorpe</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 21 Dec 2021 09:05:23 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 21, 2021 at 12:58 AM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On 21.12.21 02:03, Jason Gunthorpe wrote:<br />&gt;<br />&gt; &gt; I'm having a hard time imagining how gup_fast can maintain any sort of<br />&gt; &gt; bit - it lacks all forms of locks so how can we do an atomic test and<br />&gt; &gt; set between two pieces of data?<br />&gt;<br />&gt; And exactly that is to be figured out.<br /><br />So my preference would be to just always maintain the "exclusive to<br />this VM" bit in the 'struct page', because that makes things easier to<br />think about.<br /><br />[ Of course - the bit could be reversed, and be a 'not exclusive to<br />this VM' bit, semantically the set-or-cleared issue doesn't matter.<br />Also, when I talk about some "exclusive to this VM" bit, I'm purely<br />talking about pages that are marked PageAnon(), so the bit may or may<br />not even exist for other pager types ]<br /><br />And then all GUP-fast would need to do is to refuse to look up a page<br />that isn't exclusive to that VM. We already have the situation that<br />GUP-fast can fail for non-writable pages etc, so it's just another<br />test.<br /><br />&gt; Note that I am trying to make also any kind of R/O pins on an anonymous<br />&gt; page work as expected as well, to fix any kind of GUP after fork() and<br />&gt; GUP before fork(). So taking a R/O pin on an !PageAnonExclusive() page<br />&gt; similarly has to make sure that the page is exclusive -- even if it's<br />&gt; mapped R/O (!).<br /><br />I do think the existing "maybe_pinned()" logic is fine for that. The<br />"exclusive to this VM" bit can be used to *help* that decision -<br />because only an exclusive page can be pinned - bit I don't think it<br />should _replace_ that logic.<br /><br />There's a quite fundamental difference between<br /><br /> (a) COW and GUP: these two operations _have_ to know that they get an<br />exclusive page in order to re-use or look up the page respectively<br /><br /> (b) the pre-cow logic in fork() or the "add this to the swap cache"<br />logic in vmscan that decides whether a page can be turned into a COW<br />page by adding a reference coutn to it (whether due to fork or swap<br />cache doesn't matter - the end result is the same).<br /><br />The difference is that in (a) the thing we *have* to get right is<br />whether a page is exclusively owned by that VM or not. We can COW too<br />much, but we can never share a page unless it's exclusive. That's true<br />whether it's pinned or not.<br /><br />In (b), the "have to get right" is different. In (b), it's perfectly<br />ok to COW an exclusive page and turn it non-exclusive. But we must<br />never COW a pinned page.<br /><br />So (a) and (b) are very different situations, and have different logic.<br /><br />If we always maintain an exclusive bit for AnonPage pages, then both<br />(a) and (b) can use that bit, but they'll use it very differently. In<br />(a) we'll refuse to look it up and will force a 'handle_mm_fault()' to<br />get an exclusive copy. And in (b), we just use it as a "we know only<br />exclusive pages can be pinned", so it's just another check for<br />page_needs_cow_for_dma(), the same way we currently check<br />"MMF_HAS_PINNED" to narrow down the whole "page count indicates this<br />may be a pinned page" question.<br /><br />And the "page is exclusive" would actually be the *common* case for<br />almost all pages. Any time you've written to a page and you haven't<br />forked after the write (and it hasn't been turned into a swap page),<br />that page would be exclusive to that VM.<br /><br />Doesn't this seem like really straightforward semantics to maintain<br />(and think about)?<br /><br />I'd like the exclusive page bit to *not* be directly about "has this<br />page been pinned" exactly because we already have too many special<br />cases for GUP. It would be nicer to have a page bit that has very<br />clear semantics even in the absence of GUP.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
