    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/1015">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1022">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/1024">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1066">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/1081">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2021/12/17/1076">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1076">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/1085">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Dec 2021 14:18:09 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2021 at 1:47 PM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; For now I have not heard a compelling argument why the mapcount is<br />&gt; dubious, I repeat:<br />&gt;<br />&gt; * mapcount can only increase due to fork()<br />&gt; * mapcount can decrease due to unmap / zap<br /><br />And to answer the "why is this dubious", let' sjust look at your<br />actual code that I reacted to:<br /><br />+       vmf-&gt;page = vm_normal_page(vmf-&gt;vma, vmf-&gt;address, vmf-&gt;orig_pte);<br />+       if (vmf-&gt;page &amp;&amp; PageAnon(vmf-&gt;page) &amp;&amp; !PageKsm(vmf-&gt;page) &amp;&amp;<br />+           page_mapcount(vmf-&gt;page) &gt; 1) {<br /><br />Note how you don't just check page_mapcount(). Why not? Because<br />mapcount is completely immaterial if it's not a PageAnon page, so you<br />test for that.<br /><br />So even when you do the mapcount read as one atomic thing, it's one<br />atomic thing that depends on _other_ things, and all these checks are<br />not atomic.<br /><br />But a PageAnon() page can actually become a swap-backed page, and as<br />far as I can tell, your code doesn't have any locking to protect<br />against that.<br /><br />So now you need not only the mmap_sem (to protect against fork), you<br />also need the page lock (to protect against rmap changing the type of<br />page).<br /><br />I don't see you taking the page lock anywhere. Maybe the page table<br />lock ends up serializing sufficiently with the rmap code that it ends<br />up working<br /><br />In the do_wp_page() path, we currently do those kinds of racy checks<br />too, but then we do a trylock_page, and re-do them. And at any time<br />there is any question about things, we fall back to copying - because<br />a copy is always safe.<br /><br />Well, it's always safe if we have the rule that "once we've pinned<br />things, we don't cause them to be COW again".<br /><br />But that "it's safe if" was exactly my (b) case.<br /><br />That's why I much prefer the model I'm trying to push - it's<br />conceptually quite simple. I can literally explain mine at a<br />conceptual level with that "break pre-existing COW, make sure no<br />future COW" model.<br /><br />In contrast, I look at your page_mapcount() code, and I go "there is<br />no conceptual rules here, and the actual implementation details look<br />dodgy".<br /><br />I personally like having clear conceptual rules - as opposed to random<br />implementation details.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
