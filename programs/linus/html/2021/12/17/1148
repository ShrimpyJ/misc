    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/1086">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/1097">Nadav Amit</a><ul><li class="origin"><a href="/lkml/2021/12/17/1154">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1154">Nadav Amit</a><ul><li><a href="/lkml/2021/12/18/1">Matthew Wilcox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Dec 2021 20:02:54 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2021 at 3:53 PM Nadav Amit &lt;namit&#64;vmware.com&gt; wrote:<br />&gt;<br />&gt; I understand the discussion mainly revolves correctness, which is<br />&gt; obviously the most important property, but I would like to mention<br />&gt; that having transient get_page() calls causing unnecessary COWs can<br />&gt; cause hard-to-analyze and hard-to-avoid performance degradation.<br /><br />Note that the COW itself is pretty cheap. Yes, there's the page<br />allocation and copy, but it's mostly a local thing.<br /><br />So that falls under the "good to avoid" heading, but in the end it's<br />not an immense deal.<br /><br />In contrast, the page lock has been an actual big user-visible latency<br />issue, to the point of correctness.<br /><br />A couple of years ago, we literally had NMI watchdog timeouts due to<br />the page wait-queues growing basically boundlessly. This was some<br />customer internal benchmark code that I never saw, so it wasn't<br />*quite* clear exactly what was going on, but we ended up having to<br />split up the page wait list traversal using bookmark entries, because<br />it was such a huge latency issue.<br /><br />That was mostly NUMA balancing faults, I think, but the point I'm<br />making is that avoiding the page lock can be a *much* bigger deal than<br />avoiding some local allocation and copying of a page of data. There<br />are real loads where the page-lock gets insanely bad, and I think it's<br />because we use it much too much.<br /><br />See commit 2554db916586 ("sched/wait: Break up long wake list walk")<br />for some of that saga.<br /><br />So I really think that having to serialize with the page lock in order<br />to do some "exact page use counting" is a false economy. Yes, maybe<br />you'd be able to avoid a COW or two, but at what locking cost?<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
