    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/982">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/986">David Hildenbrand</a><ul><li class="origin"><a href="/lkml/2021/12/17/1022">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1022">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/1024">Linus Torvalds</a></li><li><a href="/lkml/2021/12/17/1057">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Dec 2021 13:36:41 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2021 at 12:55 PM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; If we have a shared anonymous page we cannot have GUP references, not<br />&gt; even R/O ones. Because GUP would have unshared and copied the page,<br />&gt; resulting in a R/O mapped anonymous page.<br /><br />Doing a GUP on an actual shared page is wrong to begin with.<br /><br />You even know that, you try to use "page_mapcount() &gt; 1" to disallow it.<br /><br />My point is that it's wrong regardless, and that "mapcount" is<br />dubious, and that COW cannot - and must not - use mapcount, and that I<br />think your shared case should strive to avoid it for the exact same<br />reason.<br /><br />So, what I think should happen is:<br /><br /> (a) GUP makes sure that it only ever looks up pages that can be<br />shared with this VM. This may in involve breaking COW early with any<br />past fork().<br /><br /> (b) it marks such pages so that any future work will not cause them<br />to COW either<br /><br />Note that (a) is not necessarily "always COW and have to allocate and<br />copy new page". In particular, if the page is already writable, you<br />know you already have exclusive access to it and don't need to COW.<br /><br />And if it isn't writable, then the other common case is "the cow has<br />only one user, and it's us" - that's the "refcount == 1" case.<br /><br />And (b) is what we do with that page_maybe_dma_pinned() logic for<br />fork(), but also for things like swap cache creation (eg see commit<br />feb889fb40fa: "mm: don't put pinned pages into the swap cache").<br /><br />Note that this code all already exists, and already works - even<br />without getting the (very expensive) mmap_sem. So it works with<br />fast-GUP and it can race with concurrent forking by another thread,<br />which is why we also have that seqcount thing.<br /><br />As far as I can tell, your "mapcount" logic fundamentally requires<br />mmap_sem for the fork() race avoidance, for example.<br /><br />So this is why I don't like the mapcount games - I think they are very<br />fragile, and not at all as logical as the two simple rules a/b above.<br /><br />I believe you can make mapcount games _work_ - we used to have<br />something like that. It was incredibly fragile, and it had its own set<br />of bugs, but with enough care it's doable.<br /><br />But my argument really is that I think it's the wrong approach, and<br />that we should simply strive to follow the two simple conceptual rules<br />above.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
