    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/919">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/957">David Hildenbrand</a><ul><li class="origin"><a href="/lkml/2021/12/17/966">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/966">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/983">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/12/17/968">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/17/979">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/12/17/980">Jason Gunthorpe</a><ul><li><a href="/lkml/2021/12/17/987">Linus Torvalds</a></li><li><a href="/lkml/2021/12/17/993">David Hildenbrand</a></li><li><a href="/lkml/2021/12/17/999">Nadav Amit</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Dec 2021 12:36:43 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2021 at 12:18 PM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On 17.12.21 20:22, Linus Torvalds wrote:<br />&gt; &gt; On Fri, Dec 17, 2021 at 11:04 AM Linus Torvalds<br />&gt; &gt; &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt; &gt;&gt;<br />&gt; &gt;  - get a "readonly" copy of a local private page using FAULT_FLAG_UNSHARE.<br />&gt; &gt;<br />&gt; &gt;    This just increments the page count, because mapcount == 1.<br />&gt; &gt;<br />&gt; &gt;  - fork()<br />&gt; &gt;<br />&gt; &gt;  - unmap in the original<br />&gt; &gt;<br />&gt; &gt;  - child now has "mapcount == 1" on a page again, but refcount is<br />&gt; &gt; elevated, and child HAS TO COW before writing.<br />&gt;<br />&gt; Hi Linus,<br />&gt;<br />&gt; This is just GUP before fork(), which is in general<br />&gt; problematic/incompatible with sharing.<br /><br />Note that my example was not meant to be an example of a problem per<br />se, but purely as an example of how meaningless 'mapcount' is, and how<br />'mapcount==1' isn't really a very meaningful test.<br /><br />So it wasn't mean to show "look, GUP before fork is problematic".  We<br />have that problem already solved at least for regular pages.<br /><br />It was purely meant to show how "mapcount==1" isn't a meaningful thing<br />to test, and my worry about how you're adding that nonsensical test to<br />the new code.<br /><br />&gt; Let's just take a look at what refcount does *wrong*. Let's use an<br />&gt; adjusted version of your example above, because it's a perfect fit:<br />&gt;<br />&gt; 1. mem = mmap(pagesize, MAP_PRIVATE)<br />&gt; -&gt; refcount == 1<br />&gt;<br />&gt; 2. memset(mem, 0, pagesize); /* Page is mapped R/W */<br />&gt;<br />&gt; 3. fork() /* Page gets mapped R/O */<br />&gt; -&gt; refcount &gt; 1<br />&gt;<br />&gt; 4. child quits<br />&gt; -&gt; refcount == 1<br />&gt;<br />&gt; 5. Take a R/O pin (RDMA, VFIO, ...)<br />&gt; -&gt; refcount &gt; 1<br />&gt;<br />&gt; 6. memset(mem, 0xff, pagesize);<br />&gt; -&gt; Write fault -&gt; COW<br /><br />I do not believe this is actually a bug.<br /><br />You asked for a R/O pin, and you got one.<br /><br />Then somebody else modified that page, and you got exactly what you<br />asked for - a COW event. The original R/O pin has the original page<br />that it asked for, and can read it just fine.<br /><br />So what is your argument?<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
