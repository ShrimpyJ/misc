    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/1057">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/17/1076">David Hildenbrand</a><ul><li class="origin"><a href="/lkml/2021/12/18/59">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/18/59">David Hildenbrand</a><ul><li><a href="/lkml/2021/12/18/218">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 17 Dec 2021 15:20:24 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2021 at 2:43 PM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; The pages stay PageAnon(). swap-backed pages simply set a bit IIRC.<br />&gt; mapcount still applies.<br /><br />Our code-base is too large for me to remember all the details, but if<br />we still end up having PageAnon for swapbacked pages, then mapcount<br />can increase from another process faulting in an pte with that swap<br />entry.<br /><br />And mmap_sem doesn't protect against that. Again, page_lock() does.<br /><br />And taking the page lock was a big performance issue.<br /><br />One of the reasons that new COW handling is so nice is that you can do<br />things like<br /><br />                if (!trylock_page(page))<br />                        goto copy;<br /><br />exactly because in the a/b world order, the copy case is always safe.<br /><br />In your model, as far as I can tell, you leave the page read-only and<br />a subsequent COW fault _can_ happen, which means that now the<br />subsequent COW needs to b every very careful, because if it ever<br />copies a page that was GUP'ed, you just broke the rules.<br /><br />So COWing too much is a bug (because it breaks the page from the GUP),<br />but COWing too little is an even worse problem (because it measn that<br />now the GUP user can see data it shouldn't have seen).<br /><br />Our old code literally COWed too  little. It's why all those changes<br />happened in the first place.<br /><br />This is why I'm pushing that whole story line of<br /><br /> (1) COW is based purely on refcounting, because that's the only thing<br />that obviously can never COW too little.<br /><br /> (2) GUP pre-COWs (the thing I called the "(a)" rule earlier) and then<br />makes sure to not mark pinned pages COW again (that "(b)" rule).<br /><br />and here "don't use page_mapcount()" really is about that (1).<br /><br />You do seem to have kept (1) in that your COW rules don't seem to<br />change (but maybe I missed it), but because your GUP-vs-COW semantics<br />are very different indeed, I'm not at all convinced about (2).<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
