    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/19/48">First message in thread</a></li><li><a href="/lkml/2021/12/19/48">Borislav Petkov</a><ul><li class="origin"><a href="/lkml/2021/12/19/137">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/19/137">Linus Torvalds</a></li><li><a href="/lkml/2021/12/20/3">Dave Hansen</a><ul><li><a href="/lkml/2021/12/20/1015">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/20/1017">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2021/12/19/144">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2021/12/19/136/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Dec 2021 12:14:29 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] core/urgent for v5.16-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Dec 19, 2021 at 5:40 AM Borislav Petkov &lt;bp&#64;suse.de&gt; wrote:<br />&gt;<br />&gt; Prevent lock contention on the new sigaltstack lock on the common-case<br />&gt; path, when no changes have been made to the alternative signal stack.<br /><br />I pulled this, but I think it's wrong.<br /><br />It checks whether the new ss_size/ss_sp is the same as the old ones,<br />and skips the work if so.<br /><br />But that check is bogus.<br /><br />Why? Because it's comparing the wrong values.<br /><br />It's comparing the values as they are *before* they are fixed up for<br />the SS_DISABLE case.<br /><br />So if the new mode is SS_DISABLE, it's going to compare the values<br />against the old values for ss_size and ss_sp: but those old values<br />will have been reset to 0/NULL.<br /><br />And the new values have not been reset yet before the comparison.<br /><br />So the comparison wil easily fail when it shouldn't.<br /><br />And that's all pointless anyway. If it's SS_DISABLE, there's no point<br />in doing *any* of this.<br /><br />Now, I decided to keep the pull, because this bug only means that the<br />commit isn't actually as effective as it *should* be.<br /><br />Honestly, that do_sigaltstack code is written just about pessimally,<br />and taking the sigaltstack_lock just for the limit checking is all<br />kinds of silly.<br /><br />The SS_DISABLE case shouldn't take the lock at all.<br /><br />And the actual modification of the values shouldn't need any locking<br />at all, since it's all thread-local.<br /><br />I'm not convinced even the limit checking needs the lock, but<br />whatever. I think it could maybe just use "read_once()" or something.<br /><br />I think the attached patch is an improvement, but I did *not* test<br />this, and I'm just throwing this out as a "maybe something like this".<br /><br />Comments?<br /><br />Note: I will throw this patch away after sending it out. If people agree,<br /><br />                  Linus<br /> kernel/signal.c | 36 +++++++++++++++++++-----------------<br /> 1 file changed, 19 insertions(+), 17 deletions(-)<br /><br />diff --git a/kernel/signal.c b/kernel/signal.c<br />index dfcee3888b00..f58f1d574931 100644<br />--- a/kernel/signal.c<br />+++ b/kernel/signal.c<br />&#64;&#64; -4161,7 +4161,6 &#64;&#64; do_sigaltstack (const stack_t *ss, stack_t *oss, unsigned long sp,<br /> 		size_t min_ss_size)<br /> {<br /> 	struct task_struct *t = current;<br />-	int ret = 0;<br /> <br /> 	if (oss) {<br /> 		memset(oss, 0, sizeof(stack_t));<br />&#64;&#64; -4181,8 +4180,15 &#64;&#64; do_sigaltstack (const stack_t *ss, stack_t *oss, unsigned long sp,<br /> 			return -EPERM;<br /> <br /> 		ss_mode = ss_flags &amp; ~SS_FLAG_BITS;<br />-		if (unlikely(ss_mode != SS_DISABLE &amp;&amp; ss_mode != SS_ONSTACK &amp;&amp;<br />-				ss_mode != 0))<br />+<br />+		if (ss_mode == SS_DISABLE) {<br />+			t-&gt;sas_ss_sp = 0;<br />+			t-&gt;sas_ss_size = 0;<br />+			t-&gt;sas_ss_flags = ss_flags;<br />+			return 0;<br />+		}<br />+<br />+		if (unlikely(ss_mode != SS_ONSTACK &amp;&amp; ss_mode != 0))<br /> 			return -EINVAL;<br /> <br /> 		/*<br />&#64;&#64; -4194,24 +4200,20 &#64;&#64; do_sigaltstack (const stack_t *ss, stack_t *oss, unsigned long sp,<br /> 		    t-&gt;sas_ss_flags == ss_flags)<br /> 			return 0;<br /> <br />+		/* Is this lock really worth it? */<br /> 		sigaltstack_lock();<br />-		if (ss_mode == SS_DISABLE) {<br />-			ss_size = 0;<br />-			ss_sp = NULL;<br />-		} else {<br />-			if (unlikely(ss_size &lt; min_ss_size))<br />-				ret = -ENOMEM;<br />-			if (!sigaltstack_size_valid(ss_size))<br />-				ret = -ENOMEM;<br />-		}<br />-		if (!ret) {<br />-			t-&gt;sas_ss_sp = (unsigned long) ss_sp;<br />-			t-&gt;sas_ss_size = ss_size;<br />-			t-&gt;sas_ss_flags = ss_flags;<br />+		if (unlikely(ss_size &lt; min_ss_size) ||<br />+		    unlikely(sigaltstack_size_valid(ss_size))) {<br />+			sigaltstack_unlock();<br />+			return -ENOMEM;<br /> 		}<br /> 		sigaltstack_unlock();<br />+<br />+		t-&gt;sas_ss_sp = (unsigned long) ss_sp;<br />+		t-&gt;sas_ss_size = ss_size;<br />+		t-&gt;sas_ss_flags = ss_flags;<br /> 	}<br />-	return ret;<br />+	return 0;<br /> }<br /> <br /> SYSCALL_DEFINE2(sigaltstack,const stack_t __user *,uss, stack_t __user *,uoss)</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
