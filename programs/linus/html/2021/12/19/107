    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/18/339">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/19/2">Nadav Amit</a><ul><li><a href="/lkml/2021/12/19/10">John Hubbard</a><ul><li><a href="/lkml/2021/12/19/31">Matthew Wilcox</a></li></ul></li><li class="origin"><a href="/lkml/2021/12/19/108">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/19/108">David Hildenbrand</a></li><li><a href="/lkml/2021/12/19/109">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/19/110">David Hildenbrand</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Dec 2021 09:27:17 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Dec 18, 2021 at 10:02 PM Nadav Amit &lt;namit&#64;vmware.com&gt; wrote:<br />&gt;<br />&gt; I found my old messy code for the software-PTE thing.<br />&gt;<br />&gt; I see that eventually I decided to hold a pointer to the “extra PTEs”<br />&gt; of each page in the PMD-page-struct. [ I also implemented the 2-adjacent<br />&gt; pages approach but this code is long gone. ]<br /><br />Ok, I understand why that ends up being the choice, but it makes it<br />too ugly and messy to look up  to be worth it, I think.<br /><br />&gt; I still don’t know what exactly you have in mind for making use<br />&gt; out of it for the COW issue.<br /><br />So the truly fundamental question for COW (and for a long-term GUP) is<br />fairly simple:<br /><br /> - Is the page I have truly owned exclusively by this VM?<br /><br />If that _isn't_ the case, you absolutely have to COW.<br /><br />If that _is_ the case, you can re-use the page.<br /><br />That is really it, boiled down to the pure basics.<br /><br />And if you aren't sure whether you are the ultimate and only authority<br />over the page, then COW is the "safer" option, in that breaking<br />sharing is fundamentally better than over-sharing.<br /><br />Now, the reason I like "page_count()==1" is that it is a 100% certain<br />way to know that you own the page absolutely and clearly.<br /><br />There is no question what-so-ever about it.<br /><br />And the reason I hate "page_mapcount()==1" with a passion is that it<br />is NOTHING OF THE KIND. It is an entirely meaningless number. It<br />doesn't mean anything at all.<br /><br />Even if the page mapcount is exactly right, it could easily and<br />trivially be a result of "fork, then unmap in either parent or child".<br /><br />Now that page_mapcount() is unquestionably 1, but despite that, at<br />some point the page was shared by another VM, and you can not know<br />whether you really have exclusive access.<br /><br />And that "even if page mapcount is exactly right" is a big issue in<br />itself, as I hope I've explained.<br /><br />It requires page locking, it requires that you take swapcache users<br />into account, it is just a truly messy and messed up thing.<br /><br />There really is absolutely no reason for page_mapcount to exist. It's<br />a mistake. We have it for completely broken historical reasons.<br /><br />It's WRONG.<br /><br />Now, if "page_count()==1" is so great, what is the issue? Problem solved.<br /><br />No, while page_count()==1 is one really fundamental marker (unlike the<br />mapcount), it does have problems too.<br /><br />Because yes, "page_count()==1" does mean that you have truly exclusive<br />ownership of the page, but the reverse is not true.<br /><br />The way the current regular VM code handles that "the reverse is not<br />true" is by making "the page is writable" be the second way you can<br />say "you clearly have full ownership of the page".<br /><br />So that's why you then have the "maybe_pinned()" thing in fork() and<br />in swap cache creation that keeps such a page writable, and doesn't do<br />the virtual copy and make it read-only again.<br /><br />But that's also why it has problems with write-protect (whether<br />mprotect or uddf_wp).<br /><br />Anyway, that was a long explanation to make the thinking clear, and<br />finally come to the actual answer to your question:<br /><br />Adding another bit in the page tables - *purely* to say "this VM owns<br />the page outright" - would be fairly powerful. And fairly simple.<br /><br />Then any COW event will set that bit - because when you actually COW,<br />the page you install is *yours*. No questions asked.<br /><br />And fork() would simply clear that bit (unless the page was one of the<br />pinned pages that we simply copy).<br /><br />See how simple that kind of concept is.<br /><br />And please, see how INCREDIBLY BROKEN page_mapcount() is. It really<br />fundamentally is pure and utter garbage.  It in no way says "I have<br />exclusive ownership of this page", because even if the mapcount is 1<br />*now*, it could have been something else earlier, and some other VM<br />could have gotten a reference to it before the current VM did so.<br /><br />This is why I will categoricall NAK any stupid attempt to re-introduce<br />page_mapcount() for COW or GUP handling. It's unacceptably<br />fundamentally broken.<br /><br />Btw, the extra bit doesn't really have to be in the page tables. It<br />could be a bit in the page itself. We could add another page bit that<br />we just clear when we do the "add ref to page as you make a virtual<br />copy during fork() etc".<br /><br />And no, we can't use "pincount" either, because it's not exact. The<br />fact that the page count is so elevated that we think it's pinned is a<br />_heuristic_, and that's ok when you have the opposite problem, and ask<br />"*might* this page be pinned". You want to never get a false negative,<br />but it can get a false positive.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
