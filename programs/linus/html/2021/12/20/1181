    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/20/1133">Matthew Wilcox</a><ul><li><a href="/lkml/2021/12/20/1147">Matthew Wilcox</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/12/20/1164">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/20/1229">Matthew Wilcox</a><ul><li><a href="/lkml/2021/12/20/1258">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 20 Dec 2021 11:38:55 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Dec 20, 2021 at 10:53 AM Matthew Wilcox &lt;willy&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; It makes me wonder if reuse_swap_page() can also be based on refcount<br />&gt; instead of mapcount?<br /><br />I suspect it doesn't even need refcount.<br /><br />For regular pages, after we've copied the page, all we do right now is<br /><br />                if (page_copied)<br />                        free_swap_cache(old_page);<br /><br />which is basically just an optimistic trylock_page() followed by<br />try_to_free_swap().<br /><br />And that then pretty much simply checks "are there any swap users<br />left" and deletes it from the swap cache if not.<br /><br />The "free_swap_cache()" thing is actually just an optimization to<br />avoid having memory pressure do it later.  So it doesn't have to be<br />exact.<br /><br />In fact, I thought that swap is so unusual that it's not even needed<br />at all, but I was wrong. See how this was re-introduced in commit<br />f4c4a3f48480 ("mm: free idle swap cache page after COW") because yes,<br />some loads still have swap space allocated.<br /><br />In theory, it would probably be a good idea at COW time to see if the<br />page ref is 2, and if it's a swap cache page, and try to do that swap<br />cache removal even earlier, so that the page actually gets re-used<br />(instead of copied and then the swap entry removed).<br /><br />But swap is such a non-issue these days that I doubt it matters, and<br />it's probably better to keep the swap handling in the unusual path.<br /><br />So mapcount and refcount aren't what matters for the swap cache.<br /><br />The swap count obviously *does* matter - because it means that some<br />mapping has a reference to this swap entry (not as a page, but as an<br />actual swap pointer).<br /><br />But the mapcount is irrelevant -  any users that have the swap page<br />actually mapped, don't actually need to be a swapcache page.<br /><br />Even the refcount doesn't really matter, afaik. The only "refcount" we<br />care about is that swapcount - that's what actually reference counts<br />the swap cases.<br /><br />try_to_free_swap() does check for one particular kind of reference: it<br />does a check for PageWriteback(). We don't want to remove the thing<br />from the swap cache if it's under active IO.<br /><br />(This codepath does need the page lock, though, thus all those<br />"page_trylock()" things).<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
