    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/12/17/298">First message in thread</a></li><li><a href="/lkml/2021/12/17/1085">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/18/59">David Hildenbrand</a><ul><li class="origin"><a href="/lkml/2021/12/18/225">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/18/225">Linus Torvalds</a><ul><li><a href="/lkml/2021/12/19/13">David Hildenbrand</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 18 Dec 2021 11:21:34 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 06/11] mm: support GUP-triggered unsharing via FAULT_FLAG_UNSHARE (!hugetlb)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Cutting down ruthlessly to the core of the issue ]<br /><br />On Sat, Dec 18, 2021 at 1:58 AM David Hildenbrand &lt;david&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; 1) Missed COW<br />&gt;<br />&gt; 2) Unnecessary COW<br />&gt;<br />&gt; 3) Wrong COW<br /><br />&gt; Does that make sense? If we agree on the above, then here is how the<br />&gt; currently discussed approaches differ:<br />&gt;<br />&gt; page_count != 1:<br />&gt; * 1) cannot happen<br />&gt; * 2) can happen easily (speculative references due to pagecache,<br />&gt;      migration, daemon, pagevec, ...)<br />&gt; * 3) can happen in the current code<br /><br />I claim that (1) "cannot happen" is a huge mother of a deal. It's<br />*LITERALLY* the bug you are chasing, and it's the security issue, so<br />on a bug scale, it's about the worst there is.<br /><br />I further then claim that (2) "happen easily" is you just making<br />things up. Yes, it can happen. But no, it's not actually that common,<br />and since (2) is harmless from a correctness standpoint, it is purely<br />about performance.<br /><br />And as mentioned, not using the mapcount actually makes *common*<br />operations much simpler and faster. You don't need the page lock to<br />serialize the mapcount.<br /><br />So (2) is a performance argument, and you haven't actually shown it to<br />be a problem.<br /><br />Which really only leaves (3). Which I've already explained what the<br />fix is: don't ever mark pages that shouldn't be COW'ed as being COW<br />pages.<br /><br />(3) is really that simple, although it ended up depending on Jason and<br />John Hubbard and others doing that FOLL_PIN logic to distinguish "I<br />just want to see a random page, and I don't care about COW" from "I<br />want to get a page, and that page needs to be coherent with this VM<br />and not be COW'ed away"<br /><br />So I'm not claiming (3) is "trivial", but at the same time it's<br />certainly not some fundamentally complicated thing, and it's easy to<br />explain what is going on.<br /><br />&gt; mapcount &gt; 1:<br />&gt; * 1) your concern is that this can happen due to concurrent swapin<br />&gt; * 2) cannot happen.<br />&gt; * 3) your concern is that this can happen due to concurrent swapin<br /><br />No, my concern about (1) is that IT IS WRONG.<br /><br />"mapcount" means nothing for COW. I even gave you an example of<br />exactly where it means nothing. It's crazy. It's illogical. And it's<br />complicated as hell.<br /><br />The fact that only one user maps a page is simply not meaningful. That<br />page can have other users that you don't know anything about, and that<br />don't show up in the mapcount.<br /><br />That page can be swapcached, in which case mapcount can change<br />radically in ways that you earlier indicated cannot happen. You were<br />wrong.<br /><br />But even if you fix that - by taking the page lock in every single<br />place - there are still *other* users that for all you know may want<br />the old contents. You don't know.<br /><br />The only thing that says "no other users" is the page count. Not the mapcount.<br /><br />In other words, I claim that<br /><br /> (a) mapcount is fundamentally the wrong thing to test. You can be the<br />only mapper, without being the "owner" of the page.<br /><br /> (b) it's *LITERALLY* the direct and present source of that bug in the<br />testcase you added, where a page with a mapcount of 1 has other<br />concurrent users and needs to be COW'ed but isn't.<br /><br /> (c) it's complicated and expensive to calculate (where one big part<br />of the expense is the page lock synchronization requirements, but<br />there are others)<br /><br />And this all happens for that "case (1)", which is the worst adn<br />scariest of them all.<br /><br />In contrast to that, your argument that "(2) cannot happen" is a total<br />non-argument. (2) isn't the problem.<br /><br />And I claim that (3) can happen because you're testing the wrong<br />counter, so who knows if the COW is wrong or not?<br /><br />&gt; I am completely missing how 2) or 3) could *ever* be handled properly<br />&gt; for page_count != 1. 3) is obviously more important and gives me nightmares.<br /><br />Ok, so if I tell you how (2) and (3) are handled properly, you will<br />just admit you were wrong?<br /><br />Here's how they are handled properly with page counts. I have told you<br />this before, but I'll summarize:<br /><br /> (2) is handled semantically properly by definition - it may be<br />"unnecessary", but it has no semantic meaning<br /><br />This is an IMPORTANT thing to realize. The fact is, (2) is not in the<br />same class as (1) or (3).<br /><br />And honestly - we've been doing this for all the common cases already<br />since at least 5.9, and your performance argument simply has not<br />really reared its head.  Which makes the whole argument moot. I claim<br />that it simplifies lots of common operations and avoids having to<br />serialize on a lock that has been a real and major problem. You claim<br />it's extra overhead and can cause extra COW events. Neither of has any<br />numbers worth anything, but at least I can point to the fact that all<br />the *normal* VM paths have been doing the thing I advocate for many<br />releases now, and the sky most definitely is NOT falling.<br /><br />So that only leaves (3).<br /><br />Handling (3) really is so conceptually simple that I feel silly for<br />repeating it: if you don't want a COW to happen, then you mark the<br />page as being not-COW.<br /><br />That sounds so simple as to be stupid. But it really is the solution.<br />It's what that pinning logic does, and keeps that "page may be pinned"<br />state around, and then operations like fork() that would otherwise<br />create a COW mapping of it will just not do it.<br /><br />So that incredibly simple approach does require actual code: it<br />requires that explicit "fork() needs to copy instead of COW" code, it<br />requires that "if it's pinned, we don't make a new swapcache entry out<br />of it". So it's real code, and it's a real issue, but it's<br />conceptually absolutely trivial, and the code is usualyl really simple<br />to understand too.<br /><br />So you have a *trivial* concept, and you have simple code that could<br />be described to a slightly developmentally challenged waterfowl.  If<br />you're one of the programmers doing the "explain your code to a rubber<br />ducky", you can look at code like this:<br /><br />                /*<br />                 * Anonymous process memory has backing store?<br />                 * Try to allocate it some swap space here.<br />                 * Lazyfree page could be freed directly<br />                 */<br />                if (PageAnon(page) &amp;&amp; PageSwapBacked(page)) {<br />                        if (!PageSwapCache(page)) {<br />                                if (!(sc-&gt;gfp_mask &amp; __GFP_IO))<br />                                        goto keep_locked;<br />                                if (page_maybe_dma_pinned(page))<br />                                        goto keep_locked;<br /><br />and you can explain that page_maybe_dma_pinned() test to your rubber<br />ducky, and that rubber ducky will literally nod its head. It gets it.<br /><br />To recap:<br /> (1) is important, and page_count() is the only thing that guarantees<br />"you get full access to a page only when it's *obviously* exclusively<br />yours".<br /> (2) is NOT important, but could be a performance issue, but we have<br />real data from the past year that it isn't.<br /> (3) is important, and has a really spectacularly simple conceptual<br />fix with quite simple code too.<br /><br />In contrast, with the "mapcount" games you can't even explain why they<br />should work, and the patches I see are actively buggy because<br />everything is so subtle.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
