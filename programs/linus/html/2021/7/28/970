    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/7/21/922">First message in thread</a></li><li><a href="/lkml/2021/7/28/919">Linus Torvalds</a><ul><li><a href="/lkml/2021/7/28/941">Mathieu Desnoyers</a><ul><li><a href="/lkml/2021/7/28/955">Linus Torvalds</a><ul><li><a href="/lkml/2021/7/28/954">Mathieu Desnoyers</a></li></ul></li><li><a href="/lkml/2021/7/28/961">"Paul E. McKenney"</a></li></ul></li><li><a href="/lkml/2021/7/28/960">"Paul E. McKenney"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 28 Jul 2021 11:57:14 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 rcu 04/18] rcu: Weaken -&gt;dynticks accesses and updates</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 28, 2021 at 11:46 AM Paul E. McKenney &lt;paulmck&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; But atomic_read_this_cpu(&amp;rcu_data.dynticks) isn't all that much shorter<br />&gt; than atomic_read(this_cpu_ptr(&amp;rcu_data.dynticks)).<br /><br />It's not so much that it's shorter to write for a human, it's that we<br />could generate better code for it.<br /><br />That atomic_read(this_cpu_ptr()) pattern generates code like<br /><br />        movq    $rcu_data+288, %rax<br />        add %gs:this_cpu_off(%rip), %rax<br />        movl    (%rax), %eax<br /><br />but it *could* just generate<br /><br />        movl %gs:rcu_data+288, %rax<br /><br />instead.<br /><br />Similar patterns for the other per-cpu atomics, ie it would be<br />possible to just generate<br /><br />        lock ; xaddl %gs:..., %rax<br /><br />instead of generating the address by doing that "add %gs:this_cpu_off" thing..<br /><br />But no, it doesn't look like there are enough users of this to matter.<br />We're just talking a few extra bytes, and a couple of extra<br />instructions (and possibly slightly higher register pressure, which<br />then generates more instructions).<br /><br />The *expensive* part remains the SMP serialization of the "lock".<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
