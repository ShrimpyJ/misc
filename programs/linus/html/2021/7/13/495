    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/3/26/131">First message in thread</a></li><li><a href="/lkml/2021/3/26/131">syzbot</a><ul><li><a href="/lkml/2021/3/26/140">Dmitry Vyukov</a><ul><li><a href="/lkml/2021/3/26/238">Christian Brauner</a><ul><li><a href="/lkml/2021/3/26/274">Dmitry Vyukov</a><ul><li><a href="/lkml/2021/3/26/582">Christian Brauner</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2021/7/13/5">syzbot</a><ul><li class="origin"><a href="/lkml/2021/7/14/112">Linus Torvalds</a><ul><li><a href="/lkml/2021/7/14/112">Christian Brauner</a><ul><li><a href="/lkml/2021/7/14/214">Christian Brauner</a></li><li><a href="/lkml/2021/7/14/386">Dmitry Vyukov</a></li></ul></li></ul></li><li><a href="/lkml/2021/7/14/486">Christian Brauner</a><ul><li><a href="/lkml/2021/7/14/491">syzbot</a></li><li><a href="/lkml/2021/7/14/500">Christian Brauner</a><ul><li><a href="/lkml/2021/7/14/511">syzbot</a></li></ul></li></ul></li><li><a href="/lkml/2021/7/14/488">Christian Brauner</a><ul><li><a href="/lkml/2021/7/14/489">syzbot</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 13 Jul 2021 11:49:14 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [syzbot] KASAN: null-ptr-deref Read in filp_close (2)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 12, 2021 at 9:12 PM syzbot<br />&lt;syzbot+283ce5a46486d6acdbaf&#64;syzkaller.appspotmail.com&gt; wrote:<br />&gt;<br />&gt; syzbot has found a reproducer for the following issue on:<br /><br />Hmm.<br /><br />This issue is reported to have been already fixed:<br /><br />    Fix commit: 9b5b8722 file: fix close_range() for unshare+cloexec<br /><br />and that fix is already in the reported HEAD commit:<br /><br />&gt; HEAD commit:    7fef2edf sd: don't mess with SD_MINORS for CONFIG_DEBUG_BL..<br /><br />and the oops report clearly is from that:<br /><br />&gt; CPU: 1 PID: 8445 Comm: syz-executor493 Not tainted 5.14.0-rc1-syzkaller #0<br /><br />so the alleged fix is already there.<br /><br />So clearly commit 9b5b872215fe ("file: fix close_range() for<br />unshare+cloexec") does *NOT* fix the issue.<br /><br />This was originally bisected to that 582f1fb6b721 ("fs, close_range:<br />add flag CLOSE_RANGE_CLOEXEC") in<br /><br />     <a href="https://syzkaller.appspot.com/bug?id=1bef50bdd9622a1969608d1090b2b4a588d0c6ac">https://syzkaller.appspot.com/bug?id=1bef50bdd9622a1969608d1090b2b4a588d0c6ac</a><br /><br />which is where the "fix" is from.<br /><br />It would probably be good if sysbot made this kind of "hey, it was<br />reported fixed, but it's not" very clear.<br /><br />The KASAN report looks like a use-after-free, and that "use" is<br />actually the sanity check that the file count is non-zero, so it's<br />really a "struct file *" that has already been free'd.<br /><br />That bogus free is a regular close() system call<br /><br />&gt;  filp_close+0x22/0x170 fs/open.c:1306<br />&gt;  close_fd+0x5c/0x80 fs/file.c:628<br />&gt;  __do_sys_close fs/open.c:1331 [inline]<br />&gt;  __se_sys_close fs/open.c:1329 [inline]<br /><br />And it was opened by a "creat()" system call:<br /><br />&gt; Allocated by task 8445:<br />&gt;  __alloc_file+0x21/0x280 fs/file_table.c:101<br />&gt;  alloc_empty_file+0x6d/0x170 fs/file_table.c:150<br />&gt;  path_openat+0xde/0x27f0 fs/namei.c:3493<br />&gt;  do_filp_open+0x1aa/0x400 fs/namei.c:3534<br />&gt;  do_sys_openat2+0x16d/0x420 fs/open.c:1204<br />&gt;  do_sys_open fs/open.c:1220 [inline]<br />&gt;  __do_sys_creat fs/open.c:1294 [inline]<br />&gt;  __se_sys_creat fs/open.c:1288 [inline]<br />&gt;  __x64_sys_creat+0xc9/0x120 fs/open.c:1288<br />&gt;  do_syscall_x64 arch/x86/entry/common.c:50 [inline]<br />&gt;  do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80<br />&gt;  entry_SYSCALL_64_after_hwframe+0x44/0xae<br /><br />But it has apparently already been closed from a workqueue:<br /><br />&gt; Freed by task 8445:<br />&gt;  __fput+0x288/0x920 fs/file_table.c:280<br />&gt;  task_work_run+0xdd/0x1a0 kernel/task_work.c:164<br /><br />So it's some kind of confusion and re-use of a struct file pointer.<br /><br />Which is certainly consistent with the "fix" in 9b5b872215fe ("file:<br />fix close_range() for unshare+cloexec"), but it very much looks like<br />that fix was incomplete and not the full story.<br /><br />Some fdtable got re-allocated? The fix that wasn't a fix ends up<br />re-checking the maximum file number under the file_lock, but there's<br />clearly something else going on too.<br /><br />Christian?<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
