    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/7/14/676">First message in thread</a></li><li><a href="/lkml/2021/7/14/676">Christoph Hellwig</a><ul><li class="origin"><a href="/lkml/2021/7/14/1329">Linus Torvalds</a><ul><li><a href="/lkml/2021/7/14/1329">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2021/7/15/2068">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Jul 2021 13:05:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] configfs fix for Linux 5.14</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 14, 2021 at 9:33 AM Christoph Hellwig &lt;hch&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; configfs fix for Linux 5.14<br />&gt;<br />&gt;  - fix the read and write iterators (Bart Van Assche)<br /><br />I've pulled this, but I'm somewhat disgusted by it.<br /><br />The overflow "protection" is just wrong:<br /><br />+       to_copy = SIMPLE_ATTR_SIZE - 1 - pos;<br />+       if (to_copy &lt;= 0)<br />+               return 0;<br /><br />because if users control "pos", then that "to_copy" could be a huge<br />positive value even after overflow protection.<br /><br />I hope/think that we always end up checking 'pos' in the VFS layer so<br />that this isn't a bug in practice, but people - the above is just<br />fundamentally bad code.<br /><br />It's simply not the correct way to check limits. It does it badly, and<br />it's hard to read (*).<br /><br />If you want to check limits, then do it (a) the obvious way and (b) right.<br /><br />Something like<br /><br />        if (pos &lt; 0 || pos &gt;= SIMPLE_ATTR_SIZE - 1)<br />                return 0;<br />        to_copy = SIMPLE_ATTR_SIZE - 1 - pos;<br /><br />would have been a hell of a lot more obvious, would have been CORRECT,<br />and a compiler would likely be able to equally good code for it.<br /><br />Doing a "x &lt;0 || x &gt; C" test is actually nice and cheap, and compilers<br />should all be smart enough to turn it into a single (unsigned)<br />comparison.<br /><br />Possibly it even generates better code, since "to_copy" could then -<br />and should - no longer be a 64-bit loff_t, since it's pointless. We've<br />just checked the range of the values, so it can be the natural size<br />for the machine.<br /><br />Although from a small test, gcc does seem to be too simple to take<br />advantage of that, and on 32-bit x86 it does the range check using<br />64-bit arithmetic even when unnecessary (it should just check "are the<br />upper 32 bits zero" rather than play around with doing a 64-bit<br />sub/sbb - I'm surprised, because I thought gcc already knew about<br />this, but maybe compiler people are starting to forget about 32-bit<br />stuff too).<br /><br />But even if the compiler doesn't figure it out, the simple "just check<br />the limits" is a lot more readable for humans, and avoids the whole<br />overflow issue. And maybe some compilers will do better at it.<br /><br />            Linus<br /><br />(*) Ok, it's easy to read if you ignore the overflow possibility. IOW,<br />it's easy to read WRONG.<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
