    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2021/7/14/1092">First message in thread</a></li><li><a href="/lkml/2021/7/15/2063">Linus Torvalds</a><ul><li><a href="/lkml/2021/7/15/2075">"Gustavo A. R. Silva"</a><ul><li><a href="/lkml/2021/7/15/2072">Linus Torvalds</a></li><li><a href="/lkml/2021/7/15/2073">"Gustavo A. R. Silva"</a></li></ul></li><li><a href="/lkml/2021/7/16/694">Nathan Chancellor</a><ul><li><a href="/lkml/2021/7/16/701">"Gustavo A. R. Silva"</a><ul><li><a href="/lkml/2021/7/16/715">Nathan Chancellor</a><ul><li><a href="/lkml/2021/7/16/725">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Jul 2021 12:22:31 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] fallthrough fixes for Clang for 5.14-rc2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 16, 2021 at 11:47 AM Nathan Chancellor &lt;nathan&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; I am not really sure how to resolve that within checkFallThroughIntoBlock() or<br />&gt; fillReachableBlocks() but given that this is something specific to the kernel,<br /><br />It's not at all specific to the kernel. Yes, the particular example<br />was from the kernel, but the issue is very much generic.<br /><br />Yes, that particular example was from the kernel and used a CONFIG option.<br /><br />But I can actually point to user-space code that looks very much like it:<br /><br />   <a href="https://sources.debian.org/src/libreoffice/1">https://sources.debian.org/src/libreoffice/1</a>:7.0.4-4/stoc/source/simpleregistry/simpleregistry.cxx/?hl=223#L223<br /><br />look at that code, and tell me it makes sense.<br /><br />You want to have the fallthrough for the case where abort() isn't<br />marked as noreturn, but you don't want to get a warning for the case<br />where a compile environment *does* have that noreturn thing.<br /><br />See the issue? EXACT SAME THING.<br /><br />This is in no way kernel-specific. The fact is, code can be<br />unreachable without it being a bug.<br /><br />A common example of unreachable code is things like this:<br /><br />  <a href="https://sources.debian.org/src/apparmor/2.13.6-10/parser/libapparmor_re/chfa.cc/?hl=338#L338">https://sources.debian.org/src/apparmor/2.13.6-10/parser/libapparmor_re/chfa.cc/?hl=338#L338</a><br /><br />Look, it's a "switch (sizeof())", which means that only one of the<br />cases is ever going to be reachable.<br /><br />That code doesn't actually use "[[fallthrough]]" right now, and just<br />uses the implicit fallthrough. But imagine if it was converted to use<br />that fallthrough annotation. If the "sizeof()" isn't the largest size,<br />those fallthrough's will be fundamentally unreachable, because the<br />whole case is unreachable.<br /><br />Warning about unreachable code is simply WRONG. It happens very<br />naturally in C, exactly becuse people do conditionals based on<br />compile-time constants. Those compile-time constants may be about<br />things like "sizeof", they may be about things like that "abort() may<br />be no-return or not".<br /><br />But it can also easily be about patterns where you always check error<br />returns, and some functions are inline and never (or always) return<br />errors, so that your code ends up having stuff that is just statically<br />always true (or always false), and then the implication is that there<br />is unreachable code that the compiler will just compile away.<br /><br />And no, this is in no way kernel-specific at all.<br /><br />That warning needs<br /><br /> (a) a different flag - because "warn about unreachable" is completely<br />different from "warn about implicit fallthrough"<br /><br /> (b) point to where the warning is<br /><br />but honestly, it would be better to just remove the warning entirely,<br />because it is just fundamentally wrong for all the reasons outlined<br />above.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
