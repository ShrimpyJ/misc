    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/31/581">First message in thread</a></li><li><a href="/lkml/2013/7/31/581">Rik van Riel</a><ul><li><a href="/lkml/2013/7/31/583">Paul Turner</a></li><li class="origin"><a href="/lkml/2013/7/31/607">Linus Torvalds</a><ul><li><a href="/lkml/2013/7/31/607">Rik van Riel</a><ul><li><a href="/lkml/2013/7/31/659">Rik van Riel</a><ul><li><a href="/lkml/2013/7/31/653">Paul Turner</a></li><li><a href="/lkml/2013/7/31/655">Rik van Riel</a></li><li><a href="/lkml/2013/7/31/843">Linus Torvalds</a></li><li><a href="/lkml/2013/8/1/412">=?utf-8?B?SsO2cm4=?= Engel</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Jul 2013 15:07:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] sched,x86: optimize switch_mm for multi-threaded workloads</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 31, 2013 at 2:43 PM, Rik van Riel &lt;riel&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; The cause turned out to be unnecessary atomic accesses to the<br />&gt; mm_cpumask. When in lazy TLB mode, the CPU is only removed from<br />&gt; the mm_cpumask if there is a TLB flush event.<br />&gt;<br />&gt; Most of the time, no such TLB flush happens, and the kernel<br />&gt; skips the TLB reload.  It can also skip the atomic memory<br />&gt; set &amp; test.<br /><br />The patch looks obvious, and I'm not seeing any very clear reasons for<br />why we would want that test-and-set to be atomic. That said, I'd like<br />to have some explicit comments about exactly why it doesn't need the<br />atomicity. Because afaik, there actually are concurrent readers _and_<br />writers of that mask, and the accesses are not locked by anything<br />here.<br /><br />I _think_ the reason for this all being safe is simply that the only<br />real race is "We need to set the bit before we load the page table,<br />and we're protected against that bit being cleared because the TLB<br />state is TLBSTATE_OK and thus TLB flushing will no longer leave that<br />mm".<br /><br />But damn, it all looks subtle as hell. That code does:<br /><br />                this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);<br />                BUG_ON(this_cpu_read(cpu_tlbstate.active_mm) != next);<br /><br />                if (!cpumask_test_and_set_cpu(cpu, mm_cpumask(next))) {<br /><br />and I'm wondering if we need a barrier to make sure that that<br />TLBSTATE_OK write happens *before* we test the cpumask. With<br />test_and_set(), we have the barrier in the test-and-set. But with just<br />test_bit, I'm not seeing why the compiler couldn't re-order them. I<br />suspect it won't, but...<br /><br />So I think the patch is _probably_ fine, but I think this is a hell of<br />a lot more subtle than it all looks, and I'd like people to show that<br />they have thought this through. And I don't see any indication of that<br />in the changelog - it only talks about the performance issues, not<br />about the *correctness* issues.<br /><br />Please?<br /><br />               Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
