    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/14/29">First message in thread</a></li><li><a href="/lkml/2013/7/14/67">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2013/7/14/83">Andi Kleen</a><ul><li><a href="/lkml/2013/7/15/423">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2013/7/15/538">"H. Peter Anvin"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Jul 2013 11:58:56 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86/asm: avoid mnemonics without type suffix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 15, 2013 at 11:47 AM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt;<br />&gt; To be fair, we *ought to* be able to do something like:<br />&gt;<br />&gt;         asm volatile(LOCK_PREFIX "bts%z0 %1,%0"<br />&gt;                         : BITOP_ADDR(addr) : "Ir" (nr) : "memory");<br />&gt;<br />&gt; ... but some older version of gcc are broken and emit "ll" rather than<br />&gt; "q".  Furthermore, since that would actually result in *worse* code<br />&gt; emitted overall (unnecessary REX prefixes), I'm not exactly happy on the<br />&gt; idea.<br /><br />I really think the "worse code" argument is the one that matters.<br /><br />Specifying the size of the operation is *overspecifying* things,<br />exactly because the 32-bit encoding is actually the *better* one when<br />possible.<br /><br />So it's much better to underspecify and let the assembler pick the<br />best encoding, than it is to use an explicit size and get worse code.<br /><br />Which is why I brought up the issue of small constants and short<br />jumps. I really believe this is exactly the same issue.<br /><br />              Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
