    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/14/29">First message in thread</a></li><li><a href="/lkml/2013/7/14/29">Ramkumar Ramachandra</a><ul><li class="origin"><a href="/lkml/2013/7/14/57">Linus Torvalds</a><ul><li><a href="/lkml/2013/7/14/57">Ramkumar Ramachandra</a><ul><li><a href="/lkml/2013/7/14/60">Linus Torvalds</a><ul><li><a href="/lkml/2013/7/14/62">Ramkumar Ramachandra</a></li></ul></li></ul></li><li><a href="/lkml/2013/7/14/61">Tim Northover</a><ul><li><a href="/lkml/2013/7/14/65">Linus Torvalds</a><ul><li><a href="/lkml/2013/7/14/68">Tim Northover</a></li></ul></li></ul></li><li><a href="/lkml/2013/7/14/73">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2013/7/14/74">Linus Torvalds</a></li><li><a href="/lkml/2013/7/15/425">"H. Peter Anvin"</a></li></ul></li></ul></li><li><a href="/lkml/2013/7/14/67">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2013/7/14/83">Andi Kleen</a><ul><li><a href="/lkml/2013/7/15/423">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2013/7/15/538">"H. Peter Anvin"</a><ul><li><a href="/lkml/2013/7/15/432">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Jul 2013 10:19:20 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86/asm: avoid mnemonics without type suffix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 14, 2013 at 5:56 AM, Ramkumar Ramachandra<br />&lt;artagnon&#64;gmail.com&gt; wrote:<br />&gt; 1c54d77 (x86: partial unification of asm-x86/bitops.h, 2008-01-30)<br />&gt; changed a bunch of btrl/btsl instructions to btr/bts, with the following<br />&gt; justification:<br />&gt;<br />&gt;   The inline assembly for the bit operations has been changed to remove<br />&gt;   explicit sizing hints on the instructions, so the assembler will pick<br />&gt;   the appropriate instruction forms depending on the architecture and<br />&gt;   the context.<br />&gt;<br />&gt; Unfortunately, GNU as does no such thing<br /><br />Yes it does.<br /><br />&gt;   btrl  $1, 0<br />&gt;   btr   $1, 0<br />&gt;   btsl  $1, 0<br />&gt;   bts   $1, 0<br /><br />What the heck is that supposed to show? It shows nothing at all. With<br />an argument of '1', *of*course* gas will use "btsl", since that's the<br />short form. Using the rex-predix and a btsq would be *stupid*.<br /><br />So gas will pick the appropriate form, exactly as claimed.<br /><br />Try some actual relevant test instead:<br /><br />   bt %eax,mem<br />   bt %rax,mem<br /><br />and notice how they are actually fundamentally different. Test-case:<br /><br />int main(int argc, char **argv)<br />{<br />  asm("bt %1,%0":"=m" (**argv): "a" (argc));<br />  asm("bt %1,%0":"=m" (**argv): "a" ((unsigned long)(argc)));<br />}<br /><br />and I get<br /><br />   0f a3 02             bt     %eax,(%rdx)<br />   48 0f a3 02           bt     %rax,(%rdx)<br /><br />exactly as expected and wanted.<br /><br />Now, there are possible cases where you want to make the size explicit<br />because you are mixing memory operand sizes and there can be nasty<br />performance implications of doing a 32-bit write and then doing a<br />64-bit read of the result. I'm not actually aware of us having ever<br />worried/cared about it, but it's a possible source of trouble: mixing<br />bitop instructions with non-bitop instructions can have some subtle<br />interactions, and you need to be careful, since the size of the<br />operand affects both the offset *and* the memory access size. The<br />access size generally is meaningless from a semantic standpoint<br />(little-endian being the only sane model), but the access size *can*<br />have performance implications for the write queue forwarding.<br /><br />                      Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
