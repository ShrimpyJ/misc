    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/5/410">First message in thread</a></li><li><a href="/lkml/2013/11/26/621">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/26/545">Linus Torvalds</a></li><li><a href="/lkml/2013/11/30/15">Simon Kirby</a><ul><li><a href="/lkml/2013/11/30/130">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/30/152">Simon Kirby</a></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2013/11/30/153/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Nov 2013 13:08:52 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [3.10] Oopses in kmem_cache_allocate() via prepare_creds()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Nov 30, 2013 at 1:43 AM, Simon Kirby &lt;sim&#64;hostway.ca&gt; wrote:<br />&gt;<br />&gt; I turned on kmalloc-192 tracing to find what else is using it: struct<br />&gt; nfs_fh, struct bio, and struct cred. Poking around those, struct bio has<br />&gt; bi_cnt, but it is way down in the struct. struct cred has "usage", but it<br />&gt; comes first.<br /><br />You could also try to avoid the whole aliasing by using a separate<br />slab for just the pipe_inode_info.<br /><br />Something like the attached patch (which also enables debugging just<br />for that slab).<br /><br />I still don't see what could be wrong with the pipe_inode_info thing,<br />but the fact that it's been so consistent in your traces does make me<br />suspect it really is *that* particular slab. But I dunno, and this<br />would just confirm it.<br /><br />                Linus<br /> fs/pipe.c | 21 ++++++++++++++++-----<br /> 1 file changed, 16 insertions(+), 5 deletions(-)<br /><br />diff --git a/fs/pipe.c b/fs/pipe.c<br />index d2c45e14e6d8..7cfd6cdf0147 100644<br />--- a/fs/pipe.c<br />+++ b/fs/pipe.c<br />&#64;&#64; -729,7 +729,7 &#64;&#64; pipe_poll(struct file *filp, poll_table *wait)<br /> static int<br /> pipe_release(struct inode *inode, struct file *file)<br /> {<br />-	struct pipe_inode_info *pipe = inode-&gt;i_pipe;<br />+	struct pipe_inode_info *pipe = file-&gt;private_data;<br /> 	int kill = 0;<br /> <br /> 	__pipe_lock(pipe);<br />&#64;&#64; -776,11 +776,13 &#64;&#64; pipe_fasync(int fd, struct file *filp, int on)<br /> 	return retval;<br /> }<br /> <br />+static struct kmem_cache *pipe_info_slab;<br />+<br /> struct pipe_inode_info *alloc_pipe_info(void)<br /> {<br /> 	struct pipe_inode_info *pipe;<br /> <br />-	pipe = kzalloc(sizeof(struct pipe_inode_info), GFP_KERNEL);<br />+	pipe = kmem_cache_zalloc(pipe_info_slab, GFP_KERNEL);<br /> 	if (pipe) {<br /> 		pipe-&gt;bufs = kzalloc(sizeof(struct pipe_buffer) * PIPE_DEF_BUFFERS, GFP_KERNEL);<br /> 		if (pipe-&gt;bufs) {<br />&#64;&#64; -790,7 +792,7 &#64;&#64; struct pipe_inode_info *alloc_pipe_info(void)<br /> 			mutex_init(&amp;pipe-&gt;mutex);<br /> 			return pipe;<br /> 		}<br />-		kfree(pipe);<br />+		kmem_cache_free(pipe_info_slab, pipe);<br /> 	}<br /> <br /> 	return NULL;<br />&#64;&#64; -808,7 +810,7 &#64;&#64; void free_pipe_info(struct pipe_inode_info *pipe)<br /> 	if (pipe-&gt;tmp_page)<br /> 		__free_page(pipe-&gt;tmp_page);<br /> 	kfree(pipe-&gt;bufs);<br />-	kfree(pipe);<br />+	kmem_cache_free(pipe_info_slab, pipe);<br /> }<br /> <br /> static struct vfsmount *pipe_mnt __read_mostly;<br />&#64;&#64; -1311,8 +1313,17 &#64;&#64; static struct file_system_type pipe_fs_type = {<br /> <br /> static int __init init_pipe_fs(void)<br /> {<br />-	int err = register_filesystem(&amp;pipe_fs_type);<br />+	int err;<br />+<br />+	pipe_info_slab = kmem_cache_create("pipe-inode-info",<br />+		sizeof(struct pipe_inode_info),<br />+		0,<br />+		SLAB_RED_ZONE | SLAB_POISON | SLAB_STORE_USER | SLAB_DEBUG_FREE,<br />+		NULL);<br />+	if (!pipe_info_slab)<br />+		return -ENOMEM;<br /> <br />+	err = register_filesystem(&amp;pipe_fs_type);<br /> 	if (!err) {<br /> 		pipe_mnt = kern_mount(&amp;pipe_fs_type);<br /> 		if (IS_ERR(pipe_mnt)) {</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
