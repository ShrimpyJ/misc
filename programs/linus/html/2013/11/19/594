    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/5/97">First message in thread</a></li><li><a href="/lkml/2013/10/17/695">Greg KH</a><ul><li><a href="/lkml/2013/10/23/263">Peter Hurley</a></li><li><a href="/lkml/2013/11/7/372">Peter Hurley</a><ul><li><a href="/lkml/2013/11/7/392">Peter Hurley</a></li><li class="origin"><a href="/lkml/2013/11/19/603">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/19/603">Greg Kroah-Hartman</a><ul><li><a href="/lkml/2013/11/19/609">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 19 Nov 2013 16:21:54 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] n_tty: Ensure reader restarts worker for next reader</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Greg,<br /> what happened to this patch? Is it still waiting in some random tree<br />of yours, or did it get lost?<br /><br />                    Linus<br /><br />On Thu, Nov 7, 2013 at 10:59 AM, Peter Hurley &lt;peter&#64;hurleysoftware.com&gt; wrote:<br />&gt; A departing reader must restart a flush_to_ldisc() worker _before_<br />&gt; the next reader enters the read loop; this is to avoid the new reader<br />&gt; concluding no more i/o is available and prematurely exiting, when the<br />&gt; old reader simply hasn't re-started the worker yet.<br />&gt;<br />&gt; Cc: stable&#64;kernel.org # 3.12<br />&gt; Signed-off-by: Peter Hurley &lt;peter&#64;hurleysoftware.com&gt;<br />&gt; ---<br />&gt;  drivers/tty/n_tty.c | 5 +++--<br />&gt;  1 file changed, 3 insertions(+), 2 deletions(-)<br />&gt;<br />&gt; diff --git a/drivers/tty/n_tty.c b/drivers/tty/n_tty.c<br />&gt; index 7a744b6..ce11cd5 100644<br />&gt; --- a/drivers/tty/n_tty.c<br />&gt; +++ b/drivers/tty/n_tty.c<br />&gt; &#64;&#64; -2250,6 +2250,9 &#64;&#64; static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,<br />&gt;                 if (time)<br />&gt;                         timeout = time;<br />&gt;         }<br />&gt; +       n_tty_set_room(tty);<br />&gt; +       up_read(&amp;tty-&gt;termios_rwsem);<br />&gt; +<br />&gt;         mutex_unlock(&amp;ldata-&gt;atomic_read_lock);<br />&gt;         remove_wait_queue(&amp;tty-&gt;read_wait, &amp;wait);<br />&gt;<br />&gt; &#64;&#64; -2260,8 +2263,6 &#64;&#64; static ssize_t n_tty_read(struct tty_struct *tty, struct file *file,<br />&gt;         if (b - buf)<br />&gt;                 retval = b - buf;<br />&gt;<br />&gt; -       n_tty_set_room(tty);<br />&gt; -       up_read(&amp;tty-&gt;termios_rwsem);<br />&gt;         return retval;<br />&gt;  }<br />&gt;<br />&gt; --<br />&gt; 1.8.1.2<br />&gt;<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
