    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/5/410">First message in thread</a></li><li><a href="/lkml/2013/8/20/108">Ian Applegate</a><ul><li><a href="/lkml/2013/11/25/804">Simon Kirby</a><ul><li class="origin"><a href="/lkml/2013/11/26/545">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/26/545">Linus Torvalds</a></li><li><a href="/lkml/2013/11/30/15">Simon Kirby</a><ul><li><a href="/lkml/2013/11/30/130">Linus Torvalds</a></li><li><a href="/lkml/2013/11/30/153">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Nov 2013 15:16:09 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [3.10] Oopses in kmem_cache_allocate() via prepare_creds()</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 25, 2013 at 4:44 PM, Simon Kirby &lt;sim&#64;hostway.ca&gt; wrote:<br />&gt;<br />&gt; I was hoping this or something else by 3.12 would have fixed it, so after<br />&gt; testing we deployed this everywhere and turned off the rest of the debug<br />&gt; options. I missed slub_debug on one server, though...and it just hit<br />&gt; another case of overwritten poison.<br /><br />Your thing is *very* consistent, it's once more four bytes into that<br />pipe-info. And it's once more that exact same "increment second word<br />in the allocation" pattern.<br /><br />But the fact that it goes away when you enable other debug options is<br />really really annoying. It's consistent only if you don't have the<br />options on that might help us debug it further. Damn.<br /><br />&gt; Is it true that with slub_debug, aliasing of equal-sized objects is<br />&gt; turned off, and so they shouldn't be immediately side-by-side? In other<br />&gt; words, would there be similar scrawling victim chances as allocating<br />&gt; pipe_inode_info with pages instead of slabs? "slabinfo -a" is empty.<br /><br />So the thing is, with slub debugging, slub shouldn't be merging<br />different slab caches.<br /><br />HOWEVER.<br /><br />The pipe-info structure isn't using its own slab cache, it's just<br />using "kmalloc()". So it by definition will merge with all other<br />kmalloc() allocations of the same size (or, to be exact, of "similar<br />enough size to hit the same size bucket"). In your case it's the<br />192-byte-sized bucket.<br /><br />But all the debugging code talks purely about pipe_info allocations -<br />both the previous kmalloc/kfree _and_ the kmalloc() that actually sees<br />the slub debugging error. So if it's mixing with something else, I'm<br />not seeing what that would be. It would have to be an older allocation<br />(as it "it got re-allocated to a pipe in between") or another type<br />that was the similar size.<br /><br />Which doesn't look all that likely. Not when your problems are so<br />consistent, and seem to be *always* about that pipe_inode_info.<br /><br />But dammit, that it such a simple set of allocations. I still don't<br />see how they could be to blame. And if it's some suspicious access to<br />the pipe mutex (that second word is still the "wait_lock" spinlock in<br />the pipe inode mutex) I really would have expected the mutex debugging<br />to have screamed loudly. Or the DEBUG_PAGEALLOC.<br /><br />I'm really not very happy with the whole pipe locking logic (or the<br />refcounting we do, separately from the "struct inode"), and in that<br />sense I'm perfectly willing to blame that code for doing bad things.<br />But the fact that it all goes away with debugging makes me very very<br />unhappy.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
