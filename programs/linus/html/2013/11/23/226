    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/11/6/664">First message in thread</a></li><li><a href="/lkml/2013/11/21/678">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/22/81">James Morris</a></li><li><a href="/lkml/2013/11/22/172">Josh Boyer</a></li><li><a href="/lkml/2013/11/22/429">David Howells</a><ul><li class="origin"><a href="/lkml/2013/11/24/164">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/24/164">James Morris</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 23 Nov 2013 19:33:34 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT] Security subsystem updates for 3.13</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 22, 2013 at 12:25 PM, David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt; Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt;&gt; So for future cases: if there are big independent overhauls of core<br />&gt;&gt; subsystems, I'd really like to see them kept separate, ok?<br />&gt;<br />&gt; Since the trusted and encrypted keys that Mimi and Dmitry deal with are also<br />&gt; more akin to the keyring stuff, should they go through the keyring branch?<br />&gt; And does James want to hold that branch?<br /><br />So by now, the changes are hopefully smaller and general "updates"<br />rather than big new features. At that point, I don't care too deeply.<br />It's the "this is a whole new big way of doing things, and there's<br />fundamental new core code" that I would really like to be able to see<br />separately in order to make it much easier for me to pull and walk<br />through independently of the normal "updates to subsystem" stuff.<br /><br />&gt; I wrote it in userspace where I could easily drive it with huge numbers of<br />&gt; entries (add a million keys, say, delete them randomly and check at each step<br />&gt; that each remaining key can still be found) and also valground it.  For<br />&gt; reference, what's the best way of showing you something like this?<br /><br />Quite frankly, I just want to *know* about things like this, there<br />doesn't have to be some fixed format for it.<br /><br />It can be part of the pull request, explaining where the code comes<br />from, how it's been tested, who has looked at it etc etc. Or it can be<br />just free-form in the commit messages.<br /><br />And again, this - for me - is about core code that isn't deeply<br />embedded in some internal subsystem. So the reason I reacted to the<br />assoc_array.c thing is that it was clearly set up to be generic, and<br />it does end up being pretty different and affects "normal" users. So I<br />go off looking for "ok, where can I find this discussed" for doing<br />some minimal due diligence on a new set of core code, and I find very<br />little on lkml, and nothing else. And the commit message talks about<br />what it does, but not about the "who looked at it", so I basically had<br />nothing to judge it by except just looking at the code.<br /><br />Which didn't look horrible, but it really would have made me happier<br />hearing about people looking it over, and about you testing it in user<br />space etc etc.<br /><br />&gt; I did show it to Paul McKenney - and he gave me some comments on it, though I<br />&gt; didn't ask for a Reviewed-by line, which in retrospect I should've done.<br />&gt;<br />&gt; Should we have a "Comments-from: x &lt;y&#64;z&gt;" line for this?  So that people who<br />&gt; made comments but don't want to say they've properly reviewed it can be<br />&gt; recognised formally?<br /><br />A "reviewed-by" line is fine, but so is really just free-form explanations too.<br /><br />Not everything has to be a "xyz-by:" thing, especially things that are<br />more important for one-time use at merge time rather than anything<br />"this is a common pattern and people might want to do statistics about<br />it over time".<br /><br />It's too late for this case, and for all I know there are no similar<br />cases coming up in the security layer, but when I have something that<br />ends up being pending for a two weeks, I want to at least try to<br />educate people about *why* it was pending, and what I found difficult<br />about the process. Maybe it happens again, maybe it won't. But if it<br />does, we'll have at least spoken about the issues.<br /><br />&gt; Is there some way in the GIT repo to associate an 'extended explanation' with<br />&gt; several patches?<br /><br />In theory, you can use notes, but I don't actually like it either<br />technically _or_ from a "flow of information" standpoint, so I'd much<br />rather see people try to note things in the commit messages, and then<br />for the merge itself try to have explanations in the "please pull"<br />message.<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
