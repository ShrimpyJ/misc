    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/15/155">First message in thread</a></li><li><a href="/lkml/2013/9/20/265">Eric Paris</a><ul><li><a href="/lkml/2013/9/21/104">Davidlohr Bueso</a><ul><li class="origin"><a href="/lkml/2013/9/23/36">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/23/36">Davidlohr Bueso</a><ul><li><a href="/lkml/2013/9/23/389">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Sep 2013 11:58:20 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/4] ipc: shm and msg fixes</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Sep 21, 2013 at 11:30 AM, Davidlohr Bueso &lt;davidlohr&#64;hp.com&gt; wrote:<br />&gt;<br />&gt; IPC uses security_xxx_free() at two levels: for freeing the structure<br />&gt; (ie: shm_destroy()) and cleaning up upon error when creating the<br />&gt; structure (ie: newseg()). For both I believe we can actually use RCU.<br />&gt; What do you think of the below change, it is specific for shm, and we'd<br />&gt; need an equivalent for msq and sems.<br /><br />Ugh.<br /><br />This code already has rcu-delaying, usign the existing "rcu" list<br />entry. I hate how you add a *new* rcu list entry, and we basically<br />case two callbacks.<br /><br />More importantly, it's wrong. You do the call_rcu() unconditionally,<br />but it might not be the last use! You need to do it with the same<br />logic ipc_rcu_putref(), namely at the dropping of the last reference.<br /><br />So how about just making ipc_rcu_putref() have a RCU callback<br />argument, and make the code look something like<br /><br />    ipc_rcu_putref(shp, shm_rcu_free);<br /><br />and then shm_rcu_free() just does<br /><br />    #define ipc_rcu_to_struct(p)  ((void *)(p+1))<br /><br />    void shm_rcu_free(struct rcu_head *head)<br />    {<br />        struct ipc_rcu *p = container_of(head, struct ipc_rcu, rcu);<br />        struct shmid_kernel *shp = ipc_rcu_to_struct(p);<br /><br />        security_shm_free(shp);<br />        ipc_rcu_free(head);<br />    }<br /><br />(that "ipc_rcu_free()" would do the current vfree-vs-kfree, just not<br />rcu-delayed, so it would look something like<br /><br />    void ipc_rcu_free(struct rcu_head *head)<br />    {<br />        struct ipc_rcu *p = container_of(head, struct ipc_rcu, rcu);<br />        if (is_vmalloc_addr(p))<br />            vfree(p);<br />        else<br />            kfree(p);<br />    }<br /><br />Other users would then just use<br /><br />    ipc_rcu_putref(shp, ipc_rcu_free);<br /><br />until they too decide that they want to do something extra at RCU freeing time..<br /><br />Hmm?<br /><br />           Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
