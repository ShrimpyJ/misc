    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/30/491">First message in thread</a></li><li><a href="/lkml/2013/9/30/491">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/508">Waiman Long</a><ul><li><a href="/lkml/2013/9/30/512">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/2/303">Andi Kleen</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/594">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/30/622">Michael Neuling</a><ul><li><a href="/lkml/2013/9/30/623">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/636">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/628">Eric Dumazet</a><ul><li class="origin"><a href="/lkml/2013/9/30/638">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/638">Eric Dumazet</a></li><li><a href="/lkml/2013/10/1/414">Eric Dumazet</a><ul><li><a href="/lkml/2013/10/1/431">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/634">Al Viro</a><ul><li><a href="/lkml/2013/9/30/637">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/647">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Sep 2013 18:44:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: spinlock contention of files-&gt;file_lock</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 30, 2013 at 6:05 PM, Eric Dumazet &lt;eric.dumazet&#64;gmail.com&gt; wrote:<br />&gt; Speaking of spinlock contention, the files-&gt;file_lock is a good example.<br />&gt;<br />&gt; Multi threaded programs hit this spinlock three times per fd :<br /><br />.. do you actually have programs that see contention?<br /><br />&gt; alloc_fd() / fd_install() / close()<br />&gt;<br />&gt; I think fd_install() could be done without this spinlock.<br /><br />Yes, I haven't thought much about it, but from a quick look it should<br />be trivial to do fd_install(). We already free the fdtable using rcu<br />(because we look things up without locking), so we could just get the<br />rcu read-lock, do fd_install() without any locking at all, and then<br />verify that the fd-table is still the same. Rinse and repeat if not.<br /><br />&gt; - Add a seqcount, and cmpxchg() to synchronize fd_install() with the<br />&gt; potential resizer. (Might need additional RCU locking)<br /><br />I don't think you even need that. alloc_fd() has already reserved the<br />spot, so I think you really can just assign without any fancy cmpxchg<br />at all. If you write to the old fdtable, who cares? Probably just<br />something like<br /><br />   do {<br />      fdt = files_fdtable(files);<br />      rcu_assign_pointer(fdt-&gt;fd[fd], file);<br />      smp_mb();<br />   } while (fdt != files_fdtable(files));<br /><br />or similar. Under the RCU lock to guarantee the allocations don't<br />disappear from under you, but with no other locking.<br /><br />Maybe I'm missing something, but it really doesn't look that bad.<br /><br />Now, that only gets rid of fd_install(), but I suspect you could do<br />something similar for put_unused_fd() (that one does need cmpxchg for<br />the "next_fd" thing, though). We'd have to replace the non-atomic<br />bitops on open_fds[] with atomic ones, just to make sure adjacent bit<br />clearings don't screw up concurrent adjacent bit values, but that<br />looks fairly straightforward too.<br /><br />Now, getting rid of the spinlock for alloc_fd() would be more work,<br />and you'd likely want to keep it for actually resizing (just to keep<br />that case more straightforward), but you could probably do the<br />non-resizing cases fairly easily there too without holding the lock.<br />Scan for a free bit optimistically and without any locking, and then<br />be somewhat careful with setting that open_fds[] bit - not only using<br />an atomic test_and_set() for it, but also do the same "let's check<br />that the fdtable base pointers haven't changed in the meantime and<br />repeat".<br /><br />On the whole the fd table looks like if it really is a contention<br />point, it would be fairly straightforward to fix without any huge<br />contortions. Sure, lots of care and small details to look out for, but<br />nothing looks really all that fundamentally difficult.<br /><br />But is it really a contention point on any real load?<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
