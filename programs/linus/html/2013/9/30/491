    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/30/491">First message in thread</a></li><li class="origin"><a href="/lkml/2013/9/30/508">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/508">Waiman Long</a><ul><li><a href="/lkml/2013/9/30/512">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/2/303">Andi Kleen</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/594">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/30/622">Michael Neuling</a><ul><li><a href="/lkml/2013/9/30/623">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/636">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/628">Eric Dumazet</a><ul><li><a href="/lkml/2013/9/30/633">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/638">Eric Dumazet</a></li><li><a href="/lkml/2013/10/1/414">Eric Dumazet</a><ul><li><a href="/lkml/2013/10/1/431">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/30/634">Al Viro</a><ul><li><a href="/lkml/2013/9/30/637">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/30/647">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Sep 2013 12:29:44 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Avoiding the dentry d_lock on final dput(), part deux: transactional memory</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">So with all the lockref work, we now avoid the dentry d_lock for<br />almost all normal cases.<br /><br />There is one single remaining common case, though: the final dput()<br />when the dentry count goes down to zero, and we need to check if we<br />are supposed to get rid of the dentry (or at least put it on the LRU<br />lists etc).<br /><br />And that's something lockref itself cannot really help us with unless<br />we start adding status bits to it (eg some kind of "enable slow-case"<br />bit in the lock part of the lockref). Which sounds like a clever but<br />very fragile approach.<br /><br />However, I did get myself a i7-4770S exactly because I was<br />forward-thinking, and wanted to try using transactional memory for<br />these kinds of things.<br /><br />Quite frankly, from all I've seen so far, the kernel is not going to<br />have very good luck with things like lock elision, because we're<br />really fine-grained already, and at least the Intel lock-elision<br />(don't know about POWER8) basically requires software to do prediction<br />on whether the transaction will succeed or not, dynamically based on<br />aborts etc. And quite frankly, by the time you have to do things like<br />that, you've already lost. We're better off just using our normal<br />locks.<br /><br />So as far as I'm concerned, transactional memory is going to be useful<br />- *if* it is useful - only for specialized code. Some of that might be<br />architecture-internal lock implementations, other things might be<br />exactly the dput() kind of situation.<br /><br />And the thing is, *normally* dput() doesn't need to do anything at<br />all, except decrement the dentry reference count. However, for that<br />normal case to be true, we need to atomically check:<br /><br /> - that the dentry lock isn't held (same as lockref)<br /> - that we are already on the LRU list and don't need to add ourselves to it<br /> - that we already have the DCACHE_REFERENCED bit set and don't need to set it<br /> - that the dentry isn't unhashed and needs to be killed.<br /><br />Additionally, we need to check that it's not a dentry that has a<br />"d_delete()" operation, but that's a static attribute of a dentry, so<br />that's not something that we need to check atomically wrt the other<br />things.<br /><br />ANYWAY. With all that out of the way, the basic point is that this is<br />really simple, and fits very well with even very limited transactional<br />memory. We literally need to do just a single write, and something<br />like three reads from memory. And we already have a trivial fallback,<br />namely the old code using the lockrefs.  IOW, it's literally ten<br />straight-line instructions between the xbegin and the xend for me.<br /><br />So here's a patch that works for me. It requires gcc to know "asm<br />goto", and it requires binutils that know about xbegin/xabort. And it<br />requires a CPU that supports the intel RTM extensions.<br /><br />But I'm cc'ing the POWER people, because I don't know the POWER8<br />interfaces, and I don't want to necessarily call this "xbegin"/"xend"<br />when I actually wrap it in some helper functions.<br /><br />Anyway, profiles with this look beautiful (I'm using "make -j" on a<br />fully built allmodconfig kernel tree as the source of profile data).<br />There's no spinlocks from dput at all, and the dput() profile itself<br />shows basically 1% in anything but the fastpath (probably the _very_<br />occasional first accesses where we need to add things to the LRU<br />lists).<br /><br />And the patch is small, but is obviously totally lacking any test for<br />CPU support or anything like that. Or portability. But I thought I'd<br />get the ball rolling, because I doubt the intel TSX patches are going<br />to be useful (if they were, Intel would be crowing about performance<br />numbers now that the CPU's are out, and they aren't).<br /><br />I don't know if the people doing HP performance testing have<br />TSX-enabled machines, but hey, maybe. So you guys are cc'd too.<br /><br />I also didn't actually check if performance is affected. I doubt it is<br />measurable on this machine, especially on "make -j" that spends 90% of<br />its time in user space. But the profile comparison really does make it<br />look good..<br /><br />Comments?<br /><br />                         Linus<br />[unhandled content-type:application/octet-stream]</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
