    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/19/305">First message in thread</a></li><li><a href="/lkml/2013/9/20/80">Will Deacon</a><ul><li><a href="/lkml/2013/9/20/194">Will Deacon</a><ul><li class="origin"><a href="/lkml/2013/9/20/242">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/20/242">Will Deacon</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Sep 2013 11:00:19 -0500</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] lockref: use cmpxchg64 explicitly for lockless updates</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 20, 2013 at 10:45 AM, Will Deacon &lt;will.deacon&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; Right, turns out I can get some interesting numbers from your simple t.c<br />&gt; program on my dual-cluster, 5 CPU ARMv7 machine. The new cmpxchg-based lockref<br />&gt; code gives ~50% improvement, but the fun part is that implementing cmpxchg64<br />&gt; without memory barriers doubles this win to ~100% over current mainline.<br /><br />Ok, that's certainly noticeable.<br /><br />&gt; If we can guarantee that the CODE just messes around with the lockref, those<br />&gt; barriers probably aren't needed...<br /><br />Yes. I've been thyinking about the barrier issue, and as far as I can<br />see, as long as the lockref code only ever messes with the reference<br />count, a totally unordered cmpxchg is fine.<br /><br />And at least right now we indeed only ever mess with the reference count.<br /><br />I have been idly toying with the concept of using the cmpxchg also for<br />possibly taking the lock (for the "xyz_or_lock" versions), but every<br />time I look at it it seems unlikely to help, and it would require<br />memory ordering and various architecture-dependent issues, so I<br />suspect it's never going to make much sense. So yes, an unordered<br />cmpxchg64 should be perfectly fine.<br /><br />&gt; As for AIM7/re-aim, I'm having a hard time getting repeatable numbers out of<br />&gt; it to establish a baseline, so it's not proving to be especially helpful.<br /><br />That's fine, and yeah, I doubt the t.c improvement really shows<br />anywhere else (it's kind of extreme), but your numbers are certainly<br />already sufficient to say "ok, it makes sense even on 32-bit<br />machines".<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
