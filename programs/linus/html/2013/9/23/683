    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/19/351">First message in thread</a></li><li><a href="/lkml/2013/9/22/205">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/22/208">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/23/9">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/23/70">Stephen Rothwell</a><ul><li><a href="/lkml/2013/9/23/161">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2013/9/23/384">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/23/547">Benjamin Herrenschmidt</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/24/28">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2013/9/23/426">Chris Metcalf</a><ul><li><a href="/lkml/2013/9/23/557">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/24/443">Chris Metcalf</a><ul><li><a href="/lkml/2013/9/24/469">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/9/23/662">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="/lkml/2013/9/23/694">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/23/694">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/24/72">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Sep 2013 18:19:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC GIT PULL] softirq: Consolidation and stack overrun fix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 23, 2013 at 5:10 PM, Benjamin Herrenschmidt<br />&lt;benh&#64;kernel.crashing.org&gt; wrote:<br />&gt;<br />&gt; BTW, that boils down to a choice between using r13 as either a TLS for<br />&gt; current or current_thread_info, or as a per-cpu pointer, which one is<br />&gt; the most performance critical ?<br /><br />I think you can tune most of the architecture setup to best suit your needs.<br /><br />For example, on x86, we don't have much choice: the per-cpu accessors<br />are going to be faster than the alternatives, and there are patches<br />afoot to tune the preempt and rcu-readside counters to use the percpu<br />area (and then save/restore things at task switch time). But having<br />the counters natively in the thread_info struct is fine too and is<br />what we do now.<br /><br />Generally, we've put the performance-critical stuff into<br />"current_thread_info" as opposed to "current", so it's likely that if<br />the choice is between those two, then you might want to pick %r13<br />pointing to the thread-info rather than the "struct task_struct" (ie<br />things like low-level thread flags). But which is better probably<br />depends on load, and again, some of it you can tweak by just making<br />per-architecture structure choices and making the macros point at one<br />or the other.<br /><br />There's a few things that really depend on per-cpu areas, but I don't<br />think it's a huge performance issue if you have to indirect off memory<br />to get that. Most of the performance issues with per-cpu stuff is<br />about avoiding cachelines ping-ponging back and forth, not so much<br />about fast direct access. Of course, if some load really uses a *lot*<br />of percpu accesses, you get both.<br /><br />The advantage of having %r13 point to thread data (which is "stable"<br />as far as the compiler is concerned) as opposed to having it be a<br />per-cpu pointer (which can change randomly due to task switching) is<br />that from a correctness standpoint I really do think that either<br />thread-info or current is *much* easier to handle than using it for<br />the per-cpu base pointer.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
