    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/19/351">First message in thread</a></li><li><a href="/lkml/2013/9/22/91">Peter Zijlstra</a><ul><li><a href="/lkml/2013/9/22/119">"H. Peter Anvin"</a><ul><li><a href="/lkml/2013/9/22/202">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2013/9/22/198">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="/lkml/2013/9/22/208">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/22/208">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/23/9">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/9/24/28">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2013/9/23/426">Chris Metcalf</a><ul><li><a href="/lkml/2013/9/23/557">Benjamin Herrenschmidt</a></li></ul></li><li><a href="/lkml/2013/9/23/662">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/9/23/683">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 22 Sep 2013 15:22:52 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC GIT PULL] softirq: Consolidation and stack overrun fix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 22, 2013 at 2:56 PM, Benjamin Herrenschmidt<br />&lt;benh&#64;kernel.crashing.org&gt; wrote:<br />&gt; On Sun, 2013-09-22 at 18:24 +0200, Peter Zijlstra wrote:<br />&gt;&gt;<br />&gt;&gt; We use a segment offset. Something like:<br />&gt;&gt;<br />&gt;&gt;   inc %gs:var;<br />&gt;&gt;<br />&gt;<br />&gt; And gcc makes no stupid assumptions that this gs doesn't change ? That's<br />&gt; the main problem we have with using r13 for PACA.<br /><br />Since gcc doesn't really know about segment registers at all (modulo<br />%fs as TLS on x86), we do everything like that using inline asm.<br /><br />It's not *too* painful if you have a number of macro helpers to build<br />up all the different versions.<br /><br />And r13 isn't volatile if you are preempt-safe, so I'm wondering if<br />you could just make the preempt disable code mark %r13 as modified<br />("+r"). Then gcc won't ever cache r13 across one of those. And if you<br />don't have preemption disabled, then you cannot do multiple ops using<br />%r13 anyway, since on a load-store architecture it might change even<br />between the load and store, so a per-cpu "add" operation *has* to<br />cache the %r13 value in *another* register anyway, because using<br />memory ops with just an offset off %r13 would be buggy.<br /><br />So I don't think this is a gcc issue. gcc can't fix those kinds of problems.<br /><br />Personally, I'd suggest something like:<br /><br /> - the paca stuff is just insane. Try to get rid of it.<br /><br /> - use %r13 for the per-thread thread-info pointer instead. A<br />per-thread pointer is *not* volatile like the per-cpu base is.<br /><br /> - Now you can make the per-cpu offset be loaded off the per-thread<br />pointer (update it at context switch). gcc knows to not cache it<br />across function calls, since it's a memory access. Use ACCESS_ONCE()<br />or something to make sure it's only loaded once for the cpu offset<br />ops.<br /><br />Alternatively, make %r13 point to the percpu side, but make sure that<br />you always use an asm accessor to fetch the value. In particular, I<br />think you need to make __my_cpu_offset be an inline asm that fetches<br />%r13 into some other register. Otherwise you can never get it right.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
