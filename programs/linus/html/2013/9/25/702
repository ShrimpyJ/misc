    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/25/308">First message in thread</a></li><li><a href="/lkml/2013/9/25/657">Andrew Morton</a><ul><li><a href="/lkml/2013/9/25/672">Joe Perches</a><ul><li class="origin"><a href="/lkml/2013/9/25/710">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/25/710">Joe Perches</a><ul><li><a href="/lkml/2013/9/25/734">Andrew Morton</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Sep 2013 18:26:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 7/7] x86: Tell about irq stack coverage</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 25, 2013 at 5:40 PM, Joe Perches &lt;joe&#64;perches.com&gt; wrote:<br />&gt;<br />&gt; Huh?  That matches all the ARCH_HAS_&lt;foo&gt; patterns.<br /><br />Right. And they are all crap. lib/string.c is a prime example of<br />something that should never have happened.<br /><br />The ARCH_HAS_xyz pattern is totally retarded. It's wrong.<br /><br />For big conceptual features, we should use Kconfig symbols.<br /><br />And for smaller things - like lib/string.c - where we have<br />compatibility fallback functions but want architectures able to<br />override them with optimized ones one function at a time, we should<br />either use weak functions (appropriate for some cases), or the symbol<br />that protects them should the the SAME SYMBOL WE USE. Rather than some<br />made-up crap-for-brains new ARCH_HAS_xyz symbol. That way it shows up<br />in greps, and that way we don't have any question about what random<br />symbol pattern we use that particular day.<br /><br />So for *bad* use, see lib/string.c, and the ARCH_AS_xyz horror.<br /><br />For *good* use, see lib/div64.c or lib/find_next_bit.c.<br /><br />Notice how div64.c doesn't make up new ARCH_HAS_random_crap names? And<br />no, you don't have to define those things as macros, you can define<br />them as functions (inline or not), and then just do<br /><br />    #define find_next_zero_bit find_next_zero_bit<br /><br />to tell the rest of the world "Look, I have this defined".<br /><br />The whole "make up a totally unrelated second name for it" means that<br />we have things like __HAVE_ARCH_STRLEN but also things like<br />ARCH_HAS_PREFETCHW. Ugh.<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
