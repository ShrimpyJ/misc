    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/9/28/195">First message in thread</a></li><li><a href="/lkml/2013/9/28/203">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/29/9">Al Viro</a><ul><li class="origin"><a href="/lkml/2013/9/29/85">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/29/85">Al Viro</a><ul><li><a href="/lkml/2013/9/29/87">Linus Torvalds</a></li><li><a href="/lkml/2013/9/29/90">Al Viro</a></li><li><a href="/lkml/2013/9/29/91">Al Viro</a></li><li><a href="/lkml/2013/9/30/497">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 29 Sep 2013 10:19:59 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [rfc][possible solution] RCU vfsmounts</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Sep 28, 2013 at 11:06 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; Sigh...  Looks like there's a lot of fun in shrink_dcache_for_umount() -<br />&gt; at the very least, it needs to bump -&gt;d_seq on everything, because with<br />&gt; that change we *can* walk into a filesystem in the middle of that.<br />&gt; We obviously don't want to slap rcu_barrier() into the final mntput() -<br /><br />I have to say, that when I was working with the dcache lockref code, I<br />absolutely _detested_ the magical shrink_dcache_for_umount() code that<br />violated all the locking rules.<br /><br />So I actually wouldn't mind at all if that was all forced to follow<br />all the same rules that the live filesystem code is forced to follow.<br />Yes, yes, it's going to slow things down, but it's not like umount()<br />is _that_ performance critical. And I think the whole "let's ignore<br />locking rules" actually comes from back when we had one global<br />dcache_lock: we used to have batching in order to not hold the<br />dcache_lock over long periods, and then it got converted to the<br />per-dentry locking, and then that got removed entirely with the whole<br />RCU lookup etc.<br /><br />So I would be *entirely* ok with having<br />shrink_dcache_for_umount_subtree() take the d_lock on the dentry as it<br />shrinks it etc etc.<br /><br />                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
