    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/16/258">First message in thread</a></li><li><a href="/lkml/2013/10/16/417">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/16/434">"Jan Beulich"</a><ul><li class="origin"><a href="/lkml/2013/10/16/457">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/16/457">"Jan Beulich"</a></li><li><a href="/lkml/2013/10/16/640">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/17/57">"Jan Beulich"</a></li></ul></li><li><a href="/lkml/2013/10/17/100">Gleb Natapov</a><ul><li><a href="/lkml/2013/10/17/107">"Jan Beulich"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 16 Oct 2013 08:50:54 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH, RFC] x86-64: properly handle FPU code/data selectors</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 16, 2013 at 8:36 AM, Jan Beulich &lt;JBeulich&#64;suse.com&gt; wrote:<br />&gt;<br />&gt; In that case we use a 32-bit operand size [F]XRSTOR, and hence<br />&gt; the upper halves get treated as selectors, and the offsets get<br />&gt; zero-extended from the low halves, i.e. we preserve even more<br />&gt; state for such a 64-bit environment now too (albeit I doubt any<br />&gt; 64-bit code actually cares)<br /><br />No, it does *not* preserve "more state".<br /><br />It preserves *less* state, because the upper 32 bits of rip are now<br />corrupted. Any 64-bit application that actually looks at the FP<br />rip/rdp fields now get the WRONG VALUES.<br /><br />The "upper bits zero" mode may be used just for JIT'ed code, for<br />example. It doesn't mean that you'd never have full 64-bit addresses,<br />so writing to the top half of the register *corrupts* that<br />information, because the top half bits are still relevant in general,<br />even if perhaps _one_ particular floating point exception happened<br />with the bits clear.<br /><br />Now anybody looking at the FP state on the stack gets the wrong results.<br /><br />More bits set is *not* "more state", when those bits are wrong.<br /><br />              Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
