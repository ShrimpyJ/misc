    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/30/235">First message in thread</a></li><li><a href="/lkml/2013/10/30/235">Russell King - ARM Linux</a><ul><li class="origin"><a href="/lkml/2013/10/30/455">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/30/455">Russell King - ARM Linux</a></li><li><a href="/lkml/2013/10/30/500">Dave Chinner</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Oct 2013 12:49:05 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm: list_lru: fix almost infinite loop causing effective livelock</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 30, 2013 at 7:16 AM, Russell King - ARM Linux<br />&lt;linux&#64;arm.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; So, if *nr_to_walk was zero when this function was entered, that means<br />&gt; we're wanting to operate on (~0UL)+1 objects - which might as well be<br />&gt; infinite.<br />&gt;<br />&gt; Clearly this is not correct behaviour.  If we think about the behaviour<br />&gt; of this function when *nr_to_walk is 1, then clearly it's wrong - we<br />&gt; decrement first and then test for zero - which results in us doing<br />&gt; nothing at all.  A post-decrement would give the desired behaviour -<br />&gt; we'd try to walk one object and one object only if *nr_to_walk were<br />&gt; one.<br />&gt;<br />&gt; It also gives the correct behaviour for zero - we exit at this point.<br /><br />Good analysis.<br /><br />HOWEVER.<br /><br />I actually think even your version is very dangerous, because we pass<br />in the *address* to that count, and the only real reason to do that is<br />because we might call it in a loop, and we want the function to update<br />that count.<br /><br />And even your version still underflows from 0 to really-large-count.<br />It *returns* when underflow happens, but you end up with the counter<br />updated to a large value, and then anybody who uses it later would be<br />screwed.<br /><br />See, for example, the inline list_lru_walk() function in &lt;linux/list_lru.h&gt;<br /><br />So I think we should either change that "unsigned long" to just<br />"long", and then check for "&lt;= 0" (like list_lru_walk() already does),<br />or we should do<br /><br />    if (!*nr_to_walk)<br />        break;<br />    --*nr_to_walk;<br /><br />to make sure that we never do that underflow.<br /><br />I will modify your patch to do the latter, since it's the smaller<br />change, but I suspect we should think about making that thing signed.<br /><br />Hmm?<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
