    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/25/47">First message in thread</a></li><li><a href="/lkml/2013/10/29/679">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/29/702">Jan Kara</a><ul><li class="origin"><a href="/lkml/2013/11/1/339">Linus Torvalds</a><ul><li><a href="/lkml/2013/11/1/339">Fengguang Wu</a><ul><li><a href="/lkml/2013/11/4/124">Pavel Machek</a></li></ul></li><li><a href="/lkml/2013/11/4/127">Pavel Machek</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 29 Oct 2013 15:42:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Disabling in-memory write cache for x86-64 in Linux II</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Oct 29, 2013 at 3:13 PM, Jan Kara &lt;jack&#64;suse.cz&gt; wrote:<br />&gt;<br />&gt;   So I think we both realize this is only about what the default should be.<br /><br />Yes. Most people will use the defaults, but there will always be<br />people who tune things for particular loads.<br /><br />In fact, I think we have gone much too far in saying "all policy in<br />user space", because the fact is, user space isn't very good at<br />policy. Especially not at reacting to complex situations with<br />different devices. From what I've seen, "policy in user space" has<br />resulted in exactly two modes:<br /><br /> - user space does something stupid and wrong (example: "nice -19 X"<br />to work around some scheduler oddities)<br /><br /> - user space does nothing at all, and the kernel people say "hey,<br />user space _could_ set this value Xyz, so it's not our problem, and<br />it's policy, so we shouldn't touch it".<br /><br />I think we in the kernel should say "our defaults should be what<br />everybody sane can use, and they should work fine on average". With<br />"policy in user space" being for crazy people that do really odd<br />things and can really spare the time to tune for their particular<br />issue.<br /><br />So the "policy in user space" should be about *overriding* kernel<br />policy choices, not about the kernel never having them.<br /><br />And this kind of "you can have many different devices and they act<br />quite differently" is a good example of something complicated that<br />user space really doesn't have a great model for. And we actually have<br />much better possible information in the kernel than user space ever is<br />likely to have.<br /><br />&gt; Also I'm not sure capping dirty limits at 200MB is the best spot. It may be<br />&gt; but I think we should experiment with numbers a bit to check whether we<br />&gt; didn't miss something.<br /><br />Sure. That said, the patch I suggested basically makes the numbers be<br />at least roughly comparable across different architectures. So it's<br />been at least somewhat tested, even if 16GB x86-32 machines are<br />hopefully pretty rare (but I hear about people installing 32-bit on<br />modern machines much too often).<br /><br />&gt;&gt;  - temp-files may not be written out at all.<br />&gt;&gt;<br />&gt;&gt;    Quite frankly, if you have multi-hundred-megabyte temptiles, you've<br />&gt;&gt; got issues<br />&gt;   Actually people do stuff like this e.g. when generating ISO images before<br />&gt; burning them.<br /><br />Yes, but then the temp-file is long-lived enough that it *will* hit<br />the disk anyway. So it's only the "create temporary file and pretty<br />much immediately delete it" case that changes behavior (ie compiler<br />assembly files etc).<br /><br />If the temp-file is for something like burning an ISO image, the<br />burning part is slow enough that the temp-file will hit the disk<br />regardless of when we start writing it.<br /><br />&gt;   There is one more aspect:<br />&gt; - transforming random writes into mostly sequential writes<br /><br />Sure. And I think that if you have a big database, that's when you do<br />end up tweaking the dirty limits.<br /><br />That said, I'd certainly like it even *more* if the limits really were<br />per-BDI, and the global limit was in addition to the per-bdi ones.<br />Because when you have a USB device that gets maybe 10MB/s on<br />contiguous writes, and 100kB/s on random 4k writes, I think it would<br />make more sense to make the "start writeout" limits be 1MB/2MB, not<br />100MB/200MB. So my patch doesn't even take it far enough, it's just a<br />"let's not be ridiculous". The per-BDI limits don't seem quite ready<br />for prime time yet, though. Even the new "strict" limits seems to be<br />more about "trusted filesystems" than about really sane writeback<br />limits.<br /><br />Fengguang, comments?<br /><br />(And I added Maxim to the cc, since he's the author of the strict<br />mode, and while it is currently limited to FUSE, he did mention USB<br />storage in the commit message..).<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
