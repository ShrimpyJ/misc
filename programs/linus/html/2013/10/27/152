    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/26/54">First message in thread</a></li><li><a href="/lkml/2013/10/27/145">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/148">Maarten Lankhorst</a><ul><li class="origin"><a href="/lkml/2013/10/27/153">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/153">Maarten Lankhorst</a><ul><li><a href="/lkml/2013/10/27/154">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/10/27/150">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Oct 2013 12:51:24 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] locking fix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Oct 27, 2013 at 12:37 PM, Maarten Lankhorst<br />&lt;maarten.lankhorst&#64;canonical.com&gt; wrote:<br />&gt;<br />&gt; I would love for a compiler to become that smart though, but I do not think it's likely.<br /><br />Dammit, even if that is true, then write the conditional *correctly*.<br /><br />As mentioned, the conditional<br /><br />    __builtin_constant_p(ww_ctx) &amp;&amp; ww_ctx == NULL<br /><br />is actually sensible, in a way the original one was *not*. It actually<br />tests what you apparently intended to test, and is more readable to<br />humans to boot.<br /><br />And no, it still isn't actually guaranteed to do what you want it to<br />do. Historically, in gcc, __builtin_constant_p() really only ever<br />worked in macros, because by the time you use it in inline functions,<br />a constant NULL in the caller will have been turned into a argument<br />variable in the inline function, and __builtin_constant_p() would be<br />done before that was optimized away. Over the years, gcc has pushed<br />some of the builtin evaluation deeper down, and these days it actually<br />works within inline functions, but my point that<br />__builtin_constant_p() is about a certain level of compiler<br />optimization is very much true: you're actually testing for a compiler<br />optimization detail.<br /><br />I know the LLVM people had similar issues with this comparison, so<br />these days it's not even just about gcc versions. We may never have<br />cared very much about icc, but llvm is actually an interesting target<br />compiler.<br /><br />            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
