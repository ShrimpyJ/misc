    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/26/54">First message in thread</a></li><li><a href="/lkml/2013/10/27/142">Maarten Lankhorst</a><ul><li><a href="/lkml/2013/10/27/145">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/148">Maarten Lankhorst</a><ul><li><a href="/lkml/2013/10/27/152">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/153">Maarten Lankhorst</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Oct 2013 12:35:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] locking fix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Oct 27, 2013 at 12:23 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; The *ONLY* thing it is testing for is "how much can the compiler<br />&gt; optimize this", and as such the *ONLY* thing it tests for is compiler<br />&gt; differences.<br /><br />Side note: testing "can the compiler optimize this expression at<br />compile time" is actually sometimes an interesting question, so it can<br />be a valid thing to test.<br /><br />But people should understand that the question is literally about THAT<br />(ie visibility into compiler optimization) rather than about the value<br />itself.<br /><br />So generally, the only thing that a __builtin_constant_p() test can be<br />used for is in *conjunction* with having an actual test for an actual<br />value, and then having special-case logic that pertains to that value.<br /><br />So for example, *this* is a valid test:<br /><br />    if (__builtin_constant_p(ww_ctx) &amp;&amp; ww_ctx == NULL) {<br />        ... special compile-time shortcut for the NULL value ..<br />    } else {<br />        ... generic code that *also* handles the NULL value ..<br />    }<br /><br />and it's useful for triggering a compile-time optimized code-sequence<br />that is only true for NULL. But because __builtin_constant_p() is<br />about "how well can the compiler optimize this", that "else" statement<br />had better be able to handle the generic case too.<br /><br />And yes, there are a few places where we do expect a certain minimal<br />set of optimizations. So in some cases we *might* have the rule that<br />the only valid use of NULL in a case like the above is when the<br />pointer passed in is passed in as a constant. And then we might say<br />"we rely on the compiler always returning true for<br />__builtin_constant_p(NULL)", and then we might say "so the "generic"<br />version of the code is guaranteed to never see NULL".<br /><br />But notice how *different* that<br /><br />    __builtin_constant_p(ww_ctx) &amp;&amp; ww_ctx == NULL<br /><br />test is from<br /><br />    __builtin_constant_p(ww_ctx == NULL)<br /><br />and really, the two tests are *fundamentally* really really different.<br />The first one can make sense. While the second one is pure and utter<br />garbage.<br /><br />                          Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
