    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/10/26/54">First message in thread</a></li><li><a href="/lkml/2013/10/27/130">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/142">Maarten Lankhorst</a><ul><li class="origin"><a href="/lkml/2013/10/27/148">Linus Torvalds</a><ul><li><a href="/lkml/2013/10/27/148">Maarten Lankhorst</a><ul><li><a href="/lkml/2013/10/27/152">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2013/10/27/150">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 27 Oct 2013 12:23:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] locking fix</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Oct 27, 2013 at 12:00 PM, Maarten Lankhorst<br />&lt;maarten.lankhorst&#64;canonical.com&gt; wrote:<br />&gt; op 27-10-13 18:28, Linus Torvalds schreef:<br />&gt;&gt;<br />&gt;&gt; That expression is largely equivalent to<br />&gt;&gt; "__builtin_constant_p(ww_ctx)" (because iff ww_ctx is constant, then<br />&gt;&gt; the comparison to NULL is constant), which is actually much easier to<br />&gt;&gt; read, while carrying a totally different semantic meaning. Making<br />&gt;&gt; things worse, the comparison to NULL *may* be marked constant under<br />&gt;&gt; some very random situations (ie the compiler could turn a "taking an<br />&gt;&gt; address of a variable is never NULL" kind of knowledge and combining<br />&gt;&gt; it with other knowledge, and turn a complicated "ctx" expression into<br />&gt;&gt; a "I know this cannot be NULL" thing, and thus the "== NULL" is a<br />&gt;&gt; constant, even though ctx itself is some dynamic calculation).<br />&gt;&gt;<br />&gt;&gt; Whoever wrote the original should be shot. And this commit shouldn't<br />&gt;&gt; have been marked as being somehow about gcc-version dependence, but<br />&gt;&gt; about removing completely crap code.<br />&gt;&gt;<br />&gt; Unfortunately gcc disagreed there, which was another compiler bug.<br /><br />Stop this idiotic "blame gcc bug" crap. Which part of my explanation<br />for why it was *NOT* a compiler bug did you not understand?<br /><br />&gt; __builtin_constant_p(ww_ctx) was NOT equal to __builtin_constant_p(ww_ctx == NULL), iirc.<br /><br />See my "largely equivalent" comment, with the *EXTRA* logic that gcc<br />may actually find cases where the comparison is a constant even if the<br />ww_ctx thing itself isn't a constant.<br /><br />&gt; __builtin_constant_p(ww_ctx == NULL) is equal to __builtin_constant_p(ww_ctx != NULL), but<br />&gt; the former is more readable, since it shows we expect ww_ctx to be null.<br /><br />Stop the f*cking around already! The  whole "we expect ww_ctx to be<br />null" thing shows that YOU DO NOT SEEM TO UNDERSTAND WHAT THE TEST<br />ACTUALLY IS!<br /><br />The expression<br /><br />   __builtin_constant_p(ww_ctx == NULL)<br /><br />has ABSOLUTELY NOTHING to do with whether ww_ctx is NULL or not!<br />Christ, can you really not understand that?<br /><br />For example, ww_ctx could be "&amp;static_variable", and the compiler can<br />- and some compiles _will_ - say that ww_ctx clearly cannot be NULL,<br />so "ww_ctx == NULL" is 0, which is a constant, so the<br />__builtin_constant_p() expression returns true. See? That expression<br />has absolutely NOTHING to do with whether you passed in NULL or not.<br />NOTHING.<br /><br />That __builtin_constant_p() tests whether the comparison is<br />*CONSTANT*. And "0" is just as much a constant as "1" is. Really. So<br />the whole f*cking expression is total and utter crap, because it is<br />entirely and utterly senseless. It lacks all meaning. It's not<br />actually testing for NULL at all. Never was, never will.<br /><br />The *ONLY* thing it is testing for is "how much can the compiler<br />optimize this", and as such the *ONLY* thing it tests for is compiler<br />differences.<br /><br />Really. Seriously. If you start blaming the compiler for different<br />compilers giving different results, the only thing *that* shows is<br />that you didn't understand the expression to begin with.<br /><br />&gt; But yeah I guess it was too broken in gcc after all, so that's why it had to be killed altogether.<br /><br />NO NO NO NO. No a f*cking thousand times. It's not "too broken in<br />gcc". It's too broken in the source code, and the fact that you don't<br />even understand that is sad. You wrote the code, and you seem to be<br />unable to admit that *your* code was buggy.<br /><br />It's not a compiler bug. It's your bug. Stand up like a man, instead<br />of trying to flail around and blame anything else but yourself.<br /><br />So guys, get your act together, and stop blaming the compiler already.<br /><br />               Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
