    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/5/722">First message in thread</a></li><li><a href="/lkml/2013/8/29/504">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/29/574">Waiman Long</a><ul><li><a href="/lkml/2013/8/29/594">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/30/78">Sedat Dilek</a><ul><li><a href="/lkml/2013/8/30/81">Sedat Dilek</a></li><li><a href="/lkml/2013/8/30/117">Sedat Dilek</a></li></ul></li><li><a href="/lkml/2013/8/30/448">Waiman Long</a><ul><li><a href="/lkml/2013/8/30/453">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/8/29/597">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/555">Michael Neuling</a></li><li><a href="/lkml/2013/8/29/564">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/565">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/29/566">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/568">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/29/569">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/30/63">Ingo Molnar</a><ul><li><a href="/lkml/2013/8/30/340">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/8/158">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/8/169">Al Viro</a><ul><li><a href="/lkml/2013/9/8/172">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/8/176">Al Viro</a></li><li><a href="/lkml/2013/9/8/192">Ramkumar Ramachandra</a></li></ul></li><li><a href="/lkml/2013/9/8/175">Al Viro</a></li><li><a href="/lkml/2013/9/8/231">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/9/5">Ramkumar Ramachandra</a></li><li><a href="/lkml/2013/9/9/32">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Aug 2013 17:49:46 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v7 1/4] spinlock: A new lockref structure for lockless update of refcount</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 29, 2013 at 5:26 PM, Benjamin Herrenschmidt<br />&lt;benh&#64;kernel.crashing.org&gt; wrote:<br />&gt;<br />&gt; I assume you mean unsigned int ? :-)<br /><br />Oops, yes.<br /><br />&gt; What's wrong with the existing arch_spin_is_locked() ?<br /><br />It takes a memory location. And we very much want to test the value we<br />loaded into a register.<br /><br />And yes, gcc can do the right thing. But at least on x86,<br />arch_spin_is_locked() actually uses ACCESS_ONCE() to load the value<br />from the memory location, and I actually think that is the right thing<br />to do (or at least not incorrect). So the end result is that<br />arch_spin_value_unlocked() is actually fairly fundamentally different<br />from arch_spin_is_locked().<br /><br />So I could have re-used arch_spin_is_locked() after having changed the<br />semantics of it, but I really didn't want to possibly change totally<br />unrelated users for this particular feature.<br /><br />&gt; BTW. Do you have your test case at hand ?<br /><br />My test-case is a joke. It's explicitly *trying* to get as much<br />contention as possible on a dentry, by just starting up a lot of<br />threads that look up one single pathname (the same one for everybody).<br />It defaults to using /tmp for this, but you can specify the filename.<br /><br />Note that directories, regular files and symlinks have fundamentally<br />different dentry lookup behavior:<br /><br /> - directories tend to have an elevated reference count (because they<br />have children). This was my primary test-case, because while I suspect<br />that there are crazy loads (and AIM7 may be one of them) that open the<br />same _regular_ file all concurrently, I don't think it's a "normal"<br />load). But opening the same directory concurrently as part of pathname<br />lookup is certainly normal.<br /><br /> - regular files tend to have a dentry count of zero unless they are<br />actively open, and the patch I sent out will take the dentry spinlock<br />for them when doing the final RCU finishing touches if that's the<br />case. So this one *will* still use the per-dentry spinlock rather than<br />the lockless refcount increments, but as outlined above I don't think<br />that should be a scalability issue unless you're crazy.<br /><br /> - symlink traveral causes us to drop out of RCU lookup mode, and thus<br />cause various slow-paths to happen. Some of that we can improve on,<br />but I suspect it will cause the lockless refcount paths to take a hit<br />too.<br /><br />Anyway, I'm attaching my completely mindless test program. It has<br />hacky things like "unsigned long count[MAXTHREADS][32]" which are<br />purely to just spread out the counts so that they aren't in the same<br />cacheline etc.<br /><br />Also note that the performance numbers it spits out depend a lot on<br />tings like how long the dcache hash chains etc are, so they are not<br />really reliable. Running the test-program right after reboot when the<br />dentries haven't been populated can result in much higher numbers -<br />without that having anything to do with contention or locking at all.<br /><br />                          Linus<br />#include &lt;stdio.h&gt;<br />#include &lt;stdlib.h&gt;<br />#include &lt;pthread.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;sys/stat.h&gt;<br />#include &lt;unistd.h&gt;<br /><br />#define MAXTHREADS 16<br /><br />static volatile int start = 0;<br />static char *file = "/tmp";<br />static unsigned long count[MAXTHREADS][32];<br /><br />void *start_routine(void *arg)<br />{<br />	const char *filename;<br />	struct stat st;<br />	unsigned long *counter = arg;<br /><br />	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);<br />	while (!start)<br />		/* nothing */;<br />	filename = file;<br />	for (;;) {<br />		stat(filename, &amp;st);<br />		++*counter;<br />	}<br />}<br /><br />int main(int argc, char **argv)<br />{<br />	pthread_t threads[MAXTHREADS];<br />	unsigned long n;<br />	int i;<br /><br />	if (argv[1])<br />		file = argv[1];<br />	for (i = 0; i &lt; MAXTHREADS; i++)<br />		pthread_create(threads+i, NULL, start_routine, count[i]);<br />	start = 1;<br />	sleep(10);<br />	for (i = 0; i &lt; MAXTHREADS; i++)<br />		pthread_cancel(threads[i]);<br />	for (i = 0; i &lt; MAXTHREADS; i++)<br />		pthread_join(threads[i], NULL);<br />	n = 0;<br />	for (i = 0; i &lt; MAXTHREADS; i++)<br />		n += count[i][0];<br />	printf("Total loops: %lu\n", n);<br />	return 0;<br />}<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
