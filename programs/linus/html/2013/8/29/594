    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/5/722">First message in thread</a></li><li><a href="/lkml/2013/8/29/504">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/29/574">Waiman Long</a><ul><li class="origin"><a href="/lkml/2013/8/30/78">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/30/78">Sedat Dilek</a><ul><li><a href="/lkml/2013/8/30/81">Sedat Dilek</a></li><li><a href="/lkml/2013/8/30/117">Sedat Dilek</a></li></ul></li><li><a href="/lkml/2013/8/30/448">Waiman Long</a><ul><li><a href="/lkml/2013/8/30/453">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/8/29/597">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/2013/8/29/529">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/555">Michael Neuling</a></li><li><a href="/lkml/2013/8/29/564">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/565">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/29/566">Linus Torvalds</a></li><li><a href="/lkml/2013/8/29/568">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/29/569">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2013/8/30/63">Ingo Molnar</a><ul><li><a href="/lkml/2013/8/30/340">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2013/9/8/158">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/8/169">Al Viro</a><ul><li><a href="/lkml/2013/9/8/172">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/8/176">Al Viro</a></li><li><a href="/lkml/2013/9/8/192">Ramkumar Ramachandra</a></li></ul></li><li><a href="/lkml/2013/9/8/175">Al Viro</a></li><li><a href="/lkml/2013/9/8/231">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/9/5">Ramkumar Ramachandra</a></li><li><a href="/lkml/2013/9/9/32">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Aug 2013 20:54:23 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v7 1/4] spinlock: A new lockref structure for lockless update of refcount</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 29, 2013 at 8:12 PM, Waiman Long &lt;waiman.long&#64;hp.com&gt; wrote:<br />&gt; On 08/29/2013 07:42 PM, Linus Torvalds wrote:<br />&gt;&gt;<br />&gt;&gt; Waiman? Mind looking at this and testing? Linus<br />&gt;<br />&gt; Sure, I will try out the patch tomorrow morning and see how it works out for<br />&gt; my test case.<br /><br />Ok, thanks, please use this slightly updated patch attached here.<br /><br />It improves on the previous version in actually handling the<br />"unlazy_walk()" case with native lockref handling, which means that<br />one other not entirely odd case (symlink traversal) avoids the d_lock<br />contention.<br /><br />It also refactored the __d_rcu_to_refcount() to be more readable, and<br />adds a big comment about what the heck is going on. The old code was<br />clever, but I suspect not very many people could possibly understand<br />what it actually did. Plus it used nested spinlocks because it wanted<br />to avoid checking the sequence count twice. Which is stupid, since<br />nesting locks is how you get really bad contention, and the sequence<br />count check is really cheap anyway. Plus the nesting *really* didn't<br />work with the whole lockref model.<br /><br />With this, my stupid thread-lookup thing doesn't show any spinlock<br />contention even for the "look up symlink" case.<br /><br />It also avoids the unnecessary aligned u64 for when we don't actually<br />use cmpxchg at all.<br /><br />It's still one single patch, since I was working on lots of small<br />cleanups. I think it's pretty close to done now (assuming your testing<br />shows it performs fine - the powerpc numbers are promising, though),<br />so I'll split it up into proper chunks rather than random commit<br />points. But I'm done for today at least.<br /><br />NOTE NOTE NOTE! My test coverage really has been pretty pitiful. You<br />may hit cases I didn't test. I think it should be *stable*, but maybe<br />there's some other d_lock case that your tuned waiting hid, and that<br />my "fastpath only for unlocked case" version ends up having problems<br />with.<br /><br />                 Linus<br />[unhandled content-type:application/octet-stream]</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
