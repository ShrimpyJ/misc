    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/21/519">First message in thread</a></li><li><a href="/lkml/2013/8/25/4">Al Viro</a><ul><li><a href="/lkml/2013/8/25/7">Willy Tarreau</a><ul><li class="origin"><a href="/lkml/2013/8/25/88">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/25/88">Oleg Nesterov</a><ul><li><a href="/lkml/2013/8/25/91">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/8/25/77">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/25/79">Al Viro</a></li><li><a href="/lkml/2013/8/25/80">Andy Lutomirski</a></li><li><a href="/lkml/2013/9/3/316">Pavel Machek</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2013/8/25/78/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 25 Aug 2013 11:51:06 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: /proc/pid/fd &amp;&amp; anon_inode_fops</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 24, 2013 at 11:50 PM, Willy Tarreau &lt;w&#64;1wt.eu&gt; wrote:<br />&gt;<br />&gt; Thanks for explaining Al, that really helps me understand. However<br />&gt; there's still a difference between /proc/pid called from the process<br />&gt; itself (=/proc/self) and called from other processes that seems to<br />&gt; suit the situation :<br /><br />/proc/self has magic special properties, as you noticed.<br /><br />&gt; Thus I'm wondering if something like this could help, the idea would be<br />&gt; that a with the appropriate mount option, a task could only look at its<br />&gt; own descriptors unless it's running with privileges :<br /><br />I'd much rather try to do it in general, and use "file-&gt;f_cred" more<br />aggressively for /proc/&lt;pid&gt;/fd/ security.<br /><br />We don't use f_cred at all in /proc, but that's because /proc predates<br />that whole thing. So instead we use the credentials of the task when<br />we want to look at credentials of the file, because that was the<br />closest approximation we used to have.<br /><br />Look at the code that creates the fd stat information, for example.<br />It's in tid_fd_revalidate(), and it really doesn't make much sense to<br />use the task credentials for it. I wonder if we should do something<br />like the appended (whitespace-damaged and totally untested) patch.<br /><br />                Linus<br /><br />---<br />  diff --git a/fs/proc/fd.c b/fs/proc/fd.c<br />  index 75f2890abbd8..2a5a53cc7a0a 100644<br />  --- a/fs/proc/fd.c<br />  +++ b/fs/proc/fd.c<br />  &#64;&#64; -74,7 +74,6 &#64;&#64; static int tid_fd_revalidate(struct dentry<br />*dentry, unsigned int flags)<br />   {<br />          struct files_struct *files;<br />          struct task_struct *task;<br />  -       const struct cred *cred;<br />          struct inode *inode;<br />          int fd;<br />  &#64;&#64; -95,19 +94,17 &#64;&#64; static int tid_fd_revalidate(struct dentry<br />*dentry, unsigned int flags)<br />                          if (file) {<br />                                  unsigned f_mode = file-&gt;f_mode;<br />  -                               rcu_read_unlock();<br />  -                               put_files_struct(files);<br />  -<br />                                  if (task_dumpable(task)) {<br />  -                                       rcu_read_lock();<br />  -                                       cred = __task_cred(task);<br />  +                                       const struct cred *cred =<br />file-&gt;f_cred;<br />                                          inode-&gt;i_uid = cred-&gt;euid;<br />                                          inode-&gt;i_gid = cred-&gt;egid;<br />  -                                       rcu_read_unlock();<br />                                  } else {<br />                                          inode-&gt;i_uid = GLOBAL_ROOT_UID;<br />                                          inode-&gt;i_gid = GLOBAL_ROOT_GID;<br />                                  }<br />  +                               rcu_read_unlock();<br />  +                               put_files_struct(files);<br />  +<br />                                  if (S_ISLNK(inode-&gt;i_mode)) {<br />                                          unsigned i_mode = S_IFLNK;<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
