    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/30/617">First message in thread</a></li><li><a href="/lkml/2013/8/30/617">"George Spelvin"</a><ul><li class="origin"><a href="/lkml/2013/9/1/14">Linus Torvalds</a><ul><li><a href="/lkml/2013/9/1/14">"George Spelvin"</a><ul><li><a href="/lkml/2013/9/1/50">Theodore Ts'o</a><ul><li><a href="/lkml/2013/9/1/113">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 31 Aug 2013 10:16:52 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v7 1/4] spinlock: A new lockref structure for lockless update of refcount</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 30, 2013 at 8:06 PM, George Spelvin &lt;linux&#64;horizon.com&gt; wrote:<br />&gt; Just noticing that you are adding several functions that return a boolean<br />&gt; value as an int.  And a "gotref" local variable.<br />&gt;<br />&gt; Is that just not wanting to bother with thse newfangled C99 innovations,<br />&gt; or do you dislike the "bool" type for some reason?<br /><br />I don't use "bool" in code I write. I don't think it adds any actual<br />value, and I think the data type is badly designed and of dubious<br />value in C. It has very few actual advantages.<br /><br />That said, it's not like I *hate* the type, and I won't remove bool<br />from code other people write. I just think it's superfluous and<br />stupid, and another case of C++ people thinking too much "this is a<br />cool feature" without then actually doing it well. The C people then<br />picked it up because it was less onerous than some other C++ features,<br />and all the compilers had the logic anyway.<br /><br />If "bool" had real advantages (like having a dense array<br />representation, for example), that would be one thing. It doesn't.<br />Sure, now you can take an address of a bool (which you couldn't<br />generally do efficiently if it really was a bit array), but it also<br />means that in practice, "bool" is normally nothing but "char" with<br />some really odd and special implicit type casting rules.<br /><br />I doubt most people really even understand how "bool" casting works.<br /><br />And bool is actually really *dangerous* to use if you don't understand<br />it. There are people who use "bool", but then because they want to be<br />portable, they have a compatibility #ifdef or other configuration<br />thing that does something like<br /><br />   typedef int bool;<br />   #define true 1<br />   #define false 0<br /><br />and it will actually work. Most of the time. And then the semantic<br />differences from a _real_ C compiler that supports the C99 _Bool/bool<br />type are really really subtle.<br /><br />IOW, bool has very few real upsides, and it has a real downside: it's<br />subtle, and people really never even seem to _realize_ just how subtle<br />it is.  I suspect that if you ask ten random average C programmers if<br />the above is equivalent to stdbool.h, nine of them will say "sure".<br /><br />And they'd be *COMPLETELY* wrong.<br /><br />So no. I'm definitely not a fan of bool. I think there are better<br />types, and I think there are better ways to document things.<br /><br />                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
