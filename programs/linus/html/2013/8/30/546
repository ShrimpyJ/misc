    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/5/722">First message in thread</a></li><li><a href="/lkml/2013/8/30/517">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/30/535">Al Viro</a><ul><li class="origin"><a href="/lkml/2013/8/31/191">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/31/191">Al Viro</a><ul><li><a href="/lkml/2013/8/31/198">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Aug 2013 15:30:14 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v7 1/4] spinlock: A new lockref structure for lockless update of refcount</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 30, 2013 at 2:44 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; Point...  Actually, I wonder if _that_ could be a solution for -&gt;d_name.name<br />&gt; printk races as well.  Remember that story?  You objected against taking<br />&gt; spinlocks in printk, no matter how specialized and how narrow the area<br />&gt; over which those are taken, but rcu_read_lock/rcu_read_unlock should be<br />&gt; OK...  Something like %pd expecting dentry pointer and producing dentry<br />&gt; name.  Sure, we still get garbage if we race with d_move(), but at least<br />&gt; it's a contained garbage that way...<br /><br />Yes, that sounds quite reasonable. For printk, we'd probably want to<br />limit the max size and depth to something fairly small (32 bytes, max<br />four deep or something), and we cannot take cwd/root into account<br />since it can happen from interrupts, but other than that it doesn't<br />sound horrible.<br /><br />           Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
