    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/5/722">First message in thread</a></li><li><a href="/lkml/2013/8/30/354">Sedat Dilek</a><ul><li><a href="/lkml/2013/8/30/364">Steven Rostedt</a><ul><li><a href="/lkml/2013/8/30/367">Sedat Dilek</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2013/8/30/374">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/30/386">Sedat Dilek</a><ul><li><a href="/lkml/2013/8/30/409">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/30/411">Sedat Dilek</a></li><li><a href="/lkml/2013/9/1/17">Sedat Dilek</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Aug 2013 11:42:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v7 1/4] spinlock: A new lockref structure for lockless update of refcount</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 30, 2013 at 9:12 AM, Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; Now I know this isn't going to be popular, but I'll suggest it anyway.<br />&gt; What about only implementing the lockref locking when CPUs are greater<br />&gt; than 7, 7 or less will still use the normal optimized spinlocks.<br /><br />I considered it. It's not hugely difficult to do, in that we could<br />make it a static key thing, but I'd actually rather make it depend on<br />some actual user-settable thing than on some arbitrary number of<br />cpu's.<br /><br />See the CMPXCHG_LOOP() macro in lib/lockref.c: it would be easy to<br />just enclose the whole thing in a<br /><br />    if (static_key_enabled(&amp;cmpxchg_lockref)) { .. }<br /><br />and then it could be enabled/disabled at will with very little<br />performance downside. And I don't think it's necessarily a bad idea.<br />The code has a very natural "fall back to spinlock" model.<br /><br />THAT SAID.<br /><br />Even though uncontended spinlocks are faster than a cmpxchg, under any<br />real normal load I don't think you can necessarily measure the<br />difference. Remember: this particular benchmark does absolutely<br />*nothing* but pathname lookups, and even then it's pretty close to<br />noise. And the biggest disadvantage of cmpxchg - the fact that you<br />have to read the cache line before you do the r-m-w cycle, and thus<br />might have an extra cache coherency cycle - shouldn't be an issue for<br />the dentry use when you don't try to hit the same dentry over and over<br />again, because the code has already read the dentry hash etc.<br /><br />So I'm not sure it's really worth it. It might be interesting to try<br />that static_key approach simply for benchmarking, though. That way you<br />could benchmark the exact same boot with pretty much the exact same<br />dentry population, just switch the static key around and run a few<br />path-intensive benchmarks.<br /><br />If anybody is willing to write the patch and do the benchmarking (I<br />would suggest *not* using my idiotic test-program for this), and then<br />send it to me with numbers, that would be interesting...<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
