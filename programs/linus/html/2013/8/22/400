    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/7/17/733">First message in thread</a></li><li><a href="/lkml/2013/7/17/733">T Makphaibulchoke</a><ul><li><a href="/lkml/2013/8/22/367">T Makphaibulchoke</a><ul><li><a href="/lkml/2013/8/22/363">T Makphaibulchoke</a></li><li><a href="/lkml/2013/8/22/365">T Makphaibulchoke</a></li><li class="origin"><a href="/lkml/2013/8/22/553">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/22/553">Thavatchai Makphaibulchoke</a></li></ul></li><li><a href="/lkml/2014/1/24/351">T Makphaibulchoke</a><ul><li><a href="/lkml/2014/1/24/322">T Makphaibulchoke</a></li><li><a href="/lkml/2014/1/24/324">T Makphaibulchoke</a></li><li><a href="/lkml/2014/1/24/327">T Makphaibulchoke</a></li><li><a href="/lkml/2014/1/24/402">Andi Kleen</a><ul><li><a href="/lkml/2014/1/25/6">Andreas Dilger</a></li><li><a href="/lkml/2014/1/25/7">Thavatchai Makphaibulchoke</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2013/9/4/359">T Makphaibulchoke</a><ul><li><a href="/lkml/2013/9/4/360">T Makphaibulchoke</a><ul><li><a href="/lkml/2013/10/30/338">Theodore Ts'o</a></li></ul></li><li><a href="/lkml/2013/9/4/460">T Makphaibulchoke</a><ul><li><a href="/lkml/2013/10/30/335">Theodore Ts'o</a><ul><li><a href="/lkml/2013/10/30/590">Thavatchai Makphaibulchoke</a></li></ul></li><li><a href="/lkml/2013/10/30/340">Theodore Ts'o</a></li></ul></li><li><a href="/lkml/2013/9/4/488">Andreas Dilger</a><ul><li><a href="/lkml/2013/9/4/546">Thavatchai Makphaibulchoke</a></li><li><a href="/lkml/2013/9/5/478">Thavatchai Makphaibulchoke</a></li></ul></li><li><a href="/lkml/2013/9/4/648">Theodore Ts'o</a><ul><li><a href="/lkml/2013/9/5/311">Thavatchai Makphaibulchoke</a><ul><li><a href="/lkml/2013/9/6/28">Andreas Dilger</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2014/2/20/455">T Makphaibulchoke</a><ul><li><a href="/lkml/2014/2/20/452">T Makphaibulchoke</a></li><li><a href="/lkml/2014/2/20/456">T Makphaibulchoke</a></li><li><a href="/lkml/2014/2/20/457">T Makphaibulchoke</a></li></ul></li><li><a href="/lkml/2014/3/12/366">T Makphaibulchoke</a><ul><li><a href="/lkml/2014/3/12/362">T Makphaibulchoke</a></li><li><a href="/lkml/2014/3/12/363">T Makphaibulchoke</a></li><li><a href="/lkml/2014/3/12/364">T Makphaibulchoke</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 22 Aug 2013 09:53:45 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 1/2] mbcache: decoupling the locking of local from global data</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 22, 2013 at 8:54 AM, T Makphaibulchoke &lt;tmac&#64;hp.com&gt; wrote:<br />&gt;<br />&gt; +#define        MB_LOCK_HASH_CHAIN(hash_head)   hlist_bl_lock(hash_head)<br />&gt; +#define        MB_UNLOCK_HASH_CHAIN(hash_head) hlist_bl_unlock(hash_head)<br />&gt; +#ifdef MB_CACHE_DEBUG<br />&gt; +#define        MB_LOCK_BLOCK_HASH(ce) do {<br /><br />Please don't do these ugly and pointless preprocessor macro expanders<br />that hide what the actual operation is.<br /><br />The DEBUG case seems to be just for your own testing anyway, so even<br />that shouldn't exist in the merged version.<br /><br />&gt; +#define        MAX_LOCK_RETRY  1024<br />&gt; +<br />&gt; +static inline int __mb_cache_lock_entry_block_hash(struct mb_cache_entry *ce)<br />&gt; +{<br />&gt; +       int nretry = 0;<br />&gt; +       struct hlist_bl_head *block_hash_p = ce-&gt;e_block_hash_p;<br />&gt; +<br />&gt; +       do {<br />&gt; +               MB_LOCK_HASH_CHAIN(block_hash_p);<br />&gt; +               if (ce-&gt;e_block_hash_p == block_hash_p)<br />&gt; +                       return 0;<br />&gt; +               MB_UNLOCK_HASH_CHAIN(block_hash_p);<br />&gt; +               block_hash_p = ce-&gt;e_block_hash_p;<br />&gt; +       } while (++nretry &lt; MAX_LOCK_RETRY);<br />&gt; +       return -1;<br />&gt; +}<br /><br />And this is really ugly. Again it's also then hidden behind the ugly macro.<br /><br />First off, the thousand-time retry seems completely excessive. Does it<br />actually need any retry AT ALL? If the hash entry changes, either you<br />should retry forever, or if you feel that can result in livelocks<br />(fair enough) and you need a fallback case to a bigger lock, then why<br />not just do the fallback immediately?<br /><br />More importantly, regardless of that retry issue, this seems to be<br />abstracted at the wrong level, resulting in every single user of this<br />repeating the same complex and hard-to-understand incantation:<br /><br />&gt; +               if (MB_LOCK_ENTRY_BLOCK_HASH(ce)) {<br />&gt; +                       spin_lock(&amp;mb_cache_spinlock);<br />&gt; +                       list_add_tail(&amp;ce-&gt;e_lru_list, &amp;mb_cache_lru_list);<br />&gt; +                       spin_unlock(&amp;mb_cache_spinlock);<br />&gt; +                       continue;<br />&gt; +               }<br />..<br />&gt; +               if (MB_LOCK_ENTRY_BLOCK_HASH(ce)) {<br />&gt; +                       spin_lock(&amp;mb_cache_spinlock);<br />&gt; +                       list_add_tail(&amp;ce-&gt;e_lru_list, &amp;mb_cache_lru_list);<br />&gt; +                       spin_unlock(&amp;mb_cache_spinlock);<br />&gt; +                       continue;<br />&gt; +               }<br />..<br />&gt; +                               if (MB_LOCK_ENTRY_BLOCK_HASH(ce)) {<br />&gt; +                                       spin_lock(&amp;mb_cache_spinlock);<br />&gt; +                                       list_add_tail(&amp;ce-&gt;e_lru_list,<br />&gt; +                                               &amp;mb_cache_lru_list);<br />&gt; +                                       continue;<br />&gt; +                               }<br /><br />where the only difference is that the last one doesn't unlock<br />afterwards because it runs in a loop with that LRU list lock held.<br />Ugh.<br /><br />The locking logic also isn't explained anywhere, making the<br />hard-to-read code even harder to read.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
