    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/8/9/294">First message in thread</a></li><li><a href="/lkml/2013/8/15/122">Ben Tebulin</a><ul><li><a href="/lkml/2013/8/15/186">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/15/197">Ben Tebulin</a></li><li><a href="/lkml/2013/8/15/226">Michal Hocko</a><ul><li><a href="/lkml/2013/8/15/265">Michal Hocko</a><ul><li><a href="/lkml/2013/8/15/267">Michal Hocko</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2013/8/15/362">Linus Torvalds</a><ul><li><a href="/lkml/2013/8/15/362">=?utf-8?Q?Bj=C3=B8rn_Mork?=</a><ul><li><a href="/lkml/2013/8/15/360">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2013/8/15/468">Ben Tebulin</a><ul><li><a href="/lkml/2013/8/15/482">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Aug 2013 11:00:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug] Reproducible data corruption on i5-3340M: Please revert 53a59fc67!</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 15, 2013 at 5:02 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt; On Thu, Aug 15, 2013 at 2:25 AM, Ben Tebulin &lt;tebulin&#64;googlemail.com&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; I just cherry-picked e6c495a96ce0 into 3.9.11 and 3.7.10.<br />&gt;&gt; Unfortunately this does _not resolve_ my issue (too good to be true) :-(<br />&gt;<br />&gt; Ho humm. I've found at least one other bug, but that one only affects<br />&gt; hugepages. Do you perhaps have transparent hugepages enabled? But even<br />&gt; then it looks quite unlikely.<br />&gt;<br />&gt; I'll think about this some more. I'm not happy with how that<br />&gt; particular whole TLB flushing hack was done, but I need to sleep on<br />&gt; this.<br /><br />Ok, so I've slept on it, and here's my current thinking.<br /><br />The bugs in the TLB handling were all about missing or confused<br />updates to the TLB range, and the thing is, they were missing or<br />confused because you had to do really confusing things, and remember<br />to set the range properly.<br /><br />And that is because the interface is horrible.<br /><br />This patch tries to fix the interface instead of trying to patch up<br />the individual places that *should* set the range some particular way.<br />Sadly, that means that I had to change the calling convention for<br />"tlb_gather_mmu()", so the patch is larger than I'd like. But it's all<br />very straightforward:<br /><br /> (1) instead of passing "fullmm" to tlb_gather_mmu(), pass the<br />start/end address.<br /><br />     A range of 0 to ~0ul implies "fullmm", and we calculate that with<br />"!(start | (end+1))"<br /><br /> (2) Because access to start/end now becomes an internal API, the<br />patch makes *all* TLB gather implementations do this.<br /><br />     So I added start/end fields to the tlb_gather structure as necessary.<br /><br />     Note that some architectures already had "start_range/end_range"<br />values, and I left those alone (because the new start/end might work a<br />bit differently), but it's very possible that those could be removed,<br />and they'd just use the "generic" start/end values. I'm cc'ing the<br />arch list to see what the reaction to this all is.<br /><br /> (3) I removed all the other games with start/end, because now<br />start/end is _always_ valid.<br /><br />     Notably, if any caller of "tlb_flush_mmu()" forgets to update the<br />start/end fields (like I think the hugetlb case did), it is no longer<br />a bug. The start/end will have been set up by the initialization of<br />TLB gather, so we're all good.<br /><br /> (4) The ONE exception to (3) is the zap_pte_range() case in<br />mm/memory.c, which used to do all the special start/end games, and now<br />instead just updates start/end to be the "chunk" it just worked on<br />before flushing the TLB, and the "rest of the area" afterwards.<br /><br />Even that special (4) case is simpler now, imho, exactly because<br />start/end is a valid range at all points (it used to be that it wasn't<br />a valid range the first time, since it wasn't set up initially). So<br />now that code in case (4) makes more sense, but more importantly, now<br />it should be just an optimization - we *could* have dropped all the<br />start/end updates, but then we'd just ask the TLB to be flushed for<br />the whole original range every time.<br /><br />Anyway. I've booted this, and I'm writing this email with a kernel<br />running this, BUT:<br /><br /> - I have not compile-tested anything but x86-64, so the non-generic<br />TLB gather changes are all just done blindly. They are very<br />straightforward, but still..<br /><br /> - I have no idea whether this will fix the problem Ben sees, but I<br />feel happier about the code, because now any place that forgets to set<br />up start/end will work just fine, because they are always valid. Ben,<br />please test. I'm worried that the problem you see is something even<br />more fundamentally wrong with the whole "oops, must flush in the<br />middle" logic, but I'm _hoping_ this fixes it.<br /><br /> - This patch is against current git, so to apply you need to have<br />that commit e6c495a96ce0 cherry-picked to older kernels first. But<br />other than that I don't think this code has changed, so it should<br />apply cleanly.<br /><br />Comments? Especially s390, ARM, ia64, sh and um that I edited blindly...<br /><br />                          Linus<br />[unhandled content-type:application/octet-stream]</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
