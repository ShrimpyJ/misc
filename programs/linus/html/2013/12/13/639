    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/12/3/181">First message in thread</a></li><li><a href="/lkml/2013/12/11/584">Jan Kara</a><ul><li><a href="/lkml/2013/12/11/593">Andrew Morton</a><ul><li><a href="/lkml/2013/12/12/137">Jan Kara</a></li><li class="origin"><a href="/lkml/2013/12/31/48">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/31/48">Raghavendra K T</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Dec 2013 16:39:10 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC] mm readahead: Fix the readahead fail in case of empty numa node</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Dec 11, 2013 at 3:05 PM, Andrew Morton<br />&lt;akpm&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; But I'm really struggling to think up an implementation!  The current<br />&gt; code looks only at the caller's node and doesn't seem to make much<br />&gt; sense.  Should we look at all nodes?  Hard to say without prior<br />&gt; knowledge of where those pages will be coming from.<br /><br />I really think we want to put an upper bound on the read-ahead, and<br />I'm not convinced we need to try to be excessively clever about it. We<br />also probably don't want to make it too expensive to calculate,<br />because afaik this ends up being called for each file we open when we<br />don't have pages in the page cache yet.<br /><br />The current function seems reasonable on a single-node system. Let's<br />not kill it entirely just because it has some odd corner-case on<br />multi-node systems.<br /><br />In fact, for all I care, I think it would be perfectly ok to just use<br />a truly stupid hard limit ("you can't read-ahead more than 16MB" or<br />whatever).<br /><br />What we do *not* want to allow is to have people call "readahead"<br />functions and basically kill the machine because you now have a<br />unkillable IO that is insanely big. So I'd much rather limit it too<br />much than too little. And on absolutely no sane IO susbsystem does it<br />make sense to read ahead insane amounts.<br /><br />So I'd rather limit it to something stupid and small, than to not<br />limit things at all.<br /><br />Looking at the interface, for example, the natural thing to do for the<br />"readahead()" system call, for example, is to just give it a size of<br />~0ul, and let the system limit things, becaue limiting things in useer<br />space is just not reasonable.<br /><br />So I really do *not* think it's fine to just remove the limit entirely.<br /><br />          Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
