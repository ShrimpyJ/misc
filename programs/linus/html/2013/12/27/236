    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/12/21/112">First message in thread</a></li><li><a href="/lkml/2013/12/24/182">Ingo Molnar</a><ul><li><a href="/lkml/2013/12/26/180">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/26/221">"H. Peter Anvin"</a><ul><li><a href="/lkml/2013/12/26/251">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2013/12/27/8">"H. Peter Anvin"</a><ul><li><a href="/lkml/2013/12/27/229">"H. Peter Anvin"</a><ul><li><a href="/lkml/2014/1/12/83">Ingo Molnar</a></li></ul></li></ul></li><li class="origin"><a href="">tip-bot for Linus Torvalds</a></li><li><a href="/lkml/2013/12/27/238">"tip-bot for H. Peter Anvin"</a></li><li><a href="/lkml/2013/12/27/239">"tip-bot for H. Peter Anvin"</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2013/12/27/236/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Dec 2013 17:00:40 -0800</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">tip-bot for Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">[tip:x86/asm] x86: Replace assembly access_ok() with a C variant</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Commit-ID:  c5fe5d80680e2949ffe102180f5fc6cefc0d145f<br />Gitweb:     <a href="https://git.kernel.org/tip/c5fe5d80680e2949ffe102180f5fc6cefc0d145f">http://git.kernel.org/tip/c5fe5d80680e2949ffe102180f5fc6cefc0d145f</a><br />Author:     Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />AuthorDate: Fri, 27 Dec 2013 15:30:58 -0800<br />Committer:  H. Peter Anvin &lt;hpa&#64;zytor.com&gt;<br />CommitDate: Fri, 27 Dec 2013 16:58:17 -0800<br /><br />x86: Replace assembly access_ok() with a C variant<br /><br />It turns out that the assembly variant doesn't actually produce that<br />good code, presumably partly because it creates a long dependency<br />chain with no scheduling, and partly because we cannot get a flags<br />result out of gcc (which could be fixed with asm goto, but it turns<br />out not to be worth it.)<br /><br />The C code allows gcc to schedule and generate multiple (easily<br />predictable) branches, and as a side benefit we can really optimize<br />the case where the size is constant.<br /><br />Link: <a href="https://lkml.kernel.org/r/CA">http://lkml.kernel.org/r/CA</a>%2B55aFzPBdbfKovMT8Edr4SmE2_=%2BOKJFac9XW2awegogTkVTA&#64;mail.gmail.com<br />Signed-off-by: H. Peter Anvin &lt;hpa&#64;zytor.com&gt;<br />---<br /> arch/x86/include/asm/uaccess.h | 28 +++++++++++++++++-----------<br /> 1 file changed, 17 insertions(+), 11 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/uaccess.h b/arch/x86/include/asm/uaccess.h<br />index 8ec57c0..84ecf1d 100644<br />--- a/arch/x86/include/asm/uaccess.h<br />+++ b/arch/x86/include/asm/uaccess.h<br />&#64;&#64; -40,22 +40,28 &#64;&#64;<br /> /*<br />  * Test whether a block of memory is a valid user space address.<br />  * Returns 0 if the range is valid, nonzero otherwise.<br />- *<br />- * This is equivalent to the following test:<br />- * (u33)addr + (u33)size &gt; (u33)current-&gt;addr_limit.seg (u65 for x86_64)<br />- *<br />- * This needs 33-bit (65-bit for x86_64) arithmetic. We have a carry...<br />  */<br />+static inline int __chk_range_not_ok(unsigned long addr, unsigned long size, unsigned long limit)<br />+{<br />+	/*<br />+	 * If we have used "sizeof()" for the size,<br />+	 * we know it won't overflow the limit (but<br />+	 * it might overflow the 'addr', so it's<br />+	 * important to subtract the size from the<br />+	 * limit, not add it to the address).<br />+	 */<br />+	if (__builtin_constant_p(size))<br />+		return addr &gt; limit - size;<br />+<br />+	/* Arbitrary sizes? Be careful about overflow */<br />+	addr += size;<br />+	return (addr &lt; size) || (addr &gt; limit);<br />+}<br /> <br /> #define __range_not_ok(addr, size, limit)				\<br /> ({									\<br />-	unsigned long flag, roksum;					\<br /> 	__chk_user_ptr(addr);						\<br />-	asm("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0"		\<br />-	    : "=&amp;r" (flag), "=r" (roksum)				\<br />-	    : "1" (addr), "g" ((long)(size)),				\<br />-	      "rm" (limit));						\<br />-	flag;								\<br />+	__chk_range_not_ok((unsigned long __force)(addr), size, limit); \<br /> })<br /> <br /> /**<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
