    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/12/18/932">First message in thread</a></li><li><a href="/lkml/2013/12/19/1050">Dave Jones</a><ul><li><a href="/lkml/2013/12/19/1218">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/19/549">Dave Jones</a></li><li><a href="/lkml/2013/12/19/598">Kent Overstreet</a></li><li><a href="/lkml/2013/12/19/617">Dave Jones</a></li><li><a href="/lkml/2013/12/19/622">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/641">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/650">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/662">Linus Torvalds</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/679">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/685">Dave Jones</a></li><li><a href="/lkml/2013/12/19/689">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/694">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/702">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/781">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/827">Dave Jones</a></li><li><a href="/lkml/2013/12/19/836">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/21/125">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/22/47">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/22/65">Dave Jones</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2013/12/19/677/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Dec 2013 05:02:20 +0900</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: bad page state in 3.13-rc4</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 20, 2013 at 4:53 AM, Benjamin LaHaise &lt;bcrl&#64;kvack.org&gt; wrote:<br />&gt;<br />&gt; Yes, that's what I found when I started looking into this in detail again.<br />&gt; I think the page reference counting is actually correct.  There are 2<br />&gt; references on each page: the first is from the find_or_create_page() call,<br />&gt; and the second is from the get_user_pages() (which also makes sure the page<br />&gt; is populated into the page tables).<br /><br />Ok, I'm sorry, but that's just pure bullshit then.<br /><br />So it has the page array in the page cache, then mmap's it in, and<br />uses get_user_pages() to get the pages back that it *just* created.<br /><br />This code is pure and utter garbage. It's beyond the pale how crazy it is.<br /><br />Why not just get rid of the idiotic get_user_pages() crap then?<br />Something like the attached patch?<br /><br />Totally untested, but at least it makes *some* amount of sense.<br /><br />                Linus<br /> fs/aio.c | 20 +++-----------------<br /> 1 file changed, 3 insertions(+), 17 deletions(-)<br /><br />diff --git a/fs/aio.c b/fs/aio.c<br />index 6efb7f6cb22e..e1b02dd1be9e 100644<br />--- a/fs/aio.c<br />+++ b/fs/aio.c<br />&#64;&#64; -358,6 +358,8 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> 		SetPageUptodate(page);<br /> 		SetPageDirty(page);<br /> 		unlock_page(page);<br />+<br />+		ctx-&gt;ring_pages[i] = page;<br /> 	}<br /> 	ctx-&gt;aio_ring_file = file;<br /> 	nr_events = (PAGE_SIZE * nr_pages - sizeof(struct aio_ring))<br />&#64;&#64; -380,8 +382,8 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> 	ctx-&gt;mmap_base = do_mmap_pgoff(ctx-&gt;aio_ring_file, 0, ctx-&gt;mmap_size,<br /> 				       PROT_READ | PROT_WRITE,<br /> 				       MAP_SHARED | MAP_POPULATE, 0, &amp;populate);<br />+	up_write(&amp;mm-&gt;mmap_sem);<br /> 	if (IS_ERR((void *)ctx-&gt;mmap_base)) {<br />-		up_write(&amp;mm-&gt;mmap_sem);<br /> 		ctx-&gt;mmap_size = 0;<br /> 		aio_free_ring(ctx);<br /> 		return -EAGAIN;<br />&#64;&#64; -389,22 +391,6 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> <br /> 	pr_debug("mmap address: 0x%08lx\n", ctx-&gt;mmap_base);<br /> <br />-	/* We must do this while still holding mmap_sem for write, as we<br />-	 * need to be protected against userspace attempting to mremap()<br />-	 * or munmap() the ring buffer.<br />-	 */<br />-	ctx-&gt;nr_pages = get_user_pages(current, mm, ctx-&gt;mmap_base, nr_pages,<br />-				       1, 0, ctx-&gt;ring_pages, NULL);<br />-<br />-	/* Dropping the reference here is safe as the page cache will hold<br />-	 * onto the pages for us.  It is also required so that page migration<br />-	 * can unmap the pages and get the right reference count.<br />-	 */<br />-	for (i = 0; i &lt; ctx-&gt;nr_pages; i++)<br />-		put_page(ctx-&gt;ring_pages[i]);<br />-<br />-	up_write(&amp;mm-&gt;mmap_sem);<br />-<br /> 	if (unlikely(ctx-&gt;nr_pages != nr_pages)) {<br /> 		aio_free_ring(ctx);<br /> 		return -EAGAIN;</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
