    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/12/18/932">First message in thread</a></li><li><a href="/lkml/2013/12/19/1050">Dave Jones</a><ul><li><a href="/lkml/2013/12/19/1218">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/19/549">Dave Jones</a></li><li><a href="/lkml/2013/12/19/598">Kent Overstreet</a></li><li><a href="/lkml/2013/12/19/617">Dave Jones</a></li><li><a href="/lkml/2013/12/19/622">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/641">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/650">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/662">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/677">Linus Torvalds</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/685">Dave Jones</a></li><li><a href="/lkml/2013/12/19/689">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/694">Linus Torvalds</a></li><li><a href="/lkml/2013/12/19/702">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/781">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/19/827">Dave Jones</a></li><li><a href="/lkml/2013/12/19/836">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/21/125">Benjamin LaHaise</a></li><li><a href="/lkml/2013/12/22/47">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/22/65">Dave Jones</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2013/12/19/679/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Dec 2013 05:11:12 +0900</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: bad page state in 3.13-rc4</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 20, 2013 at 5:02 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Why not just get rid of the idiotic get_user_pages() crap then?<br />&gt; Something like the attached patch?<br />&gt;<br />&gt; Totally untested, but at least it makes *some* amount of sense.<br /><br />Ok, that can't work, since the ring_pages[] allocation happens later.<br />So that part needs to be moved up, and it needs to initialize<br />'nr_pages'.<br /><br />So here's the same patch, but with stuff moved around a bit, and the<br />"oops, couldn't create page" part fixed.<br /><br />Bit it's still totally and entirely untested.<br /><br />                   Linus<br /> fs/aio.c | 54 +++++++++++++++++++++---------------------------------<br /> 1 file changed, 21 insertions(+), 33 deletions(-)<br /><br />diff --git a/fs/aio.c b/fs/aio.c<br />index 6efb7f6cb22e..3e857e98fb87 100644<br />--- a/fs/aio.c<br />+++ b/fs/aio.c<br />&#64;&#64; -347,6 +347,20 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> 		return -EAGAIN;<br /> 	}<br /> <br />+	ctx-&gt;aio_ring_file = file;<br />+	nr_events = (PAGE_SIZE * nr_pages - sizeof(struct aio_ring))<br />+			/ sizeof(struct io_event);<br />+<br />+	ctx-&gt;ring_pages = ctx-&gt;internal_pages;<br />+	if (nr_pages &gt; AIO_RING_PAGES) {<br />+		ctx-&gt;ring_pages = kcalloc(nr_pages, sizeof(struct page *),<br />+					  GFP_KERNEL);<br />+		if (!ctx-&gt;ring_pages) {<br />+			put_aio_ring_file(ctx);<br />+			return -ENOMEM;<br />+		}<br />+	}<br />+<br /> 	for (i = 0; i &lt; nr_pages; i++) {<br /> 		struct page *page;<br /> 		page = find_or_create_page(file-&gt;f_inode-&gt;i_mapping,<br />&#64;&#64; -358,19 +372,14 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> 		SetPageUptodate(page);<br /> 		SetPageDirty(page);<br /> 		unlock_page(page);<br />+<br />+		ctx-&gt;ring_pages[i] = page;<br /> 	}<br />-	ctx-&gt;aio_ring_file = file;<br />-	nr_events = (PAGE_SIZE * nr_pages - sizeof(struct aio_ring))<br />-			/ sizeof(struct io_event);<br />+	ctx-&gt;nr_pages = i;<br /> <br />-	ctx-&gt;ring_pages = ctx-&gt;internal_pages;<br />-	if (nr_pages &gt; AIO_RING_PAGES) {<br />-		ctx-&gt;ring_pages = kcalloc(nr_pages, sizeof(struct page *),<br />-					  GFP_KERNEL);<br />-		if (!ctx-&gt;ring_pages) {<br />-			put_aio_ring_file(ctx);<br />-			return -ENOMEM;<br />-		}<br />+	if (unlikely(i != nr_pages)) {<br />+		aio_free_ring(ctx);<br />+		return -EAGAIN;<br /> 	}<br /> <br /> 	ctx-&gt;mmap_size = nr_pages * PAGE_SIZE;<br />&#64;&#64; -380,8 +389,8 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> 	ctx-&gt;mmap_base = do_mmap_pgoff(ctx-&gt;aio_ring_file, 0, ctx-&gt;mmap_size,<br /> 				       PROT_READ | PROT_WRITE,<br /> 				       MAP_SHARED | MAP_POPULATE, 0, &amp;populate);<br />+	up_write(&amp;mm-&gt;mmap_sem);<br /> 	if (IS_ERR((void *)ctx-&gt;mmap_base)) {<br />-		up_write(&amp;mm-&gt;mmap_sem);<br /> 		ctx-&gt;mmap_size = 0;<br /> 		aio_free_ring(ctx);<br /> 		return -EAGAIN;<br />&#64;&#64; -389,27 +398,6 &#64;&#64; static int aio_setup_ring(struct kioctx *ctx)<br /> <br /> 	pr_debug("mmap address: 0x%08lx\n", ctx-&gt;mmap_base);<br /> <br />-	/* We must do this while still holding mmap_sem for write, as we<br />-	 * need to be protected against userspace attempting to mremap()<br />-	 * or munmap() the ring buffer.<br />-	 */<br />-	ctx-&gt;nr_pages = get_user_pages(current, mm, ctx-&gt;mmap_base, nr_pages,<br />-				       1, 0, ctx-&gt;ring_pages, NULL);<br />-<br />-	/* Dropping the reference here is safe as the page cache will hold<br />-	 * onto the pages for us.  It is also required so that page migration<br />-	 * can unmap the pages and get the right reference count.<br />-	 */<br />-	for (i = 0; i &lt; ctx-&gt;nr_pages; i++)<br />-		put_page(ctx-&gt;ring_pages[i]);<br />-<br />-	up_write(&amp;mm-&gt;mmap_sem);<br />-<br />-	if (unlikely(ctx-&gt;nr_pages != nr_pages)) {<br />-		aio_free_ring(ctx);<br />-		return -EAGAIN;<br />-	}<br />-<br /> 	ctx-&gt;user_id = ctx-&gt;mmap_base;<br /> 	ctx-&gt;nr_events = nr_events; /* trusted copy */<br /> </pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
