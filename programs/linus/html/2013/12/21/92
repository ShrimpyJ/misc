    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2013/12/21/21">First message in thread</a></li><li><a href="/lkml/2013/12/21/21">naveen yadav</a><ul><li class="origin"><a href="/lkml/2013/12/21/100">Linus Torvalds</a><ul><li><a href="/lkml/2013/12/21/100">Oleg Nesterov</a></li><li><a href="/lkml/2013/12/22/26">Oleg Nesterov</a><ul><li><a href="/lkml/2013/12/23/138">naveen yadav</a><ul><li><a href="/lkml/2013/12/23/165">Oleg Nesterov</a></li><li><a href="/lkml/2013/12/23/270">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Dec 2013 09:41:48 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] secure unlock_task_sighand() call</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Did you actually *see* the problem, or was this just from looking at the code?<br /><br />I don't hate the patch, and it might be the right thing to do in any<br />case (just to avoid depending on subtle things), but this really *is*<br />subtle, and I'm adding Oleg to the participants since it is his code<br />(going back to 2006, no less).<br /><br />We have coredump serialization in exit_mm() that I think *should* make<br />this all ok - if we still see p-&gt;mm matching our mm, I don't think it<br />should be able to get to __exit_signal() and make the sighand go away,<br />so the lock_task_sighand() shouldn't ever fail. But I might miss<br />something, and as mentioned the patch might be a good idea regardless<br />just to avoid overly subtle rules that can confuse people.<br /><br />Oleg?<br /><br />                   Linus<br /><br />On Sat, Dec 21, 2013 at 1:55 AM, naveen yadav &lt;yad.naveen&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; When check code , we found below issue in zap_thread function().<br />&gt;<br />&gt; From 57bf616d0e20086d73122373baf799c675f4e3d5 Mon Sep 17 00:00:00 2001<br />&gt; From: Ajeet Yadav &lt;ajeet.yadav.77&#64;gmail.com&gt;<br />&gt; Date: Sat, 21 Dec 2013 14:45:48 +0530<br />&gt; Subject: [PATCH] secure unlock_task_sighand() call<br />&gt;<br />&gt; Since the return value was not checked for lock_task_sighand(),<br />&gt; there was a chance that spin_unlock_irqrestore being called<br />&gt; from unlock_task_sighand gets called wihout actually acquire<br />&gt; the lock, which inturn can lead to kernel crash.<br />&gt;<br />&gt; Signed-off-by: Ajeet Yadav &lt;ajeet.yadav.77&#64;gmail.com&gt;<br />&gt; Signed-off-by: Vaibhav Shinde &lt;v.bhav.shinde&#64;gmail.com&gt;<br />&gt;<br />&gt; ---<br />&gt;  fs/coredump.c |    7 ++++---<br />&gt;  1 file changed, 4 insertions(+), 3 deletions(-)<br />&gt;<br />&gt; diff --git a/fs/coredump.c b/fs/coredump.c<br />&gt; index 6d8b4cd..447b02c 100644<br />&gt; --- a/fs/coredump.c<br />&gt; +++ b/fs/coredump.c<br />&gt; &#64;&#64; -357,9 +357,10 &#64;&#64; static inline int zap_threads(struct task_struct<br />&gt; *tsk, struct mm_struct *mm,<br />&gt;                 do {<br />&gt;                         if (p-&gt;mm) {<br />&gt;                                 if (unlikely(p-&gt;mm == mm)) {<br />&gt; -                                       lock_task_sighand(p, &amp;flags);<br />&gt; -                                       nr += zap_process(p, exit_code);<br />&gt; -                                       unlock_task_sighand(p, &amp;flags);<br />&gt; +                                       if (lock_task_sighand(p, &amp;flags) {<br />&gt; +                                               nr += zap_process(p, exit_code);<br />&gt; +                                               unlock_task_sighand(p, &amp;flags);<br />&gt; +                                       }<br />&gt;                                 }<br />&gt;                                 break;<br />&gt;                         }<br />&gt; --<br />&gt; 1.7.9.5<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
