    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/5/18/532">First message in thread</a></li><li><a href="/lkml/2019/8/16/955">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/16/982">Mathieu Desnoyers</a></li><li><a href="/lkml/2019/8/17/14">"Paul E. McKenney"</a><ul><li class="origin"><a href="/lkml/2019/8/17/86">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/17/86">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/17/127">Mathieu Desnoyers</a></li></ul></li><li><a href="/lkml/2019/8/17/201">"Paul E. McKenney"</a></li></ul></li><li><a href="/lkml/2019/8/20/669">Peter Zijlstra</a><ul><li><a href="/lkml/2019/8/20/1137">"Paul E. McKenney"</a><ul><li><a href="/lkml/2019/8/20/1143">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 17 Aug 2019 01:28:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/1] Fix: trace sched switch start/stop racy updates</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 16, 2019 at 9:52 PM Paul E. McKenney &lt;paulmck&#64;linux.ibm.com&gt; wrote:<br />&gt;<br />&gt; &gt; I'd love to have a flag that says "all undefined behavior is treated<br />&gt; &gt; as implementation-defined". There's a somewhat subtle - but very<br />&gt; &gt; important - difference there.<br />&gt;<br />&gt; It would also be nice to downgrade some of the undefined behavior in<br />&gt; the standard itself.  Compiler writers usually hate this because it<br />&gt; would require them to document what their compiler does in each case.<br />&gt; So they would prefer "unspecified" if the could not have "undefined".<br /><br />That certainly would sound very good to me.<br /><br />It's not the "documented behavior" that is important to me (since it<br />is still going to be potentially different across different<br />platforms), it's the "at least it's *some* consistent behavior for<br />that platform".<br /><br />That's just _so_ much better than "undefined behavior" which basically<br />says the compiler writer can do absolutely anything, whether it makes<br />sense or not, and whether it might open a small bug up to absolutely<br />catastrophic end results.<br /><br />&gt; &gt;    if (a)<br />&gt; &gt;       global_var = 1<br />&gt; &gt;    else<br />&gt; &gt;       global_var = 0<br />&gt;<br />&gt; Me, I would still want to use WRITE_ONCE() in this case.<br /><br />I actually suspect that if we had this kind of code, and a real reason<br />why readers would see it locklessly, then yes, WRITE_ONCE() makes<br />sense.<br /><br />But most of the cases where people add WRITE_ONCE() aren't even the<br />above kind of half-questionable cases. They are just literally<br /><br />        WRITE_ONCE(flag, value);<br /><br />and since there is no real memory ordering implied by this, what's the<br />actual value of that statement? What problem does it really solve wrt<br />just writing it as<br /><br />        flag = value;<br /><br />which is generally a lot easier to read.<br /><br />If the flag has semantic behavior wrt other things, and the write can<br />race with a read (whether it's the read or the write that is unlocked<br />is irrelevant), is still doesn't tend to make a lot of real<br />difference.<br /><br />In the end, the most common reason for a WRITE_ONCE() is mostly just<br />"to visually pair up with the non-synchronized read that uses<br />READ_ONCE()"<br /><br />Put another way: a WRITE_ONCE() without a paired READ_ONCE() is almost<br />certainly pointless.<br /><br />But the reverse is not really true. All a READ_ONCE() says is "I want<br />either the old or the new value", and it can get that _without_ being<br />paired with a WRITE_ONCE().<br /><br />See? They just aren't equally important.<br /><br />&gt; &gt; And yes, reads are different from writes. Reads don't have the same<br />&gt; &gt; kind of "other threads of execution can see them" effects, so a<br />&gt; &gt; compiler turning a single read into multiple reads is much more<br />&gt; &gt; realistic and not the same kind of "we need to expect a certain kind<br />&gt; &gt; of sanity from the compiler" issue.<br />&gt;<br />&gt; Though each of those compiler-generated multiple reads might return a<br />&gt; different value, right?<br /><br />Right. See the examples I have in the email to Mathieu:<br /><br />   unsigned int bits = some_global_value;<br />   ...test different bits in in 'bits' ...<br /><br />can easily cause multiple reads (particularly on a CPU that has a<br />"test bits in memory" instruction and a lack of registers.<br /><br />So then doing it as<br /><br />   unsigned int bits = READ_ONCE(some_global_value);<br />   .. test different bits in 'bits'...<br /><br />makes a real and obvious semantic difference. In ways that changing a one-time<br /><br />   ptr-&gt;flag = true;<br /><br />to<br /><br />   WRITE_ONCE(ptr-&gt;flag, true);<br /><br />does _not_ make any obvious semantic difference what-so-ever.<br /><br />Caching reads is also something that makes sense and is common, in<br />ways that caching writes does not. So doing<br /><br />    while (in_progress_global) /* twiddle your thumbs */;<br /><br />obviously trivially translates to an infinite loop with a single<br />conditional in front of it, in ways that<br /><br />   while (READ_ONCE(in_progress_global)) /* twiddle */;<br /><br />does not.<br /><br />So there are often _obvious_ reasons to use READ_ONCE().<br /><br />I really do not find the same to be true of WRITE_ONCE(). There are<br />valid uses, but they are definitely much less common, and much less<br />obvious.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
