    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/8/20/1203">First message in thread</a></li><li><a href="/lkml/2019/8/24/146">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/24/186">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2019/8/30/371">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/30/371">David Laight</a></li></ul></li><li><a href="/lkml/2019/8/25/10">Tetsuo Handa</a><ul><li><a href="/lkml/2019/8/25/49">Ingo Molnar</a><ul><li><a href="/lkml/2019/8/25/52">Tetsuo Handa</a></li></ul></li><li><a href="/lkml/2019/8/25/156">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/26/294">Tetsuo Handa</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 24 Aug 2019 13:56:54 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] /dev/mem: Bail out upon SIGKILL when reading memory.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 24, 2019 at 1:22 PM Ingo Molnar &lt;mingo&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; That makes sense: I measured 17 seconds per 100 MB of data, which is is<br />&gt; 0.16 usecs per byte. The instruction used by<br />&gt; copy_user_enhanced_fast_string() is REP MOVSB - which supposedly goes as<br />&gt; high as cacheline size accesses - but perhaps those get broken down for<br />&gt; physical memory that has no device claiming it?<br /><br />All the "rep string" optimizations are _only_ done for regular memory.<br /><br />When it hits any IO accesses, it will do the accesses at the specified<br />size (so "movsb" will do it a byte at a time).<br /><br />0.16 usec per byte is faster than the traditional ISA 'inb', but not<br />by a huge factor.<br /><br />&gt; Interruption is arguably *not* an 'error', so preserving partial reads<br />&gt; sounds like the higher quality solution, nevertheless one could argue<br />&gt; that particual read *could* be returned by read_kmem() if progress was<br />&gt; made.<br /><br />So if we react to regular signals, not just fatal ones, we definitely<br />need to honor partial reads.<br /><br />&gt; I.e. if for example an iomem area is already mapped by a driver with some<br />&gt; conflicting cache attribute, xlate_dev_mem_ptr() AFAICS will not<br />&gt; ioremap_cache() it to cached? IIRC some CPUs would triple fault or<br />&gt; completely misbehave on certain cache attribute conflicts.<br /><br />Yeah, I guess we have the machine check possibility with mixed cached cases.<br /><br />&gt; This check in mremap() might also trigger:<br />&gt;<br />&gt;         if (is_ram == REGION_MIXED) {<br />&gt;                 WARN_ONCE(1, "memremap attempted on mixed range %pa size: %#lx\n",<br />&gt;                                 &amp;offset, (unsigned long) size);<br />&gt;                 return NULL;<br />&gt;         }<br />&gt;<br />&gt; So I'd say xlate_dev_mem_ptr() looks messy, but is possibly a bit more<br />&gt; robust in this regard?<br /><br />It clearly does work. Slowly, but work.<br /><br />At least it works on x86. On some other architectures /dev/mem<br />definitely cannot possibly handle IO memory correctly, because you<br />can't even try to just read it as regular memory.<br /><br />But those architectures are few and likely not relevant anyway (eg early alpha).<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
