    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/8/27/837">First message in thread</a></li><li><a href="/lkml/2019/8/29/1562">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/30/622">Josh Poimboeuf</a><ul><li><a href="/lkml/2019/8/30/676">David Laight</a></li><li class="origin"><a href="/lkml/2019/8/30/707">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/30/707">David Laight</a><ul><li><a href="/lkml/2019/8/30/714">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/8/30/787">Josh Poimboeuf</a><ul><li><a href="/lkml/2019/9/2/241">David Laight</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Aug 2019 08:48:49 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: objtool warning "uses BP as a scratch register" with clang-9</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 30, 2019 at 8:02 AM Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; For KASAN, the Clang threshold for inserting memset() is *2* consecutive<br />&gt; writes instead of 17.  Isn't that likely to cause tearing-related<br />&gt; surprises?<br /><br />Tearing isn't likely to be a problem.<br /><br />It's not like memcpy() does byte-by-byte copies. If you pass it a<br />word-aligned pointer, it will do word-aligned accesses simply for<br />performance reasons.<br /><br />Even on x86, where we use "rep movsb", we (a) tend to disable it for<br />small copies and (b) it turns out that microcode that does the<br />optimized movsb (which is the only case we use it) probably ends up<br />doing atomic things anyway. Note the "probably". I don't have<br />microcode source code, but there are other indications like "we know<br />it doesn't take interrupts on a byte-per-byte level, only on the<br />cacheline level".<br /><br />So it's probably not an issue from a tearing standpoint - but it<br />worries me because of "this has to be a leaf function" kind of issues<br />where we may be using individual stores on purpose. We do have things<br />like that.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
