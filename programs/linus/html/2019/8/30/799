    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/8/30/574">First message in thread</a></li><li><a href="/lkml/2019/8/30/743">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/30/779">Oleg Nesterov</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/8/30/908">(Eric W. Biederman)</a><ul><li><a href="/lkml/2019/9/2/539">Oleg Nesterov</a><ul><li><a href="/lkml/2019/9/2/556">Peter Zijlstra</a><ul><li><a href="/lkml/2019/9/2/636">Oleg Nesterov</a></li></ul></li><li><a href="/lkml/2019/9/2/731">(Eric W. Biederman)</a><ul><li><a href="/lkml/2019/9/2/742">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Aug 2019 09:58:15 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [BUG] Use of probe_kernel_address() in task_rcu_dereference() without checking return value</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 30, 2019 at 9:44 AM Oleg Nesterov &lt;oleg&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; -&gt;curr is not protected by RCU, the last schedule does put_task_struct()<br />&gt; in finish_task_switch().<br /><br />Right you are.<br /><br />It's only the sighand allocation itself that is RCU-allocated (using<br />SLAB_TYPESAFE_BY_RCU, so only the backing page freeing is RCU-delayed,<br />it can be re-used immediately).<br /><br />For some reason I thought the main thread struct was too, but that was<br />just my fevered imagination.<br /><br />&gt; Of course we can change this and add another call_rcu (actually we can do<br />&gt; better), and after that we do not need task_rcu_dereference() at all.<br /><br />No, we wouldn't do another RCU call, we'd just make task_struct_cachep<br />be SLAB_TYPESAFE_BY_RCU too. In the reuse case, you have no cost at<br />all.<br /><br />However, the overhead of RCU freeing is real. It's much less for the<br />SLAB_TYPESAFE_BY_RCU case (at least for small allocations) than for<br />"free every single allocaiton by RCU", but it's still very real.<br /><br />(For small allocations, you only take the RCU hit when you free the<br />backing store of the pages, which is much less frequent - but for<br />something big like the task_struct, I don't know how much of a<br />buffering the slab allocation ends up being)<br /><br />So it's probably better to take the hit at task_rcu_dereference() than<br />add RCU logic to the task freeing.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
