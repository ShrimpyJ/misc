    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/5/18/532">First message in thread</a></li><li><a href="/lkml/2019/8/16/873">Joel Fernandes</a><ul><li><a href="/lkml/2019/8/16/937">Valentin Schneider</a><ul><li class="origin"><a href="/lkml/2019/8/16/982">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/16/982">Mathieu Desnoyers</a></li><li><a href="/lkml/2019/8/17/14">"Paul E. McKenney"</a><ul><li><a href="/lkml/2019/8/17/83">Linus Torvalds</a></li><li><a href="/lkml/2019/8/20/669">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Aug 2019 15:57:43 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/1] Fix: trace sched switch start/stop racy updates</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 16, 2019 at 3:27 PM Valentin Schneider<br />&lt;valentin.schneider&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; How would you differentiate optimizations you want from those you don't with<br />&gt; just a flag? There's a reason we use volatile casts instead of declaring<br />&gt; everything volatile: we actually *want* those optimizations. It just so<br />&gt; happens that we don't want them *in some places*, and we have tools to tag<br />&gt; them as such.<br /><br />We actually disable lots of "valid" (read: the standard allows them,<br />but they are completely wrong for the kernel) optimizations because<br />they are wrong.<br /><br />The whole type-based alias thing is just wrong. The C standards body<br />was incompetent to allow that garbage. So we disable it.<br /><br />If you can *prove* that no aliasing exists, go ahead and re-order<br />accesses. But no guesses based on random types.<br /><br />Similarly, if some compiler decides that it's ok to make speculative<br />writes (knowing it will over-write it with the right data later) to<br />data that is possibly visible to other threads, then such an<br />"optimization" needs to just be disabled. It might help some<br />benchmark, and if you read the standard just the right way it might be<br />allowed - but that doesn't make it valid.<br /><br />We already had situations like that, where compiler people thought it<br />would be ok (for example) to turns a narrow write into a wider<br />read-modify-write because it had already done the wider read for other<br />reasons.<br /><br />Again, the original C standard "allows" that in theory, because the<br />original C standard doesn't take threading into account. In fact, the<br />alpha architecture made actively bad design decisions based on that<br />(incorrect) assumption.<br /><br />It turns out that in that case, even non-kernel people rebelled, and<br />it's apparently thankfully not allowed in newer versions of the<br />standard, exactly because threading has become a thing. You can't<br />magically write back unrelated variables just because they might be<br />next-door neighbors and share a word.<br /><br />So no, we do *not* in general just say that we want any random<br />optimizations. A compiler that turns a single write into something<br />else is almost certainly something that shouldn't be allowed near the<br />kernel.<br /><br />We add READ_ONCE and WRITE_ONCE annotations when they make sense. Not<br />because of some theoretical "compiler is free to do garbage"<br />arguments. If such garbage happens, we need to fix the compiler, the<br />same way we already do with<br /><br />  -fno-strict-aliasing<br />  -fno-delete-null-pointer-checks<br />  -fno-strict-overflow<br /><br />because all those "optimizations" are just fundamentally unsafe and wrong.<br /><br />I really wish the compiler would never take advantage of "I can prove<br />this is undefined behavior" kind of things when it comes to the kernel<br />(or any other projects I am involved with, for that matter). If you<br />can prove that, then you shouldn't decide to generate random code<br />without a big warning. But that's what those optimizations that we<br />disable effectively all do.<br /><br />I'd love to have a flag that says "all undefined behavior is treated<br />as implementation-defined". There's a somewhat subtle - but very<br />important - difference there.<br /><br />And that's what some hypothetical speculative write optimizations do<br />too. I do not believe they are valid for the kernel. If the code says<br /><br />   if (a)<br />      global_var = 1<br />   else<br />      global_var = 0<br /><br />then the compiler had better not turn that into<br /><br />     global_var = 0<br />     if (a)<br />         global_var = 1<br /><br />even if there isn't a volatile there. But yes, we've had compiler<br />writers that say "if you read the specs, that's ok".<br /><br />No, it's not ok. Because reality trumps any weasel-spec-reading.<br /><br />And happily, I don't think we've ever really seen a compiler that we<br />use that actually does the above kind of speculative write thing (but<br />doing it for your own local variables that can't be seen by other<br />threads of execution - go wild).<br /><br />So in general, we very much expect the compiler to do sane code<br />generation, and not (for example) do store tearing on normal<br />word-sized things or add writes that weren't there originally etc.<br /><br />And yes, reads are different from writes. Reads don't have the same<br />kind of "other threads of execution can see them" effects, so a<br />compiler turning a single read into multiple reads is much more<br />realistic and not the same kind of "we need to expect a certain kind<br />of sanity from the compiler" issue.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
