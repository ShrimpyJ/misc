    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/8/29/205">First message in thread</a></li><li><a href="/lkml/2019/8/29/205">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/8/29/187">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/29/200">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/8/29/987">Joe Perches</a></li></ul></li><li><a href="/lkml/2019/8/29/202">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/29/203">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/29/204">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/29/957">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/30/212">Rasmus Villemoes</a></li></ul></li><li><a href="/lkml/2019/8/29/1091">Nick Desaulniers</a><ul><li class="origin"><a href="/lkml/2019/8/29/1255">Linus Torvalds</a><ul><li><a href="/lkml/2019/8/29/1255">Nadav Amit</a></li><li><a href="/lkml/2019/8/29/1347">Borislav Petkov</a></li></ul></li><li><a href="/lkml/2019/8/29/1436">Masahiro Yamada</a></li></ul></li><li><a href="/lkml/2019/8/30/1055">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/8/30/1056">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/4/1872">Nick Desaulniers</a></li></ul></li><li><a href="/lkml/2019/8/30/1057">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/4/1880">Nick Desaulniers</a><ul><li><a href="/lkml/2019/9/5/272">Rasmus Villemoes</a></li></ul></li></ul></li><li><a href="/lkml/2019/8/30/1058">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/4/1885">Nick Desaulniers</a><ul><li><a href="/lkml/2019/9/5/38">Nadav Amit</a></li><li><a href="/lkml/2019/9/5/366">Rasmus Villemoes</a></li></ul></li></ul></li><li><a href="/lkml/2019/8/30/1059">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/30/1060">Rasmus Villemoes</a></li><li><a href="/lkml/2019/8/30/1061">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/4/1875">Nick Desaulniers</a><ul><li><a href="/lkml/2019/9/4/1879">Miguel Ojeda</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/12/642">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/12/643">Rasmus Villemoes</a></li><li><a href="/lkml/2019/9/12/644">Rasmus Villemoes</a></li><li><a href="/lkml/2019/9/12/645">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/13/10">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2019/9/12/646">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/13/9">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2019/9/12/647">Rasmus Villemoes</a></li><li><a href="/lkml/2019/9/12/649">Rasmus Villemoes</a><ul><li><a href="/lkml/2019/9/29/44">Greg Kroah-Hartman</a></li></ul></li><li><a href="/lkml/2019/9/12/650">Miguel Ojeda</a><ul><li><a href="/lkml/2019/9/13/25">Rasmus Villemoes</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Aug 2019 11:15:04 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH 0/5] make use of gcc 9's "asm inline()"</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 29, 2019 at 10:36 AM Nick Desaulniers<br />&lt;ndesaulniers&#64;google.com&gt; wrote:<br />&gt;<br />&gt; I'm curious what "the size of the asm" means, and how it differs<br />&gt; precisely from "how many instructions GCC thinks it is."  I would<br />&gt; think those are one and the same?  Or maybe "the size of the asm"<br />&gt; means the size in bytes when assembled to machine code, as opposed to<br />&gt; the count of assembly instructions?<br /><br />The problem is that we do different sections in the inline asm, and<br />the instruction counts are completely bogus as a result.<br /><br />The actual instruction in the code stream may be just a single<br />instruction. But the out-of-line sections can be multiple instructions<br />and/or a data section that contains exception information.<br /><br />So we want the asm inlined, because the _inline_ part (and the hot<br />instruction) is small, even though the asm technically maybe generates<br />many more bytes of additional data.<br /><br />The worst offenders for this tend to be<br /><br /> - various exception tables for user accesses etc<br /><br /> - "alternatives" where we list two or more different asm alternatives<br />and then pick the right one at boot time depending on CPU ID flags<br /><br /> - "BUG_ON()" instructions where there's a "ud2" instruction and<br />various data annotations going with it<br /><br />so gcc may be "technically correct" that the inline asm statement<br />contains ten instructions or more, but the actual instruction _code_<br />footprint in the asm is likely just a single instruction or two.<br /><br />The statement counting is also completely off by the fact that some of<br />the "statements" are assembler directives (ie the<br />".pushsection"/".popsection" lines etc). So some of it is that the<br />instruction counting is off, but the largest part is that it's just<br />not relevant to the code footprint in that function.<br /><br />Un-inlining a function because it contains a single inline asm<br />instruction is not productive. Yes, it might result in a smaller<br />binary over-all (because all those other non-code sections do take up<br />some space), but it actually results in a bigger code footprint.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
