    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/10/6/882">First message in thread</a></li><li><a href="/lkml/2019/10/13/140">Al Viro</a><ul><li><a href="/lkml/2019/10/13/144">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/14/955">Michael Ellerman</a></li></ul></li><li><a href="/lkml/2019/10/15/876">Al Viro</a><ul><li class="origin"><a href="/lkml/2019/10/15/977">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/15/977">Al Viro</a><ul><li><a href="/lkml/2019/10/15/999">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2019/10/16/584">Al Viro</a><ul><li><a href="/lkml/2019/10/16/604">Thomas Gleixner</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Oct 2019 12:00:34 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Convert filldir[64]() from __put_user() to unsafe_put_user()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Oct 15, 2019 at 11:08 AM Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; Another question: right now we have<br />&gt;         if (!access_ok(uaddr, sizeof(u32)))<br />&gt;                 return -EFAULT;<br />&gt;<br />&gt;         ret = arch_futex_atomic_op_inuser(op, oparg, &amp;oldval, uaddr);<br />&gt;         if (ret)<br />&gt;                 return ret;<br />&gt; in kernel/futex.c.  Would there be any objections to moving access_ok()<br />&gt; inside the instances and moving pagefault_disable()/pagefault_enable() outside?<br /><br />I think we should remove all the "atomic" versions, and just make the<br />rule be that if you want atomic, you surround it with<br />pagefault_disable()/pagefault_enable().<br /><br />That covers not just the futex ops (where "atomic" is actually<br />somewhat ambiguous - the ops themselves are atomic too, so the naming<br />might stay, although arguably the "futex" part makes that pointless<br />too), but also copy_to_user_inatomic() and the powerpc version of<br />__get_user_inatomic().<br /><br />So we'd aim to get rid of all the "inatomic" ones entirely.<br /><br />Same ultimately probably goes for the NMI versions. We should just<br />make it be a rule that we can use all of the user access functions<br />with pagefault_{dis,en}able() around them, and they'll be "safe" to<br />use in atomic context.<br /><br />One issue with the NMI versions is that they actually want to avoid<br />the current value of set_fs().  So copy_from_user_nmi() (at least on<br />x86) is special in that it does<br /><br />        if (__range_not_ok(from, n, TASK_SIZE))<br />                return n;<br /><br />instead of access_ok() because of that issue.<br /><br />NMI also has some other issues (nmi_uaccess_okay() on x86, at least),<br />but those *probably* could be handled at page fault time instead.<br /><br />Anyway, NMI is so special that I'd suggest leaving it for later, but<br />the non-NMI atomic accesses I would suggest you clean up at the same<br />time.<br /><br />I think the *only* reason we have the "inatomic()" versions is that<br />the regular ones do that "might_fault()" testing unconditionally, and<br />might_fault() _used_ to be just a might_sleep() - so it's not about<br />functionality per se, it's about "we have this sanity check that we<br />need to undo".<br /><br />We've already made "might_fault()" look at pagefault_disabled(), so I<br />think a lot of the reasons for inatomic are entirely historical.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
