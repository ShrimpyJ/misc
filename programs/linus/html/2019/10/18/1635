    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/10/18/1238">First message in thread</a></li><li><a href="/lkml/2019/10/18/1238">=?iso-8859-1?Q?J=F6rn?= Engel</a><ul><li><a href="/lkml/2019/10/18/1593">Linus Torvalds</a></li><li class="origin"><a href="/lkml/2019/10/19/25">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/19/25">Ingo Molnar</a><ul><li><a href="/lkml/2019/10/19/69">Thomas Gleixner</a></li></ul></li><li><a href="/lkml/2019/10/19/73">Thomas Gleixner</a><ul><li><a href="/lkml/2019/10/19/122">=?iso-8859-1?Q?J=F6rn?= Engel</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 18 Oct 2019 22:25:32 -0400</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] random: make try_to_generate_entropy() more robust</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 18, 2019 at 4:42 PM Jörn Engel &lt;joern&#64;purestorage.com&gt; wrote:<br />&gt;<br />&gt; We can generate entropy on almost any CPU, even if it doesn't provide a<br />&gt; high-resolution timer for random_get_entropy().  As long as the CPU is<br />&gt; not idle, it changed the register file every few cycles.  As long as the<br />&gt; ALU isn't fully synchronized with the timer, the drift between the<br />&gt; register file and the timer is enough to generate entropy from.<br /><br />&gt;  static void entropy_timer(struct timer_list *t)<br />&gt;  {<br />&gt; +     struct pt_regs *regs = get_irq_regs();<br />&gt; +<br />&gt; +     /*<br />&gt; +      * Even if we don't have a high-resolution timer in our system,<br />&gt; +      * the register file itself is a high-resolution timer.  It<br />&gt; +      * isn't monotonic or particularly useful to read the current<br />&gt; +      * time.  But it changes with every retired instruction, which<br />&gt; +      * is enough to generate entropy from.<br />&gt; +      */<br />&gt; +     mix_pool_bytes(&amp;input_pool, regs, sizeof(*regs));<br /><br />Ok, so I still like this conceptually, but I'm not entirely sure that<br />get_irq_regs() works reliably in a timer. It's done from softirq<br />TIMER_SOFTIRQ context, so not necessarily _in_ an interrupt.<br /><br />Now, admittedly this code doesn't really need "reliably". The odd<br />occasional hickup would arguably just add more noise. And I think the<br />code works fine. get_irq_regs() will return a pointer to the last<br />interrupt or exception frame on the current CPU, and I guess it's all<br />fine. But let's bring in Thomas, who was not only active in the<br />randomness discussion, but might also have stronger opinions on this<br />get_irq_regs() usage.<br /><br />Thomas, opinions? Using the register state (while we're doing the<br />whole entropy load with scheduling etc) looks like a good source of<br />high-entropy data outside of just the TSC, so it does seem like a very<br />valid model. But I want to run it past more people first, and Thomas<br />is the obvious victim^Wchoice.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
