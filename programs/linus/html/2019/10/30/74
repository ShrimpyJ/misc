    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/10/28/191">First message in thread</a></li><li><a href="/lkml/2019/10/29/801">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/30/69">"Kirill A. Shutemov"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/10/30/245">Steven Whitehouse</a><ul><li><a href="/lkml/2019/10/30/264">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/31/261">Steven Whitehouse</a><ul><li><a href="/lkml/2019/11/22/2134">=?UTF-8?Q?Andreas_Gr=C3=BCnbacher?=</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Oct 2019 08:02:14 +0100</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm/filemap: do not allocate cache pages beyond end of file at read</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 30, 2019 at 7:50 AM Kirill A. Shutemov &lt;kirill&#64;shutemov.name&gt; wrote:<br />&gt;<br />&gt; I don't know much about filesystems, but can't size of file change after<br />&gt; the open() under network filesystem? Revlidation on read looks like an<br />&gt; requirement anyway, no?<br /><br />Requirement? No. But QoS issue, yes.<br /><br />But note that NFS already does that. Look at nfs_file_read(), and<br />notice how it's not using generic_file_buffered_read() directly, it's<br />doing its own thing first with checking for direct-IO, but then doing<br />that nfs_revalidate_mapping() that checks whether caches should be<br />re-validated.<br /><br />It's not just size of the file, the actual cached contents may need<br />invalidating too etc.<br /><br />And note how the generic page cache reader doesn't need to care. If<br />what the generic code does isn't enough, or is the wrong thing, the<br />filesystem simply shouldn't use it, or, like NFS, do its own thing<br />first/last.<br /><br />So I think the "some filesystems may have other rules" is irrelevant.<br />If they do have other rules, it's _their_ issue, not the issue of the<br />generic page cache read logic.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
