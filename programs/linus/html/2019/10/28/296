    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/10/28/191">First message in thread</a></li><li><a href="/lkml/2019/10/28/191">Konstantin Khlebnikov</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2019/10/28/299">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2019/10/28/312">Linus Torvalds</a><ul><li><a href="/lkml/2019/10/28/334">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2019/10/29/665">Konstantin Khlebnikov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 28 Oct 2019 13:39:46 +0100</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm/filemap: do not allocate cache pages beyond end of file at read</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 28, 2019 at 10:59 AM Konstantin Khlebnikov<br />&lt;khlebnikov&#64;yandex-team.ru&gt; wrote:<br />&gt;<br />&gt; Page cache could contain pages beyond end of file during write or<br />&gt; if read races with truncate. But generic_file_buffered_read() always<br />&gt; allocates unneeded pages beyond eof if somebody reads here and one<br />&gt; extra page at the end if file size is page-aligned.<br /><br />I wonder if we could just do something like this instead:<br /><br />  diff --git a/mm/filemap.c b/mm/filemap.c<br />  index 85b7d087eb45..80b08433c93a 100644<br />  --- a/mm/filemap.c<br />  +++ b/mm/filemap.c<br />  &#64;&#64; -2013,7 +2013,7 &#64;&#64; static ssize_t generic_file_buffered_read(<br />        struct address_space *mapping = filp-&gt;f_mapping;<br />        struct inode *inode = mapping-&gt;host;<br />        struct file_ra_state *ra = &amp;filp-&gt;f_ra;<br />  -     loff_t *ppos = &amp;iocb-&gt;ki_pos;<br />  +     loff_t *ppos = &amp;iocb-&gt;ki_pos, size;<br />        pgoff_t index;<br />        pgoff_t last_index;<br />        pgoff_t prev_index;<br />  &#64;&#64; -2021,9 +2021,10 &#64;&#64; static ssize_t generic_file_buffered_read(<br />        unsigned int prev_offset;<br />        int error = 0;<br /><br />  -     if (unlikely(*ppos &gt;= inode-&gt;i_sb-&gt;s_maxbytes))<br />  +     size = i_size_read(inode);<br />  +     if (unlikely(*ppos &gt;= size))<br />                return 0;<br />  -     iov_iter_truncate(iter, inode-&gt;i_sb-&gt;s_maxbytes);<br />  +     iov_iter_truncate(iter, size);<br /><br />        index = *ppos &gt;&gt; PAGE_SHIFT;<br />        prev_index = ra-&gt;prev_pos &gt;&gt; PAGE_SHIFT;<br /><br />and yes, we still need to re-check the inode size after we've read the<br />page cache page (since it might have changed during the IO), but the<br />above seems fairly benign and simple.<br /><br />Hmm?<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
