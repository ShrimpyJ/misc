    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/28/96">First message in thread</a></li><li><a href="/lkml/2019/9/30/518">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/30/532">Peter Zijlstra</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/10/1/236">David Laight</a><ul><li><a href="/lkml/2019/10/15/1093">Thomas Gleixner</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Sep 2019 10:03:46 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: x86/random: Speculation to the rescue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 30, 2019 at 9:32 AM Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; In my experience LFSRs are good at defeating branch predictors, which<br />&gt; would make even in-order cores suffer lots of branch misses. And that<br />&gt; might be enough, maybe.<br /><br />Agreed, branch mis-prediction is likely fairly hard to take into<br />account ahead of time even in an in-order CPU.<br /><br />But when you know the LFSR, and you know the architecture, you could<br />just re-create the timing, and have a fairly high chance of getting<br />the same complex pattern.<br /><br />And in the simple enough (ie bad) case - the embedded world - you<br />don't need to "know" or do any deep analysis of anything or try to<br />predict it ahead of time. You just look at what another identical<br />machine does when given the identical starting point.<br /><br />So I don't think an LFSR is all that great on its own. It's<br />complicated to predict, and it gives odd patterns, but on an in-order<br />core I'm not convinced it gives sufficiently _different_ odd patterns<br />across booting.<br /><br />This, btw, is why you shouldn't trust the "I ran the thing a billion<br />times" on my PC, even if you were to have an old in-order Atom CPU<br />available to you. If you didn't restart the whole CPU state from an<br />identical starting point as you re-run them, the differences you see<br />may simply not be real. They may be an artificial effect of cumulative<br />changes to internal CPU branch prediction arrays and cache tag layout.<br /><br />I don't think it's a huge issue if you have a real load, and you have<br />_any_ source of entropy at all, but I really do not think that an LFSR<br />is necessarily a good idea. It's just _too_ identical across reboots,<br />and will have very similar (but yes, complex due to branch prediction)<br />behavior across different runs.<br /><br />Of course, in the "completely and utterly identical state and<br />absolutely no timing differences anywhere" situation, even my "take<br />timer interrupts and force at least cache misses on SMP" model doesn't<br />protect you from just re-running the 100% identical sequence.<br /><br />But when it's a more complex load than an LFSR, I personally at least<br />feel better about it. An LFSR I can well imagine will give the exact<br />same (odd) timing patterns across boots even if there were earlier<br />minor changes. But hopefully a bigger load with just a more complex<br />footprint will have more of that. More cache misses, more DRAM<br />accesses, more branch mispredicts, more "pipeline was broken in a<br />_slightly_ different place due to timer".<br /><br />It is also, btw, why I don't mix in TSC _differences_ when I mix<br />things in. I think it's better to actually mix in the TSC value<br />itself. Even if you re-run the LFSR, and it has the exact same branch<br />mis-predicts (because it's the same LFSR), if there were any timing<br />differences from _anything_ else before you ran that LFSR, then the<br />bits you'll be mixing in are different across boots. But if you mix in<br />the relative difference, you might be mixing in the identical bits.<br /><br />The only real difference is only the initial TSC value, of course, so<br />the added entropy is small. But when we're talking about trying to get<br />to a total of 256 bits, a couple of bits here and there end up<br />mattering.<br /><br />But no. Never any _guarantees_. There is no absolute security. Only best effort.<br /><br />An OoO CPU will have a _lot_ more internal state, and a lot of things<br />that perturb that internal state, and that will make small changes in<br />timing cause more chaos in the end. Much less to worry about.<br /><br />An in-order CPU will have less internal state, and so less<br />perturbations and sources of real entropy from small differences. We<br />can only hope there is _some_.<br /><br />It's not like our existing "depend on external interrupt timing" is<br />any hard guarantee either, regardless of how long we wait or how many<br />external interrupts we'd get.<br /><br />It's always a "at some point you have to make a judgement call".<br /><br />And we all have different levels of comfort about where that point<br />ends up being.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
