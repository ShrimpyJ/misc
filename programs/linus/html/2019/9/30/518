    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/28/96">First message in thread</a></li><li><a href="/lkml/2019/9/29/501">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/30/340">"Theodore Y. Ts'o"</a><ul><li class="origin"><a href="/lkml/2019/9/30/532">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/30/532">Peter Zijlstra</a><ul><li><a href="/lkml/2019/9/30/550">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/10/1/236">David Laight</a><ul><li><a href="/lkml/2019/10/15/1093">Thomas Gleixner</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Sep 2019 09:15:55 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: x86/random: Speculation to the rescue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 30, 2019 at 6:16 AM Theodore Y. Ts'o &lt;tytso&#64;mit.edu&gt; wrote:<br />&gt;<br />&gt; Which is to say, I'm still worried that people with deep access to the<br />&gt; implementation details of a CPU might be able to reverse engineer what<br />&gt; a jitter entropy scheme produces.  This is why I'd be curious to see<br />&gt; the results when someone tries to attack a jitter scheme on a fully<br />&gt; open, simple architecture such as RISC-V.<br /><br />Oh, I agree.<br /><br />One of the reasons I didn't like some of the other jitter entropy<br />things was that they seemed to rely _entirely_ on just purely<br />low-level CPU unpredictability. I think that exists, but I think it<br />makes for problems for really simple cores.<br /><br />Timing over a bigger thing and an actual interrupt (even if it's<br />"just" a timer interrupt, which is arguably much closer to the CPU and<br />has a much higher likelihood of having common frequency domains with<br />the cycle counter etc) means that I'm pretty damn convinced that a big<br />complex CPU will absolutely see issues, even if it has big caches.<br /><br />But it _also_ means that if you have a small and excessively stupid<br />in-order CPU, I can almost guarantee that you will at least have cache<br />misses likely all the way out to memory. So a CPU-only loop like the<br />LFSR thing that Thomas reports generates entropy even on its own would<br />likely generate nothing at all on a simple in-order core - but I do<br />think that with timers and real cache misses etc, it's going to be<br />really really hard to try to figure out cycle counters even if you're<br />a CPU expert.<br /><br />But the embedded market with small cores and 100% identical machines<br />and 100% identical system images is always going to be a potential<br />huge problem.<br /><br />If somebody has connections to RISC-V hw people, maybe they could<br />bring this issue up with them?<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
