    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/15/199">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/15/202">Willy Tarreau</a><ul><li class="origin"><a href="/lkml/2019/9/15/216">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/15/216">Willy Tarreau</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 15 Sep 2019 12:31:42 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v2] random: optionally block in getrandom(2) when the CRNG is uninitialized</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 15, 2019 at 12:18 PM Willy Tarreau &lt;w&#64;1wt.eu&gt; wrote:<br />&gt;<br />&gt; Oh no I definitely don't want this behavior at all for urandom, what<br />&gt; I'm saying is that as long as getrandom() will have a lower quality<br />&gt; of service than /dev/urandom for non-important randoms<br /><br />Ahh, here you're talking about the fact that it can block at all being<br />"lower quality".<br /><br />I do agree that getrandom() is doing some odd things. It has the<br />"total blocking mode" of /dev/random (if you pass it GRND_RANDOM), but<br />it has no mode of replacing /dev/urandom.<br /><br />So if you want the /dev/urandom bvehavior, then no, getrandom() simply<br />has never given you that.<br /><br />Use /dev/urandom if you want that.<br /><br />Sad, but there it is. We could have a new flag (GRND_URANDOM) that<br />actually gives the /dev/urandom behavior. But the ostensible reason<br />for getrandom() was the blocking for entropy. See commit c6e9d6f38894<br />("random: introduce getrandom(2) system call") from back in 2014.<br /><br />The fact that it took five years to hit this problem is probably due<br />to two reasons:<br /><br /> (a) we're actually pretty good about initializing the entropy pool<br />fairly quickly most of the time<br /><br /> (b) people who started using 'getrandom()' and hit this issue<br />presumably then backed away from it slowly and just used /dev/urandom<br />instead.<br /><br />So it needed an actual "oops, we don't get as much entropy from the<br />filesystem accesses" situation to actually turn into a problem. And<br />presumably the people who tried out things like nvdimm filesystems<br />never used Arch, and never used a sufficiently new systemd to see the<br />"oh, without disk interrupts you don't get enough randomness to boot".<br /><br />One option is to just say that GRND_URANDOM is the default (ie never<br />block, do the one-liner log entry to warn) and add a _new_ flag that<br />says "block for entropy". But if we do that, then I seriously think<br />that the new behavior should have that timeout limiter.<br /><br />For 5.3, I'll just revert the ext4 change, stupid as that is. That<br />avoids the regression, even if it doesn't avoid the fundamental<br />problem. And gives us time to discuss it.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
