    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/20/813">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/817">Willy Tarreau</a></li><li><a href="/lkml/2019/9/20/857">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2019/9/20/901">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/901">"Alexander E. Patrakov"</a></li><li><a href="/lkml/2019/9/20/912">Matthew Garrett</a></li><li><a href="/lkml/2019/9/20/917">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/20/1002">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2019/9/21/10">Florian Weimer</a><ul><li><a href="/lkml/2019/9/23/742">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/26/683">"Ahmed S. Darwish"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Sep 2019 12:51:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 20, 2019 at 12:12 PM Andy Lutomirski &lt;luto&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; The problem is that new programs will have to try the new flag value<br />&gt; and, if it returns -EINVAL, fall back to 0.  This isn't so great.<br /><br />Don't be silly.<br /><br />Of course they will do that, but so what? With a new kernel, they'll<br />get the behavior they expect. And with an old kernel, they'll get the<br />behavior they expect.<br /><br />They'd never fall back to to "0 means something I didn't want",<br />exactly because we'd make this new flag be the first change.<br /><br />&gt; Wait, are you suggesting that 0 means invoke jitter-entropy or<br />&gt; whatever and GRND_SECURE_BLOCKING means not wait forever and deadlock?<br />&gt;  That's no good -- people will want to continue using 0 because the<br />&gt; behavior is better.<br /><br />I assume that "not wait forever" was meant to be "wait forever".<br /><br />So the one thing we have to do is break the "0 waits forever".  I<br />guarantee that will happen. I will override Ted if he just NAk's it,<br />because we simply _cannot_ continue with it.<br /><br />So we absolutely _will_ come up with some way 0 ends the wait. Whether<br />it's _just_ a timeout, or whether it's jitter-entropy or whatever, it<br />will happen.<br /><br />But we'll also make getrandom(0) do the annoying warning, because it's<br />just ambiguous. And I suspect you'll find that a lot of security<br />people don't really like jitter-entropy, at least not in whatever<br />cut-down format we'll likely have to use in the kernel.<br /><br />And we'll also have to make getrandom(0) be really _timely_. Security<br />people would likely rather wait for minutes before they are happy with<br />it. But because it's a boot constraint as things are now, it will not<br />just be jitter-entropy, it will be _accelerated_ jitter-entropy in 15<br />seconds or whatever, and since it can't use up all of CPU time, it's<br />realistically more like "15 second timeout, but less of actual CPU<br />time for jitter".<br /><br />We can try to be clever with a background thread and a lot of<br />yielding(), so that if the CPU is actually idle we'll get most of that<br />15 seconds for whatever jitter, but end result is that it's still<br />accelerated.<br /><br />Do I believe we can do a good job in that kind of timeframe?<br />Absolutely. The whole point should be that it's still "good enough",<br />and as has been pointed out, that same jitter entropy that people are<br />worried about is just done in user space right now instead.<br /><br />But do I believe that security people would prefer a non-accelerated<br />GRND_SECURE_BLOCKING? Yes I do. That doesn't mean that<br />GRND_SECURE_BLOCKING shouldn't use jitter entropy too, but it doesn't<br />need the same kind of "let's hurry this up because it might be during<br />early boot and block things".<br /><br />That said, if we can all convince everybody (hah!) that jitter entropy<br />in the kernel would be sufficient, then we can make the whole point<br />entirely moot, and just say "we'll just change crng_wait() to do<br />jitter entropy instead and be done with it. Then any getrandom() user<br />will just basically wait for a (very limited) time and the system will<br />be happy.<br /><br />If that is the case we wouldn't need new flags at all. But I don't<br />think you can make everybody agree to that, which is why I suspect<br />we'll need the new flag, and I'll just take the heat for saying "0 is<br />now off limits, because it does this thing that a lot of people<br />dislike".<br /><br />&gt; IMO this is confusing.  The GRND_RANDOM flag was IMO a mistake and<br />&gt; should just be retired.  Let's enumerate useful cases and then give<br />&gt; them sane values.<br /><br /><br />That's basically what I'm doing. I enumerate the new values.<br /><br />But the enumerations have hidden meaning, because the actual bits do<br />matter. The GRND_EXPLICIT bit isn't supposed to be used by any user,<br />but it has the value it has because it makes old kernels return<br />-EINVAL.<br /><br />But if people hate the bit names, we can just do an enum and be done with it:<br /><br />   enum grnd_flags {<br />      GRND_NONBLOCK = 1,<br />      GRND_RANDOM, // Don't use!<br />      GRND_RANDOM_NONBLOCK, // Don't use<br />      GRND_UNUSED,<br />      GRND_INSECURE,<br />      GRND_SECURE_BLOCKING,<br />      GRND_SECURE_NONBLOCKING,<br />  };<br /><br />but the values now have a _hidden_ pattern (because we currently have<br />that "| GRND_NONBLOCK" pattern that I want to make sure still<br />continues to work, rather than give unexpected behavior in case<br />somebody continues to use it).<br /><br />So the _only_ difference between the above and what I suggested is<br />that I made the bit pattern explicit rather than hidden in the value.<br /><br />&gt; And the only real question is how to map existing users to these<br />&gt; semantics.  I see two sensible choices:<br />&gt;<br />&gt; 1. 0 means "secure, blocking". I think this is not what we'd do if we<br />&gt; could go back in time and chage the ABI from day 1, but I think it's<br />&gt; actually good enough.  As long as this mode won't deadlock, it's not<br />&gt; *that* bad if programs are using it when they wanted "insecure".<br /><br />It's exactly that "as long as it won't deadlock" that is our current problem.<br /><br />It *does* deadlock.<br /><br />So it can't mean "blocking" in any long-term meaning.<br /><br />It can mean "blocks for up to 15 seconds" or something like that. I'd<br />honestly prefer a smaller number, but I think 15 seconds is an<br />acceptable "your user space is buggy, but we won't make you think the<br />machine hung".<br /><br />&gt; 2. 0 means "secure, blocking, but warn".  Some new value means<br />&gt; "secure, blocking, don't warn".  The problem is that new applications<br />&gt; will have to fall back to 0 to continue supporting old kernels.<br /><br />The same comment about blocking.<br /><br />Maybe you came in in the middle, and didn't see the whole "reduced IO<br />patterns means that boot blocks forever" part of the original problem.<br /><br />THAT is why 0 will absolutely change behaviour.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
