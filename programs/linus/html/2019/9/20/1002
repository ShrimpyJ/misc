    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/20/880">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/901">"Alexander E. Patrakov"</a></li><li><a href="/lkml/2019/9/20/912">Matthew Garrett</a></li><li><a href="/lkml/2019/9/20/917">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2019/9/20/1043">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/1043">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/20/1094">Willy Tarreau</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Sep 2019 15:44:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 20, 2019 at 1:51 PM Andy Lutomirski &lt;luto&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; To be clear, when I say "blocking", I mean "blocks until we're ready,<br />&gt; but we make sure we're ready in a moderately timely manner".<br /><br />.. an I want a pony.<br /><br />The problem is that you start from an assumption that we simply can't<br />seem to do.<br /><br />&gt; In other words, I want GRND_SECURE_BLOCKING and /dev/random reads to<br />&gt; genuinely always work and to genuinely never take much longer than 5s.<br />&gt; I don't want a special case where they fail.<br /><br />Honestly, if that's the case and we _had_ such a methoc of<br />initializing the rng, then I suspect we could just ignore the flags<br />entirely, with the possible exception of GRND_NONBLOCK. And even that<br />is "possible exception", because once your worst-case is a one-time<br />delay of 5s at boot time thing, you might as well consider it<br />nonblocking in general.<br /><br />Yes, there are some in-kernel users that really can't afford to do<br />even that 5s delay (not just may they be atomic, but more likely it's<br />just that we don't want to delay _everything_ by 5s), but they don't<br />use the getrandom() system call anyway.<br /><br />&gt; The exposed user APIs are, subject to bikeshedding that can happen<br />&gt; later over the actual values, etc:<br /><br />So the thing is, you start from the impossible assumption, and _if_<br />you hold that assumption then we might as well just keep the existing<br />"zero means blocking", because nobody mind.<br /><br />I'd love to say "yes, we can guarantee good enough entropy for<br />everybody in 5s and we don't even need to warn about it, because<br />everybody will be comfortable with the state of our entropy at that<br />point".<br /><br />It sounds like a _lovely_ model.<br /><br />But honestly, it simply sounds unlikely.<br /><br />Now, there are different kinds of unlikely.<br /><br />In particular, if you actually have a CPU cycle counter that actually<br />runs at least on the same order of magnitude as the CPU frequency -<br />then I believe in the jitter entropy more than in many other cases.<br /><br />Sadly, many platforms don't have that kind of cycle counter.<br /><br />I've also not seen a hugely believable "yes, the jitter entropy is<br />real" paper. Alexander points to the existing jitterentropy crypto<br />code, and claims it can fill all our entropy needs in two seconds, but<br />there are big caveats:<br /><br /> (a) that code uses get_random_entropy(), which on a PC is that nice<br />fast TSC that we want. On other platforms (or on really old PC's - we<br />technically support CPU's still that don't have rdtsc)? It might be<br />zero. Every time.<br /><br /> (b) How was it tested? There are lots of randomness tests, but most<br />of them can be fooled with a simple counter through a cryptographic<br />hash - which you basically need to do anyway on whatever entropy<br />source you have in order to "whiten" it. It's simply _really_ hard to<br />decide on entropy.<br /><br />So it's really easy to make the randomness of some input look really<br />good, without any real idea how good it truly is. And maybe it really<br />is very very good on one particular machine, and then on another one<br />(with either a simpler in-order core or a lower-frequency timestamp<br />counter) it might be horrendously bad, and you'll never know,<br /><br />So I'd love to believe in your simple model. Really. I just don't see<br />how to get there reliably.<br /><br />Matthew Garrettpointed to one analysis on jitterentropy, and that one<br />wasn't all that optimistic.<br /><br />I do think jitterentropy would likely be good enough in practice - at<br />least on PC's with a TSC - for the fairly small window at boot and<br />getrandom(0). As I mentioned, I don't think it will make anybody<br />_happy_, but it might be one of those things where it's a compromise<br />that at least works for people, with the key generation people who are<br />really unhappy with it having a new option for their case.<br /><br />And maybe Alexander can convince people that when you run the<br />jitterentropy code a hundred billion times, the end result (not the<br />random stream from it, but the jitter bits themselves - but I'm not<br />even sure how to boil it down) - really is random.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
