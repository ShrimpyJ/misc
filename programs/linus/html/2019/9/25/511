    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/25/496">First message in thread</a></li><li><a href="/lkml/2019/9/25/496">Aleksa Sarai</a><ul><li><a href="/lkml/2019/9/25/497">Aleksa Sarai</a></li><li><a href="/lkml/2019/9/25/498">Aleksa Sarai</a></li><li><a href="/lkml/2019/9/25/499">Aleksa Sarai</a><ul><li><a href="/lkml/2019/9/25/523">Christian Brauner</a></li><li><a href="/lkml/2019/9/25/589">kbuild test robot</a></li><li><a href="/lkml/2019/9/25/593">kbuild test robot</a></li></ul></li><li><a href="/lkml/2019/9/25/500">Aleksa Sarai</a><ul><li class="origin"><a href="/lkml/2019/9/25/522">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/25/522">Aleksa Sarai</a><ul><li><a href="/lkml/2019/9/25/557">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/25/518">Christian Brauner</a><ul><li><a href="/lkml/2019/9/25/520">Christian Brauner</a></li></ul></li><li><a href="/lkml/2019/9/25/595">kbuild test robot</a></li><li><a href="/lkml/2019/9/25/653">kbuild test robot</a></li></ul></li><li><a href="/lkml/2019/9/25/507">Christian Brauner</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Sep 2019 10:10:37 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 1/4] lib: introduce copy_struct_from_user() helper</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 25, 2019 at 10:00 AM Aleksa Sarai &lt;cyphar&#64;cyphar.com&gt; wrote:<br />&gt;<br />&gt; +int is_zeroed_user(const void __user *from, size_t size)<br /><br />I like how you've done this, but it's buggy and only works on 64-bit.<br /><br />All the "u64" and "8" cases need to be "unsigned long" and<br />"sizeof(unsigned long)".<br /><br />Part of that requirement is:<br /><br />&gt; +               unsafe_get_user(val, (u64 __user *) from, err_fault);<br /><br />This part works fine - although 64-bit accesses migth be much more<br />expensive and the win of unrolling might not be sufficient - but:<br /><br />&gt; +               if (align) {<br />&gt; +                       /* &#64;from is unaligned. */<br />&gt; +                       val &amp;= ~aligned_byte_mask(align);<br />&gt; +                       align = 0;<br />&gt; +               }<br /><br />This part fundamentally only works on 'unsigned long'.<br /><br />         Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
