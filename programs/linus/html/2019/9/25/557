    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/25/496">First message in thread</a></li><li><a href="/lkml/2019/9/25/511">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/25/522">Aleksa Sarai</a><ul><li class="origin"><a href="/lkml/2019/9/25/561">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/25/561">Al Viro</a><ul><li><a href="/lkml/2019/9/25/567">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Sep 2019 10:48:31 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v1 1/4] lib: introduce copy_struct_from_user() helper</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 25, 2019 at 10:21 AM Aleksa Sarai &lt;cyphar&#64;cyphar.com&gt; wrote:<br />&gt;<br />&gt; Just to make sure I understand, the following diff would this solve the<br />&gt; problem? If so, I'll apply it, and re-send in a few hours.<br /><br />Actually, looking at it more, it's still buggy.<br /><br />That final "size smaller than unsigned long" doesn't correctly handle<br />the case of (say) a single byte in the middle of a 8-byte word.<br /><br />So you need to do something like this:<br /><br />    int is_zeroed_user(const void __user *from, size_t size)<br />  {<br />        unsigned long val, mask, align;<br /><br />        if (unlikely(!size))<br />                return true;<br /><br />        if (!user_access_begin(from, size))<br />                return -EFAULT;<br /><br />        align = (uintptr_t) from % sizeof(unsigned long);<br />        from -= align;<br />        size += align;<br /><br />        mask = ~aligned_byte_mask(align);<br /><br />        while (size &gt;= sizeof(unsigned long)) {<br />                unsafe_get_user(val, (unsigned long __user *) from, err_fault);<br />                val &amp;= mask;<br />                if (unlikely(val))<br />                        goto done;<br />                mask = ~0ul;<br />                from += sizeof(unsigned long);<br />                size -= sizeof(unsigned long);<br />        }<br /><br />        if (size) {<br />                /* (&#64;from + &#64;size) is unaligned. */<br />                unsafe_get_user(val, (unsigned long __user *) from, err_fault);<br />                mask &amp;= aligned_byte_mask(size);<br />                val &amp;= mask;<br />        }<br /><br />  done:<br />        user_access_end();<br />        return (val == 0);<br />  err_fault:<br />        user_access_end();<br />        return -EFAULT;<br />  }<br /><br />note how "mask" carries around from the very beginning all the way to<br />the end, and "align" itself is no longer used after mask has been<br />calculated.<br /><br />That's required because of say a 2-byte read at offset 5. You end up<br />with "align=5, size=7" at the beginning, and mask needs to be<br />0x00ffff0000000000 (on little-endian) for that final access.<br /><br />Anyway, I checked, and the above seems to generate ok code quality<br />too. Sadly "unsafe_get_user()" cannot use "asm goto" because of a gcc<br />limitation (no asm goto with outputs), so it's not _perfect_, but<br />that's literally a compiler limitation.<br /><br />But I didn't actually _test_ the end result. You should probably<br />verify that it gets the right behavior exactly for those interesting<br />cases where we mask both the beginning and the end.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
