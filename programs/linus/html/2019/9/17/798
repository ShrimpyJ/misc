    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/16/375">First message in thread</a></li><li><a href="/lkml/2019/9/17/759">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/17/790">Song Liu</a><ul><li class="origin"><a href="/lkml/2019/9/17/917">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/17/917">Song Liu</a><ul><li><a href="/lkml/2019/9/17/918">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Sep 2019 12:01:53 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT pull] x86/pti for 5.4-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 17, 2019 at 11:49 AM Song Liu &lt;songliubraving&#64;fb.com&gt; wrote:<br />&gt;<br />&gt; I guess we need something like the following?<br />&gt;<br />&gt; diff --git i/arch/x86/mm/pti.c w/arch/x86/mm/pti.c<br />&gt; index b196524759ec..7846916c3bcd 100644<br />&gt; --- i/arch/x86/mm/pti.c<br />&gt; +++ w/arch/x86/mm/pti.c<br />&gt; &#64;&#64; -306,6 +306,8 &#64;&#64; pti_clone_pgtable(unsigned long start, unsigned long end,<br />&gt;  {<br />&gt;         unsigned long addr;<br />&gt;<br />&gt; +       if (WARN_ON_ONCE(start &amp; ~PAGE_MASK))<br />&gt; +               return;<br /><br />I don't think we ever care about the low bits of the address below the<br />page mask, so this one probably wouldn't make any difference.<br /><br />To match the other cases, I'd make it just a plain<br /><br />        WARN_ON_ONCE(start &amp; ~PAGE_MASK));<br /><br />and leave it at that. The existing commit added the warning, but then<br />just made the code work despite it all.  I'd continue that same logic.<br /><br />&gt;                 if (pmd_large(*pmd) || level == PTI_CLONE_PMD) {<br />&gt; +                       if (WARN_ON_ONCE(addr &amp; ~PMD_MASK))<br />&gt; +                               return;<br />&gt;                         target_pmd = pti_user_pagetable_walk_pmd(addr);<br />&gt;                         if (WARN_ON(!target_pmd))<br />&gt;                                 return;<br /><br />Again, I think to match the other cases, I'd just do<br /><br />-                       addr += PMD_SIZE;<br />+                       WARN_ON_ONCE(addr &amp; ~PMD_MASK);<br />+                       addr = round_up(addr + 1, PMD_SIZE);<br /><br />which now admittedly clones too much, but _does_ clone the requested range.<br /><br />But maybe it really doesn't matter, since this condition just<br />shouldn't happen in the first place.<br /><br />And arguably, the "clone more than requested" issue is true, and maybe<br />your "warn and refuse to clone by returning" is the right thing to do.<br /><br />So I have very few strong opinions in this area, I just reacted to<br />looking at the patch that it didn't seem to cover all the cases.<br /><br />&gt; &gt; Also, it would have been lovely to have some background on how this<br />&gt; &gt; was even noticed. The link in the commit message goes to the<br />&gt; &gt; development thread, but that one doesn't have the original report from<br />&gt; &gt; Song either.<br />&gt;<br />&gt; I didn't really notice any issue. I was debugging an increase in iTLB<br />&gt; miss rate, which was caused by splitting of kernel text page table,<br />&gt; and was fixed by Thomas in:<br />&gt;<br />&gt; <a href="https://lore.kernel.org/lkml/alpine.DEB.2.21.1908282355340.1938&#64;nanos.tec.linutronix.de/">https://lore.kernel.org/lkml/alpine.DEB.2.21.1908282355340.1938&#64;nanos.tec.linutronix.de/</a><br />&gt;<br />&gt; I mistakenly suspected the issue was caused by the pti code, and<br />&gt; mistakenly proposed the first patch here. It turned out to be useful,<br />&gt; but it is not related to the original issue.<br /><br />Ok, thanks for the explanation.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
