    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/15/298">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/16/4">Willy Tarreau</a><ul><li class="origin"><a href="/lkml/2019/9/16/32">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/16/32">Willy Tarreau</a><ul><li><a href="/lkml/2019/9/16/532">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 15 Sep 2019 22:02:02 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 5.3-rc8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 15, 2019 at 9:30 PM Willy Tarreau &lt;w&#64;1wt.eu&gt; wrote:<br />&gt;<br />&gt; I'd be in favor of adding in the man page something like "this<br />&gt; random source is only suitable for applications which will not be<br />&gt; harmed by getting a predictable value on output, and as such it is<br />&gt; not suitable for generation of system keys or passwords, please<br />&gt; use GRND_RANDOM for this".<br /><br />The problem with GRND_RANDOM is that it also ends up extracting<br />entropy, and has absolutely horrendous performance behavior. It's why<br />hardly anybody uses /dev/random.<br /><br />Which nobody should really ever do. I don't understand why people want<br />that thing, considering that the second law of thermodynamics really<br />pretty much applies. If you can crack the cryptographic hashes well<br />enough to break them despite reseeding etc, people will have much more<br />serious issues than the entropy accounting.<br /><br />So the problem with getrandom() is that it only offered two flags, and<br />to make things worse they were the wrong ones.<br /><br />Nobody should basically _ever_ use the silly "entropy can go away"<br />model, yet that is exactly what GRND_RANDOM does.<br /><br />End result: GRND_RANDOM is almost entirely useless, and is actively<br />dangerous, because it can actually block not just during boot, it can<br />block (and cause others to block) during random running of the system<br />because it does that entropy accounting().<br /><br />Nobody can use GRND_RANDOM if they have _any_ performance requirements<br />what-so-ever. It's possibly useful for one-time ssh host keys etc.<br /><br />So GRND_RANDOM is just bad - with or without GRND_NONBLOCK, because<br />even in the nonblocking form it will account for entropy in the<br />blocking pool (until it's all gone, and it will return -EAGAIN).<br /><br />And the non-GRND_RANDOM case avoids that problem, but requires the<br />initial entropy with no way to opt out of it. Yes, GRND_NONBLOCK makes<br />it work.<br /><br />So we have four flag combinations:<br /><br /> - 0 - don't use if it could possibly run at boot<br /><br />   Possibly useful for the systemd-random-seed case, and if you *know*<br />you're way past boot, but clearly overused.<br /><br />   This is the one that bit us this time.<br /><br /> - GRND_NONBLOCK - fine, but you now don't get even untrusted random<br />numbers, and you have to come up with a way to fill the entropy pool<br /><br />   This one is most useful as a quick "get me urandom", but needs a<br />fallback to _actual_ /dev/urandom when it fails.<br /><br />   This is the best choice by far, and has no inherent downsides apart<br />from needing that fallback code.<br /><br /> - GRND_RANDOM - don't use<br /><br />   This will block and it will decrease the blocking pool entropy so<br />that others will block too, and has horrible performance.<br /><br />   Just don't use it outside of very occasional non-serious work.<br /><br />   Yes, it will give you secure numbers, but because of performance<br />issues it's not viable for any serious code, and obviously not for<br />bootup.<br /><br />    It can be useful as a seed for future serious use that just does<br />all random handling in user space. Just not during boot.<br /><br /> - GRND_RANDOM | GRND_NONBLOCK - don't use<br /><br />   This won't block, but it will decrease the blocking pool entropy.<br /><br />   It might be an acceptable "get me a truly secure ring with reliable<br />performance", but when it fails, you're going to be unhappy, and there<br />is no obvious fallback.<br /><br />So three out of four flag combinations end up being mostly "don't<br />use", and the fourth one isn't what you'd normally want (which is just<br />plain /dev/urandom semantics).<br /><br />                     Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
