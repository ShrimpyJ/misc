    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/13/45">First message in thread</a></li><li><a href="/lkml/2019/9/13/807">Borislav Petkov</a><ul><li><a href="/lkml/2019/9/16/147">Rasmus Villemoes</a><ul><li class="origin"><a href="/lkml/2019/9/16/577">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/16/577">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/16/758">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/9/17/126">Borislav Petkov</a></li><li><a href="/lkml/2019/9/17/327">David Laight</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Sep 2019 10:25:25 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] Improve memset</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Sep 16, 2019 at 2:18 AM Rasmus Villemoes<br />&lt;linux&#64;rasmusvillemoes.dk&gt; wrote:<br />&gt;<br />&gt; Eh, this benchmark doesn't seem to provide any hints on where to set the<br />&gt; cut-off for a compile-time constant n, i.e. the 32 in<br /><br />Yes, you'd need to use proper fixed-size memset's with<br />__builtin_memset() to test that case. Probably easy enough with some<br />preprocessor macros to expand to a lot of cases.<br /><br />But even then it will not show some of the advantages of inlining the<br />memset (quite often you have a "memset structure to zero, then<br />initialize a couple of fields" pattern, and gcc does much better for<br />that when it just inlines the memset to stores - to the point of just<br />removing all the memset entirely and just storing a couple of zeroes<br />between the fields you initialized).<br /><br />So the "inline constant sizes" case has advantages over and beyond the<br />obvious ones. I suspect that a reasonable cut-off point is somethinig<br />like "8*sizeof(long)". But look at things like "struct kstat" uses<br />etc, the limit might actually be even higher than that.<br /><br />Also note that while "rep stosb" is _reasonably_ good with current<br />CPU's (ie roughly gen 8+), it's not so great a few generations ago<br />(gen 6ish), and it can be absolutely horrid on older cores and/or<br />atom. The limit for when it is a win ends up depending on whether I$<br />footprint is an issue too, of course, but some of the bigger wins tend<br />to happen when you have sizes &gt;= 128.<br /><br />You can basically always beat "rep movs/stos" with hand-tuned AVX2/512<br />code for specific cases if you don't look at I$ footprint and the cost<br />of the AVX setup (and the cost of frequency changes, which often go<br />hand-in-hand with the AVX use). So "rep movs/stos" is seldom<br />_optimal_, but it tends to be "quite good" for modern CPU's with<br />variable sizes that are in the 100+ byte range.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
