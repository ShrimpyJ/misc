    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/26/339">First message in thread</a></li><li><a href="/lkml/2019/9/26/668">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/26/680">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a><ul><li><a href="/lkml/2019/9/26/710">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/27/43">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a><ul><li><a href="/lkml/2019/9/27/193">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a></li></ul></li><li><a href="/lkml/2019/9/27/318">"Kirill A. Shutemov"</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/27/314">"Kirill A. Shutemov"</a><ul><li class="origin"><a href="/lkml/2019/9/30/314">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/30/314">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2019/9/30/678">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2019/10/2/167">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a><ul><li><a href="/lkml/2019/10/2/340">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2019/10/2/347">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Sep 2019 09:39:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Ack to merge through DRM? WAS Re: [PATCH v2 1/5] mm: Add write-protect and clean utilities for address space ranges</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 27, 2019 at 5:17 AM Kirill A. Shutemov &lt;kirill&#64;shutemov.name&gt; wrote:<br />&gt;<br />&gt; &gt; Call it "walk_page_mapping()". And talk extensively about how the<br />&gt; &gt; locking differs a lot from the usual "walk_page_vma()" things.<br />&gt;<br />&gt; Walking mappings of a page is what rmap does. This code thas to be<br />&gt; integrated there.<br /><br />Well, that's very questionable.<br /><br />The rmap code mainly does the "page -&gt; virtual" mapping.  One page at a time.<br /><br />The page walker code does the "virtual -&gt; pte" mapping. Always a whole<br />range at a time.<br /><br />The new code wants a combination of both.<br /><br />It very much is about walking ranges - as in mm/pagewalk.c. It's just<br />that it walks potentially multiple ranges, based on where the address<br />space is mapped.<br /><br />I think it has way more commonalities with the page walking code than<br />it has with the rmap code. But yes, there is some of that "look up<br />mappings based on address space" in there too, but it's the least part<br />of it<br /><br />And as Thomas pointed out, it also has commonalities with<br />unmap_mapping_pages() in mm/memory.c. In many ways that part is the<br />closest.<br /><br />I'd say that from a code sharing standpoint, mm/rmap.c is absolutely<br />the wrong place. It's the furthest away from what Thomas wants to do.<br /><br />The mm/pagewalk.c code has the most actual code that could be shared,<br />and the addition would be smallest there.<br /><br />And conceptually the closest analogue in terms of what it _does_ is<br />unmap_mapping_range() in mm/memory.c, but I see no room for sharing<br />actual code there unless we completely change how we do<br />zap_page_range() and add a lot of configurability there (which we<br />don't want, because page table teardown at exit is really a pretty<br />critical operation - I commonly see copy_page_range() and<br />zap_page_range() on profiles if you have things like script-heavyu<br />traditional UNIX loads).<br /><br />So I think conceptually, mm/memory.c and unmap_mapping_range() is<br />closest but I don't think it's practical to share code.<br /><br />And between mm/pagewalk.c and mm/rmap.c, I think the page walking has<br />way more of actual practical code sharing, and is also conceptually<br />closer because most of the code is about walking a range, not looking<br />up the mapping of one page.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
