    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/20/1017">First message in thread</a></li><li><a href="/lkml/2019/9/20/1017">Al Viro</a><ul><li><a href="/lkml/2019/9/20/1095">Al Viro</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Sep 2019 10:03:07 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] microoptimizing hlist_add_{before,behind}</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 20, 2019 at 8:11 PM Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; My apologies ;-/  Correct diff follows:<br /><br />This is similar to what we do for the regular list_add(), so I have no<br />objections to the micro-optimization.<br /><br />Of course, for list_add() we do it by using a helper function and<br />passing those prev/next pointers to it instead, so it _looks_ very<br />different. But the logic is the same: do the loads of next/prev early<br />and once, so that gcc doesn't think they might alias with the updates.<br /><br />However, I *really* don't like this syntax:<br /><br />        struct hlist_node *p = n-&gt;next = prev-&gt;next;<br /><br />What, what? That's illegible. Both for the double assignment within a<br />declaration, but also for the naming.<br /><br />Yeah, I assume you mean 'p' just for pointer. Fine. But when we are<br />explicitly playing with multiple pointers, just give them a name.<br /><br />In this case, 'next'.<br /><br />So just do<br /><br />  hlist_add_behind:<br />        struct hlist_node *next = prev-&gt;next;<br />        n-&gt;next = next;<br />        prev-&gt;next = n;<br />        n-&gt;pprev = &amp;prev-&gt;next;<br />        if (next)<br />                next-&gt;pprev = &amp;n-&gt;next;<br /><br />And honestly, I'd rename 'n' with 'new' too while at it. We're not<br />using C++, so we can use sane names (and already do in other places).<br /><br />That way each statement makes sense on its own, rather than being a<br />mess of "what does 'p' and 'n' mean?"<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
