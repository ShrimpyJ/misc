    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/17/561">First message in thread</a></li><li><a href="/lkml/2019/9/17/561">"Darrick J. Wong"</a><ul><li class="origin"><a href="/lkml/2019/9/18/1170">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/18/1170">Linus Torvalds</a></li><li><a href="/lkml/2019/9/18/1209">"Darrick J. Wong"</a><ul><li><a href="/lkml/2019/9/19/656">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/658">Linus Torvalds</a></li><li><a href="/lkml/2019/9/19/662">Christoph Hellwig</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/19/655">Christoph Hellwig</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Sep 2019 18:31:29 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] iomap: new code for 5.4</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 17, 2019 at 8:21 AM Darrick J. Wong &lt;djwong&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; Please pull this series containing all the new iomap code for 5.4.<br /><br />So looking at the non-iomap parts of it, I react to the new "list_pop() code.<br /><br />In particular, this:<br /><br />        struct list_head *pos = READ_ONCE(list-&gt;next);<br /><br />is crazy to begin with..<br /><br />It seems to have come from "list_empty()", but the difference is that<br />it actually makes sense to check for emptiness of a list outside<br />whatever lock that protects the list. It can be one of those very<br />useful optimizations where you don't even bother taking the lock if<br />you can optimistically check that the list is empty.<br /><br />But the same is _not_ true of an operation like "list_pop()". By<br />definition, the list you pop something off has to be stable, so the<br />READ_ONCE() makes no sense here.<br /><br />Anyway, if that was the only issue, I wouldn't care. But looking<br />closer, the whole thing is just completely wrong.<br /><br />All the users seem to do some version of this:<br /><br />        struct list_head tmp;<br /><br />        list_replace_init(&amp;ioend-&gt;io_list, &amp;tmp);<br />        iomap_finish_ioend(ioend, error);<br />        while ((ioend = list_pop_entry(&amp;tmp, struct iomap_ioend, io_list)))<br />                iomap_finish_ioend(ioend, error);<br /><br />which is completely wrong and pointless.<br /><br />Why would anybody use that odd "list_pop()" thing in a loop, when what<br />it really seems to just want is that bog-standard<br />"list_for_each_entry_safe()"<br /><br />        struct list_head tmp;<br />        struct iomap_ioend *next;<br /><br />        list_replace_init(&amp;ioend-&gt;io_list, &amp;tmp);<br />        iomap_finish_ioend(ioend, error);<br />        list_for_each_entry_safe(struct iomap_ioend, next, &amp;tmp, io_list)<br />                iomap_finish_ioend(ioend, error);<br /><br />which is not only the common pattern, it's more efficient and doesn't<br />pointlessly re-write the list for each entry, it just walks it (and<br />the "_safe()" part is because it looks up the next entry early, so<br />that the entry that it's walking can be deleted).<br /><br />So I pulled it. But then after looking at it, I unpulled it again<br />because I don't want to see this kind of insanity in one of THE MOST<br />CORE header files we have in the whole kernel.<br /><br />If xfs and iomap want to think they are "popping" a list, they can do<br />so. In the privacy of your own home, you can do stupid and pointless<br />things.<br /><br />But no, we don't pollute core kernel code with those stupid and<br />pointless things.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
