    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/17/561">First message in thread</a></li><li><a href="/lkml/2019/9/17/561">"Darrick J. Wong"</a><ul><li><a href="/lkml/2019/9/18/1151">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2019/9/18/1209">"Darrick J. Wong"</a><ul><li><a href="/lkml/2019/9/19/656">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/658">Linus Torvalds</a></li><li><a href="/lkml/2019/9/19/662">Christoph Hellwig</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/19/655">Christoph Hellwig</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Sep 2019 19:07:56 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] iomap: new code for 5.4</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 18, 2019 at 6:31 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Why would anybody use that odd "list_pop()" thing in a loop, when what<br />&gt; it really seems to just want is that bog-standard<br />&gt; "list_for_each_entry_safe()"<br /><br />Side note: I do agree that the list_for_each_entry_safe() thing isn't<br />exactly beautiful, particularly since you need that extra variable for<br />the temporary "next" pointer.<br /><br />It's one of the C++ features I'd really like to use in the kernel -<br />the whole "declare new variable in a for (;;) statement" thing.<br /><br />In fact, it made it into C - it's there in C99 -  but we still use<br />"-std=gnu89" because of other problems with the c99 updates.<br /><br />Anyway, I *would* be interested in cleaning up<br />list_for_each_entry_safe() if somebody has the energy and figures out<br />what we could do to get the c99 behavior without the breakage from<br />other sources.<br /><br />For some background: the reason we use "gnu89" is because we use the<br />GNU extension with type cast initializers quite a bit, ie things like<br /><br />    #define __RAW_SPIN_LOCK_UNLOCKED(lockname)      \<br />        (raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)<br /><br />and that broke in c99 and gnu99, which considers those compound<br />literals and you can no longer use them as initializers.<br /><br />See<br /><br />    <a href="https://lore.kernel.org/lkml/20141019231031.GB9319&#64;node.dhcp.inet.fi/">https://lore.kernel.org/lkml/20141019231031.GB9319&#64;node.dhcp.inet.fi/</a><br /><br />for some of the historical discussion about this. It really _is_ sad,<br />because variable declarations inside for-loops are very useful, and<br />would have the potential to make some of our "for_each_xyz()" macros a<br />lot prettier (and easier to use too).<br /><br />So our list_for_each_entry_safe() thing isn't perfect, but that's no<br />reason to try to then make up completely new things.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
