    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/18/1024">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/18/1025">"Ahmed S. Darwish"</a><ul><li class="origin"><a href="/lkml/2019/9/19/519">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/519">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/19/579">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/9/20/358">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/20/528">Andy Lutomirski</a></li><li><a href="/lkml/2019/9/20/784">Willy Tarreau</a></li></ul></li><li><a href="/lkml/2019/9/26/676">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/26/677">"Ahmed S. Darwish"</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/19/1357">kernel test robot</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2019/9/18/1078/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Sep 2019 16:57:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Sep 18, 2019 at 2:17 PM Ahmed S. Darwish &lt;darwish.07&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; Since Linux v3.17, getrandom(2) has been created as a new and more<br />&gt; secure interface for pseudorandom data requests.  It attempted to<br />&gt; solve three problems, as compared to /dev/urandom:<br /><br />I don't think your patch is really _wrong_, but I think it's silly to<br />introduce a new system call, when we have 30 bits left in the flags of<br />the old one, and the old system call checked them.<br /><br />So it's much simpler and more straightforward to  just introduce a<br />single new bit #2 that says "I actually know what I'm doing, and I'm<br />explicitly asking for secure/insecure random data".<br /><br />And then say that the existing bit #1 just means "I want to wait for entropy".<br /><br />So then you end up with this:<br /><br />    /*<br />     * Flags for getrandom(2)<br />     *<br />     * GRND_NONBLOCK    Don't block and return EAGAIN instead<br />     * GRND_WAIT_ENTROPY        Explicitly wait for entropy<br />     * GRND_EXPLICIT    Make it clear you know what you are doing<br />     */<br />    #define GRND_NONBLOCK               0x0001<br />    #define GRND_WAIT_ENTROPY   0x0002<br />    #define GRND_EXPLICIT               0x0004<br /><br />    #define GRND_SECURE (GRND_EXPLICIT | GRND_WAIT_ENTROPY)<br />    #define GRND_INSECURE       (GRND_EXPLICIT | GRND_NONBLOCK)<br /><br />    /* Nobody wants /dev/random behavior, nobody should use it */<br />    #define GRND_RANDOM 0x0002<br /><br />which is actually fairly easy to understand. So now we have three<br />bits, and the values are:<br /><br /> 000  - ambiguous "secure or just lazy/ignorant"<br /> 001 - -EAGAIN or secure<br /> 010 - blocking /dev/random DO NOT USE<br /> 011 - nonblocking /dev/random DO NOT USE<br /> 100 - nonsense, returns -EINVAL<br /> 101 - /dev/urandom without warnings<br /> 110 - blocking secure<br /> 111 - -EAGAIN or secure<br /><br />and people would be encouraged to use one of these three:<br /><br /> - GRND_INSECURE<br /> - GRND_SECURE<br /> - GRND_SECURE | GRND_NONBLOCK<br /><br />all of which actually make sense, and none of which have any<br />ambiguity. And while "GRND_INSECURE | GRND_NONBLOCK" works, it's<br />exactly the same as just plain GRND_INSECURE - the point is that it<br />doesn't block for entropy anyway, so non-blocking makes no different.<br /><br />NOTE! This patch looks bigger than it really is. I've changed the<br />if-statement in getrandom() to a switch-statement, and I did this:<br /><br />-       if (count &gt; INT_MAX)<br />-               count = INT_MAX;<br />+       count = min_t(size_t, count, INT_MAX &gt;&gt; (ENTROPY_SHIFT + 3));<br /><br />to match what "urandom_read()" already did. That changes the semantics<br />a bit, but only for the /dev/random case, and only for insanity (the<br />limit we truncate to is now 32MB read, rather than 2GB - and we<br />already had that limit for urandom).<br /><br />There is *one* other small semantic change: The old code did<br />urandom_read() which added warnings, but each warning also _reset_ the<br />crng_init_cnt. Until it decided not to warn any more, at which point<br />it also stops that resetting of crng_init_cnt.<br /><br />And that reset of crng_init_cnt, btw, is some cray cray.<br /><br />It's basically a "we used up entropy" thing, which is very<br />questionable to begin with as the whole discussion has shown, but<br />since it stops doing it after 10 cases, it's not even good security<br />assuming the "use up entropy" case makes sense in the first place.<br /><br />So I didn't copy that insanity either. And I'm wondering if removing<br />it from /dev/urandom might also end up helping Ahmed's case of getting<br />entropy earlier, when we don't reset the counter.<br /><br />But other than those two details, none of the existing semantics<br />changed, we just added the three actually _sane_ cases without any<br />ambiguity.<br /><br />In particular, this still leaves the semantics of that nasty<br />"getrandom(0)" as the same "blocking urandom" that it currently is.<br />But now it's a separate case, and we can make that perhaps do the<br />timeout, or at least the warning.<br /><br />And the new cases are defined to *not* warn. In particular,<br />GRND_INSECURE very much does *not* warn about early urandom access<br />when crng isn't ready. Because the whole point of that new mode is<br />that the user knows it isn't secure.<br /><br />So that should make getrandom(GRND_INSECURE) palatable to the systemd<br />kind of use that wanted to avoid the pointless kernel warning.<br /><br />And we could mark this for stable and try to get it backported so that<br />it will have better coverage, and encourage people to use the new sane<br />_explicit_ waiting (or not) for entropy.<br /><br />Comments? Full patch as attachment.<br /><br />                  Linus<br /> drivers/char/random.c       | 50 +++++++++++++++++++++++++++++++++++++--------<br /> include/uapi/linux/random.h | 12 +++++++++--<br /> 2 files changed, 52 insertions(+), 10 deletions(-)<br /><br />diff --git a/drivers/char/random.c b/drivers/char/random.c<br />index 5d5ea4ce1442..c14fa4780066 100644<br />--- a/drivers/char/random.c<br />+++ b/drivers/char/random.c<br />&#64;&#64; -2123,23 +2123,57 &#64;&#64; SYSCALL_DEFINE3(getrandom, char __user *, buf, size_t, count,<br /> {<br /> 	int ret;<br /> <br />-	if (flags &amp; ~(GRND_NONBLOCK|GRND_RANDOM))<br />+	if (flags &amp; ~(GRND_NONBLOCK|GRND_WAIT_ENTROPY|GRND_EXPLICIT))<br /> 		return -EINVAL;<br /> <br />-	if (count &gt; INT_MAX)<br />-		count = INT_MAX;<br />+	count = min_t(size_t, count, INT_MAX &gt;&gt; (ENTROPY_SHIFT + 3));<br /> <br />-	if (flags &amp; GRND_RANDOM)<br />+	switch (flags) {<br />+	case GRND_SECURE:<br />+		ret = wait_for_random_bytes();<br />+		if (ret)<br />+			return ret;<br />+		break;<br />+<br />+	case GRND_SECURE | GRND_NONBLOCK:<br />+		if (!crng_ready())<br />+			return -EAGAIN;<br />+		break;<br />+<br />+	case GRND_INSECURE:<br />+		break;<br />+<br />+	default:<br />+		return -EINVAL;<br />+<br />+	/* BAD. Legacy flags. */<br />+	case GRND_RANDOM | GRND_NONBLOCK:<br />+	case GRND_RANDOM:<br /> 		return _random_read(flags &amp; GRND_NONBLOCK, buf, count);<br /> <br />-	if (!crng_ready()) {<br />-		if (flags &amp; GRND_NONBLOCK)<br />+	case GRND_NONBLOCK:<br />+		if (!crng_ready())<br /> 			return -EAGAIN;<br />+		break;<br />+<br />+	/*<br />+	 * People are really confused about whether<br />+	 * this is secure or insecure. Traditional<br />+	 * behavior is secure, but there are users<br />+	 * who clearly didn't want that, and just<br />+	 * never thought about it.<br />+	 */<br />+	case 0:<br /> 		ret = wait_for_random_bytes();<br />-		if (unlikely(ret))<br />+		if (ret)<br /> 			return ret;<br />+		break;<br /> 	}<br />-	return urandom_read(NULL, buf, count, NULL);<br />+<br />+	/* equivalent to urandom_read() without the crazy */<br />+	ret = extract_crng_user(buf, count);<br />+	trace_urandom_read(8 * count, 0, ENTROPY_BITS(&amp;input_pool));<br />+	return ret;<br /> }<br /> <br /> /********************************************************************<br />diff --git a/include/uapi/linux/random.h b/include/uapi/linux/random.h<br />index 26ee91300e3e..f933f2a843c0 100644<br />--- a/include/uapi/linux/random.h<br />+++ b/include/uapi/linux/random.h<br />&#64;&#64; -48,9 +48,17 &#64;&#64; struct rand_pool_info {<br />  * Flags for getrandom(2)<br />  *<br />  * GRND_NONBLOCK	Don't block and return EAGAIN instead<br />- * GRND_RANDOM		Use the /dev/random pool instead of /dev/urandom<br />+ * GRND_WAIT_ENTROPY	Explicitly wait for entropy<br />+ * GRND_EXPLICIT	Make it clear you know what you are doing<br />  */<br />-#define GRND_NONBLOCK	0x0001<br />+#define GRND_NONBLOCK		0x0001<br />+#define GRND_WAIT_ENTROPY	0x0002<br />+#define GRND_EXPLICIT		0x0004<br />+<br />+#define GRND_SECURE	(GRND_EXPLICIT | GRND_WAIT_ENTROPY)<br />+#define GRND_INSECURE	(GRND_EXPLICIT | GRND_NONBLOCK)<br />+<br />+/* Nobody wants /dev/random behavior, nobody should use it */<br /> #define GRND_RANDOM	0x0002<br /> <br /> #endif /* _UAPI_LINUX_RANDOM_H */</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
