    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/20/111">First message in thread</a></li><li><a href="/lkml/2019/9/23/517">Konstantin Khlebnikov</a><ul><li><a href="/lkml/2019/9/23/529">Tejun Heo</a></li><li><a href="/lkml/2019/9/24/78">Dave Chinner</a><ul><li><a href="/lkml/2019/9/24/150">Konstantin Khlebnikov</a><ul><li><a href="/lkml/2019/9/25/83">Dave Chinner</a><ul><li><a href="/lkml/2019/9/25/117">Konstantin Khlebnikov</a></li><li><a href="/lkml/2019/9/25/301">"Theodore Y. Ts'o"</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2019/9/25/107">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/25/107">Dave Chinner</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Sep 2019 12:08:04 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] mm: implement write-behind policy for sequential file writes</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 24, 2019 at 12:39 AM Dave Chinner &lt;david&#64;fromorbit.com&gt; wrote:<br />&gt;<br />&gt; Stupid question: how is this any different to simply winding down<br />&gt; our dirty writeback and throttling thresholds like so:<br />&gt;<br />&gt; # echo $((100 * 1000 * 1000)) &gt; /proc/sys/vm/dirty_background_bytes<br /><br />Our dirty_background stuff is very questionable, but it exists (and<br />has those insane defaults) because of various legacy reasons.<br /><br />But it probably _shouldn't_ exist any more (except perhaps as a<br />last-ditch hard limit), and I don't think it really ends up being the<br />primary throttling any more in many cases.<br /><br />It used to make sense to make it a "percentage of memory" back when we<br />were talking old machines with 8MB of RAM, and having an appreciable<br />percentage of memory dirty was "normal".<br /><br />And we've kept that model and not touched it, because some benchmarks<br />really want enormous amounts of dirty data (particularly various dirty<br />shared mappings).<br /><br />But out default really is fairly crazy and questionable. 10% of memory<br />being dirty may be ok when you have a small amount of memory, but it's<br />rather less sane if you have gigs and gigs of RAM.<br /><br />Of course, SSD's made it work slightly better again, but our<br />"dirty_background" stuff really is legacy and not very good.<br /><br />The whole dirty limit when seen as percentage of memory (which is our<br />default) is particularly questionable, but even when seen as total<br />bytes is bad.<br /><br />If you have slow filesystems (say, FAT on a USB stick), the limit<br />should be very different from a fast one (eg XFS on a RAID of proper<br />SSDs).<br /><br />So the limit really needs be per-bdi, not some global ratio or bytes.<br /><br />As a result we've grown various _other_ heuristics over time, and the<br />simplistic dirty_background stuff is only a very small part of the<br />picture these days.<br /><br />To the point of almost being irrelevant in many situations, I suspect.<br /><br />&gt; to start background writeback when there's 100MB of dirty pages in<br />&gt; memory, and then:<br />&gt;<br />&gt; # echo $((200 * 1000 * 1000)) &gt; /proc/sys/vm/dirty_bytes<br /><br />The thing is, that also accounts for dirty shared mmap pages. And it<br />really will kill some benchmarks that people take very very seriously.<br /><br />And 200MB is peanuts when you're doing a benchmark on some studly<br />machine that has a million iops per second, and 200MB of dirty data is<br />nothing.<br /><br />Yet it's probably much too big when you're on a workstation that still<br />has rotational media.<br /><br />And the whole memcg code obviously makes this even more complicated.<br /><br />Anyway, the end result of all this is that we have that<br />balance_dirty_pages() that is pretty darn complex and I suspect very<br />few people understand everything that goes on in that function.<br /><br />So I think that the point of any write-behind logic would be to avoid<br />triggering the global limits as much as humanly possible - not just<br />getting the simple cases to write things out more quickly, but to<br />remove the complex global limit questions from (one) common and fairly<br />simple case.<br /><br />Now, whether write-behind really _does_ help that, or whether it's<br />just yet another tweak and complication, I can't actually say. But I<br />don't think 'dirty_background_bytes' is really an argument against<br />write-behind, it's just one knob on the very complex dirty handling we<br />have.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
