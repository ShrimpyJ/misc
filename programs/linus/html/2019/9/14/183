    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/14/168">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/14/181">"Theodore Y. Ts'o"</a><ul><li class="origin"><a href="/lkml/2019/9/14/185">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/14/185">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/14/186">Linus Torvalds</a></li><li><a href="/lkml/2019/9/15/16">Willy Tarreau</a></li><li><a href="/lkml/2019/9/15/23">Willy Tarreau</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Sep 2019 18:10:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 5.3-rc8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Sep 14, 2019 at 6:00 PM Theodore Y. Ts'o &lt;tytso&#64;mit.edu&gt; wrote:<br />&gt;<br />&gt; That makes me even more worried.  It's probably going to be OK for<br />&gt; modern x86 systems, since "best we can do" will include RDRAND<br />&gt; (whether or not it's trusted).  But on systems without something like<br />&gt; RDRAND --- e.g., ARM --- the "best we can do" could potentially be<br />&gt; Really Bad.  Again, look back at the Mining Your P's and Q's paper<br />&gt; from factorable.net.<br /><br />Yes. And they had that problem *because* the blocking interface was<br />useless, and they didn't use it, and *because* nobody warned them<br />about it.<br /><br />In other words, the whole disaster was exactly because blocking is<br />wrong, and because blocking to get "secure" data is unacceptable.<br /><br />And the random people DIDN'T LEARN A SINGLE LESSON from that thing.<br /><br />Seriously. getrandom() introduced the same broken model as /dev/random<br />had - and that then caused people to use /dev/urandom instead.<br /><br />And now it has shown itself to be broken _again_.<br /><br />And you still argue against the only sane model. Scream loudly that<br />you're doing something wrong so that people can fix their broken<br />garbage, but don't let people block, which is _also_ broken garbage.<br /><br />Seriously. Blocking is wrong. Blocking has _always_ been wrong. It was<br />why /dev/random was useless, and it is now why the new getrandom()<br />system call is showing itself useless.<br /><br />&gt; We could return 0 for success, and yet "the best we<br />&gt; can do" could be really terrible.<br /><br />Yes. Which is why we should warn.<br /><br />But we can't *block*. Because that just breaks people. Like shown in<br />this whole discussion.<br /><br />Why is warning different? Because hopefully it tells the only person<br />who can *do* something about it - the original maintainer or developer<br />of the user space tools - that they are doing something wrong and need<br />to fix their broken model.<br /><br />Blocking doesn't do that. Blocking only makes the system unusable. And<br />yes, some security people think "unusable == secure", but honestly,<br />those security people shouldn't do system design. They are the worst<br />kind of "technically correct" incompetent.<br /><br />&gt; &gt; &gt; For 5.3, can we please consider my proposal in [1]?<br />&gt; &gt; It may be the safest thing to do, but at that point we might as well<br />&gt; &gt; just revert the ext4 change entirely. I'd rather do that, than have<br />&gt; &gt; random filesystems start making random decisions based on crazy user<br />&gt; &gt; space behavior.<br />&gt;<br />&gt; All we're doing is omitting the plug;<br /><br />Yes. Which we'll do by reverting that change. I agree that it's the<br />safe thing to do for 5.3.<br /><br />We are not adding crazy workarounds for "getrandom()" bugs in some<br />low-level filesystem.<br /><br />Either we fix getrandom() or we revert the change. We don't do some<br />mis-designed "let's work around bugs in getrandom() in the ext4<br />filesystem with ad-hoc behavioral changes".<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
