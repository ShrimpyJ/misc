    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/12/262">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/12/279">Willy Tarreau</a></li><li><a href="/lkml/2019/9/14/59">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/14/91">"Alexander E. Patrakov"</a><ul><li><a href="/lkml/2019/9/15/4">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/15/43">"Ahmed S. Darwish"</a></li><li><a href="/lkml/2019/9/15/176">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2019/9/14/98">"Ahmed S. Darwish"</a><ul><li class="origin"><a href="/lkml/2019/9/14/115">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/14/115">"Alexander E. Patrakov"</a><ul><li><a href="/lkml/2019/9/14/117">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/9/14/162">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/14/165">Martin Steigerwald</a></li><li><a href="/lkml/2019/9/14/167">"Theodore Y. Ts'o"</a></li></ul></li><li><a href="/lkml/2019/9/15/21">Lennart Poettering</a><ul><li><a href="/lkml/2019/9/15/30">"Ahmed S. Darwish"</a></li><li><a href="/lkml/2019/9/15/139">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/9/23/854">Pavel Machek</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Sep 2019 09:30:19 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 5.3-rc8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Sep 14, 2019 at 8:02 AM Ahmed S. Darwish &lt;darwish.07&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; On Thu, Sep 12, 2019 at 12:34:45PM +0100, Linus Torvalds wrote:<br />&gt; &gt;<br />&gt; &gt; An alternative might be to make getrandom() just return an error<br />&gt; &gt; instead of waiting. Sure, fill the buffer with "as random as we can"<br />&gt; &gt; stuff, but then return -EINVAL because you called us too early.<br />&gt;<br />&gt; ACK, that's probably _the_ most sensible approach. Only caveat is<br />&gt; the slight change in user-space API semantics though...<br />&gt;<br />&gt; For example, this breaks the just released systemd-random-seed(8)<br />&gt; as it _explicitly_ requests blocking behvior from getrandom() here:<br />&gt;<br /><br />Actually, I would argue that the "don't ever block, instead fill<br />buffer and return error instead" fixes this broken case.<br /><br />&gt;     =&gt; src/random-seed/random-seed.c:<br />&gt;     /*<br />&gt;      * Let's make this whole job asynchronous, i.e. let's make<br />&gt;      * ourselves a barrier for proper initialization of the<br />&gt;      * random pool.<br />&gt;      */<br />&gt;      k = getrandom(buf, buf_size, GRND_NONBLOCK);<br />&gt;      if (k &lt; 0 &amp;&amp; errno == EAGAIN &amp;&amp; synchronous) {<br />&gt;          log_notice("Kernel entropy pool is not initialized yet, "<br />&gt;                     "waiting until it is.");<br />&gt;<br />&gt;          k = getrandom(buf, buf_size, 0); /* retry synchronously */<br />&gt;      }<br /><br />Yeah, the above is yet another example of completely broken garbage.<br /><br />You can't just wait and block at boot. That is simply 100%<br />unacceptable, and always has been, exactly because that may<br />potentially mean waiting forever since you didn't do anything that<br />actually is likely to add any entropy.<br /><br />&gt;      if (k &lt; 0) {<br />&gt;          log_debug_errno(errno, "Failed to read random data with "<br />&gt;                          "getrandom(), falling back to "<br />&gt;                          "/dev/urandom: %m");<br /><br />At least it gets a log message.<br /><br />So I think the right thing to do is to just make getrandom() return<br />-EINVAL, and refuse to block.<br /><br />As mentioned, this has already historically been a huge issue on<br />embedded devices, and with disks turnign not just to NVMe but to<br />actual polling nvdimm/xpoint/flash, the amount of true "entropy"<br />randomness we can give at boot is very questionable.<br /><br />We can (and will) continue to do a best-effort thing (including very<br />much using rdread and friends), but the whole "wait for entropy"<br />simply *must* stop.<br /><br />&gt; I've sent an RFC patch at [1].<br />&gt;<br />&gt; [1] <a href="https://lkml.kernel.org/r/20190914122500.GA1425&#64;darwi-home-pc">https://lkml.kernel.org/r/20190914122500.GA1425&#64;darwi-home-pc</a><br /><br />Looks reasonable to me. Except I'd just make it simpler and make it a<br />big WARN_ON_ONCE(), which is a lot harder to miss than pr_notice().<br />Make it clear that it is a *bug* if user space thinks it should wait<br />at boot time.<br /><br />Also, we might even want to just fill the buffer and return 0 at that<br />point, to make sure that even more broken user space doesn't then try<br />to sleep manually and turn it into a "I'll wait myself" loop.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
