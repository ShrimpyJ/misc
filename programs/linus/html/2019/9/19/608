    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/13/278">First message in thread</a></li><li><a href="/lkml/2019/9/18/758">David Howells</a><ul><li><a href="/lkml/2019/9/18/809">Linus Torvalds</a></li><li><a href="/lkml/2019/9/19/440">David Howells</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2019/9/23/490">Peter Zijlstra</a><ul><li><a href="/lkml/2019/9/27/215">Andrea Parri</a><ul><li><a href="/lkml/2019/9/27/348">Peter Zijlstra</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Sep 2019 08:59:23 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Do we need to correct barriering in circular-buffers.rst?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 19, 2019 at 6:59 AM David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; But I don't agree with this.  You're missing half the barriers.  There should<br />&gt; be *four* barriers.  The document mandates only 3 barriers, and uses<br />&gt; READ_ONCE() where the fourth should be, i.e.:<br />&gt;<br />&gt;    thread #1            thread #2<br />&gt;<br />&gt;                         smp_load_acquire(head)<br />&gt;                         ... read data from queue ..<br />&gt;                         smp_store_release(tail)<br />&gt;<br />&gt;    READ_ONCE(tail)<br />&gt;    ... add data to queue ..<br />&gt;    smp_store_release(head)<br /><br />The document is right, but you shouldn't do this.<br /><br />The reason that READ_ONCE() is possible - instead of a<br />smp_load_acquire() - is that there's now an address dependency chain<br />from the READ_ONCE to the subsequent writes of the data.<br /><br />And while there isn't any barrier, a data or control dependency to a<br />_write_ does end up ordering things (even on alpha - it's only the<br />read-&gt;read dependencies that might be unordered on alpha).<br /><br />But again, don't do this.<br /><br />Also, you ignored the part where I told you to not do this because we<br />already  have locking.<br /><br />I'm not goign to discuss this further. Locking works. Spinlocks are<br />cheap. Lockless algorithms that need atomics aren't even cheaper than<br />spinlocks: they can in fact scale *worse*, because they don't have the<br />nice queuing optimization that our spinlock have.<br /><br />Lockless algorithms are great if they can avoid the contention on the<br />lock and instead only work on distributed data and avoid contention<br />entirely.<br /><br />But in this case the lock would be right next to the data anyway, so<br />even that case doesn't hold.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
