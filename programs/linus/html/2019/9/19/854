    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/19/759">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/801">"Alexander E. Patrakov"</a><ul><li class="origin"><a href="/lkml/2019/9/19/1123">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/1123">"Alexander E. Patrakov"</a><ul><li><a href="/lkml/2019/9/19/1337">"Alexander E. Patrakov"</a></li><li><a href="/lkml/2019/9/20/332">"Theodore Y. Ts'o"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2019/9/23/283">David Laight</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Sep 2019 14:47:57 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 19, 2019 at 1:45 PM Alexander E. Patrakov<br />&lt;patrakov&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; This already resembles in-kernel haveged (except that it doesn't credit<br />&gt; entropy), and Willy Tarreau said "collect the small entropy where it is,<br />&gt; period" today. So, too many people touched upon the topic in one day,<br />&gt; and therefore I'll bite.<br /><br />I'm one of the people who aren't entirely convinced by the jitter<br />entropy - I definitely believe it exists, I just am not necessarily<br />convinced about the actual entropy calculations.<br /><br />So while I do think we should take things like the cycle counter into<br />account just because I think it's a a useful way to force some noise,<br />I am *not* a huge fan of the jitter entropy driver either, because of<br />the whole "I'm not convinced about the amount of entropy".<br /><br />The whole "third order time difference" thing would make sense if the<br />time difference was some kind of smooth function - which it is at a<br />macro level.<br /><br />But at a micro level, I could easily see the time difference having<br />some very simple pattern - say that your cycle counter isn't really<br />cycle-granular, and the load takes 5.33 "cycles" and you see a time<br />difference pattern of (5, 5, 6, 5, 5, 6, ...). No real entropy at all<br />there, it is 100% reliable.<br /><br />At a macro level, that's a very smooth curve, and you'd say "ok, time<br />difference is 5.3333 (repeating)". But that's not what the jitter<br />entropy code does. It just does differences of differences.<br /><br />And that completely non-random pattern has a first-order difference of<br />0, 1, 1, 0, 1, 1.. and a second order of 1, 0, 1, 1, 0,  and so on<br />forever. So the "jitter entropy" logic will assign that completely<br />repeatable thing entropy, because the delta difference doesn't ever go<br />away.<br /><br />Maybe I misread it.<br /><br />We used to (we still do, but we used to too) do that same third-order<br />delta difference ourselves for the interrupt timing entropy estimation<br />in add_timer_randomness(). But I think it's more valid with something<br />that likely has more noise (interrupt timing really _should_ be<br />noisy). It's not clear that the jitterentropy load really has all that<br />much noise.<br /><br />That said, I'm _also_ not a fan of the user mode models - they happen<br />too late anyway for some users, and as you say, it leaves us open to<br />random (heh) user mode distribution choices that may be more or less<br />broken.<br /><br />I would perhaps be willing to just put my foot down, and say "ok,<br />we'll solve the 'getrandom(0)' issue by just saying that if that<br />blocks too  much, we'll do the jitter entropy thing".<br /><br />Making absolutely nobody happy, but working in practice. And maybe<br />encouraging the people who don't like jitter entropy to use<br />GRND_SECURE instead.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
