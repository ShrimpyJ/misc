    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/19/519">"Theodore Y. Ts'o"</a><ul><li><a href="/lkml/2019/9/19/579">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/598">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/331">"Theodore Y. Ts'o"</a></li></ul></li><li class="origin"><a href="/lkml/2019/9/19/801">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/801">"Alexander E. Patrakov"</a><ul><li><a href="/lkml/2019/9/19/854">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/9/23/283">David Laight</a></li></ul></li><li><a href="/lkml/2019/9/20/330">"Theodore Y. Ts'o"</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2019/9/19/759/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Sep 2019 13:04:00 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 19, 2019 at 8:20 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Yes, it hashes it using a good hash, but it does so in a way that<br />&gt; makes it largely possible to follow the hashing and repeat it and<br />&gt; analyze it.<br />&gt;<br />&gt; That breaks if we have hw randomness, because it does the<br />&gt;<br />&gt;         if (arch_get_random_long(&amp;v))<br />&gt;                 crng-&gt;state[14] ^= v;<br />&gt;<br />&gt; so it always mixes in hardware randomness as part of the extraction,<br />&gt; but we don't mix anything else unpredictable - or even<br />&gt; process-specific - state in.<br /><br />So this is the other actual _serious_ patch I'd suggest: replace the<br /><br />          if (arch_get_random_long(&amp;v))<br />                  crng-&gt;state[14] ^= v;<br /><br />with<br /><br />          if (!arch_get_random_long(&amp;v))<br />                  v = random_get_entropy();<br />          crng-&gt;state[14] += v;<br /><br />instead. Yeah, it still doesn't help on machines that don't even have<br />a cycle counter, but it at least means that you don't have to have a<br />CPU rdrand (or equivalent) but you do have a cycle counter, now the<br />extraction of randomness from the pool doesn't just do the<br />(predictable) mutation for the backtracking, but actually means that<br />you have some very hard to predict timing effects.<br /><br />Again, in this case a cycle counter really does add a small amount of<br />entropy (everybody agrees that modern CPU's are simply too complex to<br />be predictable at a cycle level), but that's not really the point. The<br />point is that now doing the extraction really fundamentally changes<br />the state in unpredictable ways, so that you don't have that "if I<br />recognize a value, I know what the next value will be" kind of attack.<br /><br />Which, as mentioned, is actually not a purely theoretical concern.<br /><br />Note small detail above: I changed the ^= to a +=. Addition tends to<br />be better (due to carry between bits) when there might be bit<br />commonalities.  Particularly with something like a cycle count where<br />two xors can mostly cancel out previous bits rather than move bits<br />around in the word.<br /><br />With an actual random input from rdrand, the xor-vs-add is immaterial<br />and doesn't matter, of course, so the old code made sense in that<br />context.<br /><br />In the attached patch I also moved the arch_get_random_long() and<br />random_get_entropy() to outside the crng spinlock. We're not talking<br />blocking operations, but it can easily be hundreds of cycles with<br />rdrand retries, or the random_get_entropy() reading an external clock<br />on some architectures.<br /><br />                 Linus<br />diff --git a/drivers/char/random.c b/drivers/char/random.c<br />--- a/drivers/char/random.c<br />+++ b/drivers/char/random.c<br />&#64;&#64; -1057,9 +1057,10 &#64;&#64; static void _extract_crng(struct crng_state *crng,<br /> 	    (time_after(crng_global_init_time, crng-&gt;init_time) ||<br /> 	     time_after(jiffies, crng-&gt;init_time + CRNG_RESEED_INTERVAL)))<br /> 		crng_reseed(crng, crng == &amp;primary_crng ? &amp;input_pool : NULL);<br />+	if (!arch_get_random_long(&amp;v))<br />+		v = random_get_entropy();<br /> 	spin_lock_irqsave(&amp;crng-&gt;lock, flags);<br />-	if (arch_get_random_long(&amp;v))<br />-		crng-&gt;state[14] ^= v;<br />+	crng-&gt;state[14] += v;<br /> 	chacha20_block(&amp;crng-&gt;state[0], out);<br /> 	if (crng-&gt;state[12] == 0)<br /> 		crng-&gt;state[13]++;</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
