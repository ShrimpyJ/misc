    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/9/8/452">First message in thread</a></li><li><a href="/lkml/2019/9/18/1078">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/519">"Theodore Y. Ts'o"</a><ul><li class="origin"><a href="/lkml/2019/9/19/598">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/598">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/331">"Theodore Y. Ts'o"</a></li></ul></li><li><a href="/lkml/2019/9/19/759">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/19/801">"Alexander E. Patrakov"</a></li><li><a href="/lkml/2019/9/23/283">David Laight</a></li></ul></li><li><a href="/lkml/2019/9/20/330">"Theodore Y. Ts'o"</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/20/358">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/20/528">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/20/741">Linus Torvalds</a><ul><li><a href="/lkml/2019/9/20/806">Andy Lutomirski</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/20/784">Willy Tarreau</a><ul><li><a href="/lkml/2019/9/20/808">"Ahmed S. Darwish"</a></li></ul></li></ul></li><li><a href="/lkml/2019/9/26/676">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/26/677">"Ahmed S. Darwish"</a><ul><li><a href="/lkml/2019/9/26/689">Andy Lutomirski</a><ul><li><a href="/lkml/2019/9/28/26">"Ahmed S. Darwish"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Sep 2019 08:20:57 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH RFC v4 1/1] random: WARN on large getrandom() waits and introduce getrandom2()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 19, 2019 at 7:34 AM Theodore Y. Ts'o &lt;tytso&#64;mit.edu&gt; wrote:<br />&gt;<br />&gt; &gt; It's basically a "we used up entropy" thing, which is very<br />&gt; &gt; questionable to begin with as the whole discussion has shown, but<br />&gt; &gt; since it stops doing it after 10 cases, it's not even good security<br />&gt; &gt; assuming the "use up entropy" case makes sense in the first place.<br />&gt;<br />&gt; It was a bug that it stopped doing it after 10 tries, and there's a<br />&gt; really good reason for it.<br /><br />I really doubt that.<br /><br />&gt; The reason for zeroing it after we expose state is because otherwise<br />&gt; if the pool starts in a known state (the attacker knows the starting<br />&gt; configuration, knows the DMI table that we're mixing into the pool<br />&gt; since that's a constant, etc.),<br /><br />That's at least partly because our pool hashing has what looks a<br />fairly sad property.<br /><br />Yes, it hashes it using a good hash, but it does so in a way that<br />makes it largely possible to follow the hashing and repeat it and<br />analyze it.<br /><br />That breaks if we have hw randomness, because it does the<br /><br />        if (arch_get_random_long(&amp;v))<br />                crng-&gt;state[14] ^= v;<br /><br />so it always mixes in hardware randomness as part of the extraction,<br />but we don't mix anything else unpredictable - or even<br />process-specific - state in. So without hw randomness, you can try to<br />get a lot of data over a lot of boots - and for long times during<br />boots - and maybe find the pattern.<br /><br />But honestly, this isn't realistic. I can point to emails where *you*<br />are  arguing against other hashing algorithms because the whole state<br />extension attack simply isn't realistic.<br /><br />And I think it's also pretty questionable how we don't try to mix in<br />anything timing/process-specific when extracting, which is what makes<br />that "do lots of boots" possible.<br /><br />The silly "reset crng_init_cnt" does absolutely nothing to help that,<br />but in fact what it does is to basically give the attacker a way to<br />get an infinite stream of data without any reseeding (because that<br />only happens after crng_read()), and able to extend that "block at<br />boot" time indefinitely while doing so.<br /><br />Also honestly, if the attacker already has access to the system at<br />boot, you have some fairly big problems to begin with.<br /><br />So a much bigger issue than the state extension attack (pretty much<br />purely theoretical, given any entropy at all, which we _will_ have<br />even without the crng_init_cnt clearing) is the fact that right now we<br />really are predictable if there are no hardware interrupts, and people<br />have used /dev/urandom because other sources weren't useful.<br /><br />And the fact is, we *know* people use /dev/urandom exactly because<br />other sources haven't been useful.<br /><br />And unlike your theoretical state extension attack, I can point you to<br />black hat presentations that literally talk about using the fact that<br />we delay m,ixing in the input pull hash to know what's going on:<br /><br />  <a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Kedmi-Attacking-The-Linux-PRNG-On-Android-Weaknesses-In-Seeding-Of-Entropic-Pools-And-Low-Boot-Time-Entropy.pdf">https://www.blackhat.com/docs/eu-14/materials/eu-14-Kedmi-Attacking-The-Linux-PRNG-On-Android-Weaknesses-In-Seeding-Of-Entropic-Pools-And-Low-Boot-Time-Entropy.pdf</a><br /><br />That's a real attack. Based on the REAL fact that we currently have to<br />use the urandom logic because the entropy-waiting one is useless, and<br />in fact depends on the re-seeding happening too late.<br /><br />Yes, yes, our urandom has changed since that attack, and we use chacha<br />instead of sha1 these days. We have other changes too. But I don't see<br />anything fundamentally different.<br /><br />And all your arguments seem to make that _real_ security issue just<br />worse, exactly because we also avoid reseeding while crng_init is<br />zero.<br /><br />&gt; I'm happy this proposed is not changing the behavior of getrandom(0).<br />&gt; Why not just remap 0 to GRND_EXPLICIT | GRND_WAIT_ENTROPY, though?  It<br />&gt; will have the same effect, and it's make it clear what we're doing.<br /><br />Have you you not followed the whole discussion? Didn't you read the comment?<br /><br />People use "getrandom(0)" not because they want secure randomness, but<br />because that's the default.<br /><br />And we *will* do something about it. This patch didn't, because I want<br />to be able to backport it to stable, so that everybody is happier with<br />saying "ok, I'll use the new getrandom(GRND_INSECURE)".<br /><br />Because getrandom(0) will NOT be the the same as GRND_EXPLICIT |<br />GRND_WAIT_ENTROPY.<br /><br />getrandom(0) is the "I don't know what I am doing" thing. It could be<br />somebody that wants real secure random numbers. Or it could *not* be<br />one of those, and need the timeout.<br /><br />&gt; Later on, when we rip out /dev/random pool code (and make reading from<br />&gt; /dev/random the equivalent of getrandom(GRND_SECURE)), we'll need to<br />&gt; similarly map the legacy combination of flags for GRND_RANDOM and<br />&gt; GRND_RANDOM | GRND_NONBLOCK.<br /><br />And that is completely immaterial, because the "I'm confused" case<br />isn't about GRND_RANDOM. Nobody uses that anyway, and more importantly<br />it's not the case that has caused bugs. That one blocks even during<br />normal execution, so that one - despite being completely useless -<br />actually has the one good thing going for it that it's testable.<br />People will see the "oh, that took a long time" during testing. And<br />then they'll stop using it.<br /><br />Ted - you really don't seem to be making any distinction between<br />"these are real problems that should be fixed" vs "this is theory that<br />isn't relevant".<br /><br />The "getrandom(0)" is a real problem that needs to be fixed.<br /><br />The warnings from /dev/urandom are real problems that people<br />apparently have worked around by (incorrectly) using getrandom(0).<br /><br />The "hashing the random pool still leaves identities in place" is a<br />real problem that had a real attack.<br /><br />The state extension attack? Complete theory (again, I can point to you<br />saying the same thing in other threads), and the "fix" of resetting<br />the counter and not reseeding seems to be anything but.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
