    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/11/25/502">First message in thread</a></li><li><a href="/lkml/2019/11/25/502">Ingo Molnar</a><ul><li><a href="/lkml/2019/11/25/613">Ingo Molnar</a><ul><li><a href="/lkml/2019/11/26/151">Ingo Molnar</a><ul><li><a href="/lkml/2019/11/26/672">Ingo Molnar</a><ul><li><a href="/lkml/2019/11/26/761">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2019/11/26/577">   pr-tracker-bot&#64;kernel ...</a></li><li class="origin"><a href="/lkml/2019/11/26/594">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/26/594">Ingo Molnar</a><ul><li><a href="/lkml/2019/11/26/612">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Nov 2019 11:33:37 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] x86/iopl changes for v5.5</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 25, 2019 at 8:16 AM Ingo Molnar &lt;mingo&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; This tree implements a nice simplification of the iopl and ioperm code<br />&gt; that Thomas Gleixner discovered: we can implement the IO privilege<br />&gt; features of the iopl system call by using the IO permission bitmap in<br />&gt; permissive mode, while trapping CLI/STI/POPF/PUSHF uses in user-space if<br />&gt; they change the interrupt flag.<br /><br />I've pulled it.<br /><br />But do we have a test for something like this:<br /><br />   ioperm(.. limited set of ports..)<br />   access that limited set.<br /><br />   special_sequence() {<br />       iopl(3);<br />       access some extended set<br />       iopl(0)<br />   }<br /><br />   go back to access the limited set again<br /><br />because there's subtle interactions with people using *both* iopl()<br />and ioperm() and switching between the two. Historically you could<br />trivially do the above, because they are entirely independent<br />operations. Does it still work?<br /><br />Too busy/lazy to check myself.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
