    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/11/12/465">First message in thread</a></li><li><a href="/lkml/2019/11/12/960">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/13/282">Will Deacon</a><ul><li><a href="/lkml/2019/11/13/294">Russell King - ARM Linux admin</a><ul><li><a href="/lkml/2019/11/13/314">Will Deacon</a><ul><li><a href="/lkml/2019/11/14/429">Herbert Xu</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2019/11/13/625">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/13/625">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 13 Nov 2019 08:36:40 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] buffer: Fix I/O error due to ARM read-after-read hazard</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 13, 2019 at 2:24 AM Will Deacon &lt;will&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; Ok, I'll stick my neck out here, but if test_bit() is being used to read<br />&gt; a bitmap that is being concurrently modified (e.g. by set_bit() which boils<br />&gt; down to atomic_long_or()), then why isn't READ_ONCE() required? Right now,<br />&gt; test_bit takes a 'const volatile unsigned long *addr' argument, so I don't<br />&gt; see that you'll get a change in codegen except on alpha and, with this<br />&gt; erratum, arm32.<br /><br />You're right. We've moved back to actually having it volatile (or<br />possibly never got away from it). My bad.<br /><br />At one point, we tried very hard to make test_bit() perform much<br />better when you tested multiple bits, and I thought we ended up having<br />that merged and didn't want to regress. But apparently we never did<br />that, or it got undone.<br /><br />test_bit() is a very unfortunate interface, in that we actually use it<br />in some situations where we _really_ would want to merge reads (not<br />split them, but merge them). There are several cases where we do<br />constant test-bits on the same word, and don't care about ordering.<br />Things like thread flags etc.<br /><br />It's explicitly not ordered, so *merging* reads would be right and<br />lovely, it's the "don't read twice" that is bad. But we have no way to<br />tell the compiler that ;(<br /><br />Anyway, READ_ONCE() is ok by me when I look at the code, because as<br />you say, it's already volatile (like my memory ;).<br /><br />           Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
