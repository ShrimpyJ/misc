    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/11/25/662">First message in thread</a></li><li><a href="/lkml/2019/11/25/680">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/25/734">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/25/735">"Kenneth R. Crudup"</a></li><li class="origin"><a href="/lkml/2019/11/25/766">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/25/766">Linus Torvalds</a></li><li><a href="/lkml/2019/11/25/767">Linus Torvalds</a><ul><li><a href="/lkml/2019/11/26/176">Kirill Smelkov</a></li><li><a href="/lkml/2019/11/26/614">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2019/11/25/764/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 25 Nov 2019 19:21:56 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Commit 0be0ee71 ("fs: properly and reliably lock f_pos in fdget_pos()") breaking userspace</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 25, 2019 at 5:58 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; It might still be a bit noisy even with the above, but I think it will<br />&gt; at least be better.<br /><br />Yeah, I think I see what's going on.<br /><br />I for some reason entirely missed the tty case. Oops. That was just<br />stupid of me, I should have thought of it.<br /><br />There are other things that trigger the new informational line in that<br />hacky patch, and they _might_ matter, but I suspect it's the tty and<br />sound cases that causes the worst problems.<br /><br />I suspect Kirill Smelkov even might have mentioned the tty case at one<br />point, and I just spaced out.<br /><br />There are other things too that trigger that debug check, like the<br />sound file descriptors, and they might well matter too.<br /><br />Anyway, I think the thing to do (for now) is to just say "character<br />devices are FMODE_STREAM files if they have no llseek operations".<br />That should take care of both tty's and the sound devices.<br /><br />You can certainly have a character device that can do llseek, but it<br />sounds like a reasonable base rule.<br /><br />Of course, this may fix the f_pos locking issue, but replace it with a<br />"oops, the character device driver tried to look at *pos anyway", and<br />that will give you a nice OOPS instead.<br /><br />So this patch might just replace the failure mode with another failure<br />mode instead. At which point I think I'd have to revert that "get rid<br />of FMODE_ATOMIC_POS" trial balloon, but let's see if this patch solves<br />your problem and is sufficient..<br /><br />I'd suggest using it _together_ with that "pr_info()" debug patch I<br />sent, to see what else might be going on..<br /><br />                Linus<br /> fs/char_dev.c | 12 +++++++++++-<br /> 1 file changed, 11 insertions(+), 1 deletion(-)<br /><br />diff --git a/fs/char_dev.c b/fs/char_dev.c<br />index 00dfe17871ac..e5ffebdf80d5 100644<br />--- a/fs/char_dev.c<br />+++ b/fs/char_dev.c<br />&#64;&#64; -367,6 +367,16 &#64;&#64; void cdev_put(struct cdev *p)<br /> 	}<br /> }<br /> <br />+static int might_be_stream(struct inode *inode, struct file *file)<br />+{<br />+	const struct file_operations *fops = file-&gt;f_op;<br />+<br />+	if (fops-&gt;llseek &amp;&amp; fops-&gt;llseek != no_llseek)<br />+		return 0;<br />+<br />+	return stream_open(inode, file);<br />+}<br />+<br /> /*<br />  * Called every time a character special file is opened<br />  */<br />&#64;&#64; -416,7 +426,7 &#64;&#64; static int chrdev_open(struct inode *inode, struct file *filp)<br /> 			goto out_cdev_put;<br /> 	}<br /> <br />-	return 0;<br />+	return might_be_stream(inode, filp);<br /> <br />  out_cdev_put:<br /> 	cdev_put(p);</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
