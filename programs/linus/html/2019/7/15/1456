    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/7/15/42">First message in thread</a></li><li><a href="/lkml/2019/7/15/54">Dave Airlie</a><ul><li><a href="/lkml/2019/7/15/259">Daniel Vetter</a></li><li><a href="/lkml/2019/7/15/1440">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2019/7/15/1481">Linus Torvalds</a><ul><li><a href="/lkml/2019/7/15/1481">Dave Airlie</a><ul><li><a href="/lkml/2019/7/15/1484">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2019/7/15/1514">=?UTF-8?Q?Thomas_Hellstr=c3=b6m_=28VMware=29?=</a><ul><li><a href="/lkml/2019/7/15/1574">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2019/7/15/1479">Dave Airlie</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Jul 2019 11:00:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: drm pull for v5.3-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 15, 2019 at 10:37 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; I'm not pulling this. Why did you merge it into your tree, when<br />&gt; apparently you were aware of how questionable it is judging by the drm<br />&gt; pull request.<br /><br />Looking at some of the fallout, I also see that you then added that<br />"adjust apply_to_pfn_range interface for dropped token" patch that<br />seems to be for easier merging of this all.<br /><br />But you remove the 'token' entirely in one place, and in another you<br />keep it and just say "whatever, it's unused, pass in NULL". WHAA?<br /><br />As part of looking at this all, I also note that some of this is also<br />very non-kernely.<br /><br />The whole thing with trying to implement a "closure" in C is simply<br />not how we do things in the kernel (although I've admittedly seen<br />signs of it in some drivers).<br /><br />If this should be done at all (and that's questionable), at least do<br />it in the canonical kernel way: pass in a separate "actor" function<br />pointer and an argument block, don't try to mix function pointers and<br />argument data and call it a "closure".<br /><br />We try to keep data and functions separate. It's not even for security<br />concerns (although those have caused some splits in the past - avoid<br />putting function pointers in structures that you then can't mark<br />read-only!), it's a more generic issue of just keeping arguments as<br />arguments - even if you then make a structure of them in order to not<br />make the calling convention very complicated.<br /><br />(Yes, we do have the pattern of sometimes mixing function pointers<br />with "describing data", ie the "struct file_operations" structure<br />isn't _just_ actual function pointers, it also contains the module<br />owner, for example. But those aren't about mixing function pointers<br />with their arguments, it's about basically "describing" an object<br />interface with more than just the operation pointers).<br /><br />So some of this code is stuff that I would have let go if it was in<br />some individual driver ("Closures? C doesn't have closures! But<br />whatever - that driver writer came from some place that taught lamda<br />calculus before techning C").<br /><br />But in the core mm code, I want reviews. And I want the code to follow<br />normal kernel conventions.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
