    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/7/27/87">First message in thread</a></li><li><a href="/lkml/2019/7/27/87">Christian Brauner</a><ul><li><a href="/lkml/2019/7/27/88">Christian Brauner</a></li><li><a href="/lkml/2019/7/27/89">Christian Brauner</a><ul><li class="origin"><a href="/lkml/2019/7/27/238">Linus Torvalds</a><ul><li><a href="/lkml/2019/7/27/238">Linus Torvalds</a><ul><li><a href="/lkml/2019/7/27/291">Christian Brauner</a></li></ul></li><li><a href="/lkml/2019/7/27/241">Al Viro</a><ul><li><a href="/lkml/2019/7/27/294">Christian Brauner</a></li></ul></li><li><a href="/lkml/2019/7/27/292">Christian Brauner</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 27 Jul 2019 09:28:40 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 1/2] pidfd: add P_PIDFD to waitid()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Sorry to keep pestering about the patch series, but with the addition<br />of P_PIDFD, I react once again..<br /><br />On Sat, Jul 27, 2019 at 1:53 AM Christian Brauner &lt;christian&#64;brauner.io&gt; wrote:<br />&gt;<br />&gt; --- a/kernel/exit.c<br />&gt; +++ b/kernel/exit.c<br />&gt; &#64;&#64; -1555,6 +1555,7 &#64;&#64; static long do_wait(struct wait_opts *wo)<br />&gt;  static long kernel_waitid(int which, pid_t upid, struct waitid_info *infop,<br />&gt;                           int options, struct rusage *ru)<br />&gt;  {<br />&gt; +       struct fd f;<br /><br />Please don't do 'struct fd' at this level. That results in this ugly code later:<br /><br />&gt; -       put_pid(pid);<br />&gt; +       if (which == P_PIDFD)<br />&gt; +               fdput(f);<br />&gt; +       else<br />&gt; +               put_pid(pid);<br /><br />which just looks nasty.<br /><br />Instead, do all the 'file descriptor to pid' games here:<br /><br />&gt; +       case P_PIDFD:<br />&gt; +               type = PIDTYPE_PID;<br />&gt; +               if (upid &lt; 0)<br />&gt; +                       return -EINVAL;<br />&gt; +<br />&gt; +               f = fdget(upid);<br />&gt; +               if (!f.file)<br />&gt; +                       return -EBADF;<br />&gt; +<br />&gt; +               pid = pidfd_pid(f.file);<br />&gt; +               if (IS_ERR(pid)) {<br />&gt; +                       fdput(f);<br />&gt; +                       return PTR_ERR(pid);<br />&gt; +               }<br />&gt;                 break;<br /><br />and make thus just do something like<br /><br />        pid = get_pid_from_fd(upid);<br />        if (IS_ERR(pid))<br />                return PTR_ERR(pid);<br /><br />and now do that "fd to pid" in that helper function, and get the<br />reference to 'struct pid *' there instead.<br /><br />Which you can actually do efficiently and lightly without even getting<br />a ref to the 'struct file'. Something like<br /><br />  struct pid *fd_to_pid(unsigned int fd)<br />  {<br />        struct fd f;<br />        struct pid *pid;<br /><br />        f = fdget(fd);<br />        if (!f.file)<br />                return ERR_PTR(-EBADF);<br />        pid = pidfd_pid(f.file);<br />        if (!IS_ERR(pid))<br />                get_pid(pid);<br />        fdput(f);<br />        return pid;<br />  }<br /><br />is the stupid and straightforward thing, but if you want to be<br />*clever* you can actually avoid getting a reference to the 'struct<br />file *" entirely, and do the fd-&gt;pid lookup under rcu_read_lock()<br />instead. It's slightly more complex, but it avoids the fdget/fdput<br />reference count games entirely.<br /><br />And then all that kernel_waitid() ever worries about is "struct pid<br />*", and the ending goes back to just that simple<br /><br />        put_pid(pid);<br />        return ret;<br /><br />instead.<br /><br />This was kind of my point of doing all the "find_get_pid()" games in<br />the "switch()" statement - the different cases have different ways to<br />look up what the "struct pid *" pointer should be, but they should all<br />just look up a pid pointer, and then nothing else needs to care about<br />'type' any more. See?<br /><br />Hmm?<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
