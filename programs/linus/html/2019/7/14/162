    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/7/14/45">First message in thread</a></li><li><a href="/lkml/2019/7/14/45">Alexey Dobriyan</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Jul 2019 11:12:55 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] proc: revert /proc/*/cmdline rewrite</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 14, 2019 at 2:52 AM Alexey Dobriyan &lt;adobriyan&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; The problem is that I can't even drag this trivia in out of _fear_ that<br />&gt; it is userspace observable:<br />&gt;<br />&gt; <a href="https://marc.info/?t=155863429700002&amp;r=1&amp;w=4">https://marc.info/?t=155863429700002&amp;r=1&amp;w=4</a><br />&gt;         [PATCH] elf: fix "start_code" evaluation<br /><br />Oh, we should do things like this all the time.<br /><br />"Observable" isn't a problem per se. It only turns into a problem when<br />it actually breaks things.<br /><br />We should always strive for understandable - and maintainable - code.<br /><br />"Make it as simple as possible, but no simpler".<br /><br />Of course, if you can prove that some change isn't observable, then<br />that is always the safer change.<br /><br />Because any observable change _can_ (and admittedly surprisingly<br />often) does end up showing that yes, somebody out there depended on<br />some particularly subtle observable detail.<br /><br />But often "observable" doesn't mean "breakage", and it's not that<br />uncommon that we do things that have slightly different semantics in<br />order to clean stuff up (or fix actual bugs that cause problems).<br /><br />The important thing when something observable _does_ cause actual<br />breakage is that it gets fixed, and that people don't try to make<br />excuses for it. In particular the "but I fixed a bug" is _not_ an<br />excuse for causing some user load to break, because that was just<br />another bug.<br /><br />Of course, it's also perfectly valid to say "ok, this could be<br />improved, but changing it changes observable behavior, and it's not<br />worth my time to worry about whether something can break".<br /><br />So there should certainly be a *worry* about breakage (and the pain<br />that breakage can cause) when making cleanups etc. But as long as you<br />stand behind your cleanup and know that you may have to fix it up if<br />somebody reports an issue with it, it's all good.<br /><br />IOW, it's a balancing thing. Do you think the cleanup is worth the<br />"this may come back to bite me" problem?<br /><br />&gt; and yet the patch which did a regression and an infoleak continues<br />&gt; to be papered over and for which the only justification was<br />&gt; "simplify and clarify".<br /><br />See above. "Simplify and clarify" is a good excuse in general.<br /><br />What is *not* a good excuse is then if somebody doesn't stand up and<br />say "oh, my bad, I screwed up, and here's the fix for the breakage".<br /><br />In this case it took a year for people to report problems, which shows<br />that at least the breakage wasn't obvious.<br /><br />And I'd rather fix it by cleaning up *more* and making the rules<br />simpler and easier to understand.<br /><br />Don't get me wrong - reverting is often a good strategy too.<br /><br />I will revert very aggressively when close to a release, for example,<br />when we just don't have time to try to figure things out. Or if the<br />breakage is large enough that it hinders people from testing and<br />working on other things.<br /><br />Or if the original developer is not responsive and there isn't<br />somebody around that goes "ok, that can be fixed by xyz.."<br /><br />Then "let's just revert" is the right thing to do. It can be the<br />simplest thing, when you just don't have the resources to do anything<br />else, or it's not just worth it.<br /><br />                     Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
