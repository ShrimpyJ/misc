    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2019/12/6/286">First message in thread</a></li><li><a href="/lkml/2019/12/17/876">Will Deacon</a><ul><li><a href="/lkml/2019/12/17/920">Linus Torvalds</a><ul><li><a href="/lkml/2019/12/17/924">Linus Torvalds</a><ul><li><a href="/lkml/2019/12/17/953">Will Deacon</a></li></ul></li><li class="origin"><a href="/lkml/2019/12/18/378">Linus Torvalds</a><ul><li><a href="/lkml/2019/12/18/378">Michael Ellerman</a></li><li><a href="/lkml/2019/12/19/373">Will Deacon</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2019/12/17/957/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Dec 2019 10:32:35 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: READ_ONCE() + STACKPROTECTOR_STRONG == :/ (was Re: [GIT PULL] Please pull powerpc/linux.git powerpc-5.5-2 tag (topic/kasan-bitops))</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 17, 2019 at 10:04 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Let me think about it.<br /><br />How about we just get rid of the union entirely, and just use<br />'unsigned long' or 'unsigned long long' depending on the size.<br /><br />Something like the attached patch - it still requires that it be an<br />arithmetic type, but now because of the final cast.<br /><br />But it might still be a cast to a volatile type, of course. Then the<br />result will be volatile, but at least now READ_ONCE() won't be taking<br />the address of a volatile variable on the stack - does that at least<br />fix some of the horrible code generation. Hmm?<br /><br />This is untested, because I obviously still have the cases of<br />structures (page table entries) being accessed once..<br /><br />              Linus<br /> include/linux/compiler.h | 33 +++++++++++++++++----------------<br /> 1 file changed, 17 insertions(+), 16 deletions(-)<br /><br />diff --git a/include/linux/compiler.h b/include/linux/compiler.h<br />index 5e88e7e33abe..8b4282194f16 100644<br />--- a/include/linux/compiler.h<br />+++ b/include/linux/compiler.h<br />&#64;&#64; -179,18 +179,18 &#64;&#64; void ftrace_likely_update(struct ftrace_likely_data *f, int val,<br /> <br /> #include &lt;uapi/linux/types.h&gt;<br /> <br />-#define __READ_ONCE_SIZE						\<br />-({									\<br />-	switch (size) {							\<br />-	case 1: *(__u8 *)res = *(volatile __u8 *)p; break;		\<br />-	case 2: *(__u16 *)res = *(volatile __u16 *)p; break;		\<br />-	case 4: *(__u32 *)res = *(volatile __u32 *)p; break;		\<br />-	case 8: *(__u64 *)res = *(volatile __u64 *)p; break;		\<br />-	default:							\<br />-		barrier();						\<br />-		__builtin_memcpy((void *)res, (const void *)p, size);	\<br />-		barrier();						\<br />-	}								\<br />+/* "unsigned long" or "unsigned long long" - make it fit in a register if possible */<br />+#define __READ_ONCE_TYPE(size) \<br />+	__typeof__(__builtin_choose_expr(size &gt; sizeof(0UL), 0ULL, 0UL))<br />+<br />+#define __READ_ONCE_SIZE							\<br />+({										\<br />+	switch (size) {								\<br />+	case 1: *(unsigned long *)res = *(volatile __u8 *)p; break;		\<br />+	case 2: *(unsigned long *)res = *(volatile __u16 *)p; break;		\<br />+	case 4: *(unsigned long *)res = *(volatile __u32 *)p; break;		\<br />+	case 8: *(unsigned long long *)res = *(volatile __u64 *)p; break;	\<br />+	}									\<br /> })<br /> <br /> static __always_inline<br />&#64;&#64; -258,13 +258,14 &#64;&#64; static __always_inline void __write_once_size(volatile void *p, void *res, int s<br /> <br /> #define __READ_ONCE(x, check)						\<br /> ({									\<br />-	union { typeof(x) __val; char __c[1]; } __u;			\<br />+	__READ_ONCE_TYPE(sizeof(x)) __u;				\<br />+	compiletime_assert(sizeof(x) &lt;= sizeof(__u), "READ_ONCE type");	\<br /> 	if (check)							\<br />-		__read_once_size(&amp;(x), __u.__c, sizeof(x));		\<br />+		__read_once_size(&amp;(x), &amp;__u, sizeof(x));		\<br /> 	else								\<br />-		__read_once_size_nocheck(&amp;(x), __u.__c, sizeof(x));	\<br />+		__read_once_size_nocheck(&amp;(x), &amp;__u, sizeof(x));	\<br /> 	smp_read_barrier_depends(); /* Enforce dependency ordering from x */ \<br />-	__u.__val;							\<br />+	(__typeof__(x))__u;						\<br /> })<br /> #define READ_ONCE(x) __READ_ONCE(x, 1)<br /> </pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
