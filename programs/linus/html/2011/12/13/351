    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/12/7/288">First message in thread</a></li><li><a href="/lkml/2011/12/8/39">Brian Gerst</a><ul><li><a href="/lkml/2011/12/11/101">Brian Gerst</a><ul><li><a href="/lkml/2011/12/11/103">Brian Gerst</a><ul><li><a href="/lkml/2011/12/13/65">Tim Blechmann</a></li></ul></li><li class="origin"><a href="/lkml/2011/12/13/372">Linus Torvalds</a><ul><li><a href="/lkml/2011/12/13/372">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 13 Dec 2011 14:58:37 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: Split off mem*io functions</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Dec 11, 2011 at 2:10 PM, Brian Gerst &lt;brgerst&#64;gmail.com&gt; wrote:<br />&gt; Commit 6175ddf06b6172046a329e3abfd9c901a43efd2e changed the mem*io<br />&gt; functions to use the standard memcpy/memset routines, but there were<br />&gt; unintended consequences.  Some devices cannot cope with 64-bit or<br />&gt; non-sequential accesses that the optimized routines do.  Change them<br />&gt; back to simple 32-bit sequential writes.<br /><br />It might be worth giving examples of when the optimized routines don't work:<br /><br /> - some devices (for example, traditional CGA/VGA) read and write to<br />different banks and bit modes, so a "read-mask-write" operation just<br />does not work at all. You have to do pure writes when copying to such<br />a destination. Afaik, none of our *current* memory copies do this for<br />partial words, but it's an example of something that is valid (and<br />sometimes done) in memcpy to avoid unaligned stores, for example.<br /><br /> - Many devices do not like overlapping stores, which the optimized<br />memory copies *do* do. Our memory copy does things like this:<br /><br />        /*<br />         * Move data from 4 bytes to 7 bytes.<br />         */<br />        movl (%rsi), %ecx<br />        movl -4(%rsi, %rdx), %r8d<br />        movl %ecx, (%rdi)<br />        movl %r8d, -4(%rdi, %rdx)<br /><br />   to copy 4-7 bytes from source %rsi to destination %dsi (with %rdx<br />containing the size), which actually writes four bytes twice - some of<br />th ebytes are just going to be overlapping. This often does not work<br />at all for memory mapped IO.<br /><br /> - the "enhanced string" support actually makes "rep movsb" the most<br />optimal way to copy memory, but only to cacheable RAM. If the source<br />or destination is memory mapped IO, the microcode will make "rep<br />movsb" turn into the traditional slow byte-by-byte copy. That will be<br />*extremely* slow, even if it might work for the device.<br /><br /> - Finally, 64-bit writes may confuse some devices.<br /><br />But the point being that it's a much bigger issue than just 64-bit.<br /><br />                   Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
