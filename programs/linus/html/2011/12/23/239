    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/11/29/321">First message in thread</a></li><li><a href="/lkml/2011/12/22/288">Linus Torvalds</a><ul><li><a href="/lkml/2011/12/23/190">Christoph Lameter</a><ul><li class="origin"><a href="/lkml/2012/1/4/155">Linus Torvalds</a><ul><li><a href="/lkml/2012/1/4/155">Christoph Lameter</a><ul><li><a href="/lkml/2012/1/4/169">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 23 Dec 2011 12:54:12 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] slab fixes for 3.2-rc4</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 23, 2011 at 8:55 AM, Christoph Lameter &lt;cl&#64;linux.com&gt; wrote:<br />&gt;<br />&gt; There is an #ifndef CONFIG_M386 around the implementation of these for<br />&gt; x86. Use on i386 will not generate an xadd instructions but fallback to a<br />&gt; generic implementation.<br /><br />Ok, good. It's not the really right thing to do, but it will at least work.<br /><br />&gt; The add_return stuff was already available with the earlier per cpu apis<br />&gt; (local_t and percpu) that this_cpu replaces and is still available through<br />&gt; the atomic operations.<br /><br />Sure. The "atomic_op_return()" form actually *makes*sense*. It has<br />atomicity guarantees, and the return value is meaningful.<br /><br />The same IS SIMPLY NOT TRUE of the "this_cpu" versions.<br /><br />&gt; If one wants to exploit the per cpu atomicity then one may want to know<br />&gt; what the result was.<br /><br />No. You're blathering and doing "magical thinking" instead of actually<br />thinking things through.<br /><br />Think about the semantics. What does it mean to get a result of the op<br />on a percpu variable?<br /><br />You have two cases:<br /><br />Case 1: you actually know what CPU you are on, and the number may have<br />some meaning. But in that case you are also *pinned* to that CPU, and<br />there is no difference between<br /><br />   x = percpu_value;<br />   x += y;<br />   percpu_value = x;<br />   .. look at 'x' .. to see what you did<br /><br />and<br /><br />    percpu_value += x;<br />   ..look at percpu_value to see what you did ..<br /><br />and<br /><br />    x = xadd percpu_value,y<br /><br />so there are no "atomicity advantages" - xadd is the same as<br />open-coding it. You are pinned to the CPU, all three ways are 100%<br />equivalent.<br /><br />The other case is:<br /><br />Case 2: you're not pinned to the CPU, and you just do statistics and<br />add some value to memory. BUT NOW THE RESULT HAS ABSOLUTELY NO<br />MEANING!<br /><br />Now "xadd" would possibly give different results from "add and read<br />the result", since you migth be moving around between cpu's, but there<br />is absolutely no way you could ever care, sine the value you read back<br />is meaningless regardless of whether it's the return value of xadd, or<br />the value from some other CPU. There are other cpu's with the same<br />percpu variable, and they are all equivalent as far as you are<br />concerned, because you're not pinned to one of them.<br /><br />See? xadd buys you *nothing* from a semantic standpoint. And anybody<br />who *thinks* it buys you something is just confused and just<br />introduced a bug.<br /><br />So the "thiscpu_op_return" functions are broken-by-design! They have<br />no meaning. They are completely crazy.<br /><br />That's why they should be removed. Anybody who thinks they add value<br />has not thought through what they actually do or mean.<br /><br />                            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
