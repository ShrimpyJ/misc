    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/11/29/321">First message in thread</a></li><li><a href="/lkml/2011/12/20/83">Pekka Enberg</a><ul><li><a href="/lkml/2011/12/20/203">Tejun Heo</a><ul><li><a href="/lkml/2011/12/20/206">Christoph Lameter</a></li><li class="origin"><a href="/lkml/2011/12/20/314">Linus Torvalds</a><ul><li><a href="/lkml/2011/12/20/314">Tejun Heo</a><ul><li><a href="/lkml/2011/12/21/55">Pekka Enberg</a></li><li><a href="/lkml/2011/12/21/231">Christoph Lameter</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2011/12/20/204">Christoph Lameter</a><ul><li><a href="/lkml/2011/12/21/53">Pekka Enberg</a><ul><li><a href="/lkml/2011/12/21/234">Christoph Lameter</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 20 Dec 2011 11:28:25 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] slab fixes for 3.2-rc4</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 20, 2011 at 8:23 AM, Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; To illustrate the issue, for "per cpu add" we have:<br />&gt;&gt;<br />&gt;&gt; __this_cpu_add()<br />&gt;&gt; this_cpu_add()<br />&gt;&gt; irqsafe_cpu_add()<br />&gt;<br />&gt; Description for 7340a0b152 "this_cpu: Introduce this_cpu_ptr() and<br />&gt; generic this_cpu_* operations" should explain the above three.<br /><br />I don't think that's relevant.<br /><br />Sure, they have semantics, but the semantics are stupid and wrong.<br />Whether they are documented or not isn't even the issue.<br /><br />There are also too many of them to begin with, and they are generally pointless.<br /><br />Just grep for "this_cpu_" and notice that we basically have *more*<br />lines in the header files to defile the crap, than we have lines in<br />the rest of the kernel to *use* it.<br /><br />If that doesn't show how crappy the idiotic interface is, I don't know<br />what would.<br /><br />So I would suggest:<br /><br /> - get rid of *all* of them, leave exactly one version (this_cpu_xyz())<br /><br /> - ask yourself which of the ops we even need. "this_cpu_write()"<br />needs to just go away. There's no excuse for it. Are the other ones<br />needed? I can see "add" and "cmpxchg". Is there *any* reason to<br />support anything else?<br /><br /> - afaik, there is exactly *one* user of the "this_cpu_cmpxchg", and<br />*one* user of "irqsafe_cpu_cmpxchg". And those are both inside<br />CONFIG_CMPXCHG_LOCAL. Yet we have completely *INSANE* semantics for<br />the cmpxchg operations.<br /><br /> - there's the magic "irqsafe_cmpxchg_double". Again, there is exactly<br />*one* user of it, but just grep for "cpu_cmpxchg_double" and notice<br />how we define all the crazy variations of it etc too. Again, *INSANE*.<br /><br />In general, just grep for "this_cpu_" and notice that we basically<br />have *more* lines in the header files to defile the crap, than we have<br />lines in the rest of the ernel to *use* it.<br /><br />Seriously, the whole piece of crap needs to go. Everything. It's shit.<br />It's unsalvageable.<br /><br />I would suggest that we support exactly two operations, and nothing more.<br /><br /> - this_cpu_cmpxchg (and the "double") version of it:<br /><br />   This operation needs to be irq-safe and preempt-safe<br />*by*definition*. The whole concept of "cmpxchg" doesn't make sense<br />without that. Having three different versions of it with totally<br />insane semantics just NEEDS TO GO AWAY. There should be one version,<br />and it damn well is safe to use and does a totally unambiguous<br />"cmpxchg". Nothing else.<br /><br /> - this_cpu_add()<br /><br />   This operation is potentially useful for "sloppy statistics" where<br />the point is to do things quickly without requiring atomic accesses.<br />As such, it at least has *some* excuse for having the "irqsafe" vs<br />"preempt_safe" vs "regular" semantics. And it does have several users,<br />so.. However, I'd like to do something sane about it, and the<br />non-preempt version absolutely *needs* to have a debug check to verify<br />it, Thomas was already complaining about this.<br /><br />But get rid of everything else. Stop using the "inc" ones, replace<br />them by "add 1". Don't have millions of lines of duplicate definitions<br />for crap that nobody cares about.<br /><br />Also, get rid of the 1-byte and 2-byte versions. I doubt anybody<br />actually uses them, and it's not even a portable thing to do well (ie<br />the whole alpha issue with non-atomic byte and word accesses). So<br />again, it's just noise in the header files that makes it hard to<br />understand how they work because they are so verbose and do so many<br />stupid things.<br /><br />Being "generic" is not actually a good thing. Not when we're talking<br />about random details like this.<br /><br />Hmm?<br /><br />                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
