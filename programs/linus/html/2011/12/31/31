    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/12/31/23">First message in thread</a></li><li><a href="/lkml/2011/12/31/23">	drahemmaps&#64;gmx ...</a><ul><li class="origin"><a href="/lkml/2011/12/31/33">Linus Torvalds</a><ul><li><a href="/lkml/2011/12/31/33">Matthew Garrett</a><ul><li><a href="/lkml/2011/12/31/34">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 31 Dec 2011 11:29:56 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: loading firmware while usermodehelper disabled.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Dec 31, 2011 at 7:01 AM,  &lt;drahemmaps&#64;gmx.net&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; So it's very simple: drivers that load firmware at resume time are<br />&gt;&gt; buggy. No ifs, buts, or maybes about it.<br />&gt;<br />&gt; Or are they?<br /><br />Yes they are.<br /><br />&gt; You see, PCMCIA cards [don't know about the pccard express stuff]<br />&gt; have to deal with a notable exception from this rule since:<br />&gt;<br />&gt; pcmcia: improve check for same card in slot after resume<br />&gt; "88b060d6c03fcb9e4d2018b4349954c4242a5c7f"<br />&gt;<br />&gt; This patch changed the way how suspend/resume is handled.<br /><br />Yes, that's problematic. As is the USB thing making resume a probe event too.<br /><br />But it doesn't change the fact that if a driver needs to load the<br />firmware at such an event, then the driver is buggy. The reason really<br />is very very simple: there is no guarantee at all that the backing<br />store for the firmware has been resumed first!<br /><br />It really is that simple.<br /><br />And as mentioned, I do agree that the underlying *cause* for all these<br />bugs is that our firmware loading helper routines are totally full of<br />sh*t. The whole "request_firmware()" logic makes it very very easy for<br />drivers to get this wrong, and then some bus interfaces (pcmcia and<br />usb) make it almost impossible for drivers to do it right by turning<br />"suspend/resume" into "detach/probe".<br /><br />But what the driver *should* be doing is to load the firmware at<br />device open time (NOT at "driver load time" - because that can and<br />does happen too early too, for the case of built-in drivers!) and<br />simply keep the firmware around in the case of a suspend/resume event,<br />so that it doesn't have to re-load it off a disk (or network, or<br />whatever) that hasn't been resumed yet!<br /><br />And this really does solve all problems.<br /><br />There are drivers that do this right, so it's not impossible. For a<br />network driver, for example, you should load the firmware into memory<br />when the device is opened the first time, and you should unload it<br />only when the device is downed. If you follow those fairly simple<br />rules, you're all good - at a resume event you either do nothing at<br />all about the firmware (network device not up) or you have the<br />firmware in memory and can just re-load it onto the card.<br /><br />For an example of this, look at<br /><br />    drivers/net/ethernet/realtek/r8169.c<br /><br />and its explicit caching of firmware (see "rtl_request_firmware()" and<br />the whole "rtl_fw" handling), which actually makes it fairly easy for<br />the rest of the driver to do things right.<br /><br />However, I really do think that it's<br /><br /> (a) very error-prone<br /><br /> (b) complexity all over<br /><br />for drivers to have to know to do this on their own. So we have a<br />*few* drivers that do this correctly (after having done it wrong, and<br />then fixing it), but most drivers don't. And I really think that the<br />request_firmware() interface is the problem: the firmware layer should<br />be doing this kind of caching for the drivers, so that drivers<br />wouldn't *have* to.<br /><br />For example, if somebody builds a kernel that doesn't support suspend<br />or hibernation, then the caching is pointless, so a really *good*<br />caching model would take that into account and just say "I won't waste<br />memory on that case". But duplicating that kind of logic for every<br />driver that needs firmware is just totally crazy. But if we had a good<br />interface to request_firmware(), we might be able to do that kind of<br />thing automatically.<br /><br />                           Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
