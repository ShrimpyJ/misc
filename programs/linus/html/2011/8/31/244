    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/8/26/415">First message in thread</a></li><li><a href="/lkml/2011/8/30/260">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/31/233">Arnd Bergmann</a><ul><li><a href="/lkml/2011/8/31/240">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/31/243">Arnd Bergmann</a><ul><li><a href="/lkml/2011/8/31/246">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2011/8/31/252">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/31/252">"H.J. Lu"</a><ul><li><a href="/lkml/2011/9/2/405">"H.J. Lu"</a></li></ul></li><li><a href="/lkml/2011/8/31/255">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/31/258">Linus Torvalds</a></li><li><a href="/lkml/2011/9/1/170">Avi Kivity</a></li></ul></li></ul></li><li><a href="/lkml/2011/9/1/24">Jonas Bonn</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Aug 2011 09:46:39 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: RFD: x32 ABI system call numbers</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 31, 2011 at 9:14 AM, Arnd Bergmann &lt;arnd&#64;arndb.de&gt; wrote:<br />&gt;<br />&gt; * padding in struct timespec when you have a long long tv_sec and<br />&gt;  32-bit long tv_nsec. This might cause kernel stack data leakage<br />&gt;  in some kernel interfaces when they don't clear the padding.<br /><br />I suspect only sane solution to this (having thought about it some<br />more) is to just say "POSIX is f*^&amp;ing wrong".<br /><br />I think everybody agrees that time_t *needs* to be 64-bit. That is<br />only getting more and more clear the closer we get to 2038. There may<br />be excuses for it for some random crappy 32-bit embedded platform that<br />nobody really expects to survive for many more years, but it's simply<br />not debatable for anything else.<br /><br />And if time_t is 64-bit, then timespec and timeval practically needs<br />to have a 64-bit tv_usec/tv_nsec because anything else causes problems<br />with packing etc. And that's doubly true in a 64-bit environment with<br />a 32-bit "sub-environment".<br /><br />POSIX has been wrong before. Sometimes the solution really is to say<br />"sorry, you wrote that 20 years ago, and things have changed".<br /><br />&gt; * random broken applications assuming that timespec/timeval has<br />&gt;  two 'long' members, instead of using the proper header files.<br /><br />Those applications are already broken.<br /><br />I just googled for these kinds of issues, and found this text: "A<br />timeval has two components, both ints".  Does that happen to work<br />often? Yes. Does it make it any more correct? Hell no. But people<br />really used to believe that, and it even used to be true. AND THEY GOT<br />FIXED.<br /><br />If you assume two 'long' members, you're already incorrect, because<br />'time_t' is not at all guaranteed to be 'long'. And if you assume that<br />'tv_nsec' is "long", you may be correct wrt POSIX, but given the<br />realities I think it's still perfectly valid to say "you're a moron,<br />and we need to fix it".<br /><br />Because paper is what we use to wipe after we've used the toilet. At<br />some point, "reality" just hits a hell of a lot harder than any paper<br />ever will.<br /><br />I really think that "x32" should try to aim *VERY* hard at using the<br />64-bit system calls, and seeing itself as being a "32-bit application<br />in a 64-bit world".  That's not just true for time_t (which I think<br />should be 64-bit on anything new that expects to survive for any<br />amount of time), but in general.<br /><br />I could well imagine, for example, that you might have x32<br />applications that wanted to access huge datasets, and then use special<br />"accessor" functions for that (think "HIGHMEM.SYS" except within the<br />application). That really says "think of it as a 64-bit process, but<br />with a short pointer mode for density" to me.<br /><br />                         Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
