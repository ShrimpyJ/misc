    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/8/18/332">First message in thread</a></li><li><a href="/lkml/2011/8/23/237">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/23/240">Andrew Lutomirski</a><ul><li><a href="/lkml/2011/8/23/243">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/23/279">Al Viro</a><ul><li><a href="/lkml/2011/8/23/296">Al Viro</a></li><li><a href="/lkml/2011/8/24/155">Borislav Petkov</a></li></ul></li></ul></li><li><a href="/lkml/2011/8/23/244">Borislav Petkov</a><ul><li><a href="/lkml/2011/8/23/248">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/23/263">Al Viro</a></li></ul></li><li><a href="/lkml/2011/8/23/332">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/23/361">Borislav Petkov</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2011/8/23/260">Al Viro</a><ul><li class="origin"><a href="/lkml/2011/8/23/371">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/23/371">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/23/383">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2011/8/23/334">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/23/338">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/23/339">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/8/23/340">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 23 Aug 2011 10:33:09 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [uml-devel] SYSCALL, ptrace and syscall restart breakages (Re: [RFC] weird crap with vdso on uml/i386)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 23, 2011 at 9:48 AM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; Um...  How would it know which syscall variant had that been, to start<br />&gt; with?<br /><br />Just read the instruction, for chissake.<br /><br />UML *already* does that, to see if it's "int80" or "sysenter" ('is_syscall()').<br /><br />Now, I do agree that if we had designed the ptrace interface with<br />these kinds of issues in mind, then we would have added a "state"<br />field to the thing that could have this kind of information as part of<br />the GETREGS interface. There is no question that that would have been<br />a good idea - but we have what we have.<br /><br />I mean, technically, we could also have always just given "raw user<br />space register state" to ptrace, and then just said that "anybody who<br />traces system calls needs to know the exact calling conventions for<br />*that* kind of system call". But instead of that, we give the "cooked"<br />pt_regs values on read-out, to make it simpler for strace and friends.<br /><br />And it's actualyl simpler for UML too. If we *didn't* give that cooked<br />register set information, then UML would *still* have to look at the<br />actual instruction in order to emulate the system call correctly<br />("it's sysenter, so now I need to take some of the system call<br />arguments from the stack"). So the fact that we do that register state<br />swizzling actually helps not just strace, but UML too.<br /><br />It would be *nice* if we did the swizzling automatically at setregs()<br />time too, but we simply don't have enough information in the kernel to<br />do that. Again, exactly because pt_regs doesn't have a "state"<br />variable, when user-space does the SETREGS call, we simply don't know<br />whether we are in "normal" code or in some system call entry or exit<br />state. So the kernel does the swizzling at GETREGS time (by virtue of<br />always having the registers in a "canonical" state for system call<br />entry), but we fundamentally *cannot* to do the unswizzle, because we<br />don't know what the SETREGS caller actually did.<br /><br />So I think the current state is actually the best we could possibly<br />do, with the caveat that *if* we had known about the "different system<br />calls have different register layouts" originally and had thought of<br />it, we could have added a 'state' word that the kernel could set at<br />GETREGS time, and use at SETREGS time to decide whether swizzling is<br />needed or not.<br /><br />But not only would that have required time travel (ptrace existed<br />before the multiple system calls did), even then it's not 100% clear<br />that the current simpler model (with the admittedly subtle case of<br />implicit state and its effect on register state) isn't actually the<br />better solution. *Somebody* has to do the register swizzling, and the<br />current "kernel canonicalizes registers at read time, you need to<br />swizzle them if you change state" may simply be the RightThing(tm).<br /><br />                                      Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
