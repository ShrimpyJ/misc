    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/8/26/415">First message in thread</a></li><li><a href="/lkml/2011/8/26/418">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/26/424">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2011/8/26/444">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/26/444">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/26/445">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/8/26/448">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/9/6/302">Florian Weimer</a></li></ul></li><li><a href="/lkml/2011/8/26/446">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/8/27/2">Christoph Hellwig</a></li></ul></li></ul></li><li><a href="/lkml/2011/9/2/15">Andy Lutomirski</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Aug 2011 17:36:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: RFD: x32 ABI system call numbers</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 26, 2011 at 4:39 PM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt; On 08/26/2011 04:13 PM, Linus Torvalds wrote:<br />&gt;&gt;<br />&gt;&gt;  - why do we need another system call model at all?<br />&gt;<br />&gt; We think we can get more performance for a process which doesn't need<br />&gt; more than 4 GiB of virtual address space by allowing them to keep<br />&gt; pointers 4 bytes long, while still giving them the advantage of 16<br />&gt; 64-bit registers, PC-relative addressing, and so on.  Furthermore, there<br />&gt; are users who seem more willing to port code known to not be 64-bit<br />&gt; clean to x32 than to do a whole new port.<br /><br />Let me repeat: what the f*&amp;% does that have to do with a new system call model?<br /><br />NOTHING.<br /><br />At most, it means that we should add a PROT_4G to the mmap() system<br />call, so that user space can say "I want the result in the low 4G"<br />range. But even that wouldn't need a new system call.<br /><br />&gt; If the question is "why not just thunk this in userspace", the answer is<br />&gt; that we'd like to take advantage of the compat layer already in the kernel.<br /><br />And you *still* don't answer the question, you just make up new red<br />herring sentences.<br /><br />Apart from mmap() (and to a lesser degree brk()), the kernel almost<br />never makes up user pointers. It's user space that points to them, and<br />gives them as arguments. There'sa few system calls that take pointers<br />to pointers: execve(), readv/writev, send/recvmsg, but then the actual<br />*example* you give isn't even one of those.<br /><br />&gt; If the question is "why not just use int $0x80" we actually did that in<br />&gt; early prototyping, but SYSCALL64 is much faster.<br /><br />No. The actual question is "why are you giving crazy examples, and<br />what the f*ck is going on"?<br /><br />&gt; sys_stat is unshared because it involves data structures in memory.  In<br />&gt; x32, this invokes compat_sys_newstat just like you would from an i386<br />&gt; process.<br /><br />.. and this is exactly the kind of answer that makes me go NAK NAK NAK.<br /><br />Christ no.<br /><br />If you are doing a new native x32 model, then you DAMN WELL USE THE<br />EXISTING "stat()" system call.<br /><br />There is *ZERO* reason to not use it. Use the standard 64-bit<br />structure layout. Why the hell would it be a new system call?<br /><br />That's what I'm arguing against. This kind of crazy "let's make up YET<br />ANOTHER interface, even though the existing interface would work".<br />WHY?<br /><br />If you want to be compatible with "int 0x80" and old libraries, then I<br />really don't see why you would introduce *anything* new.<br /><br />And if it is truly a new ABI, then damn it, use the existing 64-bit<br />system calls as far as possible.<br /><br />The "mix and match randomly and then introduce new system calls<br />because you made a bad design decision" sounds just crazy.<br /><br />                              Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
