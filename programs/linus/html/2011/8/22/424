    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/8/18/332">First message in thread</a></li><li><a href="/lkml/2011/8/22/375">Andrew Lutomirski</a><ul><li><a href="/lkml/2011/8/22/379">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2011/8/22/432">Linus Torvalds</a><ul><li><a href="/lkml/2011/8/22/432">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/8/22/438">Al Viro</a><ul><li><a href="/lkml/2011/8/22/440">Al Viro</a></li><li><a href="/lkml/2011/8/22/442">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/8/22/424/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 22 Aug 2011 16:27:51 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [uml-devel] SYSCALL, ptrace and syscall restart breakages (Re: [RFC] weird crap with vdso on uml/i386)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 22, 2011 at 3:04 PM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt;<br />&gt; However, we could just issue a SIGILL or SIGSEGV at this point; the same<br />&gt; way we would if we got an #UD or #GP fault; SIGILL/#UD would be<br />&gt; consistent with Intel CPUs here.<br /><br />Considering that this is not a remotely new issue, and that it has<br />been around for years without anybody even noticing, I'd really prefer<br />to just fix things going forwards rather than add any code to actively<br />break any possible unlucky legacy users.<br /><br />So I think the "let's fix the vdso case for sysenter" + "let's remove<br />the 32-bit syscall vdso" is the right solution. If somebody has<br />hardcoded syscall instructions, or generates them dynamically with<br />some JIT, that's their problem. We'll continue to support it as well<br />as we ever have (read: "almost nobody will ever notice").<br /><br />One thing we *could* do is to just say "we never restart a x86-32<br />'syscall' instruction at all", and just make such a case return EINTR.<br />IOW, do something along the lines of the appended pseudo-patch.<br /><br />Because returning -EINTR is always "almost correct".<br /><br />Hmm?<br /><br />                               Linus<br /><br />---<br />  diff --git a/arch/x86/kernel/signal.c b/arch/x86/kernel/signal.c<br />  index 54ddaeb221c1..bc1a0f8b2707 100644<br />  --- a/arch/x86/kernel/signal.c<br />  +++ b/arch/x86/kernel/signal.c<br />  &#64;&#64; -678,6 +678,16 &#64;&#64; setup_rt_frame(int sig, struct k_sigaction *ka,<br />siginfo_t *info,<br />   	return ret;<br />   }<br /><br />  +static void restart_syscall(struct pt_regs *regs, int orig)<br />  +{<br />  +	if (regs-&gt;syscall_using_syscall_insn) {<br />  +		regs-&gt;ax = -EINTR;<br />  +		return;<br />  +	}<br />  +	regs-&gt;ax = orig;<br />  +	regs-&gt;ip -= 2;<br />  +}<br />  +<br />   static int<br />   handle_signal(unsigned long sig, siginfo_t *info, struct k_sigaction *ka,<br />   		struct pt_regs *regs)<br />  &#64;&#64; -701,8 +711,7 &#64;&#64; handle_signal(unsigned long sig, siginfo_t<br />*info, struct k_sigaction *ka,<br />   			}<br />   		/* fallthrough */<br />   		case -ERESTARTNOINTR:<br />  -			regs-&gt;ax = regs-&gt;orig_ax;<br />  -			regs-&gt;ip -= 2;<br />  +			restart_syscall(regs, regs-&gt;orig_ax);<br />   			break;<br />   		}<br />   	}<br />  &#64;&#64; -786,13 +795,11 &#64;&#64; static void do_signal(struct pt_regs *regs)<br />   		case -ERESTARTNOHAND:<br />   		case -ERESTARTSYS:<br />   		case -ERESTARTNOINTR:<br />  -			regs-&gt;ax = regs-&gt;orig_ax;<br />  -			regs-&gt;ip -= 2;<br />  +			restart_syscall(regs, regs-&gt;orig_ax);<br />   			break;<br /><br />   		case -ERESTART_RESTARTBLOCK:<br />  -			regs-&gt;ax = NR_restart_syscall;<br />  -			regs-&gt;ip -= 2;<br />  +			restart_syscall(regs, NR_restart_syscall);<br />   			break;<br />   		}<br />   	}<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
