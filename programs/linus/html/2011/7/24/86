    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/24/64">First message in thread</a></li><li><a href="/lkml/2011/7/24/64">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/24/79">Borislav Petkov</a><ul><li class="origin"><a href="/lkml/2011/7/24/93">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/24/93">Ingo Molnar</a></li><li><a href="/lkml/2011/7/24/100">Borislav Petkov</a><ul><li><a href="/lkml/2011/7/24/102">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2011/7/27/303">Borislav Petkov</a><ul><li><a href="/lkml/2011/7/27/309">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 24 Jul 2011 10:39:25 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86, AMD: Correct F15h IC aliasing issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 24, 2011 at 10:22 AM, Borislav Petkov &lt;bp&#64;amd64.org&gt; wrote:<br />&gt;<br />&gt;&gt; So at a MINIMUM, I would say that this is acceptable only when the<br />&gt;&gt; process doing the allocation hasn't got ASLR disabled.<br />&gt;<br />&gt; I guess I could look at randomize_va_space before enabling it.<br /><br />That's not what I meant - I meant the per-process PF_RANDOMIZE and<br />ADDR_NO_RANDOMIZE personality flags (although the global<br />"randomize_va_space" thing obviously is one input to that too)<br /><br />In fact, if 99% of your problem is ASLR-induced, might I suggest just<br />making the whole thing a tweak to ASLR instead, and not use ASLR for<br />bits 14:12? That should be fundamentally much safer: it doesn't change<br />any semantics at all, it just makes for slightly less random bits to<br />be used.<br /><br />So I really think that you might be *much* better off just changing<br />mmap_rnd(), and nothing else. Just make *that* mask off the three low<br />bits of the random address, ie something like<br /><br />  diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c<br />  index 1dab5194fd9d..6b62ab5a5ae1 100644<br />  --- a/arch/x86/mm/mmap.c<br />  +++ b/arch/x86/mm/mmap.c<br />  &#64;&#64; -90,6 +90,9 &#64;&#64; static unsigned long mmap_rnd(void)<br />                          rnd = (long)get_random_int() % (1&lt;&lt;8);<br />                  else<br />                          rnd = (long)(get_random_int() % (1&lt;&lt;28));<br />  +<br />  +               if (avoid_aliasing_in_bits_14_12)<br />  +                       rnd &amp;= ~7;<br />          }<br />          return rnd &lt;&lt; PAGE_SHIFT;<br />   }<br /><br />would be fundamentally very safe - it would already take all our<br />current anti-randomization code into account.<br /><br />No?<br /><br />&gt; But this won't address the case where one of the processes was created<br />&gt; with ASLR off and the other with ASLR on and they map the same library<br />&gt; at VAs differing at bits [14:12].<br /><br />I wouldn't worry about some corner-case like that _nearly_ as much as<br />worrying about the non-ASLR process working at all.<br /><br />&gt; Yeah, I like the BITS() thing - will change. I actually have a similar<br />&gt; macro GENMASK(o, hi) in &lt;drivers/edac/amd64_edac.h&gt; - I should move it<br />&gt; to &lt;linux/bitops.h&gt; and rename it to BITS().<br /><br />So it may be that BITS() is much too generic a name, and will cause<br />problems. A quick "git grep -w BITS" certainly finds a fair number of<br />hits. So I don't think it's usable as-is, it was meant more as<br />pseudo-code.<br /><br />&gt;&gt; Changing address space layout is not a small decision.<br />&gt;<br />&gt; I suspected as much - thus the boot option to disable it.<br /><br />I understand that the boot option is worth it, but since we _already_<br />have a way to mark binaries as not wanting address space layout<br />changes, I really think it should use that as the primary method. When<br />that bit is set, I think it's a big hint that the process is "fragile"<br />wrt address space changes.<br /><br />A boot option might be left as a last ditch thing, but I don't think<br />it should be the primary model.<br /><br />                              Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
