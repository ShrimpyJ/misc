    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/24/64">First message in thread</a></li><li class="origin"><a href="/lkml/2011/7/24/79">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/24/79">Borislav Petkov</a><ul><li><a href="/lkml/2011/7/24/86">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/24/93">Ingo Molnar</a></li><li><a href="/lkml/2011/7/24/100">Borislav Petkov</a><ul><li><a href="/lkml/2011/7/24/102">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2011/7/27/303">Borislav Petkov</a><ul><li><a href="/lkml/2011/7/27/309">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 24 Jul 2011 09:04:27 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86, AMD: Correct F15h IC aliasing issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Argh. This is a small disaster, you know that, right? Suddenly we have<br />user-visible allocation changes depending on which CPU you are running<br />on. I just hope that the address-space randomization has caught all<br />the code that depended on specific layouts.<br /><br />And even with ASLR, I wouldn't be surprised if there are binaries out<br />there that "know" that they get dense virtual memory when they do<br />back-to-back allocations, even when they don't pass in the address<br />explicitly.<br /><br />How much testing has AMD done with this change and various legacy<br />Linux distros? The 32-bit case in particular makes me nervous, that's<br />where I'd expect a higher likelihood of binaries that depend on the<br />layout.<br /><br />You guys do realize that we had to disable ASLR on many machines?<br /><br />So at a MINIMUM, I would say that this is acceptable only when the<br />process doing the allocation hasn't got ASLR disabled.<br /><br />On Fri, Jul 22, 2011 at 6:15 AM, Borislav Petkov &lt;bp&#64;amd64.org&gt; wrote:<br />&gt; +static inline unsigned long unalias_addr(unsigned long addr, bool incr)<br />&gt; +{<br />&gt; +       /* handle both 32- and 64-bit with a single conditional */<br />&gt; +       if (!(unalias_va_addr &amp; (2 - mmap_is_ia32())))<br />&gt; +               return addr;<br /><br />Ugh. I guess it works, but the actual values you used did not have a<br />comment about those particular values being magical. You should do<br />that, otherwise somebody will start adding bits and moving things<br />around, and breaking this "bits 2/1" logic.<br /><br />&gt; +       /* check if [14:12] are already cleared */<br />&gt; +       if (!(addr &amp; (0x7 &lt;&lt; PAGE_SHIFT)))<br />&gt; +               return addr;<br />&gt; +<br />&gt; +       addr = addr &amp; ~(0x7 &lt;&lt; PAGE_SHIFT);<br />&gt; +       if (incr)<br />&gt; +               addr += (0x8 &lt;&lt; PAGE_SHIFT);<br /><br />This is just really hard to look at. First you talk about "bits<br />14:12", and then you use odd values like "8 &lt;&lt; PAGE_SHIFT".<br /><br />Yes, yes, I can do the math in my head, and say "8 is 1&lt;&lt;3, and<br />PAGE_SHIFT is 12, so he's adding things up to the next bit 15".<br /><br />But is that really sensible?<br /><br />If we don't already have helpers for this, it would still be prettier<br />with something like<br /><br />  #define BIT(a) (1ul &lt;&lt; (a))<br />  #define BITS(a,b) (BIT((a)+1) - BIT(b))<br /><br />and then that "0x7 &lt;&lt; PAGE_SHIFT" ends up being BITS(14,12) like in<br />the comment (you should really double-check that I got it right<br />though).<br /><br />Or alternatively, make the comment match the code, and explain the<br />14:12 with something like "the three bits above the page mask",<br />although that just sounds odd.<br /><br />Anyway, I seriously think that this patch is completely unacceptable<br />in this form, and is quite possibly going to break real applications.<br />Maybe most of the applications that had problems with ASLR only had<br />trouble with anonymous memory, and the fact that you only do this for<br />file mappings might mean that it's ok. But I'd be really worried.<br />Changing address space layout is not a small decision.<br /><br />                         Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
