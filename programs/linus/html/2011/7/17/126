    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/17/103">First message in thread</a></li><li><a href="/lkml/2011/7/17/113">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/116">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/121">Al Viro</a></li></ul></li><li><a href="/lkml/2011/7/17/118">Al Viro</a><ul><li><a href="/lkml/2011/7/17/124">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/125">Hugh Dickins</a><ul><li><a href="/lkml/2011/7/17/131">Al Viro</a></li></ul></li><li><a href="/lkml/2011/7/17/127">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2011/7/17/122">Hugh Dickins</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Jul 2011 16:52:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs: fix race in rcu lookup of pruned dentry</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 17, 2011 at 4:31 PM, Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; I kind of see why you do it for that particular bug, but at the same<br />&gt;&gt; time, it just makes me go "Eww". If that inode isn't NULL yet, you<br />&gt;&gt; then return the dentry that can get a NULL d_inode later. So the only<br />&gt;&gt; special thing there is that we happen to check for a NULL inode there.<br />&gt;&gt; What protects *later* checks for a NULL d_inode?<br />&gt;<br />&gt; I was imagining that all the later uses of the inode were using<br />&gt; walk_component()'s local struct inode *inode, or nd-&gt;inode which<br />&gt; it sets on success.  Until complete_walk(), or the next level down<br />&gt; of lookup, has validated that stage by checking nd-&gt;seq.<br /><br />You are very likely right. The code *should* look up the inode<br />information before it actually does the final RCU check, since after<br />the sequence number check the window is open again.<br /><br />So it's very possible that your patch is a real fix, and doesn't<br />really have any problems. It's just that I personally hate it ;)<br /><br />So the reason I prefer my one-liner is not because it's smaller per se<br />- that's just a nice side issue. The reason I prefer my version is<br />that I think the current dentry pruning is actively wrong in turning a<br />dentry into a negative one due to memory pressure. So I think the name<br />lookup code is "correct", and the bug is literally that dentry pruning<br />(knowingly - there's even a comment about how the dentry is still<br />reachable for RCU lookups) turned a visible dentry into a negative one<br />even though nobody deleted it.<br /><br />So I see your hack as being a workaround for the real bug, rather than a fix.<br /><br />&gt; If any does dereference dentry-&gt;d_inode in between, then it would<br />&gt; already be oopsing in this situation, which I've not seen.<br /><br />Good point, and it does probably mean that nobody accesses d_inode any more.<br /><br />But another way of thinking about that is that the old lookup code<br />just created a cached copy of the d_inode pointer, so the code<br />literally always used a "stale" d_inode thing, and always relied on<br />the RCU freeing of inodes. So in a very real sense, my patch to just<br />remove the "d_inode = NULL" doesn't *change* anything. It just means<br />that now the dentry doesn't ever look negative.<br /><br />So it should be a very safe patch, in that any stale inode pointer<br />issues are pre-existing, and not newly introduced issues by not<br />clearing the pointer.<br /><br />&gt; At first it looked worrying to interfere with the sequence<br />&gt; "inode = dentry-&gt;d_inode; if (inode) { dentry-&gt;d_inode = NULL;"<br />&gt; but seeing as dentry_iput() is only called from the one place,<br />&gt; I think the test is merely about negative dentries, and setting<br />&gt; d_inode to NULL is just long-standing tidiness, nothing vital.<br /><br />Indeed. I checked that the "d_iput()" functions don't do anything with<br />d_inode either, and the only other thing we do afterwards is to<br />kfree() the dentry and the name (which is often RCU-delayed,. of<br />course, so there's that indirection through the RCU-freeing thing).<br /><br />&gt; Well, my stress tests don't blow up in the first half hour.<br />&gt; But I was not successful in re-reproducing the issue (I got<br />&gt; yesterday in 2.5 hours) within 7 hours, so it's probably going<br />&gt; to take days to be sure that your minus-1-liner fixes it.<br /><br />If you can keep running it, that would be good. I was *really* hoping<br />to do the final 3.0 tomorrow, but if we have a known thing to be<br />worried about, I guess I can delay it a bit.<br /><br />&gt; Just a nagging doubt that leaving d_inode set may be wrong for somewhere.<br /><br />So see above: I don't think it's conceptually any different at all<br />from the RCU lookup code caching d_inode in nd-&gt;inode (or the local<br />*inode pointer).<br /><br />But it's possible I'm missing something. As mentioned, I think my<br />one-liner is the more "correct" fix, but it's certainly more indirect<br />and perhaps a bit "subtler".<br /><br />                   Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
