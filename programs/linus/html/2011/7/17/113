    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/17/103">First message in thread</a></li><li><a href="/lkml/2011/7/17/103">Hugh Dickins</a><ul><li class="origin"><a href="/lkml/2011/7/17/116">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/116">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/121">Al Viro</a></li></ul></li><li><a href="/lkml/2011/7/17/118">Al Viro</a><ul><li><a href="/lkml/2011/7/17/124">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/17/125">Hugh Dickins</a></li><li><a href="/lkml/2011/7/17/127">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2011/7/17/122">Hugh Dickins</a><ul><li><a href="/lkml/2011/7/17/126">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Jul 2011 15:00:06 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs: fix race in rcu lookup of pruned dentry</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 17, 2011 at 2:03 PM, Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt; That -ENOENT in walk_component: isn't it assuming we found a negative<br />&gt; dentry, before reaching the read_seqcount_retry which complete_walk<br />&gt; (or nameidata_drop_rcu_last before 3.0) would use to confirm a successful<br />&gt; lookup?<br /><br />Hmm. I think you're right. The ENOENT will basically short-circuit the<br />full proper checks.<br /><br />&gt;  And can't memory pressure prune a dentry, coming to dentry_kill<br />&gt; which __d_drops to unhash before dentry_iput resets d_inode to NULL, but<br />&gt; the dentry_rcuwalk_barrier between those is ineffective if the other end<br />&gt; ignores the seqcount?<br /><br />Yes. However, looking at it, I'm not very happy with your patch. It<br />doesn't really make sense to me to special-case the NULL inode and<br />only do a seq_retry for that case.<br /><br />I kind of see why you do it for that particular bug, but at the same<br />time, it just makes me go "Eww". If that inode isn't NULL yet, you<br />then return the dentry that can get a NULL d_inode later. So the only<br />special thing there is that we happen to check for a NULL inode there.<br />What protects *later* checks for a NULL d_inode?<br /><br />So my gut feel is that we should instead<br /><br /> - either remove the -ENOENT return at that point entirely, and move<br />it to after we have re-verified the dentry lookup for other reasons.<br />That looks pretty involved, though, and those paths do end up<br />accessing inode data structures etc, so it looks less than trivial.<br /><br />OR<br /><br /> - simply just not clear d_inode at all in d_kill(), so that when we<br />prune a dentry due to memory pressure, it doesn't actually change the<br />state of the dentry.<br /><br />and I think the second solution is the right one. It's kind of odd:<br />we'll have called down to the iput() routine, and the inode will be<br />"gone", but that is already true for the *normal* race of actually<br />deleting a file too, and we have that whole "inodes are RCU-released",<br />so the inode allocation will still exist.<br /><br />So my gut feel is that we should instead just do this:<br /><br />  --- a/fs/dcache.c<br />  +++ b/fs/dcache.c<br />  &#64;&#64; -187,7 +187,6 &#64;&#64; static void dentry_iput(struct dentry * dentry)<br />   {<br />          struct inode *inode = dentry-&gt;d_inode;<br />          if (inode) {<br />  -               dentry-&gt;d_inode = NULL;<br />                  list_del_init(&amp;dentry-&gt;d_alias);<br />                  spin_unlock(&amp;dentry-&gt;d_lock);<br />                  spin_unlock(&amp;inode-&gt;i_lock);<br /><br />and see what the fall-out from that would be. Nobody should then *use*<br />the stale inode, because __d_drop has done that<br />dentry_rcuwalk_barrier(). So we avoid the NULL inode special case<br />entirely.<br /><br />Comments?<br /><br />The above (whitespace-damaged) patch may look trivial, but it is<br />*entirely* untested, and maybe my gut feel that the above is the right<br />way to solve the problem is just wrong.<br /><br />Al, any reactions? Hugh, does the above patch work for your<br />stress-test case? Or, indeed, at all?<br /><br />                       Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
