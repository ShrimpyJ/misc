    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/17/103">First message in thread</a></li><li><a href="/lkml/2011/7/18/277">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/18/283">Al Viro</a><ul><li class="origin"><a href="/lkml/2011/7/18/320">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/18/320">Hugh Dickins</a><ul><li><a href="/lkml/2011/7/18/327">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2011 13:24:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs: fix race in rcu lookup of pruned dentry</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 18, 2011 at 12:47 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; Huh?  We do __d_drop() in there, and do that before we start messing<br />&gt; with -&gt;d_inode.<br /><br />Hmm. Yes, looking at it, the ordering all seems correct. But then what<br />did Hugh see at all?<br /><br />The inode thing he got from d_inode is re-verified by<br />__d_lookup_rcu(). So if inode is NULL, that means that the other CPU<br />has done dentry_iput(), which means that __d_drop has already<br />happened, which means that the dentry has been removed from the hash<br />list *and* the count has been incremented.<br /><br />So just judging by Hugh's thing, something is wrong there. Some<br />missing barrier, perhaps. But write_seqcount_barrier() does seem to<br />have the write barrier, and the __d_lookup_rcu() read barrier check is<br />using the proper "full" read barrier too.<br /><br />So in order for __d_lookup_rcu() to return a NULL inode, we have the<br />following requirements:<br /> - it needs to find the dentry (duh)<br /> - the dentry sequence count gets read (proper read barrier after this)<br /> - the dentry must still look hashed<br /> - the dentry-&gt;d_inode must be NULL<br /> - and the dentry sequence count gets re-read (proper read barrier<br />before this) and must match.<br /><br />And right now I don't see how that can happen, exactly because<br />__d_lookup_rcu does the sequence point check. But that's what Hugh's<br />patch depends on: seeing a NULL d_inode race.<br /><br />If we see d_inode being NULL, that means that the first sequence<br />number read must happen *after* we've set d_inode to NULL in<br />dentry_iput(), which happens *after* we've done the sequence number<br />increment. That part is fine: that means that the sequence numbers<br />will match (because both of them are the "later" one). No<br />inconsistency so far. d_inode being NULL is perfectly compatible with<br />no sequence number change, and that was what I thought was a bug in<br />this area at first.<br /><br />But if the first sequence number read (the read_seqcount_begin() in<br />__d_lookup_rcu()) sees the later sequence number, that means that<br />__d_drop has already happened, and it should *also* see the<br />dentry-&gt;d_hash.pprev = NULL; that happened in __d_drop before the<br />dentry_rcuwalk_barrier(). We have both the read barrier in the<br />read_seqcount_begin() and the write barrier in the<br />dentry_rcuwalk_barrier() to guarantee that.<br /><br />But if the __d_lookup_rcu() sees that, then the d_unhashed() should<br />have seen the NULL pprev pointer, and not ever returned the dentry,<br />because that __d_lookup_rcu() loop does<br /><br />                if (d_unhashed(dentry))<br />                        continue;<br /><br />after reading the sequence count.<br /><br />So how could Hugh's NULL inode ever happen in the first place? Even<br />with the current sources? It all looks solid to me now that I look at<br />all the details.<br /><br />                           Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
