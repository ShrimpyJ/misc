    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/17/103">First message in thread</a></li><li><a href="/lkml/2011/7/18/289">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/18/320">Hugh Dickins</a><ul><li class="origin"><a href="/lkml/2011/7/18/344">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/18/344">Hugh Dickins</a><ul><li><a href="/lkml/2011/7/18/346">Al Viro</a></li></ul></li><li><a href="/lkml/2011/7/19/286">Al Viro</a><ul><li><a href="/lkml/2011/7/19/288">Al Viro</a></li><li><a href="/lkml/2011/7/19/292">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/7/18/327/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 18 Jul 2011 14:42:51 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs: fix race in rcu lookup of pruned dentry</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 18, 2011 at 2:19 PM, Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt; __d_lookup_rcu() is being careful about *inode, yes.<br />&gt;<br />&gt; But I'd forgotten it was even setting it: doesn't that setting get<br />&gt; overridden later by the more careless *inode = path-&gt;d_entry-&gt;d_inode<br />&gt; at the head of __follow_mount_rcu()'s loop?<br />&gt;<br />&gt; Perhaps that line just needs to be moved to the tail of the loop?<br /><br />Ahh. Bingo. Yes, I think you found it.<br /><br />I don't think it should touch that *inode value in<br />__follow_mount_rcu() unless we actually followed a mount, exactly<br />because it will overwrite the thing that we were so careful about in<br />__d_lookup_rcu().<br /><br />So how about this patch that replaces the earlier mount-point sequence<br />number one. The only difference is (as you mention) to just do the<br />*inode update at the end of the loop, so that we don't overwrite the<br />valid inode data with a non-checked one when we don't do anything.<br /><br />Untested. But this should make my propised change to fs/dcache.c be<br />irrelevant, because whether we clear d_inode or not, the existing<br />sequence number checks will catch it. Agreed?<br /><br />                      Linus<br /> fs/namei.c |   21 +++++++++++++++++++--<br /> 1 files changed, 19 insertions(+), 2 deletions(-)<br /><br />diff --git a/fs/namei.c b/fs/namei.c<br />index 5c867dd1c0b3..b9cd558a00be 100644<br />--- a/fs/namei.c<br />+++ b/fs/namei.c<br />&#64;&#64; -938,11 +938,12 &#64;&#64; static bool __follow_mount_rcu(struct nameidata *nd, struct path *path,<br /> {<br /> 	for (;;) {<br /> 		struct vfsmount *mounted;<br />+		unsigned int seq;<br />+<br /> 		/*<br /> 		 * Don't forget we might have a non-mountpoint managed dentry<br /> 		 * that wants to block transit.<br /> 		 */<br />-		*inode = path-&gt;dentry-&gt;d_inode;<br /> 		if (unlikely(managed_dentry_might_block(path-&gt;dentry)))<br /> 			return false;<br /> <br />&#64;&#64; -952,9 +953,25 &#64;&#64; static bool __follow_mount_rcu(struct nameidata *nd, struct path *path,<br /> 		mounted = __lookup_mnt(path-&gt;mnt, path-&gt;dentry, 1);<br /> 		if (!mounted)<br /> 			break;<br />+		seq = read_seqcount_begin(&amp;mounted-&gt;mnt_root-&gt;d_seq);<br />+<br />+		/*<br />+		 * The memory barrier in read_seqcount_begin() is sufficient,<br />+		 * so we can use __read_seqcount_retry() to check the prev<br />+		 * sequence numbers.<br />+		 */<br />+		if (!__read_seqcount_retry(&amp;path-&gt;dentry-&gt;d_seq, nd-&gt;seq))<br />+			return false;<br /> 		path-&gt;mnt = mounted;<br /> 		path-&gt;dentry = mounted-&gt;mnt_root;<br />-		nd-&gt;seq = read_seqcount_begin(&amp;path-&gt;dentry-&gt;d_seq);<br />+		nd-&gt;seq = seq;<br />+<br />+		/*<br />+		 * Update the inode too. We don't need to re-check the<br />+		 * dentry sequence number here after this d_inode read,<br />+		 * because a mount-point is always pinned.<br />+		 */<br />+		*inode = path-&gt;dentry-&gt;d_inode;<br /> 	}<br /> 	return true;<br /> }</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
