    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/6/12/52">First message in thread</a></li><li><a href="/lkml/2011/7/21/2">NeilBrown</a><ul><li><a href="/lkml/2011/7/21/155">Solar Designer</a><ul><li class="origin"><a href="/lkml/2011/7/21/337">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/21/337">Solar Designer</a><ul><li><a href="/lkml/2011/7/25/284">Vasiliy Kulikov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 21 Jul 2011 11:21:07 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kernel-hardening] Re: [PATCH] move RLIMIT_NPROC check from set_user() to do_execve_common()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 21, 2011 at 5:48 AM, Solar Designer &lt;solar&#64;openwall.com&gt; wrote:<br />&gt;<br />&gt; Maybe, and if so I think that one I proposed above falls in this<br />&gt; category as well, but it closes more vulnerabilities (and/or does so<br />&gt; more fully).<br /><br />I think we could have a pretty simple approach that "works in<br />practice": retain the check at setuid() time, but make it a higher<br />limit.<br /><br />IOW, the logic is that we have two competing pressures:<br /><br /> (a) we should try to avoid failing on setuid(), because there is a<br />real risk that the setuid caller doesn't really check the failure case<br />and opens itself up for a security problem<br /><br />and<br /><br /> (b) never failing setuid at all is in itself a security problem,<br />since it can lead to DoS attacks in the form of excessive resource use<br />by one user.<br /><br />But the sane (intelligent) solution to that is to say that we *PREFER*<br />to fail in execve(), but that at some point a failure in setuid() is<br />preferable to no failure at all. After all, we have no hard knowledge<br />that there is any actual setuid() issue. Neither generally does the<br />user (iow, look at this whole discussion where intelligent people<br />simply have different inputs depending on "what could happen").<br /><br />So it really seems like the natural approach would be to simply fail<br />*earlier* on execve() and fork(). That will catch most cases, and has<br />no downsides. But if we notice that we are in a situation where some<br />privileged user can be tricked into forking a lot and doing setuid(),<br />then at that point the setuid() path becomes relevant.<br /><br />IOW, I'd suggest simply making the rule be that "setuid() allows 10%<br />more users than the limit technically says". It's not a guarantee, but<br />it means that in order to hit the problem, you need to have *both* a<br />setuid application that allows unconstrained user forking *and*<br />doesn't check the setuid() return value.<br /><br />Put another way: a user cannot force the "we're at the edge of the<br />setuid() limit" on its own by just forking - the user will be stopped<br />10% before the setuid() failure case can ever trigger.<br /><br />Is this some "guarantee of nothing bad can ever happen"? No. If you<br />have bad setuid applications, you will have problems. But it's a "you<br />need to really work harder at it and you need to find more things to<br />go wrong", which is after all what real security is all about.<br /><br />No?<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
