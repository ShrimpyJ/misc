    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/29/353">First message in thread</a></li><li><a href="/lkml/2011/7/30/180">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/30/183">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2011/7/31/139">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/31/139">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/7/31/138">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/7/31/140">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/7/31/141">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/8/5/146">Herbert Xu</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Jul 2011 15:43:42 -1000</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] random: Add support for architectural random hooks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Jul 30, 2011 at 3:32 PM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt;<br />&gt; The only minor issue with this is that RDRAND can, at least in theory,<br />&gt; return a failure condition transiently ("the entropy buffer is empty")<br />&gt; or permanently ("the random number generator is broken.")  Although we<br />&gt; have never actually observed the former under anything approaching<br />&gt; realistic conditions, the recommendation is to loop for 10 iterations.<br /><br />So I don't care too deeply, we could easily make the<br />"alternative_io()" thing just do a "call" to an out-of-line thing<br />instead.<br /><br />That said, I seriously suggest that we shouldn't even care.<br /><br />Why?<br /><br />Because the high-level code needs to handle the failure case *anyway*,<br />so if there is some "in theory, CF might be clear and we don't get any<br />data" under certain odd an unusual circumstances, I think we might as<br />well just opt out for braking out early. So I don't think we really<br />should necessarily at all do the intel-recommended "loop at least ten<br />times", because quite frankly, we're probably better off just falling<br />back to our old sw fallback anyway.<br /><br />So at this point, I'd much rather go for "really simple,<br />straightforward and small" than anything else.<br /><br />&gt; What makes that more than a bit ugly is that extract_entropy() and<br />&gt; extract_entropy_user() take their randomness type ("perfect/blocking"<br />&gt; versus "PRNG degrade OK/nonblocking") from a pointer to the pool, which<br />&gt; means that some kind of indirection or policy information is going to be<br />&gt; necessary there anyway, in order to enable get_random_bytes() and its<br />&gt; friends -- as opposed to get_random_int().<br /><br />Why?<br /><br />WHY SHOULD WE CARE?<br /><br />Nobody is ever going to complain about being better than necessary,<br />and the whole point of rdrand should be that it's (a) fast enough and<br />(b) good enough that the whole "blocking/degraded" thing is a total<br />nonissue.<br /><br />In other words, we should consider rdrand to be "perfect +<br />nonblocking", which is acceptable to everybody. Those nonblocking<br />users aren't going to complain about good randomness, even if they<br />might *accept* less than perfect randomness.<br /><br />IOW, I really want to aim for simple and straightforward. Don't make<br />it more complicated than it is.<br /><br />Aim to make my patch *smaller* rather than trying to find ways to make<br />it bigger.<br /><br />             Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
