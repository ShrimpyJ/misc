    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/7/29/353">First message in thread</a></li><li><a href="/lkml/2011/7/29/353">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/7/29/354">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/7/29/366">Matt Mackall</a><ul><li><a href="/lkml/2011/7/30/19">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/30/82">Arjan van de Ven</a></li><li><a href="/lkml/2011/7/30/91">Matt Mackall</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2011/7/30/183">Linus Torvalds</a><ul><li><a href="/lkml/2011/7/30/183">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/7/30/187">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2011/7/29/355">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/7/29/363">Jeff Garzik</a><ul><li><a href="/lkml/2011/7/29/367">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/7/30/14">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2011/7/30/134">"H. Peter Anvin"</a><ul><li><a href="/lkml/2011/7/30/135">"H. Peter Anvin"</a></li><li><a href="/lkml/2011/7/30/136">"H. Peter Anvin"</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/7/30/180/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Jul 2011 15:13:27 -1000</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] random: Add support for architectural random hooks</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">So here is my counter-suggestion<br /><br />NOTE NOTE NOTE! This is completely and utterly untested.  I didn't<br />actually check how big the "rdrand" and "setc" instructions are, so<br />the ASM_NOP4 there is just a random "I guess two 'xor' instructions<br />are four bytes shorter than the rdrand/setc instructions are".<br /><br />So please don't take this as a serious patch that should be applied,<br />but instead take it as a serious alternative *approach*.<br /><br />Note that with the default inline function in &lt;asm-generic/random.h&gt;<br />is designed so that architectures that use it (this patch does *not*<br />contain the architecture glue to enable it) will compile the loop in<br />random.c entirely away. No test, no nothing.<br /><br />Comments?<br /><br />(Btw, even on x86, assuming the concept works and the ASM_NOP4 is<br />corrected to the right length, we'd need to support older assemblers<br />that don't understand the "rdrand" instruction, so it would need to be<br />done as a explicit byte sequence).<br /><br />Again, TOTALLY UNTESTED. Concept patch only!! There may be seriously<br />stupid bugs here, but the point is that it should make it easy for an<br />architecture to have a "get a word of random data quickly".<br /><br />                     Linus<br />commit 218603412aad073a04ea815858b98f6c33ab30d2<br />Author: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />Date:   Sat Jul 30 15:06:16 2011 -1000<br /><br />    EXAMPLE 'RDRAND' PATCH<br /><br />    NOT FOR REAL CONSUMPTION!<br />---<br /> arch/x86/include/asm/random.h |   23 +++++++++++++++++++++++<br /> drivers/char/random.c         |   15 +++++++++++++++<br /> include/asm-generic/random.h  |   13 +++++++++++++<br /> 3 files changed, 51 insertions(+), 0 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/random.h b/arch/x86/include/asm/random.h<br />new file mode 100644<br />index 000000000000..f6fbd3340608<br />--- /dev/null<br />+++ b/arch/x86/include/asm/random.h<br />&#64;&#64; -0,0 +1,23 &#64;&#64;<br />+#ifndef _X86_RANDOM_H<br />+#define _X86_RANDOM_H<br />+<br />+#include &lt;asm/alternative.h&gt;<br />+<br />+static inline int arch_get_random_word(unsigned long *word)<br />+{<br />+	int ret;<br />+<br />+	alternative_io("xor %0,%0; xor %1,%1" ASM_NOP4,<br />+		"rdrand %1; setcc %0",<br />+		X86_FEATURE_PERFCTR_CORE,<br />+		ASM_OUTPUT2("=a" (ret), "=d" (*word)),<br />+		"i" (0) /* fake input */);<br />+	/*<br />+	 * We return 0 if CF is clear of if the CPU<br />+	 * doesn't support RDRAND, otherwise we return<br />+	 * 8 (for 8 bytes of data).<br />+	 */<br />+	return ret &amp; 8;<br />+}<br />+<br />+#endif<br />diff --git a/drivers/char/random.c b/drivers/char/random.c<br />index 729281961f22..e335ec96bf88 100644<br />--- a/drivers/char/random.c<br />+++ b/drivers/char/random.c<br />&#64;&#64; -257,6 +257,7 &#64;&#64;<br /> #include &lt;asm/uaccess.h&gt;<br /> #include &lt;asm/irq.h&gt;<br /> #include &lt;asm/io.h&gt;<br />+#include &lt;asm/random.h&gt;<br /> <br /> /*<br />  * Configuration information<br />&#64;&#64; -865,6 +866,20 &#64;&#64; static ssize_t extract_entropy(struct entropy_store *r, void *buf,<br /> 	xfer_secondary_pool(r, nbytes);<br /> 	nbytes = account(r, nbytes, min, reserved);<br /> <br />+	/* Use fast CPU random words if available */<br />+	while (nbytes) {<br />+		unsigned long word;<br />+		int bytes = arch_get_random_word(&amp;word);<br />+		if (!bytes)<br />+			break;<br />+		if (bytes &gt; nbytes)<br />+			bytes = nbytes;<br />+		memcpy(buf, &amp;word, bytes);<br />+		nbytes -= bytes;<br />+		buf += bytes;<br />+		ret += bytes;<br />+	}<br />+<br /> 	while (nbytes) {<br /> 		extract_buf(r, tmp);<br /> <br />diff --git a/include/asm-generic/random.h b/include/asm-generic/random.h<br />new file mode 100644<br />index 000000000000..e9be12ba86fa<br />--- /dev/null<br />+++ b/include/asm-generic/random.h<br />&#64;&#64; -0,0 +1,13 &#64;&#64;<br />+#ifndef _ASM_RANDOM_H<br />+#define _ASM_RANDOM_H<br />+<br />+/*<br />+ * Architecture random data in low bytes of "word", return how<br />+ * many bytes were filled in. Default implementation: none.<br />+ */<br />+static inline int arch_get_random_word(unsigned long *word)<br />+{<br />+	return 0;<br />+}<br />+<br />+#endif</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
