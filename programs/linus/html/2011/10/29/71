    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/27/299">First message in thread</a></li><li><a href="/lkml/2011/10/28/231">Eric Dumazet</a><ul><li><a href="/lkml/2011/10/28/232">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/29/62">Eric Dumazet</a></li><li class="origin"><a href="/lkml/2011/10/30/11">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/30/11">Eric Dumazet</a><ul><li><a href="/lkml/2011/10/30/20">Andi Kleen</a></li></ul></li><li><a href="/lkml/2011/11/1/1">Stephen Rothwell</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/10/29/71/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 29 Oct 2011 10:34:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: &gt;Re: [RFC] should VM_BUG_ON(cond) really evaluate cond</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 28, 2011 at 7:55 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Comments? I think I'm open to tested patches..<br /><br />Here's a *untested* patch.<br /><br />In particular, I worry that I'd need to add a "#include<br />&lt;linux/compiler.h&gt;" to some header file, although I suspect it gets<br />included some way regardless.<br /><br />And when I say "untested", I mean it. I verified that this makes<br />*some* difference to the generated code, but I didn't actually check<br />if it really matters, or if it actually compiles and works in general.<br /><br />Caveat tester,<br /><br />                                Linus<br /> arch/x86/include/asm/bitops.h |    5 +++--<br /> include/asm-generic/atomic.h  |    2 +-<br /> include/linux/compiler.h      |    7 +++++++<br /> 3 files changed, 11 insertions(+), 3 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/bitops.h b/arch/x86/include/asm/bitops.h<br />index 1775d6e5920e..e3982cb42fe5 100644<br />--- a/arch/x86/include/asm/bitops.h<br />+++ b/arch/x86/include/asm/bitops.h<br />&#64;&#64; -308,8 +308,9 &#64;&#64; static inline int test_and_change_bit(int nr, volatile unsigned long *addr)<br /> <br /> static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)<br /> {<br />-	return ((1UL &lt;&lt; (nr % BITS_PER_LONG)) &amp;<br />-		(addr[nr / BITS_PER_LONG])) != 0;<br />+	unsigned long *word = (nr / BITS_PER_LONG) + (unsigned long *)addr;<br />+	unsigned long bit = 1UL &lt;&lt; (nr % BITS_PER_LONG);<br />+	return (bit &amp; ACCESS_AT_MOST_ONCE(*word)) != 0;<br /> }<br /> <br /> static inline int variable_test_bit(int nr, volatile const unsigned long *addr)<br />diff --git a/include/asm-generic/atomic.h b/include/asm-generic/atomic.h<br />index e37963c1df4d..c05e21f7a985 100644<br />--- a/include/asm-generic/atomic.h<br />+++ b/include/asm-generic/atomic.h<br />&#64;&#64; -39,7 +39,7 &#64;&#64;<br />  * Atomically reads the value of &#64;v.<br />  */<br /> #ifndef atomic_read<br />-#define atomic_read(v)	(*(volatile int *)&amp;(v)-&gt;counter)<br />+#define atomic_read(v)	ACCESS_AT_MOST_ONCE((v)-&gt;counter)<br /> #endif<br /> <br /> /**<br />diff --git a/include/linux/compiler.h b/include/linux/compiler.h<br />index 320d6c94ff84..d30ffc685241 100644<br />--- a/include/linux/compiler.h<br />+++ b/include/linux/compiler.h<br />&#64;&#64; -308,4 +308,11 &#64;&#64; void ftrace_likely_update(struct ftrace_branch_data *f, int val, int expect);<br />  */<br /> #define ACCESS_ONCE(x) (*(volatile typeof(x) *)&amp;(x))<br /> <br />+/*<br />+ * Like ACCESS_ONCE, but can be optimized away if nothing uses the value,<br />+ * and/or merged with previous non-ONCE accesses.<br />+ */<br />+#define ACCESS_AT_MOST_ONCE(x) \<br />+	({ typeof(x) __y; asm("":"=r" (__y):"0" (x)); __y; })<br />+<br /> #endif /* __LINUX_COMPILER_H */</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
