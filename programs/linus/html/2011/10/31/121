    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/31/43">First message in thread</a></li><li><a href="/lkml/2011/10/31/43">Knut Petersen</a><ul><li class="origin"><a href="/lkml/2011/10/31/139">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/31/139">Knut Petersen</a></li><li><a href="/lkml/2011/11/7/328">Peter Zijlstra</a></li><li><a href="/lkml/2011/11/15/163">Knut Petersen</a><ul><li><a href="/lkml/2011/11/15/242">Frederic Weisbecker</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 31 Oct 2011 08:08:55 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [BUG] kernel 3.1.0 possible circular locking dependency detected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Added a few more people to the cc ]<br /><br />On Mon, Oct 31, 2011 at 1:35 AM, Knut Petersen<br />&lt;Knut_Petersen&#64;t-online.de&gt; wrote:<br />&gt; After a " rm -r /verybigdir" (about 12G on a 25G reiserfs 3.6partition)<br />&gt; I found the following report about a circular locking dependency in<br />&gt; kernel 3.1.0<br /><br />Heh. There is even a comment about the ordering violation:<br /><br />/* We use I_MUTEX_CHILD here to silence lockdep. It's safe because xattr<br /> * mutation ops aren't called during rename or splace, which are the<br /> * only other users of I_MUTEX_CHILD. It violates the ordering, but that's<br /> * better than allocating another subclass just for this code. */<br /><br />and apparently the comment is wrong: we *do* end up looking up xattrs<br />during splice, due to the security_inode_need_killpriv() thing.<br /><br />So I think this needs a suid (or sgid) file that has xattrs and is removed.<br /><br />That said, I suspect this is a false positive, because the actual<br />unlink can never happen while somebody is splicing to/from the same<br />file at the same time (because then the iput wouldn't be the last one<br />for the inode, and the file removal would be delayed until the file<br />has been closed for the last time).<br /><br />But the hacky use of "I_MUTEX_CHILD" is basically not the proper way<br />to silence the lockdep splat.<br /><br />Anybody?<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
