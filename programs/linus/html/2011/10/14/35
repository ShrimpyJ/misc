    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/3/83">First message in thread</a></li><li><a href="/lkml/2011/10/13/34">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/13/89">Andrew Lutomirski</a><ul><li class="origin"><a href="/lkml/2011/10/14/69">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/14/69">Andrew Lutomirski</a><ul><li><a href="/lkml/2011/10/14/466">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/10/14/35/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 14 Oct 2011 16:46:42 +1200</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] fixing the UML failure root cause</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 13, 2011 at 8:40 PM, Andrew Lutomirski &lt;luto&#64;mit.edu&gt; wrote:<br />&gt;<br />&gt; How does that work?  The tricky case is when one of those three words<br />&gt; spans a page boundary if the access to the first page is valid, but<br />&gt; the access to the second page is not.  When that happens, if we report<br />&gt; the fault as coming from the first page, then UML is likely to get<br />&gt; think the fault was spurious and enter an infinite loop.<br /><br />Hmm. Gaah, I just find that memcpy loop disgusting.<br /><br />We already have that ugly "uaccess_error" crap in handle_exception(),<br />we might as well do something like the attached and just say "hey, now<br />you can catch the page fault information for a get_user/put_user<br />fault".<br /><br />Isn't that much nicer?<br /><br />You don't even have to check each word, you can just take the last<br />exception info from the thread-info.<br /><br />              Linus<br /> arch/x86/include/asm/thread_info.h |    2 ++<br /> arch/x86/mm/fault.c                |    6 +++++-<br /> 2 files changed, 7 insertions(+), 1 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h<br />index a1fe5c127b52..e8d245febfae 100644<br />--- a/arch/x86/include/asm/thread_info.h<br />+++ b/arch/x86/include/asm/thread_info.h<br />&#64;&#64; -41,6 +41,8 &#64;&#64; struct thread_info {<br /> 	__u8			supervisor_stack[0];<br /> #endif<br /> 	int			uaccess_err;<br />+	int			uaccess_error_code;<br />+	unsigned long		uaccess_addr;<br /> };<br /> <br /> #define INIT_THREAD_INFO(tsk)			\<br />diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c<br />index 0d17c8c50acd..bbbee6e6a95b 100644<br />--- a/arch/x86/mm/fault.c<br />+++ b/arch/x86/mm/fault.c<br />&#64;&#64; -628,8 +628,12 &#64;&#64; no_context(struct pt_regs *regs, unsigned long error_code,<br /> 	int sig;<br /> <br /> 	/* Are we prepared to handle this kernel fault? */<br />-	if (fixup_exception(regs))<br />+	if (fixup_exception(regs)) {<br />+		struct thread_info *ti = current_thread_info();<br />+		ti-&gt;uaccess_error_code = error_code;<br />+		ti-&gt;uaccess_addr = address;<br /> 		return;<br />+	}<br /> <br /> 	/*<br /> 	 * 32-bit:</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
