    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/21/173">First message in thread</a></li><li><a href="/lkml/2011/10/21/173">Josh Stone</a><ul><li class="origin"><a href="/lkml/2011/10/23/162">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/23/162">Josh Stone</a><ul><li><a href="/lkml/2011/10/23/234">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/24/306">Josh Stone</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/10/22/188/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 23 Oct 2011 03:25:19 +0300</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: Fix compilation bug in kprobes' twobyte_is_boostable</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 21, 2011 at 11:33 PM, Josh Stone &lt;jistone&#64;redhat.com&gt; wrote:<br />&gt; When compiling an i386_defconfig kernel with gcc-4.6.1-9.fc15.i686, I<br />&gt; noticed a warning about the asm operand for test_bit in kprobes'<br />&gt; can_boost.  I discovered that this caused only the first long of<br />&gt; twobyte_is_boostable[] to be output.<br />&gt;<br />&gt; Jakub filed and fixed gcc PR50571 to correct the warning and this output<br />&gt; issue.  But to solve it for less current gcc, we can make kprobes'<br />&gt; twobyte_is_boostable[] volatile, and it won't be optimized out.<br /><br />Hmm. I'd *much* rather do this in arch/x86/include/asm/bitops.h<br />instead, methinks.<br /><br />Also, rather than your<br /><br />&gt; See also my more general fix, <a href="https://lkml.org/lkml/2011/10/6/412">https://lkml.org/lkml/2011/10/6/412</a><br /><br />wouldn't the simple fix be just to add the volatile there to the cast<br />we already do, ie something like the appended (cut-and-paste, so it's<br />whitespace-damaged, but you get the idea).<br /><br />Now, I'm the first to say that I hate volatile, and I'm not entirely<br />happy about the cast there, but (a) we're casting a volatile pointer<br />to begin with, and (b) it's essentially the same thing that we do for<br />the inline asms that modify the bit (see the "ADDR" macro, which also<br />handles some gcc versioning issues).<br /><br />And I don't mind volatile in code nearly as much as I mind volatile on<br />the data structures (it's one of my "C typing was misdesigned" pet<br />peeves: I think "volatile" is about the access, not about the data)<br /><br />Does this fix the gcc problem too?<br /><br />Historical notes:<br /><br /> - We *used* to have a volatile there (and a whole base address and<br />"tell gcc which word changed" mess) up until commit eb2b4e682a6 ("x86:<br />revert commit 709f744 ("x86: bitops asm constraint fixes")"). We<br />reverted the base address mess, but we probably should have kept the<br />"volatile".<br /><br /> - Long long ago, we had that "big array" approach for ADDR too. So<br />we've wavered between the volatile and using a block memory op. But<br />we've used the "volatile" for a long time now for the bit change ones,<br />so I don't think we should mix concepts like your patch.<br /><br />Comments? Does the simple 'volatile' approach also fix the problem?<br /><br />               Linus<br /><br />---<br /> arch/x86/include/asm/bitops.h |    2 +-<br /> 1 files changed, 1 insertions(+), 1 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/bitops.h b/arch/x86/include/asm/bitops.h<br />index 1775d6e5920e..87f000d9377e 100644<br />--- a/arch/x86/include/asm/bitops.h<br />+++ b/arch/x86/include/asm/bitops.h<br />&#64;&#64; -319,7 +319,7 &#64;&#64; static inline int variable_test_bit(int nr, volatile const u<br />        asm volatile("bt %2,%1\n\t"<br />                     "sbb %0,%0"<br />                     : "=r" (oldbit)<br />-                    : "m" (*(unsigned long *)addr), "Ir" (nr));<br />+                    : "m" (*(volatile unsigned long *)addr), "Ir" (nr));<br /><br />        return oldbit;<br /> }<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
