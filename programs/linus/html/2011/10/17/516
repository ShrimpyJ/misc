    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/17/499">First message in thread</a></li><li><a href="/lkml/2011/10/17/503">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/17/510">David Rientjes</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Oct 2011 18:43:24 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] Avoid using hardcoded values in kernel/sys.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Oct 17, 2011 at 6:33 PM, David Rientjes &lt;rientjes&#64;google.com&gt; wrote:<br />&gt;<br />&gt; Right, I meant to pass the struct in and use sizeof(release-&gt;name), but I<br />&gt; was under the impression that wouldn't count as a variable length array or<br />&gt; be compiled as such by ISO99 standards because it's a constant expression<br />&gt; (as the standard says is not variable length).<br /><br />Yes, if it really were a constant expression of a valid length, that<br />would be fine. Passing in the struct itself would work, and then you<br />could do a sizeof of the array, instead of of the pointer to the<br />character array..<br /><br />Except in this case it won't work. Because sometimes the struct is the<br />old one, sometimes it's the new one. So there is no well-defined<br />struct pointer to pass in. You can only pass in pointer-to-char and<br />the (variable) size.<br /><br />Which is why it now just hardcodes it to 65, which is the largest<br />size. Not exactly "pretty", no. But no worse than using the variable<br />length array.<br /><br />Yeah, there are tricks we could play. For example, we could turn that<br />override_release() into a macro that allocates the array in the<br />*caller*, where the length is known at compile time, and then pass in<br />that temporary pointer too. I considered it, but it seemed to be too<br />much work for too trivial a case. It's not like there are all that<br />many definitions of utsname, and they are all in &lt;linux/utsname.h&gt;.<br />It's unlikely that we'd ever add any bigger cases, but if we do, we'd<br />need to update the constant.<br /><br />                        Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
