    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/27/299">First message in thread</a></li><li><a href="/lkml/2011/10/27/323">Ben Hutchings</a><ul><li><a href="/lkml/2011/10/28/4">Eric Dumazet</a><ul><li class="origin"><a href="/lkml/2011/10/28/140">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/28/140">Eric Dumazet</a><ul><li><a href="/lkml/2011/10/28/160">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 28 Oct 2011 04:37:53 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: &gt;Re: [RFC] should VM_BUG_ON(cond) really evaluate cond</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 27, 2011 at 9:43 PM, Eric Dumazet &lt;eric.dumazet&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; The only requirement of atomic_read() is that it must return value<br />&gt; before or after an atomic_write(), not a garbled value.<br /><br />The problem is that gcc *can* return a garbled value.<br /><br />&gt; In fact, if a compiler is stupid enough to issue two reads on following<br />&gt; code :<br /><br />The compiler really *can* be that "stupid". Except the code tends to<br />look like this:<br /><br />   int value = atomic_read(&amp;atomic_var);<br />   if (value &gt; 10)<br />     return;<br />   .. do something with value ..<br /><br />and gcc may decide - under register pressure, and in the absense of a<br />'volatile' - to read 'value' first once for that "&gt; 10" check, and<br />then it drops the registers and instead of saving it on the stack<br />frame, it can decide to re-load it from atomic_var.<br /><br />IOW, "value" could be two or more different values: one value when<br />testing, and *another* value in "do something with value".<br /><br />This is why we have "ACCESS_ONCE()".<br /><br />Whether atomics guarantee ACCESS_ONCE() semantics or not is not<br />entirely clear. But afaik, there is no way to tell gcc "access at<br />*most* once, and never ever reload".<br /><br />                             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
