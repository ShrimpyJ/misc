    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/10/27/299">First message in thread</a></li><li><a href="/lkml/2011/10/28/140">Eric Dumazet</a><ul><li><a href="/lkml/2011/10/28/160">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2011/10/28/231">Linus Torvalds</a><ul><li><a href="/lkml/2011/10/28/231">Eric Dumazet</a><ul><li><a href="/lkml/2011/10/28/232">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 28 Oct 2011 05:40:53 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: &gt;Re: [RFC] should VM_BUG_ON(cond) really evaluate cond</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 28, 2011 at 5:19 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; "Sane interfaces" are important. Insane interfaces lead to bugs.<br /><br />Qutie frankly, if I do "atomic_read()", I do expect to get a single<br />value. If I don't get a single value, but some mixture of two values,<br />I'd personally go<br /><br />  wtf, what does that "atomic" mean in "atomic_read()"?<br /><br />and I think that's a reasonable wtf to ask.<br /><br />That said, as mentioned, I don't know of any way to tell gcc "at most once".<br /><br />Hmm.<br /><br />Except perhaps using inline asm. Something like this might work:<br /><br />  static inline int atomic_read(const atomic_t *v)<br />  {<br />       int val;<br />       asm("":"=r" (val):"0" (v-&gt;value));<br />       return val;<br />  }<br /><br />(totally untested, but you get the idea: use a non-volatile asm to<br />make sure that gcc doesn't think it can re-load the value).<br /><br />That's the trick we use in asmlinkage_protect() and a couple of other<br />places. It *should* make gcc able to optimize the value away entirely<br />if it isn't used, but will stop gcc from doing the reload magic.<br /><br />Does that work for the test-case with VM_BUG_ON()?<br /><br />                          Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
