    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/11/23/481">First message in thread</a></li><li><a href="/lkml/2011/11/23/495">Linus Torvalds</a><ul><li><a href="/lkml/2011/11/24/34">Tyler Hicks</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 24 Nov 2011 10:27:33 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] eCryptfs fixes for 3.2-rc3</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 23, 2011 at 11:45 PM, Tyler Hicks &lt;tyhicks&#64;canonical.com&gt; wrote:<br />&gt;<br />&gt;&gt; In general, I'd urge people to *not* use "-&gt;flush" at all as a<br />&gt;&gt; "correctness issue". It's useful to return EIO to "close()" and to be<br />&gt;&gt; *polite* (ie the return value of "flush()" will be returned to user<br />&gt;&gt; space at close time), but it really should be seen as a "we try to<br />&gt;&gt; flush now to try to give user space nice error reports where<br />&gt;&gt; possible", but it's important to understand that it's not the last<br />&gt;&gt; close, and if you rely on it for correctness, you're doing something<br />&gt;&gt; wrong. It's "release()" that is the "get rid of all your state now",<br />&gt;&gt; and is about correctness. "flush" is purely about being polite.<br />&gt;<br />&gt; But it *could* be the last close, so it seems that using flush() for<br />&gt; politeness *and* release() for correctness is not an option.<br /><br />You can certainly do both, there is nothing wrong with it.<br /><br />Note that even if "flush()" returns an error, we *will* close the fd.<br />It is not going to abort the close or anything like that: it's just a<br />signal to the user that something is wrong.<br /><br />For example, a filesystem like NFS may do delayed writes, so when you<br />do a "write()" system call, and the server diskspace is full, you may<br />not get the ENOSPC at "write()" time. You may get it at a subsequent<br />write(), or you may get it at close() time - because NFS does try to<br />write it synchronously at that time.  The user cannot *recover* from<br />the error (the file is closed and you don't know how much of it made<br />it), but a careful writer can check the error code of close() and at<br />least know to alert the user that something went wrong.<br /><br />So there is nothing *wrong* with using "flush()", and it exists for a<br />reason: so that careful writers *can* be careful.<br /><br />But when you do use flush(), you also need to be aware that most<br />writers aren't careful. Even if they don't use mmap(), they also don't<br />necessarily care about close(). And there are situations where<br />"flush()" is used as a "let's try to flush, but we will time it out or<br />still react to SIGINT, so we're doing a 'best effort' kind of flush,<br />not any correctness guarantees".<br /><br />In fact, that "best effort" kind of flush is one of the original<br />reasons for the callback: the flushing of characters of a serial line.<br />It's timed out (because the close() does have to finish in a timely<br />manner even if the other end has stopped receiving and i no longer<br />asserting DTS), and it's not really even about the error code - it's<br />literally just about "delay until the pending stuff has actually been<br />sent".<br /><br />So having both flush (to do a "best effort" try at waiting for stuff<br />and maybe returning an error) and a release (to actually finish<br />everything off and get rid of reference counts etc) is perfectly fine<br />and normal.<br /><br />&gt; Theoretically, flush() could fail, followed by a successful release(),<br />&gt; resulting in close() returning an error when it shouldn't since the<br />&gt; return value of release() is ignored.<br /><br />That's not even theoretical, it's quite normal. If flush fails, it<br />*will* be followed by the release() if it's the last close, and the<br />release is by definition always successful - the release is just a<br />"ok, we're done now".<br /><br />So the case you describe is what flush() is designed for. Something<br />did a best effort to inform the user that things probably didn't work<br />out. But the user may well not care. If the user close()'d the file<br />before the last mmap was done, or if the user simply ignores the<br />return value of close, the kernel doesn't really care. The kernel<br />basically says "ok, I can *try* to give you relevant errors, but I'm<br />not going to force the issue, and I'm not going to care if you don't<br />care".<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
