    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2011/9/14/345">First message in thread</a></li><li><a href="/lkml/2011/9/15/216">Andrew Lutomirski</a><ul><li><a href="/lkml/2011/9/15/229">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2011/9/15/282">Linus Torvalds</a><ul><li><a href="/lkml/2011/9/15/282">Andrew Lutomirski</a></li><li><a href="/lkml/2011/9/15/441">"werner"</a><ul><li><a href="/lkml/2011/9/15/444">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2011/9/15/269/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Sep 2011 11:23:18 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 3.1-rc6 boot problem reason searching</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 15, 2011 at 11:15 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; It *used* to have an alignment of 8 back before your patch to make the<br />&gt; pointers be relative due to the 64-bit pointers. But now all fields<br />&gt; are 32-bit, and it could easily have a size of just 12 bytes, getting<br />&gt; rid of the 'pad2' field, and getting rid of the '.balign 8's.<br /><br />IOW, maybe the correct patch is just the attached one.<br /><br />Werner, does this fix the boot for you? It gets rid of all the bogus<br />alignment stuff, it's all wrong anyway, the altinstructions section<br />entries are all 12 bytes long so it starts out sufficiently aligned,<br />and it *stays* aligned because if anybody ever adds a non-12-byte<br />entry that would be a huge bug regardless. So any extra alignment is<br />just likely to be buggy and hide much bigger issues.<br /><br />This is COMPLETELY UNTESTED, just looking at the source.<br /><br />                     Linus<br /> arch/x86/include/asm/alternative-asm.h |    1 -<br /> arch/x86/include/asm/alternative.h     |    4 ----<br /> arch/x86/include/asm/cpufeature.h      |    2 --<br /> 3 files changed, 0 insertions(+), 7 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/alternative-asm.h b/arch/x86/include/asm/alternative-asm.h<br />index 4554cc6fb96a..091508b533b4 100644<br />--- a/arch/x86/include/asm/alternative-asm.h<br />+++ b/arch/x86/include/asm/alternative-asm.h<br />&#64;&#64; -16,7 +16,6 &#64;&#64;<br /> #endif<br /> <br /> .macro altinstruction_entry orig alt feature orig_len alt_len<br />-	.align 8<br /> 	.long \orig - .<br /> 	.long \alt - .<br /> 	.word \feature<br />diff --git a/arch/x86/include/asm/alternative.h b/arch/x86/include/asm/alternative.h<br />index 23fb6d79f209..37ad100a2210 100644<br />--- a/arch/x86/include/asm/alternative.h<br />+++ b/arch/x86/include/asm/alternative.h<br />&#64;&#64; -48,9 +48,6 &#64;&#64; struct alt_instr {<br /> 	u16 cpuid;		/* cpuid bit set for replacement */<br /> 	u8  instrlen;		/* length of original instruction */<br /> 	u8  replacementlen;	/* length of new instruction, &lt;= instrlen */<br />-#ifdef CONFIG_X86_64<br />-	u32 pad2;<br />-#endif<br /> };<br /> <br /> extern void alternative_instructions(void);<br />&#64;&#64; -83,7 +80,6 &#64;&#64; static inline int alternatives_text_reserved(void *start, void *end)<br /> 									\<br />       "661:\n\t" oldinstr "\n662:\n"					\<br />       ".section .altinstructions,\"a\"\n"				\<br />-      _ASM_ALIGN "\n"							\<br />       "	 .long 661b - .\n"			/* label           */	\<br />       "	 .long 663f - .\n"			/* new instruction */	\<br />       "	 .word " __stringify(feature) "\n"	/* feature bit     */	\<br />diff --git a/arch/x86/include/asm/cpufeature.h b/arch/x86/include/asm/cpufeature.h<br />index 4258aac99a6e..88b23a43f340 100644<br />--- a/arch/x86/include/asm/cpufeature.h<br />+++ b/arch/x86/include/asm/cpufeature.h<br />&#64;&#64; -332,7 +332,6 &#64;&#64; static __always_inline __pure bool __static_cpu_has(u16 bit)<br /> 		asm goto("1: jmp %l[t_no]\n"<br /> 			 "2:\n"<br /> 			 ".section .altinstructions,\"a\"\n"<br />-			 _ASM_ALIGN "\n"<br /> 			 " .long 1b - .\n"<br /> 			 " .long 0\n"		/* no replacement */<br /> 			 " .word %P0\n"		/* feature bit */<br />&#64;&#64; -350,7 +349,6 &#64;&#64; static __always_inline __pure bool __static_cpu_has(u16 bit)<br /> 		asm volatile("1: movb $0,%0\n"<br /> 			     "2:\n"<br /> 			     ".section .altinstructions,\"a\"\n"<br />-			     _ASM_ALIGN "\n"<br /> 			     " .long 1b - .\n"<br /> 			     " .long 3f - .\n"<br /> 			     " .word %P1\n"		/* feature bit */</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
