    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/11/6/52">First message in thread</a></li><li><a href="/lkml/2010/11/8/77">Richard Guenther</a><ul><li><a href="/lkml/2010/11/8/87">Andi Kleen</a><ul><li><a href="/lkml/2010/11/8/88">Richard Guenther</a><ul><li><a href="/lkml/2010/11/8/103">Paul Koning</a><ul><li><a href="/lkml/2010/11/8/117">Jakub Jelinek</a></li></ul></li></ul></li><li><a href="/lkml/2010/11/8/110">Michael Matz</a></li><li><a href="/lkml/2010/11/8/257">Dave Korn</a><ul><li><a href="/lkml/2010/11/9/192">Michael Matz</a><ul><li><a href="/lkml/2010/11/9/215">Andi Kleen</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2010/11/15/339">Jeff Law</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2010/11/15/464">Richard Guenther</a><ul><li><a href="/lkml/2010/11/15/491">Jeff Law</a><ul><li><a href="/lkml/2010/11/15/494">Richard Guenther</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 15 Nov 2010 11:04:49 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: gcc 4.5.1 / as 2.20.51.0.11 miscompiling drivers/char/i8k.c ?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 15, 2010 at 10:45 AM, Jeff Law &lt;law&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; A memory clobber should clobber anything in memory, including autos in<br />&gt; memory; if it doesn't, then that seems like a major problem.  I'd like to<br />&gt; see the rationale behind not clobbering autos in memory.<br /><br />Yes. It turns out that the "asm optimized away" was entirely wrong (we<br />never saw that, it was just a report on another mailing list).<br /><br />Looking at the asm posted, it seems to me that gcc actually compiles<br />the asm itself 100% correctly, and the "memory" clobber is working<br />fine inside that function. So the code generated for i8k_smm() itself<br />is all good.<br /><br />But _while_ generating the good code, gcc doesn't seem to realize that<br />it writes to anything, so it decides to mark the function<br />"__attribute__((const))", which is obviously wrong (a memory clobber<br />definitely implies that it's not const). And as a result, the callers<br />will be mis-optimized, because they do things like<br /><br />    static int i8k_get_bios_version(void)<br />    {<br />        struct smm_regs regs = { .eax = I8K_SMM_BIOS_VERSION, };<br /><br />        return i8k_smm(&amp;regs) ? : regs.eax;<br />    }<br /><br />and since gcc has (incorrectly) decided that "i8k_smm()" is a const<br />function, it thinks that "regs.eax" hasn't changed, so it doesn't<br />bother to reload it: it "knows" that it is still I8K_SMM_BIOS_VERSION<br />that it initialized it with. So it will basically have rewritten that<br />final return statement as<br /><br />        return i8k_smm(&amp;regs) ? : I8K_SMM_BIOS_VERSION;<br /><br />which obviously doesn't really work.<br /><br />This also explains why adding "volatile" worked. The "asm volatile"<br />triggered "this is not a const function".<br /><br />Similarly, the "+m" works, because it also makes clear that the asm is<br />writing to memory, and isn't a const function.<br /><br />Now, the "memory" clobber should clearly also have done that, but I'd<br />be willing to bet that some version of gcc (possibly extra slackware<br />patches) had forgotten the trivial logic to say "a memory clobber also<br />makes the user function non-const".<br /><br />                 Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
