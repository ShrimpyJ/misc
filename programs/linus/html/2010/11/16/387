    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/10/19/123">First message in thread</a></li><li><a href="/lkml/2010/11/16/360">Vivek Goyal</a><ul><li><a href="/lkml/2010/11/16/363">Peter Zijlstra</a><ul><li><a href="/lkml/2010/11/16/365">Vivek Goyal</a><ul><li><a href="/lkml/2010/11/16/367">Peter Zijlstra</a><ul><li><a href="/lkml/2010/11/16/381">Vivek Goyal</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 16 Nov 2010 11:35:42 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC/RFT PATCH v3] sched: automated per tty task groups</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Nov 16, 2010 at 11:13 AM, Peter Zijlstra &lt;a.p.zijlstra&#64;chello.nl&gt; wrote:<br />&gt;<br />&gt; Its cpu-controller only, and then only for SCHED_OTHER tasks which are<br />&gt; proportionally fair.<br /><br />Well, it's _currently_ CPU controller only. People have already<br />wondered if we should try to do something similar for IO scheduling<br />too.<br /><br />So the thing I think is worth keeping in mind is that the "per-tty<br />scheduling group" is really just an implementation issue. There is<br />absolutely no question that it can't be about more than just<br />scheduling, and that it can't be about more than just tty's also.<br /><br />And an important thing to keep in mind is that "user interfaces are<br />bad". The thinner the interface, the better. One of the reasons I<br />really like autogroup is that it has _no_ interface at all. It's very<br />much a heuristic, and it has zero user interface (apart from the knob<br />that turns it on and off, of course). That is a great feature, because<br />it means that you cannot break the interface. You will never need to<br />have applications that have special linux-specific hooks in them, or<br />system daemons who have to touch magical /proc files etc.<br /><br />One of the problems I found annoying when just testing it using the<br />plain cgroup interface (before the patch) was the resource management.<br />You needed root, and they actually made sense requiring root, because<br />I don't think we _want_ to allow people creating infinite numbers of<br />cgroups. Vivek's "trivial patch" (shell script) is a major DoS thing,<br />for example. Letting normal users create cgroups willy-nilly is not a<br />good idea (and as Vivek already found out, his trivial script leaks<br />cgroups in a pretty fundamental way).<br /><br />The tty approach is somewhat self-limiting in that it requires you to<br />get the tty to get an autogroup. But also, because it's very much a<br />heuristic and doesn't have any user-visible interfaces, from a kernel<br />perspective it's wonderful. There are no "semantics" to break. If it<br />turns out that there is some way to create excessive cgroups, we can<br />introduce per-user limits etc to say "the heuristic works up to X<br />cgroups and then you'll just get your own user group". And nobody<br />would ever notice.<br /><br />So doing things automatically and without any user interface is about<br />_more_ than just convenience. If it can be done that way, it is<br />fundamentally better way to do things. Because it hides the<br />implementation details, and leaves us open to do totally different<br />things in the end.<br /><br />For example, 'cgroups' itself is pretty heavy-weight, and is really<br />quite smart. Those things nest, etc etc. But with the "it's just a<br />heuristic", maybe somebody ends up doing a "simplified non-nesting<br />grouping thing", and if you don't want the whole cgroup thing (I have<br />always answered no to CONFIG_CGROUPS myself, for example), you could<br />still do the autogrouping. But you could _not_ cleanly do the<br />/proc/sys/cgroup/user scripting, because your implementation is no<br />longer based on the whole cgroups thing.<br /><br />Now, will any of this ever happen? I dunno. I doubt it will matter.<br />But it's an example of why I think it's such a great approach, and why<br />"it just works" is such an important feature.<br /><br />                       Linus<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
