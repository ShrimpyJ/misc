    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/11/21/74">First message in thread</a></li><li><a href="/lkml/2010/11/21/103">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/21/114">Oleg Nesterov</a><ul><li class="origin"><a href="/lkml/2010/11/21/119">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/21/119">Oleg Nesterov</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 21 Nov 2010 11:11:34 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PROBLEM] WARNING: at kernel/exit.c:910 do_exit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Nov 21, 2010 at 10:51 AM, Oleg Nesterov &lt;oleg&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Yes, but still I am puzzled a bit. Where -&gt;fs_excl != 0 comes from?<br />&gt; Not that I really understand what it means, but nothing in this path<br />&gt; can do lock_super(), I think. This means it was already nonzero or<br />&gt; the bug caused the memory corruption.<br /><br />I would guess that by the time you do three recursive oopses, you've<br />probably used up all the kernel stack and you've stomped on the<br />thread_info itself. At that point, thread-&gt;tsk might be totally<br />random. So it's possible that "current-&gt;fs_excl" is nonzero simply<br />because "current" is a random pointer at this point.<br /><br />Or it might be memory corruption, and the same thing that caused the<br />original oops.<br /><br />I dunno.<br /><br />I do wonder if we should just flag a thread as "busy oopsing" before<br />we call "do_exit(), so that _if_ we do a recursive oops we<br /><br /> (a) don't print it out (except just a one-liner to say "recursively<br />oopsed in %pS" or something)<br /> (b) don't try to clean up with do_exit (because that's likely just<br />going to oops again or run out of stack etc)<br /><br />That might have left us with a more visible original oops. Maybe the<br />register contents at that point could have given us any ideas (ie<br />things like the slab poisoning memory patterns or whatever).<br /><br />&gt; Btw, why it is atomic_t ?<br /><br />That whole thing is insane. Afaik, there is one single user (apart<br />from the WARN_ON), and that's some stupid block scheduler crap for IO<br />priority boosting.<br /><br />The block layer people have been way too eager to add random ugly<br />crud. And no, I don't see why the atomic_t would make any sense. It's<br />thread-local.<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
