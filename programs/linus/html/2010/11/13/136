    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/11/13/108">First message in thread</a></li><li><a href="/lkml/2010/11/13/112">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/13/113">Dan Rosenberg</a><ul><li class="origin"><a href="/lkml/2010/11/13/185">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/13/185">Kees Cook</a></li><li><a href="/lkml/2010/11/14/55">Ingo Molnar</a></li></ul></li></ul></li><li><a href="/lkml/2010/11/13/130">Joe Perches</a><ul><li><a href="/lkml/2010/11/13/132">Joe Perches</a></li><li><a href="/lkml/2010/11/13/137">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/14/162">James Morris</a></li><li><a href="/lkml/2010/11/15/240">Eric Paris</a><ul><li><a href="/lkml/2010/11/15/264">Eric Paris</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2010/11/13/184">Kees Cook</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/11/13/136/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 13 Nov 2010 12:22:15 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Fix dmesg_restrict build failure with CONFIG_EMBEDDED=y and CONFIG_PRINTK=n</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Nov 13, 2010 at 10:25 AM, Dan Rosenberg<br />&lt;drosenberg&#64;vsecurity.com&gt; wrote:<br />&gt;<br />&gt;&gt;<br />&gt;&gt; Anyway, suggested replacement patch attached. Comments?<br />&gt;&gt;<br />&gt;<br />&gt; The desired behavior was to allow a reader with CAP_SYS_ADMIN to open<br />&gt; the syslog via /proc/kmsg and continue reading it even after dropping<br />&gt; capabilities, which is why it was placed where it was.  I see no problem<br />&gt; with moving it back out to do_syslog, but ideally the same behavior<br />&gt; should be replicated.<br /><br />Hmm. No wonder I missed that. The security interface is totally<br />idiotic. If the intention is for /proc/kmsg security checks to be done<br />at open time, then dammit, that logic should _not_ be inside some<br />random security policy.<br /><br />So I missed the intention, because the code is written in such an odd<br />way. Those security hooks were obviously done as a<br />"search-and-replace" kind of thing, rather than trying to make sense.<br /><br />I suspect "from_file" should never be passed to the security hook,<br />since the only point would be exactly that "do security checks of<br />/proc/kmsg at open time" - which I think is better done totally<br />independent of the security model - otherwise the security models just<br />inevitably just always do fundamentally different things.<br /><br />Security people should be the ones to know that the way to do security<br />is to make it obvious, instead of having totally crazy interfaces for<br />hooks that make no sense. "Not making sense" is how obvious patches<br />then miss the point of the check.<br /><br />So what happens now is that the capability-based logic thinks the<br />rules are about "open time", while the _other_ security rules seem to<br />think it's about read time (_and_ open time - they just ignore the<br />whole from_file).<br /><br />So which one is right? Making it a case of "random security models can<br />implement totally random semantics" is just stupid.<br /><br />So my suspicion is that the intent was to just do the check at open<br />time, and the confusing interface just means that selinux and others<br />didn't even realize what the whole intent of that "from_file" thing<br />was. Why not just fix that. How does this (UNTESTED!) patch look?<br /><br />I've added James Morris to the recipients list. Comments?<br /><br />(The diffstat says that this adds more lines than it removes, but that<br />is misleading: it is due to actually commenting the rule that checks<br />are done open-time for /proc/kmsg)<br /><br />                         Linus<br /> include/linux/security.h   |   11 +++++------<br /> kernel/printk.c            |   15 ++++++++++++---<br /> kernel/sysctl.c            |    2 +-<br /> security/commoncap.c       |    7 +------<br /> security/security.c        |    4 ++--<br /> security/selinux/hooks.c   |    4 ++--<br /> security/smack/smack_lsm.c |    4 ++--<br /> 7 files changed, 25 insertions(+), 22 deletions(-)<br /><br />diff --git a/include/linux/security.h b/include/linux/security.h<br />index b8246a8..10f10f1 100644<br />--- a/include/linux/security.h<br />+++ b/include/linux/security.h<br />&#64;&#64; -77,7 +77,7 &#64;&#64; extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,<br /> extern int cap_task_setscheduler(struct task_struct *p);<br /> extern int cap_task_setioprio(struct task_struct *p, int ioprio);<br /> extern int cap_task_setnice(struct task_struct *p, int nice);<br />-extern int cap_syslog(int type, bool from_file);<br />+extern int cap_syslog(int type);<br /> extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);<br /> <br /> struct msghdr;<br />&#64;&#64; -1270,7 +1270,6 &#64;&#64; static inline void security_free_mnt_opts(struct security_mnt_opts *opts)<br />  *	logging to the console.<br />  *	See the syslog(2) manual page for an explanation of the &#64;type values.<br />  *	&#64;type contains the type of action.<br />- *	&#64;from_file indicates the context of action (if it came from /proc).<br />  *	Return 0 if permission is granted.<br />  * &#64;settime:<br />  *	Check permission to change the system time.<br />&#64;&#64; -1388,7 +1387,7 &#64;&#64; struct security_operations {<br /> 	int (*sysctl) (struct ctl_table *table, int op);<br /> 	int (*quotactl) (int cmds, int type, int id, struct super_block *sb);<br /> 	int (*quota_on) (struct dentry *dentry);<br />-	int (*syslog) (int type, bool from_file);<br />+	int (*syslog) (int type);<br /> 	int (*settime) (struct timespec *ts, struct timezone *tz);<br /> 	int (*vm_enough_memory) (struct mm_struct *mm, long pages);<br /> <br />&#64;&#64; -1671,7 +1670,7 &#64;&#64; int security_real_capable_noaudit(struct task_struct *tsk, int cap);<br /> int security_sysctl(struct ctl_table *table, int op);<br /> int security_quotactl(int cmds, int type, int id, struct super_block *sb);<br /> int security_quota_on(struct dentry *dentry);<br />-int security_syslog(int type, bool from_file);<br />+int security_syslog(int type);<br /> int security_settime(struct timespec *ts, struct timezone *tz);<br /> int security_vm_enough_memory(long pages);<br /> int security_vm_enough_memory_mm(struct mm_struct *mm, long pages);<br />&#64;&#64; -1901,9 +1900,9 &#64;&#64; static inline int security_quota_on(struct dentry *dentry)<br /> 	return 0;<br /> }<br /> <br />-static inline int security_syslog(int type, bool from_file)<br />+static inline int security_syslog(int type)<br /> {<br />-	return cap_syslog(type, from_file);<br />+	return cap_syslog(type);<br /> }<br /> <br /> static inline int security_settime(struct timespec *ts, struct timezone *tz)<br />diff --git a/kernel/printk.c b/kernel/printk.c<br />index 38e7d58..a5bfa5a 100644<br />--- a/kernel/printk.c<br />+++ b/kernel/printk.c<br />&#64;&#64; -274,9 +274,18 &#64;&#64; int do_syslog(int type, char __user *buf, int len, bool from_file)<br /> 	char c;<br /> 	int error = 0;<br /> <br />-	error = security_syslog(type, from_file);<br />-	if (error)<br />-		return error;<br />+	/*<br />+	 * If we have use /proc/kmsg and the open succeeded,<br />+	 * we don't do any extra security checks: they were<br />+	 * done at open time.<br />+	 */<br />+	if (type == SYSLOG_ACTION_OPEN || !from_file) {<br />+		if (dmesg_restrict &amp;&amp; !capable(CAP_SYS_ADMIN))<br />+			return -EPERM;<br />+		error = security_syslog(type);<br />+		if (error)<br />+			return error;<br />+	}<br /> <br /> 	switch (type) {<br /> 	case SYSLOG_ACTION_CLOSE:	/* Close log */<br />diff --git a/kernel/sysctl.c b/kernel/sysctl.c<br />index b65bf63..5abfa15 100644<br />--- a/kernel/sysctl.c<br />+++ b/kernel/sysctl.c<br />&#64;&#64; -702,7 +702,6 &#64;&#64; static struct ctl_table kern_table[] = {<br /> 		.extra1		= &amp;zero,<br /> 		.extra2		= &amp;ten_thousand,<br /> 	},<br />-#endif<br /> 	{<br /> 		.procname	= "dmesg_restrict",<br /> 		.data		= &amp;dmesg_restrict,<br />&#64;&#64; -712,6 +711,7 &#64;&#64; static struct ctl_table kern_table[] = {<br /> 		.extra1		= &amp;zero,<br /> 		.extra2		= &amp;one,<br /> 	},<br />+#endif<br /> 	{<br /> 		.procname	= "ngroups_max",<br /> 		.data		= &amp;ngroups_max,<br />diff --git a/security/commoncap.c b/security/commoncap.c<br />index 04b80f9..8ce2400 100644<br />--- a/security/commoncap.c<br />+++ b/security/commoncap.c<br />&#64;&#64; -886,17 +886,12 &#64;&#64; error:<br /> /**<br />  * cap_syslog - Determine whether syslog function is permitted<br />  * &#64;type: Function requested<br />- * &#64;from_file: Whether this request came from an open file (i.e. /proc)<br />  *<br />  * Determine whether the current process is permitted to use a particular<br />  * syslog function, returning 0 if permission is granted, -ve if not.<br />  */<br />-int cap_syslog(int type, bool from_file)<br />+int cap_syslog(int type)<br /> {<br />-	if (type != SYSLOG_ACTION_OPEN &amp;&amp; from_file)<br />-		return 0;<br />-	if (dmesg_restrict &amp;&amp; !capable(CAP_SYS_ADMIN))<br />-		return -EPERM;<br /> 	if ((type != SYSLOG_ACTION_READ_ALL &amp;&amp;<br /> 	     type != SYSLOG_ACTION_SIZE_BUFFER) &amp;&amp; !capable(CAP_SYS_ADMIN))<br /> 		return -EPERM;<br />diff --git a/security/security.c b/security/security.c<br />index 3ef5e2a..1b798d3 100644<br />--- a/security/security.c<br />+++ b/security/security.c<br />&#64;&#64; -197,9 +197,9 &#64;&#64; int security_quota_on(struct dentry *dentry)<br /> 	return security_ops-&gt;quota_on(dentry);<br /> }<br /> <br />-int security_syslog(int type, bool from_file)<br />+int security_syslog(int type)<br /> {<br />-	return security_ops-&gt;syslog(type, from_file);<br />+	return security_ops-&gt;syslog(type);<br /> }<br /> <br /> int security_settime(struct timespec *ts, struct timezone *tz)<br />diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c<br />index d9154cf..13cf8f1 100644<br />--- a/security/selinux/hooks.c<br />+++ b/security/selinux/hooks.c<br />&#64;&#64; -1973,11 +1973,11 &#64;&#64; static int selinux_quota_on(struct dentry *dentry)<br /> 	return dentry_has_perm(cred, NULL, dentry, FILE__QUOTAON);<br /> }<br /> <br />-static int selinux_syslog(int type, bool from_file)<br />+static int selinux_syslog(int type)<br /> {<br /> 	int rc;<br /> <br />-	rc = cap_syslog(type, from_file);<br />+	rc = cap_syslog(type);<br /> 	if (rc)<br /> 		return rc;<br /> <br />diff --git a/security/smack/smack_lsm.c b/security/smack/smack_lsm.c<br />index bc39f40..6d59b6d 100644<br />--- a/security/smack/smack_lsm.c<br />+++ b/security/smack/smack_lsm.c<br />&#64;&#64; -157,12 +157,12 &#64;&#64; static int smack_ptrace_traceme(struct task_struct *ptp)<br />  *<br />  * Returns 0 on success, error code otherwise.<br />  */<br />-static int smack_syslog(int type, bool from_file)<br />+static int smack_syslog(int type)<br /> {<br /> 	int rc;<br /> 	char *sp = current_security();<br /> <br />-	rc = cap_syslog(type, from_file);<br />+	rc = cap_syslog(type);<br /> 	if (rc != 0)<br /> 		return rc;<br /> </pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
