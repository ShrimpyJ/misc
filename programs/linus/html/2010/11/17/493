    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/11/17/479">First message in thread</a></li><li><a href="/lkml/2010/11/17/479">Randy Dunlap</a><ul><li class="origin"><a href="/lkml/2010/11/17/504">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/17/504">Randy Dunlap</a></li><li><a href="/lkml/2010/11/17/506">Arnd Bergmann</a></li><li><a href="/lkml/2010/11/18/116">Ingo Molnar</a><ul><li><a href="/lkml/2010/11/18/351">Linus Torvalds</a><ul><li><a href="/lkml/2010/11/18/355">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/11/17/493/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Nov 2010 14:23:23 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: BKL: remove extraneous #include &lt;smp_lock.h&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 17, 2010 at 2:05 PM, Randy Dunlap &lt;randy.dunlap&#64;oracle.com&gt; wrote:<br />&gt;<br />&gt; smp_lock.h was removed from hardirq.h.  smp_lock.h provided the function prototype<br />&gt; for kernel_locked().  Should source files now #include &lt;linux/smp_lock.h&gt; ?<br />&gt; even when not being built for SMP?<br /><br />Hmm. I think that part was a mistake, but I suspect the simplest fix<br />for it is to simply get rid of "kernel_locked()". It has no other<br />users than the hardirq.h one, so let's just move it there.<br /><br />Something like the attached?<br /><br />NOTE! The reason I _only_ take the CONFIG_LOCK_KERNEL version from<br />smp_lock.h is because:<br /><br /> - LOCK_KERNEL is defined by init/Kconfig as "(SMP || PREEMPT) &amp;&amp; BKL"<br /><br /> - inside hardirq.h we only use "kernel_locked()" inside "PREEMPT &amp;&amp; BKL"<br /><br /> - so "PREEMPT &amp;&amp; BKL" implies "LOCK_KERNEL"<br /><br /> - so the !LOCK_KERNEL kernel_locked() case is irrelevant.<br /><br />unless I did a thinko somewhere.<br /><br />Does this work in all configurations? TOTALLY UNTESTED! Caveat emptor.<br /><br />                 Linus<br /> include/linux/hardirq.h  |    2 +-<br /> include/linux/smp_lock.h |    3 ---<br /> 2 files changed, 1 insertions(+), 4 deletions(-)<br /><br />diff --git a/include/linux/hardirq.h b/include/linux/hardirq.h<br />index 8f3f467..bea1612 100644<br />--- a/include/linux/hardirq.h<br />+++ b/include/linux/hardirq.h<br />&#64;&#64; -96,7 +96,7 &#64;&#64;<br /> #define in_nmi()	(preempt_count() &amp; NMI_MASK)<br /> <br /> #if defined(CONFIG_PREEMPT) &amp;&amp; defined(CONFIG_BKL)<br />-# define PREEMPT_INATOMIC_BASE kernel_locked()<br />+# define PREEMPT_INATOMIC_BASE (current-&gt;lock_depth &gt;= 0)<br /> #else<br /> # define PREEMPT_INATOMIC_BASE 0<br /> #endif<br />diff --git a/include/linux/smp_lock.h b/include/linux/smp_lock.h<br />index 291f721..3a19882 100644<br />--- a/include/linux/smp_lock.h<br />+++ b/include/linux/smp_lock.h<br />&#64;&#64; -4,8 +4,6 &#64;&#64;<br /> #ifdef CONFIG_LOCK_KERNEL<br /> #include &lt;linux/sched.h&gt;<br /> <br />-#define kernel_locked()		(current-&gt;lock_depth &gt;= 0)<br />-<br /> extern int __lockfunc __reacquire_kernel_lock(void);<br /> extern void __lockfunc __release_kernel_lock(void);<br /> <br />&#64;&#64; -58,7 +56,6 &#64;&#64; static inline void cycle_kernel_lock(void)<br /> #define lock_kernel()<br /> #define unlock_kernel()<br /> #define cycle_kernel_lock()			do { } while(0)<br />-#define kernel_locked()				1<br /> #endif /* CONFIG_BKL */<br /> <br /> #define release_kernel_lock(task)		do { } while(0)</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
