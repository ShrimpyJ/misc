    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/30/29">First message in thread</a></li><li><a href="/lkml/2010/12/30/108">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/30/146">Nitin Gupta</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/12/30/166/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 30 Dec 2010 12:09:00 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH][zram] Do not check for init flag before starting I/O</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 30, 2010 at 11:02 AM, Nitin Gupta &lt;ngupta&#64;vflare.org&gt; wrote:<br />&gt;<br />&gt; This commit shows oops in zram_inc_stat() which does not exist in staging<br />&gt; tree version of zram. Its actually a problem with zram version as present in<br />&gt; project's own repository where we allocate struct zram_stats_cpu upon device<br />&gt; initialization. OTOH, In mainline/staging version of zram, we allocate<br />&gt; struct stats upfront, so this oops cannot happen in mainline version.<br />&gt;<br />&gt; So, this commit is not even applicable for mainline/staging tree.  My bad, I<br />&gt; didn't get a chance to review that patch.<br /><br />Ok. So it really is a revert, and the commit message for the revert<br />should have explained that.<br /><br />I changed the commit message appropriately, and committed it as the<br />attached commit.<br /><br />                            Linus<br /> arch/avr32/kernel/module.c   |    3 +--<br /> arch/h8300/kernel/module.c   |    3 +--<br /> arch/mn10300/kernel/module.c |    3 +--<br /> arch/parisc/kernel/module.c  |    3 +--<br /> arch/powerpc/kernel/module.c |    5 -----<br /> arch/s390/kernel/module.c    |    3 +--<br /> arch/sh/kernel/module.c      |    2 --<br /> arch/x86/kernel/module.c     |    3 +--<br /> include/linux/module.h       |    5 ++---<br /> kernel/module.c              |    3 +++<br /> lib/bug.c                    |    6 ++----<br /> 11 files changed, 13 insertions(+), 26 deletions(-)<br /><br />diff --git a/arch/avr32/kernel/module.c b/arch/avr32/kernel/module.c<br />index 98f94d0..a727f54 100644<br />--- a/arch/avr32/kernel/module.c<br />+++ b/arch/avr32/kernel/module.c<br />&#64;&#64; -314,10 +314,9 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,<br /> 	vfree(module-&gt;arch.syminfo);<br /> 	module-&gt;arch.syminfo = NULL;<br /> <br />-	return module_bug_finalize(hdr, sechdrs, module);<br />+	return 0;<br /> }<br /> <br /> void module_arch_cleanup(struct module *module)<br /> {<br />-	module_bug_cleanup(module);<br /> }<br />diff --git a/arch/h8300/kernel/module.c b/arch/h8300/kernel/module.c<br />index 0865e29..db4953d 100644<br />--- a/arch/h8300/kernel/module.c<br />+++ b/arch/h8300/kernel/module.c<br />&#64;&#64; -112,10 +112,9 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 		    const Elf_Shdr *sechdrs,<br /> 		    struct module *me)<br /> {<br />-	return module_bug_finalize(hdr, sechdrs, me);<br />+	return 0;<br /> }<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/arch/mn10300/kernel/module.c b/arch/mn10300/kernel/module.c<br />index 6aea7fd..196a111 100644<br />--- a/arch/mn10300/kernel/module.c<br />+++ b/arch/mn10300/kernel/module.c<br />&#64;&#64; -206,7 +206,7 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 		    const Elf_Shdr *sechdrs,<br /> 		    struct module *me)<br /> {<br />-	return module_bug_finalize(hdr, sechdrs, me);<br />+	return 0;<br /> }<br /> <br /> /*<br />&#64;&#64; -214,5 +214,4 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br />  */<br /> void module_arch_cleanup(struct module *mod)<br /> {<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/arch/parisc/kernel/module.c b/arch/parisc/kernel/module.c<br />index 159a2b8..6e81bb5 100644<br />--- a/arch/parisc/kernel/module.c<br />+++ b/arch/parisc/kernel/module.c<br />&#64;&#64; -941,11 +941,10 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 	nsyms = newptr - (Elf_Sym *)symhdr-&gt;sh_addr;<br /> 	DEBUGP("NEW num_symtab %lu\n", nsyms);<br /> 	symhdr-&gt;sh_size = nsyms * sizeof(Elf_Sym);<br />-	return module_bug_finalize(hdr, sechdrs, me);<br />+	return 0;<br /> }<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br /> 	deregister_unwind_table(mod);<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/arch/powerpc/kernel/module.c b/arch/powerpc/kernel/module.c<br />index 477c663..4ef93ae 100644<br />--- a/arch/powerpc/kernel/module.c<br />+++ b/arch/powerpc/kernel/module.c<br />&#64;&#64; -65,10 +65,6 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 	const Elf_Shdr *sect;<br /> 	int err;<br /> <br />-	err = module_bug_finalize(hdr, sechdrs, me);<br />-	if (err)<br />-		return err;<br />-<br /> 	/* Apply feature fixups */<br /> 	sect = find_section(hdr, sechdrs, "__ftr_fixup");<br /> 	if (sect != NULL)<br />&#64;&#64; -101,5 +97,4 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/arch/s390/kernel/module.c b/arch/s390/kernel/module.c<br />index 22cfd63..f7167ee 100644<br />--- a/arch/s390/kernel/module.c<br />+++ b/arch/s390/kernel/module.c<br />&#64;&#64; -407,10 +407,9 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> {<br /> 	vfree(me-&gt;arch.syminfo);<br /> 	me-&gt;arch.syminfo = NULL;<br />-	return module_bug_finalize(hdr, sechdrs, me);<br />+	return 0;<br /> }<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/arch/sh/kernel/module.c b/arch/sh/kernel/module.c<br />index 43adddf..ae0be69 100644<br />--- a/arch/sh/kernel/module.c<br />+++ b/arch/sh/kernel/module.c<br />&#64;&#64; -149,13 +149,11 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 	int ret = 0;<br /> <br /> 	ret |= module_dwarf_finalize(hdr, sechdrs, me);<br />-	ret |= module_bug_finalize(hdr, sechdrs, me);<br /> <br /> 	return ret;<br /> }<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br />-	module_bug_cleanup(mod);<br /> 	module_dwarf_cleanup(mod);<br /> }<br />diff --git a/arch/x86/kernel/module.c b/arch/x86/kernel/module.c<br />index e0bc186..1c355c5 100644<br />--- a/arch/x86/kernel/module.c<br />+++ b/arch/x86/kernel/module.c<br />&#64;&#64; -239,11 +239,10 &#64;&#64; int module_finalize(const Elf_Ehdr *hdr,<br /> 		apply_paravirt(pseg, pseg + para-&gt;sh_size);<br /> 	}<br /> <br />-	return module_bug_finalize(hdr, sechdrs, me);<br />+	return 0;<br /> }<br /> <br /> void module_arch_cleanup(struct module *mod)<br /> {<br /> 	alternatives_smp_module_del(mod);<br />-	module_bug_cleanup(mod);<br /> }<br />diff --git a/include/linux/module.h b/include/linux/module.h<br />index 8a6b9fd..aace066 100644<br />--- a/include/linux/module.h<br />+++ b/include/linux/module.h<br />&#64;&#64; -686,17 +686,16 &#64;&#64; extern int module_sysfs_initialized;<br /> <br /> <br /> #ifdef CONFIG_GENERIC_BUG<br />-int  module_bug_finalize(const Elf_Ehdr *, const Elf_Shdr *,<br />+void module_bug_finalize(const Elf_Ehdr *, const Elf_Shdr *,<br /> 			 struct module *);<br /> void module_bug_cleanup(struct module *);<br /> <br /> #else	/* !CONFIG_GENERIC_BUG */<br /> <br />-static inline int  module_bug_finalize(const Elf_Ehdr *hdr,<br />+static inline void module_bug_finalize(const Elf_Ehdr *hdr,<br /> 					const Elf_Shdr *sechdrs,<br /> 					struct module *mod)<br /> {<br />-	return 0;<br /> }<br /> static inline void module_bug_cleanup(struct module *mod) {}<br /> #endif	/* CONFIG_GENERIC_BUG */<br />diff --git a/kernel/module.c b/kernel/module.c<br />index d0b5f8d..e2aeddd 100644<br />--- a/kernel/module.c<br />+++ b/kernel/module.c<br />&#64;&#64; -2625,6 +2625,7 &#64;&#64; static struct module *load_module(void __user *umod,<br /> 	if (err &lt; 0)<br /> 		goto ddebug;<br /> <br />+	module_bug_finalize(info.hdr, info.sechdrs, mod);<br /> 	list_add_rcu(&amp;mod-&gt;list, &amp;modules);<br /> 	mutex_unlock(&amp;module_mutex);<br /> <br />&#64;&#64; -2650,6 +2651,8 &#64;&#64; static struct module *load_module(void __user *umod,<br /> 	mutex_lock(&amp;module_mutex);<br /> 	/* Unlink carefully: kallsyms could be walking list. */<br /> 	list_del_rcu(&amp;mod-&gt;list);<br />+	module_bug_cleanup(mod);<br />+<br />  ddebug:<br /> 	if (!mod-&gt;taints)<br /> 		dynamic_debug_remove(info.debug);<br />diff --git a/lib/bug.c b/lib/bug.c<br />index 7cdfad8..1955209 100644<br />--- a/lib/bug.c<br />+++ b/lib/bug.c<br />&#64;&#64; -72,8 +72,8 &#64;&#64; static const struct bug_entry *module_find_bug(unsigned long bugaddr)<br /> 	return NULL;<br /> }<br /> <br />-int module_bug_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,<br />-			struct module *mod)<br />+void module_bug_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,<br />+			 struct module *mod)<br /> {<br /> 	char *secstrings;<br /> 	unsigned int i;<br />&#64;&#64; -97,8 +97,6 &#64;&#64; int module_bug_finalize(const Elf_Ehdr *hdr, const Elf_Shdr *sechdrs,<br /> 	 * could potentially lead to deadlock and thus be counter-productive.<br /> 	 */<br /> 	list_add(&amp;mod-&gt;bug_list, &amp;module_bug_list);<br />-<br />-	return 0;<br /> }<br /> <br /> void module_bug_cleanup(struct module *mod)</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
