    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/28/196">First message in thread</a></li><li><a href="/lkml/2010/12/30/142">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/30/150">Trond Myklebust</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 30 Dec 2010 12:02:23 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: still nfs problems [Was: Linux 2.6.37-rc8]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 30, 2010 at 11:25 AM, Trond Myklebust<br />&lt;Trond.Myklebust&#64;netapp.com&gt; wrote:<br />&gt;<br />&gt; uncached_readdir is not really a problem. The real problem is<br />&gt; filesystems that generate "infinite directories" by producing looping<br />&gt; combinations of cookies.<br /><br />But if we don't have any lseek's, the readdir cache should trivially<br />take care of this by just incrementing the page_index, and we should<br />return to user space the (eventually ending) sequence, even if there<br />are duplicate numbers.<br /><br />(Also, I suspect that "page_index" should not be a page index, but a<br />position, and then you the "search_for_pos()" should use that instead<br />of the file_pos/current_index thing, but that's a detail that would<br />show up only when you have duplicate cookies within one page worth of<br />directory caches)<br /><br />And if the server really sends us an infinite stream of entries, then<br />that's fine - at least we give to user space the infinite entries that<br />were given to us, instead of _generating_ an infinite stream from what<br />was a finite - but broken - stream).<br /><br />So it seems wrong that the directory caching code resets page_index to<br />the start when it then does an uncached readdir. That seems wrong.<br /><br />I'm sure there's some reason for it, but wouldn't it be nice if the<br />rule for page_index was that it starts off at zero, and only gets<br />reset by lseek?<br /><br />&gt; IOW: I've seen servers that generate cookies in a sequence of a form<br />&gt; vaguely resembling<br />&gt;<br />&gt; 1 2 3 4 5 6 7 8 9 10 11 12 3...<br />&gt;<br />&gt; (with possibly a thousand or so entries between the first and second<br />&gt; copy of '3')<br /><br />Ok, so that' obviously broken, but it's then _doubly_ broken to turn<br />that long broken sequence into an _endless_ broken sequence.<br /><br />And I agree that when user space sees such an endless broken sequence,<br />it's a real stopping problem for user space. But in the absense of<br />lseek, it should _never_ be a problem for the kernel itself, afaik.<br />The kernel should happily return just the broken sequence. No?<br /><br />So then perhaps the solution is to just remove the resetting of<br />page_index in the uncached_readdir() function? Make sure that the<br />page_index is monotonically increasing for any readdir(), and you<br />protect against turning a bad sequence into an endless sequence.<br /><br />Of course, lseek() will have to reset page_index to zero, and if<br />somebody does an lseek() on the directory, then the duplicate '3"<br />entry in the cookie sequence will inevitably be ambiguous, but that<br />really is unavoidable. And rare. People who use lseek() on directories<br />are odd and we know they'll break on other filesystems too under<br />certain circumstances.<br /><br />                         Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
