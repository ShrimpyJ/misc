    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/9/25">First message in thread</a></li><li><a href="/lkml/2010/12/15/235">David Miller</a><ul><li><a href="/lkml/2010/12/16/60">Boaz Harrosh</a><ul><li><a href="/lkml/2010/12/16/139">Nick Piggin</a><ul><li><a href="/lkml/2010/12/16/149">Boaz Harrosh</a><ul><li><a href="/lkml/2010/12/16/154">Nick Piggin</a></li></ul></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2010/12/16/288">David Miller</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 16 Dec 2010 08:51:04 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Big git diff speedup by avoiding x86 "fast string" memcmp</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 16, 2010 at 1:53 AM, Boaz Harrosh &lt;bharrosh&#64;panasas.com&gt; wrote:<br />&gt;<br />&gt; You miss understood me. I'm saying that we know the beggining of the<br />&gt; string is aligned and Nick offered to pad the last long, so surly<br />&gt; a shift by 2 (or 3) + the reduction of the 12 dec-and-test to 3<br />&gt; should give you an optimization?<br /><br />Sadly, right now we don't know that the string is necessarily even aligned.<br /><br />Yes, it's always aligned in a dentry, because it's either the inline<br />short string, or it's the longer string we explicitly allocated to the<br />dentry.<br /><br />But when we do name compares in __d_lookup, only one part of that is a<br />dentry. The other is a qstr, and the name there is not aligned. In<br />fact, it's not even NUL-terminated. It's the data directly from the<br />path itself.<br /><br />So we can certainly do compares a "long" at a time, but it's not<br />entirely trivial. And just making the dentries be aligned and<br />null-padded is not enough. Most likely, you'd have to make the dentry<br />name compare function do an unaligned load from the qstr part, and<br />then do the masking.<br /><br />Which is likely still the best performance on something like x86 where<br />unaligned loads are cheap, but on other architectures it might be less<br />so.<br /><br />                                     Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
