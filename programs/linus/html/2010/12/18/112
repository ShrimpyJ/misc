    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/13/420">First message in thread</a></li><li><a href="/lkml/2010/12/17/413">"H. Peter Anvin"</a><ul><li><a href="/lkml/2010/12/17/427">Tony Luck</a><ul><li class="origin"><a href="/lkml/2010/12/18/146">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/18/146">Tony Luck</a><ul><li><a href="/lkml/2010/12/19/12">Borislav Petkov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 18 Dec 2010 10:23:03 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [concept &amp; "good taste" review] persistent store</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 17, 2010 at 3:53 PM, Tony Luck &lt;tony.luck&#64;intel.com&gt; wrote:<br />&gt; On Fri, Dec 17, 2010 at 3:11 PM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt;&gt; There are two models I can think of:<br />&gt;&gt;<br />&gt;&gt; 1. a file where the head is automatically dropped as space requires.<br />&gt;&gt; 2. a filesystem where the oldest files are automatically reclaimed.<br />&gt;&gt;<br />&gt;&gt; 1 has been implemented in actual systems, 2 is kind of a logical extension.<br />&gt;<br />&gt; #2 sounds more applicable here (we have some multi-kilobyte<br />&gt; blobs of data, one from each kmsg_dumper invocation - and<br />&gt; it would seem useful to keep them as separate entities)<br /><br />So I would argue that what we'd want is actually more of a mix of the two.<br /><br />You want to have a ring of events, and into that ring you also have a<br />"this event has been read" pointer. And you _never_ overwrite entries<br />that haven't been read yet, because quite frankly, if you get some<br />nasty memory corruption, you may end up with a thousand oopses in<br />rapid succession, and the latter ones are likely to be just fallout<br />from the earlier ones. So you definitely don't want to overwrite the<br />earlier ones, because they are more likely to contain the clues about<br />the actual original cause.<br /><br />At the same time, you do want to have the capability of saying "I've<br />seen this", and let it be overwritten. For example, if we end up<br />teaching syslogd or something like that to use this, syslogd would<br />write the oops to disk, do a fdatasync() on the oops file, and after<br />it's stable on disk it can mark it "read".<br /><br />Also, since this is very much about persistent storage, I think any<br />events from a previous boot that still exists should be marked "read".<br />You still want to be able to read them (so marking something "read"<br />does not mean that it goes away), but if a new oops happens, you don't<br />want some old entries from long ago to stop it from being written to<br />persistent storage. So if you don't have any syslogd or any other tool<br />that saves things to disk, you'd still get the new oopses into<br />persistent storage.<br /><br />Doesn't that sound like the best of both worlds?<br /><br />                         Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
