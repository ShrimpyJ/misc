    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/8/352">First message in thread</a></li><li><a href="/lkml/2010/12/14/343">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/14/354">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/14/466">Bjorn Helgaas</a></li><li><a href="/lkml/2010/12/15/11">Bjorn Helgaas</a></li></ul></li><li><a href="/lkml/2010/12/15/15">Bjorn Helgaas</a><ul><li class="origin"><a href="/lkml/2010/12/15/239">Linus Torvalds</a><ul><li><a href="/lkml/2010/12/15/239">Bjorn Helgaas</a><ul><li><a href="/lkml/2010/12/15/245">"H. Peter Anvin"</a></li><li><a href="/lkml/2010/12/15/264">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Dec 2010 23:03:15 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 5/5] PNP: HP nx6325 fixup: reserve unreported resources</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 14, 2010 at 10:26 PM, Bjorn Helgaas &lt;bjorn.helgaas&#64;hp.com&gt; wrote:<br />&gt;<br />&gt; I don't know whether the other patches in this series make you<br />&gt; unhappy.  I'm really not happy with how I implemented the avoidance<br />&gt; of ACPI devices when doing PCI allocation, but I do think we need<br />&gt; to avoid them *somehow*, and I was looking for a minimal quick<br />&gt; fix at this point in the cycle.<br /><br />So the "avoid ACPI devices" part makes sense, and doesn't involved<br />quirks, so I don't hate it at all the same way I hated the HP quirk.<br /><br />However, I hate how it makes the allocation logic opaque. You can no<br />longer tell from the regular non-debug dmesg and the /proc/iomem _why_<br />something got allocated the way it did, because there are hidden<br />rules. That makes things awkward, methinks.<br /><br />Also, quite frankly, I wonder what happens after release when somebody<br />shows another machine that simply stopped working because the<br />allocation strategy didn't work for it. The hw coverage that -rc6 gets<br />is tiny compared to a real release.<br /><br />IOW, what's the long-term strategy for this? The only sane long-term<br />strategy I can see is the one we have _always_ done, which is to try<br />to populate the memory resource tree with what simply matches reality.<br />The whole "ok, we know the hardware better than the BIOS does" is a<br />_stable_ strategy. In contrast, the things you propose are NOT stable<br />strategies, they all depend on basically "we match windows exactly<br />and/or trust ACPI". Both of which are *known* to be failing models.<br /><br />That's why I'm somewhat upset. Your whole strategy seems to depend on<br />a known broken model. We _know_ ACPI tables are crap much of the time.<br />So we know that "avoiding ACPI resources" is inevitably insufficient.<br /><br />And that's why I hate the "switch everything around" model. Yes, we<br />have a known way to fix things up - namely to actually detect the<br />hardware itself properly when firmware inevitably screws up - but the<br />very act of switching things around will pretty much guarantee that<br />all our years of effort is of dubious value, and we'll end up finding<br />other laptops that used to work and no longer does.<br /><br />Only switching around when _CRS is used is possible, and shouldn't<br />cause any regressions if we continue to default to not using _CRS. But<br />you want to switch that default around at some point, don't you? At<br />which point we'll be up sh*t creek again. See what I'm saying?<br /><br />Which all makes me suspect that we'd be much better off just doing the<br />bottom-up allocation even for _CRS. And maybe CRS works fine then when<br />we combine our hardware knowledge with the ACPI region avoidance.<br /><br />                     Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
