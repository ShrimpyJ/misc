    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/12/24/47">First message in thread</a></li><li><a href="/lkml/2010/12/24/47">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/24/44">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/45">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/46">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/48">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/29/79">Yong Zhang</a><ul><li><a href="/lkml/2011/1/3/47">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/49">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/50">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/51">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/52">Peter Zijlstra</a><ul><li class="origin"><a href="/lkml/2011/1/3/55">Linus Torvalds</a><ul><li><a href="/lkml/2011/1/3/55">Peter Zijlstra</a><ul><li><a href="/lkml/2011/1/4/29">Nick Piggin</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/53">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/54">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/29/86">Yong Zhang</a><ul><li><a href="/lkml/2011/1/3/51">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/55">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/29/83">Yong Zhang</a><ul><li><a href="/lkml/2011/1/3/50">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/56">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/57">Peter Zijlstra</a><ul><li><a href="/lkml/2011/1/3/139">Peter Zijlstra</a></li><li><a href="/lkml/2011/1/4/209">Oleg Nesterov</a><ul><li><a href="/lkml/2011/1/4/212">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/58">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/29/82">Yong Zhang</a><ul><li><a href="/lkml/2011/1/3/49">Peter Zijlstra</a><ul><li><a href="/lkml/2011/1/3/155">Oleg Nesterov</a></li><li><a href="/lkml/2011/1/4/16">Yong Zhang</a></li></ul></li></ul></li><li><a href="/lkml/2011/1/3/243">Oleg Nesterov</a><ul><li><a href="/lkml/2011/1/4/162">Peter Zijlstra</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/59">Peter Zijlstra</a></li><li><a href="/lkml/2010/12/24/60">Peter Zijlstra</a><ul><li><a href="/lkml/2010/12/29/78">Yong Zhang</a></li></ul></li><li><a href="/lkml/2010/12/24/61">Peter Zijlstra</a><ul><li><a href="/lkml/2011/1/3/226">Oleg Nesterov</a><ul><li><a href="/lkml/2011/1/9/126">Tejun Heo</a></li></ul></li></ul></li><li><a href="/lkml/2010/12/24/66">Peter Zijlstra</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 24 Dec 2010 10:26:05 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][PATCH 05/17] x86: Optimize arch_spin_unlock_wait()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 24, 2010 at 4:23 AM, Peter Zijlstra &lt;a.p.zijlstra&#64;chello.nl&gt; wrote:<br />&gt; Only wait for the current holder to release the lock.<br />&gt;<br />&gt; spin_unlock_wait() can only be about the current holder, since<br />&gt; completion of this function is inherently racy with new contenders.<br />&gt; Therefore, there is no reason to wait until the lock is completely<br />&gt; unlocked.<br /><br />Is there really any reason for this patch? I'd rather keep the simpler<br />and more straightforward code unless you have actual numbers.<br /><br />&gt; +static inline void __ticket_spin_unlock_wait(arch_spinlock_t *lock)<br />&gt; +{<br />&gt; +       int tmp = ACCESS_ONCE(lock-&gt;slock);<br />&gt; +<br />&gt; +       if (!(((tmp &gt;&gt; TICKET_SHIFT) ^ tmp) &amp; TICKET_MASK))<br />&gt; +               return; /* not locked */<br />&gt; +<br />&gt; +       /* wait until the current lock holder goes away */<br />&gt; +       while ((lock-&gt;slock &amp; TICKET_MASK) == (tmp &amp; TICKET_MASK))<br />&gt; +               cpu_relax();<br />&gt;  }<br /><br />Also, the above is just ugly. You've lost the ACCESS_ONCE() on the<br />lock access, and it's using another model of masking than the regular<br />one. Both of which may be intentional (maybe you are _trying_ to get<br />the compiler to just load the low bytes and avoid the 'and'), but the<br />whole open-coding of the logic - twice, and with different looking<br />masking - just makes my skin itch.<br /><br />                                  Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
