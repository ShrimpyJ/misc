    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/14/539">First message in thread</a></li><li><a href="/lkml/2010/7/19/103">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/19/132">David Howells</a><ul><li class="origin"><a href="/lkml/2010/7/19/159">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/19/159">David Howells</a><ul><li><a href="/lkml/2010/7/19/165">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 19 Jul 2010 09:51:13 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 02/18] xstat: Add a pair of system calls to make extended  file stats available [ver #6]</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 19, 2010 at 9:15 AM, David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt; Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt;&gt;  - that whole xstat buffer handling is just a mess. I think you<br />&gt;&gt; already fixed the "xstat_parameters" crud and just made it a simple<br />&gt;&gt; unsigned long and a direct argument,<br />&gt;<br />&gt; I was thinking more of an unsigned int argument, since it can't have more than<br />&gt; 32 flags in it if it is also to work on 32-bit arches.<br /><br />That's fine.<br /><br />&gt;&gt; but the "buffer+buflen" thing is still disgusting.<br />&gt;&gt;<br />&gt;&gt;    Why not just leave a few empty fields at the end, and make the rule<br />&gt;&gt; be: "We don't just add random crap, so don't expect it to grow widely<br />&gt;&gt; in the future".<br />&gt;<br />&gt; Because it gets allocated on the kernel stack.  It's already 160 bytes, and<br />&gt; expanding it will eat more kernel stack space.  Now, I can offset that by: (a)<br />&gt; embedding it in struct kstat so that we allocate less stack space in xstat()<br />&gt; overall, and (b) allocating kstat/xstat structs with kmalloc() rather than on<br />&gt; the stack in all the stat syscalls.<br /><br />Using implementation issues like that as a reason for some odd<br />interface that we'll have to live with for the next decades sounds<br />bad. It's basically a broken form of versioning, since if you end up<br />using buffer sizes, everybody will just use "sizeof()" except for some<br />random crazy developer that decides to re-use a buffer they use for<br />something else, and then use the size of that instead.<br /><br />End result: the kernel gets passed in some random constant that<br />depends on just which version of glibc they were compiled against _or_<br />on just how crazy they were. And it all just encourages people to do<br />odd things. For example, the glibc developers, who love adding their<br />own random fields for crazy "forwards compatibility", will start<br />extending the xstat structure on their own and then just pass in the<br />larger size and emulate a few new fields à la that whole vfstat thing.<br />And then if/when we want to extend on it, we're screwed.<br /><br />So making it fixed is not only simpler, it avoids all the "I'm passing<br />in random integers" crud.<br /><br />You don't need to allocate the whole thing inside the kernel anyway.<br />Quite the reverse. You probably want to continue using the kernel<br />"kstat" interface with some extensions. That's the point of kstat,<br />after all - allowing the filesystem interfaces to share _one_<br />interface rather than having new interfaces at the VFS level for every<br />damn new stat implementation we have to do for user space.<br /><br />In short, your stack space usage is all totally bogus. You should copy<br />the kstat to the user xstat one field at a time, and NOT allocate an<br />xstat on the kernel stack at all. There is no advantage to using<br />"memcpy_to_user()" (after having filled in the kernel struct one field<br />at a time) over just filling in the user struct directly.<br /><br />Just do "access_ok() + several __put_user() calls", in other words.<br /><br />I think you wanted to use "memcpy_to_user()" just because you had that<br />broken "bufsize" argument to begin with. If you get rid of the<br />bufsize, you also get rid of the potential for partial structures, and<br />all the reasons to use memcpy go away.<br /><br />Just do the obvious thing.<br /><br />&gt;&gt;  - you use "long long" all over the place. Don't do that. If you want<br />&gt;&gt; a fixed size, say so, and use "u64/s64". That's the _real_ fixed size,<br />&gt;&gt; and "long long" just _happens_ to be the same size on all current<br />&gt;&gt; architectures.<br />&gt;<br />&gt; I was following struct stat/stat64 in arch/x86/include/asm/stat.h which do the<br />&gt; same.  Also, if this is going to be seen by userspace, isn't it better to use<br />&gt; uint32_t and suchlike?<br /><br />The arch/x86/include/asm stuff isn't trying to be the same image on<br />different architectures, it's just x86[-64]-specific. But if you want<br />to have a cross-architectural thing, you want to use<br />cross-architectural types. Don't use "long long".<br /><br />Yeah, we may well do it somewhere, but there's no reason to add new ones.<br /><br />Another thing you should look for in things like this - make sure that<br />u64 is always naturally aligned. Otherwise some architectures will<br />align it at 4-byte boundaries (notably x86-32), while others will<br />align it at 8-byte boundaries (native 64-bit).<br /><br />&gt;&gt;  - why create that new kind of xstat() that realistically absolutely<br />&gt;&gt; nobody will use outside of some very special cases, and that has no<br />&gt;&gt; real advantages for 99.9% of all people?<br />&gt;<br />&gt; The new information is useful for some cases.  Samba for example.  At least<br />&gt; two of the fields I'm adding are also made available through BSD's stat()<br />&gt; call, and will automatically be used for some things by autoconf magic if they<br />&gt; become available.<br /><br />.. that' a pointless argument. If the only way something gets used is<br />through autoconf, then clearly nobody cares. Yeah, maybe it adds a<br />flag to "ls", but let's face is - that isn't actually _buying_<br />anything.<br /><br />So the only thing that matters for new system calls is who actually<br />really seriously wants to use the information, even if it's not there<br />by default. Is it _anybody_ else than samba?<br /><br />That's why I asked about maybe making it "open+stat". Because that at<br />least _potentially_ opens things up to another class of users.<br /><br />Because if it really is just samba that wants some odd crap that not<br />even all filesystems support, then why add a whole new xstat for it?<br />If nobody else clamors for it (except for people who just want new<br />interfaces), then it's not generic enough to be worth something like<br />that.<br /><br />In other words, in the absense of some seriously generic users, it<br />sounds more like an ioctl to me to ask for something like "creation<br />time" or "inode version", when not all filesystems support anything<br />like that.<br /><br />&gt;&gt; [open+stat}<br />&gt;<br />&gt; Which would be used by even fewer people, I suspect.<br /><br />Umm, no. It would be used by _at_least_ as many people.<br /><br />And don't get me wrong - I'm not saying "you need to make it<br />open+stat". I'm saying "you need to make the case that the thing is so<br />generically useful that it's worth a whole new system call, rather<br />than just a filesystem specific ioctl".<br /><br />&gt; Also, I'm not sure how much use the atomicity is, given that the file may have<br />&gt; changed state between the gathering of the stat data and userspace getting to<br />&gt; do anything with it.<br /><br />It's a security issue. It's not atomic wrt the file being edited, but<br />it would be atomic wrt the filename changing. IOW, the same thing as<br />why web servers etc need to do "open+fstat" rather than "stat+open".<br /><br />And yes, we can already do open+fstat. But exactly because it's a<br />fairly common pattern, and the kinds of programs that do it tend to<br />also care about performance, maybe they'd like a single system call.<br /><br />Ask your samba people, for example, if they'd _ever_ do just a<br />"xstat()"? Somehow I suspect that most server kind of apps almost<br />always end up doing open+fstat, just because they don't want just the<br />stat information, and need to do the fstat in order to guarantee they<br />are talking about the same file.<br /><br />But again - the whole "open+stat" is not because I think they need to<br />be done together. It's because I'm trying to see if it could make the<br />system call worth it at all.<br /><br />&gt;&gt; &gt;        ssize_t ret = fxstat(unsigned fd,<br />&gt;&gt;<br />&gt;&gt; Quite frankly, my gut feel is that once you do "xstat(dfd, filename,<br />&gt;&gt; ...)" then it's damn stupid to do a separate "fxstat()", when you<br />&gt;&gt; might as well say that "xtstat(dfd, NULL, ...)" is the same as<br />&gt;&gt; "fxstat(fd, ...)"<br />&gt;<br />&gt; This has been suggested and denounced as stupid already.  That said, I agree<br />&gt; with you.<br /><br />Hey, whoever denounced it as stupid obviously doesn't have the neurons<br />to go around to be involved in the discussion. Ignore them.<br /><br />                Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
