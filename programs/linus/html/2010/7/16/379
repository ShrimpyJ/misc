    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/16/376">First message in thread</a></li><li><a href="/lkml/2010/7/16/376">Jeffrey Merkey</a><ul><li class="origin"><a href="/lkml/2010/7/16/386">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/16/386">Jeffrey Merkey</a><ul><li><a href="/lkml/2010/7/16/388">Jeffrey Merkey</a></li></ul></li><li><a href="/lkml/2010/7/16/387">Jeffrey Merkey</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Jul 2010 15:22:13 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2/2] x86 NMI-safe INT3 and Page Fault</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 16, 2010 at 3:02 PM, Jeffrey Merkey &lt;jeffmerkey&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; So Linus, my understanding of Intel's processor design is that the<br />&gt; processor will NEVER singal a nested NMI until it sees an iret from<br />&gt; the first NMI exception.<br /><br />Wrong.<br /><br />I like x86, but it has warts. The NMI blocking is one of them.<br /><br />The NMI's will be nested until the _next_ "iret", but it has no<br />nesting. So if you take a fault during the NMI (debug, page table<br />fixup, whatever), the iret in the faulthandler will re-enable NMI's<br />even though we're still busy with the original NMI. There is no<br />nesting, or any way to say that "this is a NMI-releasing iret". They<br />could even do it still - make a new "iret that doesn't clear NMI" by<br />adding a segment override prefix to iret or whatever. But it's not<br />going to happen, and it's just one of those ugly special cases that<br />has various historical reasons (recursive faults during NMI sure as<br />hell didn't make sense back in the real-mode 8086 days).<br /><br />So we have to handle it in software. Or not ever trap at all inside<br />the NMI handler.<br /><br />The original patch - and the patch I detest - is to make the normal<br />fault paths use a "popf + ret" to emulate iret, but without the NMI<br />release.<br /><br />Now, I could live with that if it's the only solution, but it _is_<br />pretty damn ugly.<br /><br />If somebody shows that it's actually faster to do "popf + ret" when<br />retuning to kernel space (a poor mans special-case iret), maybe it<br />would be worth it, but the really critical code sequence is actually<br />not "return to kernel space", but the "return to user space" case that<br />really wants the iret. And I just think it's disgusting to add extra<br />tests to that path.<br /><br />The other alternative would be to just make the rule be "NMI can never<br />take traps". It's possible to do that, but quite frankly, it's a pain.<br />It's a pain for page faults due to the whole vmalloc thing, and it's a<br />pain if you ever want to debug an NMI in any way (or put a breakpoint<br />on anything that is accessed from an NMI, which could potentially be<br />quite a lot of things).<br /><br />If it was just the debug issue, I'd say "neener neener, debuggers are<br />for wimps", but it's clearly not just about debug. It's a whole lot of<br />other thigs. Random percpu datastructures used for tracing, kernel<br />pointer verification code, yadda yadda.<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
