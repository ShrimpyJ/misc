    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/14/204">First message in thread</a></li><li><a href="/lkml/2010/7/16/382">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/16/385">Andi Kleen</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Jul 2010 18:15:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 2/2] x86 NMI-safe INT3 and Page Fault</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 16, 2010 at 3:41 PM, Andi Kleen &lt;andi&#64;firstfloor.org&gt; wrote:<br />&gt;<br />&gt; Maybe I'm misunderstanding everything (and it has been a lot of emails<br />&gt; in the thread), but the case I was thinking of would be if the second NMI<br />&gt; faults too, and then another one comes in after the IRET etc.<br /><br />No, the nested NMI cannot fault, because it never even enters C code.<br />It literally just returns immediately after having noticed it is<br />nested (and corrupted the stack of the original one, so that the<br />original NMI will re-do itself at return)..<br /><br />So the nested NMI will use some few tens of bytes of stack. In fact,<br />it will use the stack "above" the stack that the original NMI handler<br />is using, because it will reset the stack pointer back to the top of<br />the NMI stack. So in a very real sense, it is not even extending the<br />stack, it is just re-using a small part of the same stack that the<br />original NMI used (and that we copied away so that it doesn't matter<br />that it gets re-used)<br /><br />As to another small but important detail: the _nested_ NMI actually<br />returns using "popf+ret", leaving NMI's blocked again. Thus<br />guaranteeing forward progress and lack of NMI storms.<br /><br />To summarize:<br /><br /> - the "original" (first-level) NMI can take faults (like the page<br />fault to fill in vmalloc pages lazily, or debug faults). That will<br />actually cause two stack frames (or three, if you debug a page fault<br />that happened while NMI was active). So there is certainly exception<br />nesting going on, but we're talking _much_ less stack than normal<br />stack usage where the nesting can be deep and in complex routines.<br /><br /> - any "nested" NMI's will not actually use any more stack at all than<br />a non-nested one, because we've pre-reserved space for them (and we<br />_had_ to reserve space for them due to IST)<br /><br /> - even if we get NMI's during the execution of the original NMI,<br />there can be only one such "spurious" NMI per nested exception. So if<br />we take a single page fault, that exception will re-enable NMI<br />(because it returns with "iret"), and as a result we may take a<br />_single_ new nested NMI until we disable NMI's again.<br /><br />In other words, the approach is not all that different from doing<br />"lazy irq disable" like powerpc does for regular interrupts. For<br />NMI's, we do it because it's impossible (on x86) to disable NMI's<br />without actually taking one.<br /><br />                         Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
