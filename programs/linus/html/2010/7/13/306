    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/1/295">First message in thread</a></li><li><a href="/lkml/2010/7/13/259">Peter Palfrader</a><ul><li><a href="/lkml/2010/7/13/292">Avi Kivity</a><ul><li><a href="/lkml/2010/7/13/298">Peter Palfrader</a><ul><li><a href="/lkml/2010/7/13/302">Avi Kivity</a><ul><li><a href="/lkml/2010/7/13/305">Avi Kivity</a></li><li><a href="/lkml/2010/7/13/311">Peter Palfrader</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2010/7/13/326">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/13/326">Avi Kivity</a><ul><li><a href="/lkml/2010/7/13/330">Linus Torvalds</a></li><li><a href="/lkml/2010/7/13/334">Peter Palfrader</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 13 Jul 2010 09:34:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 134/149] x86, paravirt: Add a global synchronization point  for pvclock</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 13, 2010 at 8:57 AM, Avi Kivity &lt;avi&#64;redhat.com&gt; wrote:<br />&gt; On 07/13/2010 05:19 PM, Peter Palfrader wrote:<br />&gt;&gt;<br />&gt;&gt;&gt; So it looks like last_value was placed in a read only section.  Please<br />&gt;&gt;&gt; post your System.map somewhere.<br />&gt;&gt;&gt;<br />&gt;&gt;<br />&gt;&gt; weasel&#64;intrepid:~$ publish System.map<br />&gt;&gt;<br />&gt;&gt; <a href="http://asteria.noreply.org/~weasel/volatile/2010-07-13-mbm2xEdd8Q4/System.map">http://asteria.noreply.org/~weasel/volatile/2010-07-13-mbm2xEdd8Q4/System.map</a><br />&gt;&gt; weasel&#64;intrepid:~$ grep -i last_value System.map<br />&gt;&gt; ffffffff81712e80 r last_value<br />&gt;&gt; ffffffff81b05240 b last_value.26163<br />&gt;&gt;<br />&gt;<br />&gt; "r" = "read only"<br />&gt;<br />&gt; How does it look in 'nm arch/x86/kernel/pvclock.o'?<br /><br />I bet it is the same. And I have a suspicion: because the only write<br />access to that variable is in an asm that uses the "memory" clobber to<br />say it wrote to it (rather than say it writes to it directly), and<br />because the variable is marked 'static', gcc decides that nothing ever<br />writes to it in that compilation unit, and it can be made read-only.<br /><br />Look at our definition for "xchg()" in<br />arch/x86/include/asm/cmpxchg_64.h. It boils down to<br /><br />                asm volatile("xchgq %0,%1"                              \<br />                             : "=r" (__x)                               \<br />                             : "m" (*__xg(ptr)), "0" (__x)              \<br />                             : "memory");                               \<br /><br />for the 8-byte case (which is obviously what atomic64_xchg() uses).<br />And the _reason_ we do that thing where we use a memory _input_ and<br />then a clobber is that older versions of gcc did not accept the thing<br />we _want_ to use, namely using "+m" to say that we actually change the<br />memory.  So the above is "wrong", but has historical reasons - and<br />it's apparently never been changed.<br /><br />However, the "+m" was fixed, and we use it elsewhere, so I think the<br />"m" plus memory clobber is now purely historical. Does a patch<br />something like the appended fix it? I also suspect we should look at<br />some other uses in this area. The atomic64_64.h file uses "=m" and<br />"m", which looks like another legacy thing (again, "+m" historically<br />wasn't allowed, and then later became the 'correct' way to do things).<br /><br />NOTE NOTE NOTE! This is UNTESTED and INCOMPLETE. We should do cmpxchg<br />too, and the 32-bit versions. I'm adding Ingo and Peter to the cc.<br /><br />                     Linus<br />[unhandled content-type:application/octet-stream]</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
