    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/14/204">First message in thread</a></li><li><a href="/lkml/2010/7/18/52">Avi Kivity</a><ul><li><a href="/lkml/2010/7/18/89">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/18/91">Avi Kivity</a><ul><li><a href="/lkml/2010/7/18/94">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/19/15">Avi Kivity</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2010/7/18/100">Linus Torvalds</a><ul><li><a href="/lkml/2010/7/18/100">Steven Rostedt</a><ul><li><a href="/lkml/2010/7/18/103">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 18 Jul 2010 11:17:32 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 1/2] x86_64 page fault NMI-safe</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Jul 18, 2010 at 10:36 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Lookie here, the %rsp comparison really isn't that hard:<br /><br />A few notes on that (still) untested code suggestion:<br /><br />&gt;  nmi:<br />&gt;      pushq %rax<br />&gt;      pushq %rdx<br />&gt;      movq %rsp,%rdx          # current stack top<br />&gt;      movq 40(%rsp),%rax   # old stack top<br />&gt;      xor %rax,%rdx              # same 8kB aligned area?<br />&gt;      shrq $13,%rdx             # ignore low 13 bits<br />&gt;      je it_is_a_nested_nmi   # looks nested..<br />&gt;  non_nested:<br />&gt;      ...<br />&gt;      ... ok, we're not nested, do normal NMI handling ...<br />&gt;      ...<br /><br />The non_nested case still needs to start off with moving it's stack<br />frame to a safe area that won't be overwritten by any nesting NMI's<br />(note that they cannot nest at this point, since we've done nothing<br />that can fault). So we'd still need that<br /><br />    7* pushq 48(%rsp)<br /><br />which copies the five words that got pushed by hardware, and the two<br />register-save locations that we used for the nesting check and special<br />return.<br /><br />After we've done those 7 pushes, we can then run code that may take a<br />fault. Because when the fault returns with an "iret" and re-enables<br />NMI's, our nesting code is ready.<br /><br />So all told, we need a maximum of about 216 bytes of stack for the<br />nested NMI case: 56 bytes for the seven copied words, and the 160<br />bytes that we build up _under_ the stack pointer for the nested case.<br />And we need the NMI stack itself to be aligned in order for that<br />"ignore low bits" check to work. Although we don't actually have to do<br />that "xor+shr", we could do the test equally well with a "sub+unsigned<br />compare against stack size".<br /><br />Other than that, I think the extra test that we're really nested might<br />better be done differently:<br /><br />&gt;  it_is_a_nested_nmi:<br />&gt;      cmpw $0,48(%rsp)     # double-check that it really was a nested exception<br />&gt;      jne non_nested           # from user space or something..<br />&gt;      # this is the nested case<br /><br />It migth be safer to check the saved CS rather than the saved SS on<br />the stack to see that we really are in kernel mode. It's possible that<br />somebody could load a NULL SS in user mode and then just not use the<br />stack - and try to make it look like they are in kernel mode for when<br />the NMI happens. Now, I _think_ that loading a zero SS is supposed to<br />trap, but checking CS is still likely to be the better test for "were<br />we in kernel mode". That's where the CPL is really encoded, after all.<br /><br />So that "cmpw $0,48(%rsp)" is probably ok, but it would likely be<br />better to do it as<br /><br />   testl $3,24(%rsp)<br />   jne non_nested<br /><br />instead. That's what entry_64.S does everywhere else.<br /><br />Oh, and the non-nested case obviously needs all the regular "make the<br />kernel state look right" code. Like the swapgs stuff etc if required.<br />My example code was really meant to just document the nesting<br />handling, not the existing stuff we already need to do with<br />save_paranoid etc.<br /><br />And I really think it should work, but I'd again like to stress that<br />it's just a RFD code sequence with no testing what-so-ever etc.<br /><br />                      Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
