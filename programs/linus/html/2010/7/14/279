    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/7/1/295">First message in thread</a></li><li><a href="/lkml/2010/7/14/263">"H. Peter Anvin"</a><ul><li><a href="/lkml/2010/7/14/268">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2010/7/14/271">"H. Peter Anvin"</a><ul><li><a href="/lkml/2010/7/14/399">Jeremy Fitzhardinge</a></li></ul></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2010/7/14/272">"H.J. Lu"</a><ul><li><a href="/lkml/2010/7/14/298">"H. Peter Anvin"</a><ul><li><a href="/lkml/2010/7/14/316">"H.J. Lu"</a><ul><li><a href="/lkml/2010/7/14/320">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Jul 2010 11:23:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 134/149] x86, paravirt: Add a global synchronization point  for pvclock</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 14, 2010 at 11:15 AM, Jeremy Fitzhardinge &lt;jeremy&#64;goop.org&gt; wrote:<br />&gt;<br />&gt; I think we should consider that deprecated and rely on dependencies and<br />&gt; clobbers.<br /><br />That makes no sense. According to that logic, "asm volatile" has no<br />semantic meaning at ALL. That's just crazy talk.<br /><br />The sane compiler semantics for "asm volatile" is that it acts as a<br />volatile memory access. That's what the naming implies, and it has<br />valid semantics that also happen to match the historical semantics. It<br />means that it cannot be removed or duplicated, and it cannot be<br />re-ordered wrt other volatile accesses (whether "asm volatile" or a<br />traditional C volatile memory access).<br /><br />I agree that we could just add memory clobbers to them all, but my<br />objection to that is that it just makes the whole keyword totally<br />pointless.<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
