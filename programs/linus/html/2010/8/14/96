    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/8/14/54">First message in thread</a></li><li><a href="/lkml/2010/8/14/54">Sedat Dilek</a><ul><li class="origin"><a href="/lkml/2010/8/14/97">Linus Torvalds</a><ul><li><a href="/lkml/2010/8/14/97">Sedat Dilek</a><ul><li><a href="/lkml/2010/8/14/98">Linus Torvalds</a><ul><li><a href="/lkml/2010/8/14/105">Ed Tomlinson</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/8/14/96/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Aug 2010 10:14:24 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.35.2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 14, 2010 at 5:37 AM, Sedat Dilek &lt;sedat.dilek&#64;googlemail.com&gt; wrote:<br />&gt;<br />&gt; root&#64;tbox:~# grep "Aug 14 13:00:5" /var/log/syslog<br />&gt; Aug 14 13:00:53 tbox kernel: [ 1084.804086] BUG: scheduling while atomic: bash/3256/0x10000001<br /><br />Gaah. Locking problem. We really should have let this one simmer in<br />-devel a bit longer before rushing it into -stable.<br /><br />Attached potential patch. Untested, but I forgot about the locking in<br />the first version of the patch, and then the "trivial one-liner fix"<br />missed the deeper problem.<br /><br />Greg - please don't use this patch yet. I'll test it. And wait for<br />verification that it fixes other peoblems too.<br /><br />                    Linus<br /> mm/memory.c |   13 ++++++-------<br /> 1 files changed, 6 insertions(+), 7 deletions(-)<br /><br />diff --git a/mm/memory.c b/mm/memory.c<br />index 9b3b73f..b6e5fd2 100644<br />--- a/mm/memory.c<br />+++ b/mm/memory.c<br />&#64;&#64; -2792,24 +2792,23 &#64;&#64; static int do_anonymous_page(struct mm_struct *mm, struct vm_area_struct *vma,<br /> 	spinlock_t *ptl;<br /> 	pte_t entry;<br /> <br />-	if (check_stack_guard_page(vma, address) &lt; 0) {<br />-		pte_unmap(page_table);<br />+	pte_unmap(page_table);<br />+<br />+	/* Check if we need to add a guard page to the stack */<br />+	if (check_stack_guard_page(vma, address) &lt; 0)<br /> 		return VM_FAULT_SIGBUS;<br />-	}<br /> <br />+	/* Use the zero-page for reads */<br /> 	if (!(flags &amp; FAULT_FLAG_WRITE)) {<br /> 		entry = pte_mkspecial(pfn_pte(my_zero_pfn(address),<br /> 						vma-&gt;vm_page_prot));<br />-		ptl = pte_lockptr(mm, pmd);<br />-		spin_lock(ptl);<br />+		page_table = pte_offset_map_lock(mm, pmd, address, &amp;ptl);<br /> 		if (!pte_none(*page_table))<br /> 			goto unlock;<br /> 		goto setpte;<br /> 	}<br /> <br /> 	/* Allocate our own private page. */<br />-	pte_unmap(page_table);<br />-<br /> 	if (unlikely(anon_vma_prepare(vma)))<br /> 		goto oom;<br /> 	page = alloc_zeroed_user_highpage_movable(vma, address);</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
