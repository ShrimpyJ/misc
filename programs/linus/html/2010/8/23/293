    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/8/20/443">First message in thread</a></li><li><a href="/lkml/2010/8/23/263">Peter Zijlstra</a><ul><li><a href="/lkml/2010/8/23/287">Ian Jackson</a><ul><li class="origin"><a href="/lkml/2010/8/23/302">Linus Torvalds</a><ul><li><a href="/lkml/2010/8/23/302">Peter Zijlstra</a></li><li><a href="/lkml/2010/8/23/306">Peter Zijlstra</a><ul><li><a href="/lkml/2010/8/23/314">Darren Hart</a></li></ul></li><li><a href="/lkml/2010/8/23/317">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2010/8/23/325">Peter Zijlstra</a></li></ul></li><li><a href="/lkml/2010/8/23/324">Ian Campbell</a></li></ul></li><li><a href="/lkml/2010/8/23/294">Peter Zijlstra</a></li><li><a href="/lkml/2010/8/23/318">Jeremy Fitzhardinge</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Aug 2010 10:34:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] mlock/stack guard interaction fixup</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 23, 2010 at 10:18 AM, Ian Jackson<br />&lt;ijackson&#64;chiark.greenend.org.uk&gt; wrote:<br />&gt;<br />&gt; But you seem, like me, to be disagreeing with Linus's assertion that<br />&gt; calling mlock() on the stack is something no sane programs does ?<br /><br />Note: I don't think it's generally sane to mlock() a _part_ of the stack.<br /><br />I think it's entirely sane to lock the whole stack (and that includes<br />expanding it to some expected maximum value). That makes sense as a<br />"we cannot afford to run out of memory" or "we must not allow the<br />pages to hit disk" kind of protection.<br /><br />However, using mlock on part of the stack is dubious. It's also<br />dubious as a way to pin particular pages in the page tables, because<br />it's not necessarily something that the semantics guarantee<br />(historically mlock just guarantees that they won't be swapped out,<br />not that they will necessarily maintain some particular mapping).<br /><br />There's also a difference between "resident in RAM" and "that physical<br />page is guaranteed to be mapped at that virtual address".<br /><br />Quite frankly, I personally believe that people who play games with<br />mlock are misguided. The _one_ special case is for protecting keys or<br />private data that you do not want to hit the disk in some unencrypted<br />mode, and quite frankly, you should strive to handle those way more<br />specially than just putting them in some random place ("on the stack"<br />or "in some malloc()'ed area"). The sane model for doing that is<br />generally to explicitly mmap() and mlock the area, so that you get a<br />very controlled access pattern, and never have to worry about things<br />like COW etc.<br /><br />Because trust me, COW and mlock() is _interesting_. As in "I suspect<br />lots of systems have bugs", and "the semantics don't really guarantee<br />that you won't have to wait for somethign to be paged out in order for<br />the allocation for the COW to be satisfied".<br /><br />I suspect that if you use mlock for _any_ other reason than protecting<br />a particular very sensitive piece of information, you should use<br />mlockall(MCL_FUTURE). IOW, if you use mlock because you have realtime<br />issues, there is no excuse to ever use anything else, imho. And even<br />then, I guarantee that things like copy-on-write is going to be<br />"interesting".<br /><br />I realize that people hate mlockall() (and particularly MCL_FUTURE),<br />and yes, it's a bloated thing that you can't reasonably use on a large<br />process. But dammit, if you have RT issues, you shouldn't _have_ some<br />big bloated process. You should have a small statically linked server<br />that is RT, and nothing else.<br /><br />People who use mlock any other way tend to be the people who can't be<br />bothered to do it right, so they do some hacky half-way crap.<br /><br />                      Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
