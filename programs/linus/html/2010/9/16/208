    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/8/27/429">First message in thread</a></li><li><a href="/lkml/2010/9/13/559">KOSAKI Motohiro</a><ul><li><a href="/lkml/2010/9/16/19">KOSAKI Motohiro</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 16 Sep 2010 08:01:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] execve: check the VM has enough memory at first</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">2010/9/15 KOSAKI Motohiro &lt;kosaki.motohiro&#64;jp.fujitsu.com&gt;:<br />&gt;<br />&gt; Briefly says, to introduce new limit has bad benefit/risk balance. Sadly.<br /><br />Well, I mostly agree. That said, I do think we could extend the<br />limiter some ways.<br /><br />For example, I think the "stack limit / 4" is perfectly sane, but it<br />would make total sense to perhaps also take into account the AS and<br />RSS limits.<br /><br />And I do think that your attempt to use __vm_enough_memory() was good.<br />It happens to be coded in a way that makes it useless for a one-pass<br />model, and some of what it does would be too expensive to do up-front<br />when you can't short-circuit it, but I do think that it would probably<br />be appropriate to at least try to take the _rough_ code there and use<br />it as a limit for maximum stack size too.<br /><br />For example, we could have a function somewhat like<br /><br />    unsigned long max_stack_size(void)<br />   {<br />        unsigned long allowed, used, limit;<br /><br />        switch (sysctl_overcommit_memory) {<br />        case OVERCOMMIT_ALWAYS:<br />                allowed = ULONG_MAX;<br />                break;<br />        case OVERCOMMIT_GUESS:<br />                .. maybe we can come up with some upper bound here too ..<br />                break;<br />        default:<br />                allowed = (totalram_pages - hugetlb_total_pages())<br />                        * sysctl_overcommit_ratio / 100;<br />                if (!cap_sys_admin)<br />                        allowed -= allowed / 32;<br />                allowed += total_swap_pages;<br />                /* Don't let a single process grow too big:<br />                   leave 3% of the size of this process for other processes */<br />                if (mm)<br />                        allowed -= mm-&gt;total_vm / 32;<br />                /* What is already committed to? */<br />                used = percpu_counter_read_positive(&amp;vm_committed_as);<br />                if (used &gt; allowed)<br />                        return 0;<br />                allowed -= used;<br />                break;<br />        }<br />        limit = ACCESS_ONCE(rlim[RLIMIT_STACK].rlim_cur) / 4;<br />        if (allowed &gt; limit)<br />                allowed = limit;<br />        return allowed;<br />    }<br /><br />which we'd call once at the beginning of the execve(), and then<br />remember that result and use it instead of the current 'rlimit/4'<br />value.<br /><br />Now, admittedly the OVERCOMMIT_GUESS case is the interesting one, and<br />the one that is hard to write efficiently. But maybe we could make<br />'nr_free_pages()' cheap enough that doin that whole OVERCOMMIT_GUESS<br />"approximate free pages" thing from __vm_enough_memory would work out<br />too?<br /><br />I dunno. It doesn't look hopeless.<br /><br />                      Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
