    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/10/14/309">First message in thread</a></li><li><a href="/lkml/2010/10/14/309">Tony Luck</a><ul><li><a href="/lkml/2010/10/14/314">Tony Luck</a></li><li class="origin"><a href="/lkml/2010/10/14/337">Linus Torvalds</a><ul><li><a href="/lkml/2010/10/14/337">Tony Luck</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/10/14/323/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 14 Oct 2010 14:09:30 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: commit 0eead9ab breaks ia64 build</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 14, 2010 at 1:58 PM, Tony Luck &lt;tony.luck&#64;gmail.com&gt; wrote:<br />&gt; Just pulled Linus latest and get these errors on ia64 build:<br />&gt;<br />&gt; In file included from arch/ia64/kernel/elfcore.c:2:<br />&gt; include/linux/coredump.h: In function ‘dump_write’:<br />&gt; include/linux/coredump.h:14: error: implicit declaration of function ‘access_ok’<br />&gt; include/linux/coredump.h:14: error: ‘VERIFY_READ’ undeclared (first<br />&gt; use in this function)<br />&gt;<br />&gt; I guess I have to start juggling some #includes ... anyone else have problems?<br /><br />Hmm. I thought that &lt;linux/mm.h&gt; would get it, but apparently not -<br />we'd need &lt;asm/uaccess.h&gt;.<br /><br />I also (as I commented in the commit) suspect that we shouldn't do the<br />raw '-&gt;write()' call AT ALL, and that was always wrong. So another way<br />of fixing the problem with the missing access_ok() is to just use<br />vfs_write(), which does everything right. The reason I didn't do it is<br />that I suspect we shouldn't count core-dumping as a "write", so the<br />statistics done by vfs_write() are probably wrong.<br /><br />Anyway, the real problem is that those functions really shouldn't be<br />inline functions to begin with. They're doing function calls, they<br />aren't critical, and dump_seek() in particular is too large by far. So<br />I suspect the proper fix is to just uninline them and put them in<br />fs/exec.c as real functions.<br /><br />IOW, like the attached. Does that work for you?<br /><br />                        Linus<br /> fs/exec.c                |   38 ++++++++++++++++++++++++++++++++++++++<br /> include/linux/coredump.h |   34 ++--------------------------------<br /> 2 files changed, 40 insertions(+), 32 deletions(-)<br /><br />diff --git a/fs/exec.c b/fs/exec.c<br />index 828dd24..03278c9 100644<br />--- a/fs/exec.c<br />+++ b/fs/exec.c<br />&#64;&#64; -2014,3 +2014,41 &#64;&#64; fail_creds:<br /> fail:<br /> 	return;<br /> }<br />+<br />+/*<br />+ * Core dumping helper functions.  These are the only things you should<br />+ * do on a core-file: use only these functions to write out all the<br />+ * necessary info.<br />+ */<br />+int dump_write(struct file *file, const void *addr, int nr)<br />+{<br />+	return access_ok(VERIFY_READ, addr, nr) &amp;&amp; file-&gt;f_op-&gt;write(file, addr, nr, &amp;file-&gt;f_pos) == nr;<br />+}<br />+<br />+int dump_seek(struct file *file, loff_t off)<br />+{<br />+	int ret = 1;<br />+<br />+	if (file-&gt;f_op-&gt;llseek &amp;&amp; file-&gt;f_op-&gt;llseek != no_llseek) {<br />+		if (file-&gt;f_op-&gt;llseek(file, off, SEEK_CUR) &lt; 0)<br />+			return 0;<br />+	} else {<br />+		char *buf = (char *)get_zeroed_page(GFP_KERNEL);<br />+<br />+		if (!buf)<br />+			return 0;<br />+		while (off &gt; 0) {<br />+			unsigned long n = off;<br />+<br />+			if (n &gt; PAGE_SIZE)<br />+				n = PAGE_SIZE;<br />+			if (!dump_write(file, buf, n)) {<br />+				ret = 0;<br />+				break;<br />+			}<br />+			off -= n;<br />+		}<br />+		free_page((unsigned long)buf);<br />+	}<br />+	return ret;<br />+}<br />diff --git a/include/linux/coredump.h b/include/linux/coredump.h<br />index 59579cf..ba4b85a 100644<br />--- a/include/linux/coredump.h<br />+++ b/include/linux/coredump.h<br />&#64;&#64; -9,37 +9,7 &#64;&#64;<br />  * These are the only things you should do on a core-file: use only these<br />  * functions to write out all the necessary info.<br />  */<br />-static inline int dump_write(struct file *file, const void *addr, int nr)<br />-{<br />-	return access_ok(VERIFY_READ, addr, nr) &amp;&amp; file-&gt;f_op-&gt;write(file, addr, nr, &amp;file-&gt;f_pos) == nr;<br />-}<br />-<br />-static inline int dump_seek(struct file *file, loff_t off)<br />-{<br />-	int ret = 1;<br />-<br />-	if (file-&gt;f_op-&gt;llseek &amp;&amp; file-&gt;f_op-&gt;llseek != no_llseek) {<br />-		if (file-&gt;f_op-&gt;llseek(file, off, SEEK_CUR) &lt; 0)<br />-			return 0;<br />-	} else {<br />-		char *buf = (char *)get_zeroed_page(GFP_KERNEL);<br />-<br />-		if (!buf)<br />-			return 0;<br />-		while (off &gt; 0) {<br />-			unsigned long n = off;<br />-<br />-			if (n &gt; PAGE_SIZE)<br />-				n = PAGE_SIZE;<br />-			if (!dump_write(file, buf, n)) {<br />-				ret = 0;<br />-				break;<br />-			}<br />-			off -= n;<br />-		}<br />-		free_page((unsigned long)buf);<br />-	}<br />-	return ret;<br />-}<br />+extern int dump_write(struct file *file, const void *addr, int nr);<br />+extern int dump_seek(struct file *file, loff_t off);<br /> <br /> #endif /* _LINUX_COREDUMP_H */</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
