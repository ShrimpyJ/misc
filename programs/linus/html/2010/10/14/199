    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/10/13/276">First message in thread</a></li><li><a href="/lkml/2010/10/14/15">Borislav Petkov</a><ul><li><a href="/lkml/2010/10/14/150">Borislav Petkov</a><ul><li><a href="/lkml/2010/10/14/152">Matthew Wilcox</a><ul><li><a href="/lkml/2010/10/14/162">Borislav Petkov</a><ul><li><a href="/lkml/2010/10/14/187">Matthew Wilcox</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2010/10/14/210">Linus Torvalds</a><ul><li><a href="/lkml/2010/10/14/210">Borislav Petkov</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 14 Oct 2010 08:03:17 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] bitops.h: Widen BIT macro to support 64-bit types</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 14, 2010 at 3:58 AM, Borislav Petkov &lt;bp&#64;amd64.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; Ok, so BIT() should be fixed to work with the largest type available,<br />&gt;&gt; IMHO. Let me cook up something.<br />&gt;<br />&gt; Maybe something like the following. Build-tested with the crosstool<br />&gt; (<a href="https://www.kernel.org/pub/tools/crosstool">http://www.kernel.org/pub/tools/crosstool</a>) on the following arches:<br />&gt; alpha blackfin cris hppa64 ia64 mips64 sparc.<br />&gt;<br />&gt; Any objections?<br /><br />Yeah. I object. I have no idea what this will change for everything<br />else that expects bitops to work on unsigned long values.<br /><br />I really think that the bug is not in the BIT() definition, but in the<br />use. If somebody wants a non-unsigned-long bit field, they had better<br />not use bitops.h.<br /><br />And no, just changing the BIT() macro to return a 64-bit value is<br />_not_ trivially safe. Due to C type rules, now all arithmetic using<br />BIT() will suddenly be 64-bit, which is often *much* slower, and can<br />introduce real bugs.<br /><br />On many architectures, a 64-bit non-constant shift will even end up<br />being a function call. And if the thing is used in a varargs function,<br />the argument layout will be totally different. We've also had several<br />issues with 64-bit types and switch() statements, for example. And a<br />quick grep for '\&lt;BIT(' shows that non-constant cases are not unheard<br />of, and there's a lot of random use where it is not at all obvious<br />that it's safe (because it's used for defining other defines).<br /><br />So no. I do not think BIT() should be 64-bit. It's "unsigned long".<br />Look at all the other things around it, and look at all the historical<br />uses.<br /><br />                                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
