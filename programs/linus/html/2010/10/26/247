    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/10/19/123">First message in thread</a></li><li><a href="/lkml/2010/10/26/21">Mike Galbraith</a><ul><li><a href="/lkml/2010/10/26/28">Mike Galbraith</a><ul><li class="origin"><a href="/lkml/2010/10/26/526">Linus Torvalds</a><ul><li><a href="/lkml/2010/10/26/526">Mike Galbraith</a></li><li><a href="/lkml/2010/11/11/230">Mike Galbraith</a><ul><li><a href="/lkml/2010/11/11/305">Ingo Molnar</a></li><li><a href="/lkml/2010/11/11/320">Linus Torvalds</a></li><li><a href="/lkml/2010/11/11/338">Markus Trippelsdorf</a></li><li><a href="/lkml/2010/11/11/387">Oleg Nesterov</a></li><li><a href="/lkml/2010/11/15/477">	Valdis.Kletnieks&#64;vt ...</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 26 Oct 2010 08:47:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC/RFT PATCH v3] sched: automated per tty task groups</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Oct 26, 2010 at 12:29 AM, Mike Galbraith &lt;mgalbraith&#64;suse.de&gt; wrote:<br />&gt; On Tue, 2010-10-26 at 09:07 +0200, Mike Galbraith wrote:<br />&gt;&gt; On Thu, 2010-10-21 at 18:29 +0200, Oleg Nesterov wrote:<br />&gt;&gt;<br />&gt;&gt; &gt; It is not clear to me why do we need rcu_read_lock() and how it can help.<br />&gt;&gt; &gt; The tty can go away right after dereferencing signal-&gt;tty.<br />&gt;&gt;<br />&gt;&gt; Which was Marcus' crash.  Didn't happen here only because I didn't have<br />&gt;&gt; CONFIG_PREEMPT set.<br />&gt;&gt;<br />&gt;&gt; Changes since v2:<br />&gt;&gt;   - drop<br />&gt;<br />&gt; Bumped mouse, message escaped.<br />&gt;<br />&gt; Doesn't matter though, damn thing just blew up during enable/disable<br />&gt; plus hackbench stress test, despite holding a reference to the tty at<br />&gt; every place tty changes (under sighand lock), and moving the task with<br />&gt; that reference held.<br /><br />So I have a suggestion that may not be popular with you, because it<br />does end up changing the approach of your patch a lot.<br /><br />And I have to say, I like how your last patch looked. It was<br />surprisingly small, simple, and clean. So I hate saying "I think it<br />should perhaps do things a bit differently". That said, I would<br />suggest:<br /><br /> - don't depend on "tsk-&gt;signal-&gt;tty" at all.<br /><br /> - INSTEAD, introduce a "tsk-&gt;signal-&gt;sched_group" pointer that points<br />to whatever the current auto-task_group is. Remember, long-term, we'd<br />want to maybe have other heuristics than just the tty groups, so we'd<br />want this separate from the tty logic _anyway_<br /><br /> - at fork time, just copy the task_group pointer in copy_signal() if<br />it is non-NULL, and increment the refcount (I don't think struct<br />task_group is refcounted now, but this would require it).<br /><br /> - at free_signal_struct(), just do a<br />"put_task_group(sig-&gt;task_group);" before freeing it.<br /><br /> - make the scheduler use the "tsk-&gt;signal-&gt;sched_group" as the<br />default group if nothing else exists.<br /><br />Now, all the basic logic is _entirely_ unaware of any tty logic, and<br />it's generic. And none of it has any races with some odd tty release<br />logic or anything like that.<br /><br />Now, after this, the only thing you'd need to do is hook into<br />__proc_set_tty(), which already holds the sighand lock, and _there_<br />you would attach the task_group to the process. Notice how it would<br />never be attached to a tty at all, so tty_release etc would never be<br />involved in any taskgroup thing - it's not really the tty that owns<br />the taskgroup, it's simply the act of becoming a tty task group leader<br />that attaches the task to a new scheduling group.<br /><br />It also means, for example, that if a process loses its tty (and<br />doesn't get a new one - think hangup), it still remains in whatever<br />scheduling group it started out with. The tty really is immaterial.<br /><br />And the nice thing about this is that it should be trivial to make<br />other things than tty's trigger this same thing, if we find a pattern<br />(or create some new interface to let people ask for it) for something<br />that should create a new group (like perhaps spawning a graphical<br />application from the window manager rather than from a tty).<br /><br />Comments?<br /><br />                                           Linus<br />--<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
