    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2010/10/28/12">First message in thread</a></li><li><a href="/lkml/2010/10/28/219">Ingo Molnar</a><ul><li><a href="/lkml/2010/10/28/224">Ted Ts'o</a><ul><li class="origin"><a href="/lkml/2010/10/28/287">Linus Torvalds</a><ul><li><a href="/lkml/2010/10/28/287">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2010/10/28/264/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 28 Oct 2010 11:28:04 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Minimum git commit abbrev length (Was Re: -tip: origin tree build failure (was: [GIT PULL] ext4 update) for 2.6.37)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 28, 2010 at 10:27 AM, Ted Ts'o &lt;tytso&#64;mit.edu&gt; wrote:<br />&gt; On Thu, Oct 28, 2010 at 07:17:01PM +0200, Ingo Molnar wrote:<br />&gt;&gt; &gt; Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;&gt; &gt; Yes. Except for the kernel the default git commit abbreviation is<br />&gt;&gt; &gt; borderline too short. Seven hex-chars can easily alias with a few<br />&gt;&gt; &gt; more pulls from me: git will not give aliases at the time it gives<br />&gt;&gt; &gt; a shorthand, but a month or two later the abbreviated commit may<br />&gt;&gt; &gt; no longer be unique.<br />&gt;&gt; &gt;<br />&gt;&gt; &gt; So I suggest using --abbrev=12 or similar.<br />&gt;&gt;<br />&gt;&gt; ok. A helper script i use does this:<br />&gt;&gt;<br />&gt;&gt;    git log --pretty=format:"%h: %s" $&#64;<br />&gt;&gt;<br />&gt;&gt; I have added --abbrev=12. Might make sense to lengthen the %h<br />&gt;&gt; default in upstream Git as well?<br />&gt;<br />&gt; Maybe the right thing to do is add a git config option which allows<br />&gt; for a configurable minimum git commit abbreviation length?<br /><br />Yes. The default of 7 (I think) comes from fairly early in git<br />development, when seven hex digits was a lot (it covers about 250+<br />million hash values). Back then I thought that 65k revisions was a lot<br />(it was what we were about to hit in BK), and each revision tends to<br />be about 5-10 new objects or so, so a million objects was a big<br />number.<br /><br />These days, the kernel isn't even the largest git project, and even<br />the kernel has about 220k revisions (_much_ bigger than the BK tree<br />ever was) and we are approaching two million objects. At that point,<br />seven hex digits is still unique for a lot of them, but when we're<br />talking about just two orders of magnitude difference between number<br />of objects and the hash size, there _will_ be hash collisions. It's no<br />longer even close to unrealistic - it happens all the time.<br /><br />So I suspect we should both increase the default abbrev that was<br />unrealistically small, _and_ add a way for people to set their own<br />default per-project in the git config file.<br /><br />Maybe something like the attached (not necessarily well-thought-out or<br />well-tested: I also didn't actually change the default, although I<br />suspect we should up it from 7 to at least 10).<br /><br />                        Linus<br /> builtin/describe.c |    2 +-<br /> cache.h            |    5 +++--<br /> config.c           |    8 ++++++++<br /> environment.c      |    1 +<br /> 4 files changed, 13 insertions(+), 3 deletions(-)<br /><br />diff --git a/builtin/describe.c b/builtin/describe.c<br />index 43caff2..2d98702 100644<br />--- a/builtin/describe.c<br />+++ b/builtin/describe.c<br />&#64;&#64; -20,7 +20,7 &#64;&#64; static int debug;	/* Display lots of verbose info */<br /> static int all;	/* Any valid ref can be used */<br /> static int tags;	/* Allow lightweight tags */<br /> static int longformat;<br />-static int abbrev = DEFAULT_ABBREV;<br />+static int abbrev = 7;	/* NOTE! Not DEFAULT_ABBREV */<br /> static int max_candidates = 10;<br /> static int found_names;<br /> static const char *pattern;<br />diff --git a/cache.h b/cache.h<br />index 33decd9..6c28a81 100644<br />--- a/cache.h<br />+++ b/cache.h<br />&#64;&#64; -540,6 +540,7 &#64;&#64; extern int trust_executable_bit;<br /> extern int trust_ctime;<br /> extern int quote_path_fully;<br /> extern int has_symlinks;<br />+extern int minimum_abbrev, default_abbrev;<br /> extern int ignore_case;<br /> extern int assume_unchanged;<br /> extern int prefer_symlink_refs;<br />&#64;&#64; -757,8 +758,8 &#64;&#64; static inline unsigned int hexval(unsigned char c)<br /> }<br /> <br /> /* Convert to/from hex/sha1 representation */<br />-#define MINIMUM_ABBREV 4<br />-#define DEFAULT_ABBREV 7<br />+#define MINIMUM_ABBREV minimum_abbrev<br />+#define DEFAULT_ABBREV default_abbrev<br /> <br /> struct object_context {<br /> 	unsigned char tree[20];<br />diff --git a/config.c b/config.c<br />index 4b0a820..474361c 100644<br />--- a/config.c<br />+++ b/config.c<br />&#64;&#64; -514,6 +514,14 &#64;&#64; static int git_default_core_config(const char *var, const char *value)<br /> 		return 0;<br /> 	}<br /> <br />+	if (!strcmp(var, "core.abbrev")) {<br />+		int abbrev = git_config_int(var, value);<br />+		if (abbrev &lt; minimum_abbrev || abbrev &gt; 40)<br />+			return -1;<br />+		default_abbrev = abbrev;<br />+		return 0;<br />+	}<br />+<br /> 	if (!strcmp(var, "core.loosecompression")) {<br /> 		int level = git_config_int(var, value);<br /> 		if (level == -1)<br />diff --git a/environment.c b/environment.c<br />index de5581f..b98003c 100644<br />--- a/environment.c<br />+++ b/environment.c<br />&#64;&#64; -15,6 +15,7 &#64;&#64; int user_ident_explicitly_given;<br /> int trust_executable_bit = 1;<br /> int trust_ctime = 1;<br /> int has_symlinks = 1;<br />+int minimum_abbrev = 4, default_abbrev = 7;<br /> int ignore_case;<br /> int assume_unchanged;<br /> int prefer_symlink_refs;</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
