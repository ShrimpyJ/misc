    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/27/1670">First message in thread</a></li><li><a href="/lkml/2020/7/27/1670">(Eric W. Biederman)</a><ul><li class="origin"><a href="/lkml/2020/7/28/607">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/28/607">(Eric W. Biederman)</a><ul><li><a href="/lkml/2020/7/28/660">(Eric W. Biederman)</a><ul><li><a href="/lkml/2020/7/28/1046">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/7/28/350">Aleksa Sarai</a><ul><li><a href="/lkml/2020/7/28/539">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 27 Jul 2020 17:20:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][PATCH] exec: Freeze the other threads during a multi-threaded exec</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 27, 2020 at 2:06 PM Eric W. Biederman &lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt;<br />&gt; Therefore make it simpler to get exec correct by freezing the other<br />&gt; threads at the beginning of exec.  This removes an entire class of<br />&gt; races, and makes it tractable to fix some of the long standing<br />&gt; issues with exec.<br /><br />I hate the global state part of the freezer.<br /><br />It's also pointless. We don't want to trigger all the tests that<br />various random driver kernel threads do.<br /><br />I also really don't like how now execve() by any random person will<br />suddenly impact everything that might be doing freezing.<br /><br />It also makes for a possible _huge_ latency regression for execve(),<br />since freezing really has never been a very low-latency operation.<br /><br />Other threads doing IO can now basically block execve() for a long<br />long long time.<br /><br />Finally, I think your patch is fundamentally broken for another<br />reason: it depends on CONFIG_FREEZER, and that isn't even required to<br />be set!<br /><br />So no, this is not at all acceptable in that form.<br /><br />Now, maybe we could _make_ it acceptable, by<br /><br /> (a) add a per-process freezer count to avoid the global state for this case<br /><br /> (b)  make a small subset of the freezing code available for the<br />!CONFIG_FREEZER thing<br /><br /> (c) fix this "simple freezer" to not actually force wakeups etc, but<br />catch things in the<br /><br />but honestly, at that point nothing of the "CONFIG_FREEZER" code even<br />really exists any more. It would be more of a "execve_synchronize()"<br />thing, where we'd catch things in the scheduler and/or system call<br />entry/exit or whatever.<br /><br />Also, that makes these kinds of nasty hacks that just make the<br />existign freezer code even harder to figure out:<br /><br />&gt; A new function exec_freeze_threads based upon<br />&gt; kernel/power/process.c:try_to_freeze_tasks is added.  To play well<br />&gt; with other uses of the kernel freezer it uses a killable sleep wrapped<br />&gt; with freezer_do_not_count/freezer_count.<br /><br />Ugh. Just _ugly_.<br /><br />And honestly, completely and utterly broken. See above.<br /><br />I understand the wish to re-use existing infrastructure. But the fact<br />is, the FREEZER code is just about the _last_ thing you should want to<br />use. That, and stop_machine(), is just too much of a big hammer.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
