    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/21/76">First message in thread</a></li><li><a href="/lkml/2020/7/22/935">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/22/1085">Hugh Dickins</a><ul><li class="origin"><a href="/lkml/2020/7/22/1199">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/22/1199">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/22/1222">Linus Torvalds</a></li><li><a href="/lkml/2020/7/23/527">Oleg Nesterov</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/7/23/176">Michal Hocko</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 22 Jul 2020 15:10:44 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] mm: silence soft lockups from unlock_page</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Jul 22, 2020 at 2:29 PM Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt; -#define PAGE_WAIT_TABLE_BITS 8<br />&gt; +#define PAGE_WAIT_TABLE_BITS 10<br /><br />Well, that seems harmless even on small machines.<br /><br />&gt; +       bool first_time = true;<br />&gt;         bool thrashing = false;<br />&gt;         bool delayacct = false;<br />&gt;         unsigned long pflags;<br />&gt; &#64;&#64; -1134,7 +1135,12 &#64;&#64; static inline int wait_on_page_bit_commo<br />&gt;                 spin_lock_irq(&amp;q-&gt;lock);<br />&gt;<br />&gt;                 if (likely(list_empty(&amp;wait-&gt;entry))) {<br />&gt; -                       __add_wait_queue_entry_tail(q, wait);<br />&gt; +                       if (first_time) {<br />&gt; +                               __add_wait_queue_entry_tail(q, wait);<br />&gt; +                               first_time = false;<br />&gt; +                       } else {<br />&gt; +                               __add_wait_queue(q, wait);<br />&gt; +                       }<br />&gt;                         SetPageWaiters(page);<br />&gt;                 }<br /><br />This seems very hacky.<br /><br />And in fact, looking closer, I'd say that there are more serious problems here.<br /><br />Look at that WQ_FLAG_EXCLUSIVE thing: non-exclusive waits should<br />always go at the head (because they're not going to steal the bit,<br />they just want to know when it got cleared), and exclusive waits<br />should always go at the tail (because of fairness).<br /><br />But that's not at all what we do.<br /><br />Your patch adds even more confusion to this nasty area.<br /><br />And your third one:<br /><br />&gt; +               if (ret)<br />&gt; +                       woken++;<br />&gt;<br />&gt; -               if (bookmark &amp;&amp; (++cnt &gt; WAITQUEUE_WALK_BREAK_CNT) &amp;&amp;<br />&gt; +               if (bookmark &amp;&amp; (++cnt &gt; WAITQUEUE_WALK_BREAK_CNT) &amp;&amp; woken &amp;&amp;<br /><br />I've got two reactions to this<br /><br /> (a) we should not need a new "woken" variable, we should just set a<br />high bit of "cnt" and make WAITQUEUE_WALK_BREAK_CNT contain that high<br />bit<br /><br />     (Tune "high bit" to whatever you want: it could be either the<br />_real_ high bit of the variable, or it could be something like "128",<br />which would mean that you'd break out after 128 non-waking entries).<br /><br /> (b) Ugh, what hackery and magic behavior regardless<br /><br />I'm really starting to hate that wait_on_page_bit_common() function.<br /><br />See a few weeks ago how the function looks buggy to begin with<br /><br />  <a href="https://lore.kernel.org/lkml/CAHk-=wjJA2Z3kUFb-5s=6">https://lore.kernel.org/lkml/CAHk-=wjJA2Z3kUFb-5s=6</a>+n0qbTs8ELqKFt9B3pH85a8fGD73w&#64;mail.gmail.com/<br /><br />and that never got resolved either (but probably never happens in practice).<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
