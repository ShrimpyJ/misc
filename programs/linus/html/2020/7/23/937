    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/21/76">First message in thread</a></li><li><a href="/lkml/2020/7/23/900">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/23/919">Oleg Nesterov</a><ul><li class="origin"><a href="/lkml/2020/7/23/979">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/23/979">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/24/738">Oleg Nesterov</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/7/23/1039">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/23/1228">Hugh Dickins</a><ul><li><a href="/lkml/2020/7/23/1246">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/23/1268">Hugh Dickins</a></li><li><a href="/lkml/2020/7/24/786">Oleg Nesterov</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 23 Jul 2020 11:22:44 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] mm: silence soft lockups from unlock_page</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Jul 23, 2020 at 11:01 AM Oleg Nesterov &lt;oleg&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; &gt; +      *<br />&gt; &gt; +      * We _really_ should have a "list_del_init_careful()" to<br />&gt; &gt; +      * properly pair with the unlocked "list_empty_careful()"<br />&gt; &gt; +      * in finish_wait().<br />&gt; &gt; +      */<br />&gt; &gt; +     smp_mb();<br />&gt; &gt; +     list_del_init(&amp;wait-&gt;entry);<br />&gt;<br />&gt; I think smp_wmb() would be enough, but this is minor.<br /><br />Well, what we _really_ want (and what that comment is about) would be<br />got that list_del_init_careful() to use a "smp_store_release()" for<br />the last store, and then "list_empty_careful()" would use a<br />"smp_load_acquire()" for the corresponding first load.<br /><br />On x86, that's free. On most other architectures, it's the minimal<br />ordering requirement.<br /><br />And no, I don't think "smp_wmb()" is technically enough.<br /><br />With crazy memory ordering, one of the earlier *reads* (eg loading<br />"wait-&gt;private" when waking things up) could have been delayed until<br />after the stores that initialize the list - and thus read stack<br />contents from another process after it's been released and re-used.<br /><br />Does that happen in reality? No. There are various conditionals in<br />there which means that the stores end up being gated on the loads and<br />cannot actually be re-ordered, but it's the kind of subtley<br /><br />So we actually do want to constrain all earlier reads and writes wrt<br />the final write. Which is exactly what "smp_store_release()" does.<br /><br />But with our current list_empty_careful(), the smp_mb() is I think<br />technically sufficient.<br /><br />&gt; We need a barrier between "wait-&gt;flags |= WQ_FLAG_WOKEN" and list_del_init(),<br /><br />See above: we need more than just that write barrier, although in<br />_practice_ you're right, and the other barriers actually all already<br />exist and are part of wake_up_state().<br /><br />So the smp_mb() is unnecessary, and in fact your smp_wmb() would be<br />too. But I left it there basically as "documentation".<br /><br />&gt; But afaics we need another barrier, rmb(), in wait_on_page_bit_common() fo<br />&gt; the case when wait-&gt;private was not blocked; we need to ensure that if<br />&gt; finish_wait() sees list_empty_careful() == T then we can't miss WQ_FLAG_WOKEN.<br /><br />Again, this is what a proper list_empty_careful() with a<br />smp_load_acquire() would have automatically gotten for us.<br /><br />But yes, I think that without that, and with the explicit barriers, we<br />need an smp_rmb() after the list_empty_careful().<br /><br />I really think it should be _in_ list_empty_careful(), though. Or<br />maybe finish_wait(). Hmm.<br /><br />Because looking at all the other finish_wait() uses, the fact that the<br />waitqueue _list_ is properly ordered isn't really a guarantee of the<br />rest of the stack space is.<br /><br />In practice, it will be, but I think this lack of serialization is a<br />potential real bug elsewhere too.<br /><br />(Obviously none of this would show on x86, where we already *get* that<br />smp_store_release/smp_load_acquire behavior for the existing<br />list_del_init()/list_empty_careful(), since all stores are releases,<br />and all loads are acquires)<br /><br />So I think that is a separate issue, generic to our finish_wait() uses.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
