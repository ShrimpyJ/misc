    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/27/1670">First message in thread</a></li><li><a href="/lkml/2020/7/30/1171">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/31/803">(Eric W. Biederman)</a><ul><li class="origin"><a href="/lkml/2020/7/31/901">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/31/901">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 31 Jul 2020 10:41:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][PATCH] exec: Conceal the other threads from wakeups during exec</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 31, 2020 at 10:19 AM Eric W. Biederman<br />&lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt;<br />&gt; Even limited to opt-in locations I think the trick of being able to<br />&gt; transform the wait-state may solve that composition problem.<br /><br />So the part I found intriguing was the "catch things in the signal<br />handling path".<br /><br />Catching things there - and *only* there - would avoid a lot of the<br />problems we had with the freezer. When you're about to return to user<br />mode, there are no lock inversions etc.<br /><br />And it kind of makes conceptual sense to do, since what you're trying<br />to capture is the signal group - so using the signal state to do so<br />seems like a natural thing to do. No touching of any runqueues or<br />scheduler data structures, do everything _purely_ with the signal<br />handling pathways.<br /><br />So that "feels" ok to me.<br /><br />That said, I do wonder if there are nasty nasty latency issues with<br />odd users. Normally, you'd expect that execve() with other threads in<br />the group shouldn't be a performance issue, because people simply<br />shouldn't do that. So it might be ok.<br /><br />And if you capture them all in the signal handling pathway, that ends<br />up being a very convenient place to zap them all too, so maybe my<br />latency worry is misguided.<br /><br />IOW, I think that you could try to do your "freese other threads" not<br />at all like the freezer, but more like a "collect all threads in their<br />signal handler parts as the first phase of zapping them".<br /><br />So maybe this approach is salvageable. I see where something like the<br />above could work well. But I say that with a lot of handwaving, and<br />maybe if I see the patch I'd go "Christ, I was a complete idiot for<br />ever even suggesting that".<br /><br />                    Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
