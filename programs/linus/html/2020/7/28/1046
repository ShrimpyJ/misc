    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/27/1670">First message in thread</a></li><li><a href="/lkml/2020/7/28/607">(Eric W. Biederman)</a><ul><li><a href="/lkml/2020/7/28/660">(Eric W. Biederman)</a><ul><li class="origin"><a href="/lkml/2020/7/30/617">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/30/617">(Eric W. Biederman)</a><ul><li><a href="/lkml/2020/7/30/1142">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 28 Jul 2020 11:17:02 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][PATCH] exec: Freeze the other threads during a multi-threaded exec</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 28, 2020 at 6:23 AM Eric W. Biederman &lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt;<br />&gt; For exec all I care about are user space threads.  So it appears the<br />&gt; freezer infrastructure adds very little.<br /><br />Yeah. 99% of the freezer stuff is for just adding the magic notations<br />for kernel threads, and for any user space threads it seems the wrong<br />interface.<br /><br />&gt; Now to see if I can find another way to divert a task into a slow path<br />&gt; as it wakes up, so I don't need to manually wrap all of the sleeping<br />&gt; calls.  Something that plays nice with the scheduler.<br /><br />The thing is, how many places really care?<br /><br />Because I think there are like five of them. And they are all marked<br />by taking cred_guard_mutex, or the file table lock.<br /><br />So it seems really excessive to then create some whole new "let's<br />serialize every thread", when you actually don't care about any of it,<br />except for a couple of very very special cases.<br /><br />If you care about "thread count stable", you care about exit() and<br />clone().  You don't care about threads that are happily running - or<br />sleeping - doing their own thing.<br /><br />So trying to catch those threads and freezing them really feels like<br />entirely the wrong interface.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
