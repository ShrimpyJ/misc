    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/21/1156">First message in thread</a></li><li><a href="/lkml/2020/7/21/1174">Al Viro</a><ul><li><a href="/lkml/2020/7/21/1187">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2020/7/21/1202">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/21/1202">Al Viro</a><ul><li><a href="/lkml/2020/7/21/1212">Linus Torvalds</a></li><li><a href="/lkml/2020/7/25/286">Al Viro</a></li></ul></li></ul></li><li><a href="/lkml/2020/7/22/334">David Laight</a></li></ul></li><li><a href="/lkml/2020/7/22/314">David Laight</a><ul><li><a href="/lkml/2020/7/22/646">Al Viro</a><ul><li><a href="/lkml/2020/7/22/695">David Laight</a><ul><li><a href="/lkml/2020/7/22/743">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 21 Jul 2020 13:58:47 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 04/18] csum_and_copy_..._user(): pass 0xffffffff instead of 0 as initial sum</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 21, 2020 at 1:55 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; This seems dangerous to me.<br />&gt;<br />&gt; Maybe some implementation depends on the fact that they actually do<br />&gt; the csum 16 bits at a time, and never see an overflow in "int",<br />&gt; because they keep folding things.<br />&gt;<br />&gt; You now break that assumption, and give it an initial value that the<br />&gt; csum code itself would never generate, and wouldn't handle right.<br />&gt;<br />&gt; But I didn't check. Maybe we don't have anything that stupid in the kernel.<br /><br />I take it back. The very first place I looked seemed to do exactly that.<br /><br />See "do_csum()" in the kernel. It doesn't handle carry for any of the<br />usual cases, exactly because it knows it doesn't need to.<br /><br />Ok, so do_csum() doesn't take that initial value, but it's very much<br />an example of the kind of algorithm I was thinking of: it does do<br />things 32 bits at a time and handles the carry bit in that inner loop,<br />but internally it knows that the val;ues are limited in other places,<br />and doesn't need to handle carry everywhere.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
