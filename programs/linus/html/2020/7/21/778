    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/7/21/76">First message in thread</a></li><li><a href="/lkml/2020/7/21/76">Michal Hocko</a><ul><li><a href="/lkml/2020/7/21/429">Qian Cai</a><ul><li><a href="/lkml/2020/7/21/456">Michal Hocko</a><ul><li><a href="/lkml/2020/7/21/503">Qian Cai</a><ul><li><a href="/lkml/2020/7/21/545">Michal Hocko</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/7/21/655">Chris Down</a><ul><li><a href="/lkml/2020/7/21/733">Michal Hocko</a></li></ul></li><li class="origin"><a href="/lkml/2020/7/21/797">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/21/797">Michal Hocko</a></li><li><a href="/lkml/2020/7/22/935">Linus Torvalds</a><ul><li><a href="/lkml/2020/7/22/1085">Hugh Dickins</a><ul><li><a href="/lkml/2020/7/22/1112">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2020/7/23/176">Michal Hocko</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2020/7/21/778/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 21 Jul 2020 08:33:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC PATCH] mm: silence soft lockups from unlock_page</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 20, 2020 at 11:33 PM Michal Hocko &lt;mhocko&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; The lockup is in page_unlock in do_read_fault and I suspect that this is<br />&gt; yet another effect of a very long waitqueue chain which has been<br />&gt; addresses by 11a19c7b099f ("sched/wait: Introduce wakeup boomark in<br />&gt; wake_up_page_bit") previously.<br /><br />Hmm.<br /><br />I do not believe that you can actually get to the point where you have<br />a million waiters and it takes 20+ seconds to wake everybody up.<br /><br />More likely, it's actually *caused* by that commit 11a19c7b099f, and<br />what might be happening is that other CPU's are just adding new<br />waiters to the list *while* we're waking things up, because somebody<br />else already got the page lock again.<br /><br />Humor me.. Does something like this work instead? It's<br />whitespace-damaged because of just a cut-and-paste, but it's entirely<br />untested, and I haven't really thought about any memory ordering<br />issues, but I think it's ok.<br /><br />The logic is that anybody who called wake_up_page_bit() _must_ have<br />cleared that bit before that. So if we ever see it set again (and<br />memory ordering doesn't matter), then clearly somebody else got access<br />to the page bit (whichever it was), and we should not<br /><br /> (a) waste time waking up people who can't get the bit anyway<br /><br /> (b) be in a  livelock where other CPU's continually add themselves to<br />the wait queue because somebody else got the bit.<br /><br />and it's that (b) case that I think happens for you.<br /><br />NOTE! Totally UNTESTED patch follows. I think it's good, but maybe<br />somebody sees some problem with this approach?<br /><br />I realize that people can wait for other bits than the unlocked, and<br />if you're waiting for writeback to complete maybe you don't care if<br />somebody else then started writeback *AGAIN* on the page and you'd<br />actually want to be woken up regardless, but honestly, I don't think<br />it really matters.<br /><br />                Linus<br /><br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -1054,6 +1054,15 &#64;&#64; static void wake_up_page_bit(struct page *page,<br />int bit_nr)<br />                 * from wait queue<br />                 */<br />                spin_unlock_irqrestore(&amp;q-&gt;lock, flags);<br />+<br />+               /*<br />+                * If somebody else set the bit again, stop waking<br />+                * people up. It's now the responsibility of that<br />+                * other page bit owner to do so.<br />+                */<br />+               if (test_bit(bit_nr, &amp;page-&gt;flags))<br />+                       return;<br />+<br />                cpu_relax();<br />                spin_lock_irqsave(&amp;q-&gt;lock, flags);<br />                __wake_up_locked_key_bookmark(q, TASK_NORMAL, &amp;key, &amp;bookmark);<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
