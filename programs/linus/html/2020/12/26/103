    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/12/9/769">First message in thread</a></li><li><a href="/lkml/2020/12/26/99">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2020/12/26/101">Hugh Dickins</a><ul><li class="origin"><a href="/lkml/2020/12/26/113">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/26/113">"Kirill A. Shutemov"</a><ul><li><a href="/lkml/2020/12/26/130">Hugh Dickins</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/12/26/102">Linus Torvalds</a></li><li><a href="/lkml/2020/12/26/108">Matthew Wilcox</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 26 Dec 2020 13:16:09 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/2] mm: Allow architectures to request 'old' entries when prefaulting</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Dec 26, 2020 at 1:04 PM Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt;<br />&gt; Hold on. I guess this one will suffer from the same bug as the previous.<br />&gt; I was about to report back, after satisfactory overnight testing of that<br />&gt; version - provided that one big little bug is fixed:<br />&gt;<br />&gt; --- a/mm/filemap.c<br />&gt; +++ b/mm/filemap.c<br />&gt; &#64;&#64; -2919,7 +2919,7 &#64;&#64; static bool filemap_map_pmd(struct vm_fa<br />&gt;<br />&gt;         if (pmd_none(*vmf-&gt;pmd) &amp;&amp;<br />&gt;             PageTransHuge(page) &amp;&amp;<br />&gt; -           do_set_pmd(vmf, page)) {<br />&gt; +           do_set_pmd(vmf, page) == 0) {<br />&gt;                 unlock_page(page);<br />&gt;                 return true;<br />&gt;         }<br /><br />I missed that entirely, because when just reading the patch it looks<br />fine and I didn't look at what do_set_pmd() function returns outside<br />the patch.<br /><br />And maybe it would be better to write it as<br /><br />        if (pmd_none(*vmf-&gt;pmd) &amp;&amp; PageTransHuge(page)) {<br />                vm_fault_t ret = do_set_pmd(vmf, page);<br />                if (!ret) {<br />                        ...<br /><br />instead to make it a bit more explicit about how that return value is<br />a vm_fault_t there...<br /><br />And see my other email about how I suspect there is still a leak in<br />that patch for the previous test-case.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
