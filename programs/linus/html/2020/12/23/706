    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/12/18/753">First message in thread</a></li><li><a href="/lkml/2020/12/22/1267">Yu Zhao</a><ul><li><a href="/lkml/2020/12/23/459">Peter Xu</a><ul><li><a href="/lkml/2020/12/23/645">Andrea Arcangeli</a></li></ul></li><li><a href="/lkml/2020/12/23/661">Andrea Arcangeli</a><ul><li><a href="/lkml/2020/12/23/676">Yu Zhao</a><ul><li><a href="/lkml/2020/12/23/690">Andrea Arcangeli</a></li><li><a href="/lkml/2020/12/23/744">Andy Lutomirski</a><ul><li><a href="/lkml/2020/12/23/764">Andrea Arcangeli</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2020/12/23/729">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/23/729">Andrea Arcangeli</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Dec 2020 15:39:53 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm/userfaultfd: fix memory corruption due to writeprotect</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Dec 23, 2020 at 1:39 PM Andrea Arcangeli &lt;aarcange&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On Tue, Dec 22, 2020 at 08:36:04PM -0700, Yu Zhao wrote:<br />&gt; &gt; Thanks for the details.<br />&gt;<br />&gt; I hope we can find a way put the page_mapcount back where there's a<br />&gt; page_count right now.<br /><br />I really don't think that's ever going to happen - at least if you're<br />talking about do_wp_page().<br /><br />I refuse to make the *simple* core operations VM have to jump through<br />hoops, and the old COW mapcount logic was that. I *much* prefer the<br />newer COW code, because the rules are more straightforward.<br /><br />&gt; page_count is far from optimal, but it is a feature it finally allowed<br />&gt; us to notice that various code (clear_refs_write included apparently<br />&gt; even after the fix) leaves stale too permissive TLB entries when it<br />&gt; shouldn't.<br /><br />I absolutely agree that page_count isn't exactly optimal, but<br />"mapcount" is just so much worse.<br /><br />page_count() is at least _logical_, and has a very clear meaning:<br />"this page has other users". mapcount() means something else, and is<br />simply not sufficient or relevant wrt COW.<br /><br />That doesn't mean that page_mapcount() is wrong - it's just that it's<br />wrong for COW. page_mapcount() is great for rmap, so that we can see<br />when we need to shoot down a memory mapping of a page that gets<br />released (truncate being the classic example).<br /><br />I think that the mapcount games we used to have were horrible. I<br />absolutely much prefer where we are now wrt COW.<br /><br />The modern rules for COW handling are:<br /><br /> - if we got a COW fault there might be another user, we copy (and<br />this is where the page count makes so much logical sense).<br /><br /> - if somebody needs to pin the page in the VM, we either make sure<br />that it is pre-COWed and we<br /><br />   (a) either never turn it back into a COW page (ie the fork()-time<br />stuff we have for pinned pages)<br /><br />   (b) or there is some explicit marker on the page or in the page<br />table (ie the userfaultfd_pte_wp thing).<br /><br />those are _so_ much more straightforward than the very complex rules<br />we used to have that were actively buggy, in addition to requiring the<br />page lock. So they were buggy and slow.<br /><br />And yes, I had forgotten about that userfaultfd_pte_wp() because I was<br />being myopic and only looking at wp_page_copy(). So using that as a<br />way to make sure that a page doesn't go through COW is a good way to<br />avoid the COW race, but I think that thing requires a bit in the page<br />table which might be a problem on some architectures?<br /><br />          Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
