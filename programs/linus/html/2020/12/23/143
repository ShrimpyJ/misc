    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/12/18/753">First message in thread</a></li><li><a href="/lkml/2020/12/22/712">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/22/716">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/22/723">Yu Zhao</a><ul><li><a href="/lkml/2020/12/22/1172">Andrea Arcangeli</a></li></ul></li><li class="origin"><a href="/lkml/2020/12/23/164">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/23/164">Yu Zhao</a><ul><li><a href="/lkml/2020/12/23/494">Peter Xu</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/12/22/722">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 23 Dec 2020 01:44:42 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] mm/userfaultfd: fix memory corruption due to writeprotect</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 22, 2020 at 4:01 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; The more I look at the mprotect code, the less I like it. We seem to<br />&gt; be much better about the TLB flushes in other places (looking at<br />&gt; mremap, for example). The mprotect code seems to be very laissez-faire<br />&gt; about the TLB flushing.<br /><br />No, this doesn't help.<br /><br />&gt; Does adding a TLB flush to before that<br />&gt;<br />&gt;         pte_unmap_unlock(pte - 1, ptl);<br />&gt;<br />&gt; fix things for you?<br /><br />It really doesn't fix it. Exactly because - as pointed out earlier -<br />the actual page *copy* happens outside the pte lock.<br /><br />So what can happen is:<br /><br /> - CPU 1 holds the page table lock, while doing the write protect. It<br />has cleared the writable bit, but hasn't flushed the TLB's yet<br /><br /> - CPU 2 did *not* have the TLB entry, sees the new read-only state,<br />takes a COW page fault, and reads the PTE from memory (into<br />vmf-&gt;orig_pte)<br /><br /> - CPU 2 correctly decides it needs to be a COW, and copies the page contents<br /><br /> - CPU 3 *does* have a stale TLB (because TLB invalidation hasn't<br />happened yet), and writes to that page in users apce<br /><br /> - CPU 1 now does the TLB invalidate, and releases the page table lock<br /><br /> - CPU 2 gets the page table lock, sees that its PTE matches<br />vmf-&gt;orig_pte, and switches it to be that writable copy of the page.<br /><br />where the copy happened before CPU 3 had stopped writing to the page.<br /><br />So the pte lock doesn't actually matter, unless we actually do the<br />page copy inside of it (on CPU2), in addition to doing the TLB flush<br />inside of it (on CPU1).<br /><br />mprotect() is actually safe for two independent reasons: (a) it does<br />the mmap_sem for writing (so mprotect can't race with the COW logic at<br />all), and (b) it changes the vma permissions so turning something<br />read-only actually disables COW anyway, since it won't be a COW, it<br />will be a SIGSEGV.<br /><br />So mprotect() is irrelevant, other than the fact that it shares some<br />code with that "turn it read-only in the page tables".<br /><br />fork() is a much closer operation, in that it actually triggers that<br />COW behavior, but fork() takes the mmap_sem for writing, so it avoids<br />this too.<br /><br />So it's really just userfaultfd and that kind of ilk that is relevant<br />here, I think. But that "you need to flush the TLB before releasing<br />the page table lock" was not true (well, it's true in other<br />circumstances - just not *here*), and is not part of the solution.<br /><br />Or rather, if it's part of the solution here, it would have to be<br />matched with that "page copy needs to be done under the page table<br />lock too".<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
