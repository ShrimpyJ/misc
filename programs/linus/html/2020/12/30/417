    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/12/29/507">First message in thread</a></li><li><a href="/lkml/2020/12/29/507">kernel test robot</a><ul><li class="origin"><a href="/lkml/2020/12/30/488">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/30/488">Rong Chen</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 30 Dec 2020 12:49:45 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [kasan] 97593cad00: RIP:kasan_record_aux_stack</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 29, 2020 at 6:59 PM kernel test robot &lt;oliver.sang&#64;intel.com&gt; wrote:<br />&gt;<br />&gt; [  235.553325] BUG: sleeping function called from invalid context at arch/x86/mm/fault.c:1351<br />&gt; [  235.554684] in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 7515, name: trinity-c1<br />&gt; [  235.555890] 2 locks held by trinity-c1/7515:<br />&gt; [  235.556506]  #0: ffffffff8323dd38 (&amp;ids-&gt;rwsem){....}-{3:3}, at: semctl_down+0x6d/0x686<br />&gt; [  235.557684]  #1: ffff888128ccc868 (&amp;mm-&gt;mmap_lock#2){....}-{3:3}, at: do_user_addr_fault+0x196/0x59e<br />&gt; [  235.559020] CPU: 1 PID: 7515 Comm: trinity-c1 Not tainted 5.10.0-g97593cad003c #2<br />&gt; [  235.560317] Call Trace:<br />&gt; [  235.560767]  dump_stack+0x7d/0xa3<br />&gt; [  235.561371]  ___might_sleep+0x2c4/0x2df<br />&gt; [  235.562063]  ? do_user_addr_fault+0x196/0x59e<br />&gt; [  235.562834]  do_user_addr_fault+0x234/0x59e<br />&gt; [  235.563519]  exc_page_fault+0x70/0x8b<br />&gt; [  235.564112]  asm_exc_page_fault+0x1b/0x20<br /><br />Btw, I wonder if the kernel test robot dumps could be please run through the<br /><br /> scripts/decode_stacktrace.sh<br /><br />script to give line numbers and inlining information?<br /><br />That does require CONFIG_DEBUG_INFO to work, but it would help things<br />like this when you don't have to try to guess where the exact access<br />happens.<br /><br />Now, in this case, it seems to be a recursive issue with the original<br />fault happening in:<br /><br />&gt; [  235.564754] RIP: 0010:kasan_record_aux_stack+0x64/0x74<br /><br />And yeah, that explains why it then bisects to 97593cad003c ("kasan:<br />sanitize objects when metadata doesn't fit")<br /><br />The faulting instruction sequence decodes to<br /><br />  10:   48 39 f3                cmp    %rsi,%rbx<br />  13:   48 0f 46 f3             cmovbe %rbx,%rsi<br />  17:   e8 6f e5 ff ff          callq  .. something ..<br />  1c:   bf 00 08 00 00          mov    $0x800,%edi<br />  21:   48 89 c3                mov    %rax,%rbx<br />  24:*  8b 40 08                mov    0x8(%rax),%eax           &lt;--<br />trapping instruction<br />  27:   89 43 0c                mov    %eax,0xc(%rbx)<br /><br />and I *think* that "call something" is the call to<br />kasan_get_alloc_meta. And there is no check for a NULL return.<br /><br />So I think this was already fixed by commit 13384f6125ad ("kasan: fix<br />null pointer dereference in kasan_record_aux_stack").<br /><br />But see about that "decode_stacktrace,sh" script request. I thought I<br />had already asked for this, but I now realize that I think that was<br />just for syzbot.<br /><br />Can we do that for these kernel test robot reports too? Please?<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
