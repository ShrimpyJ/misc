    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/12/21/315">First message in thread</a></li><li><a href="/lkml/2020/12/21/315">David Howells</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2020/12/31/222">Daniel Axtens</a></li><li><a href="/lkml/2021/1/4/287">David Howells</a><ul><li><a href="/lkml/2021/1/4/812">Linus Torvalds</a></li><li><a href="/lkml/2021/1/4/928">David Howells</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Dec 2020 09:37:49 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC][PATCH] afs: Work around strnlen() oops with CONFIG_FORTIFIED_SOURCE=y</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Dec 21, 2020 at 8:14 AM David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; CONFIG_FORTIFIED_SOURCE=y now causes an oops in strnlen() from afs (see<br />&gt; attached patch for an explanation).  Is replacing the use with memchr() the<br />&gt; right approach?  Or should I be calling __real_strnlen() or whatever it's<br />&gt; called?<br /><br />Ugh. No.<br /><br />&gt; AFS has a structured layout in its directory contents (AFS dirs are<br />&gt; downloaded as files and parsed locally by the client for lookup/readdir).<br />&gt; The slots in the directory are defined by union afs_xdr_dirent.  This,<br />&gt; however, only directly allows a name of a length that will fit into that<br />&gt; union.  To support a longer name, the next 1-8 contiguous entries are<br />&gt; annexed to the first one and the name flows across these.<br /><br />I htink the right fix would be to try to create a type that actually<br />describes that.<br /><br />IOW, maybe the afs_xdr_dirent union could be written something like<br /><br />  union afs_xdr_dirent {<br />          struct {<br />                  u8              valid;<br />                  u8              unused[1];<br />                  __be16          hash_next;<br />                  __be32          vnode;<br />                  __be32          unique;<br />                  u8              name[];<br />         } u;<br />          u8                      extended_name[32];<br />  } __packed;<br /><br />instead, and have a big comment about how "name[]" is that<br />"16+overflow+next entries" thing?<br /><br />I didn't check how you currently use that -&gt;name thing (not a good<br />identifier to grep for..), so you might want some other model - like<br />using a separate union case for this "unconstrained name" case.<br /><br />In fact, maybe that separate union struct is a better model anyway, to<br />act as even more of documentation about the different cases..<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
