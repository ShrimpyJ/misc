    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/20/1184">First message in thread</a></li><li><a href="/lkml/2020/11/20/1610">Jens Axboe</a><ul><li><a href="/lkml/2020/11/20/1620">Jens Axboe</a><ul><li class="origin"><a href="/lkml/2020/11/21/299">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/21/299">Jens Axboe</a><ul><li><a href="/lkml/2020/12/10/1007">Jens Axboe</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Nov 2020 10:07:16 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] io_uring fixes for 5.10-rc</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 20, 2020 at 7:00 PM Jens Axboe &lt;axboe&#64;kernel.dk&gt; wrote:<br />&gt;<br />&gt; Actually, I think we can do even better. How about just having<br />&gt; do_filp_open() exit after LOOKUP_RCU fails, if LOOKUP_RCU was already<br />&gt; set in the lookup flags? Then we don't need to change much else, and<br />&gt; most of it falls out naturally.<br /><br />So I was thinking doing the RCU lookup unconditionally, and then doing<br />the nn-RCU lookup if that fails afterwards.<br /><br />But your patch looks good to me.<br /><br />Except for the issue you noticed.<br /><br />&gt; Except it seems that should work, except LOOKUP_RCU does not guarantee<br />&gt; that we're not going to do IO:<br /><br />Well, almost nothing guarantees lack of IO, since allocations etc can<br />still block, but..<br /><br />&gt; [   20.463195]  schedule+0x5f/0xd0<br />&gt; [   20.463444]  io_schedule+0x45/0x70<br />&gt; [   20.463712]  bit_wait_io+0x11/0x50<br />&gt; [   20.463981]  __wait_on_bit+0x2c/0x90<br />&gt; [   20.464264]  out_of_line_wait_on_bit+0x86/0x90<br />&gt; [   20.464611]  ? var_wake_function+0x30/0x30<br />&gt; [   20.464932]  __ext4_find_entry+0x2b5/0x410<br />&gt; [   20.465254]  ? d_alloc_parallel+0x241/0x4e0<br />&gt; [   20.465581]  ext4_lookup+0x51/0x1b0<br />&gt; [   20.465855]  ? __d_lookup+0x77/0x120<br />&gt; [   20.466136]  path_openat+0x4e8/0xe40<br />&gt; [   20.466417]  do_filp_open+0x79/0x100<br /><br />Hmm. Is this perhaps an O_CREAT case? I think we only do the dcache<br />lookups under RCU, not the final path component creation.<br /><br />And there are probably lots of other situations where we finish with<br />LOOKUP_RCU (with unlazy_walk()), and then continue.<br /><br />Example: look at "may_lookup()" - if inode_permission() says "I can't<br />do this without blocking" the logic actually just tries to validate<br />the current state (that "unlazy_walk()" thing), and then continue<br />without RCU.<br /><br />It obviously hasn't been about lockless semantics, it's been about<br />really being lockless. So LOOKUP_RCU has been a "try to do this<br />locklessly" rather than "you cannot take any locks".<br /><br />I guess we would have to add a LOOKUP_NOBLOCK thing to actually then<br />say "if the RCU lookup fails, return -EAGAIN".<br /><br />That's probably not a huge undertaking, but yeah, I didn't think of<br />it. I think this is a "we need to have Al tell us if it's reasonable".<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
