    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/16/1404">First message in thread</a></li><li><a href="/lkml/2020/11/16/1403">Daniel Xu</a><ul><li><a href="/lkml/2020/11/16/1441">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2020/11/17/1777">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/17/1777">Ivan Kokshaysky</a></li></ul></li><li><a href="/lkml/2020/11/16/1801">Daniel Xu</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Nov 2020 14:44:56 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH bpf v6 1/2] lib/strncpy_from_user.c: Don't overcopy bytes after NUL terminator</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 16, 2020 at 2:15 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So I've verified that at least on x86-64, this doesn't really make<br />&gt; code generation any worse, and I'm ok with the patch from that<br />&gt; standpoint.<br /><br />.. looking closer, it will generate extra code on big-endian<br />architectures and on alpha, because of the added "zero_bytemask()".<br />But on the usual LE machines, zero_bytemask() will already be the same<br />as "mask", so all it adds is that "and" operation with values it<br />already had access to.<br /><br />I don't think anybody cares about alpha and BE - traditional BE<br />architectures have moved to LE anyway. And looking at the alpha<br />word-at-a-time code, I don't even understand how it works at all.<br /><br />Adding matt/rth/ivan to the cc, just so that maybe one of them can<br />educate me on how that odd alpha zero_bytemask() could possibly work.<br />The "2ul &lt;&lt; .." part confuses me, I think it should be "1ul &lt;&lt; ...".<br /><br />I get the feeling that the alpha "2ul" constant might have come from<br />the tile version, but in the tile version, the " __builtin_ctzl()"<br />counts the leading zeroes to the top bit of any bytes in 'mask'. But<br />the alpha version actually uses "find_zero(mask) * 8", so rather than<br />have values of 7/15/23/... (for zero byte in byte 0/1/2/..<br />respectively), it has values 0/8/16/....<br /><br />But it's entirely possible that I'm completely confused, and alpha<br />does it right, and I'm just not understanding the code.<br /><br />It's also possible that the "2ul" vs "1ul" case doesn't matter.<br />because the extra bit is always going to mask the byte that is<br />actually zero, so being one bit off in the result is a non-event. I<br />think that is what may actually be going on.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
