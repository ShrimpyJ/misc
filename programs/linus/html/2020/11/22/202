    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/21/113">First message in thread</a></li><li><a href="/lkml/2020/11/21/114">David Howells</a><ul><li><a href="/lkml/2020/11/21/135">Pavel Begunkov</a><ul><li><a href="/lkml/2020/11/23/1823">Pavel Begunkov</a></li></ul></li><li><a href="/lkml/2020/11/21/223">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/10/1655">Al Viro</a></li></ul></li><li><a href="/lkml/2020/11/22/111">David Howells</a><ul><li><a href="/lkml/2020/11/22/116">David Laight</a></li><li class="origin"><a href="/lkml/2020/11/22/259">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/22/259">David Laight</a></li></ul></li></ul></li><li><a href="/lkml/2020/11/22/269">David Laight</a></li><li><a href="/lkml/2020/11/23/93">Christoph Hellwig</a></li><li><a href="/lkml/2020/11/23/203">David Howells</a><ul><li><a href="/lkml/2020/11/23/1836">Pavel Begunkov</a></li><li><a href="/lkml/2020/11/24/577">David Howells</a><ul><li><a href="/lkml/2020/11/24/826">Jens Axboe</a></li><li><a href="/lkml/2020/11/27/568">David Howells</a></li></ul></li></ul></li><li><a href="/lkml/2020/11/23/242">David Howells</a></li><li><a href="/lkml/2020/12/3/70">kernel test robot</a><ul><li><a href="/lkml/2020/12/3/971">Linus Torvalds</a><ul><li><a href="/lkml/2020/12/3/975">Jens Axboe</a></li></ul></li><li><a href="/lkml/2020/12/4/422">David Howells</a></li><li><a href="/lkml/2020/12/4/423">David Howells</a><ul><li><a href="/lkml/2020/12/7/485">Oliver Sang</a></li><li><a href="/lkml/2020/12/7/519">David Howells</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 22 Nov 2020 11:22:08 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 01/29] iov_iter: Switch to using a table of operations</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Nov 22, 2020 at 5:33 AM David Howells &lt;dhowells&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; I don't know enough about how spectre v2 works to say if this would be a<br />&gt; problem for the ops-table approach, but wouldn't it also affect the chain of<br />&gt; conditional branches that we currently use, since it's branch-prediction<br />&gt; based?<br /><br />No, regular conditional branches aren't a problem. Yes, they may<br />mispredict, but outside of a few very rare cases that we handle<br />specially, that's not an issue.<br /><br />Why? Because they always mispredict to one or the other side, so the<br />code flow may be mis-predicted, but it is fairly controlled.<br /><br />In contrast, an indirect jump can mispredict the target, and branch<br />_anywhere_, and the attack vectors can poison the BTB (branch target<br />buffer), so our mitigation for that is that every single indirect<br />branch isn't predicted at all (using "retpoline").<br /><br />So a conditional branch takes zero cycles when predicted (and most<br />will predict quite well). And as David Laight pointed out a compiler<br />can also turn a series of conditional branches into a tree, means that<br />N conditional branches basically only needs log2(N) conditionals<br />executed.<br /><br />In contrast, with retpoline in place, an indirect branch will<br />basically always take something like 25-30 cycles, because it always<br />mispredicts.<br /><br />End result:<br /><br /> - well-predicted conditional branches are basically free (apart from<br />code layout issues)<br /><br /> - even with average prediction, a series of conditional branches has<br />to be fairly long for it to be worse than an indirect branch<br /><br /> - only completely unpredictable conditional branches end up basically<br />losing, and even then you probably need more than one. And while<br />completely unpredictable conditional branches do exist, they are<br />pretty rare.<br /><br />The other side of the coin, of course, is<br /><br /> - often this is not measurable anyway.<br /><br /> - code cleanliness is important<br /><br /> - not everything needs retpolines and the expensive indirect branches.<br /><br />So this is not in any way "indirect branches are bad". It's more of a<br />"indirect branches really aren't necessarily better than a couple of<br />conditionals, and _may_ be much worse".<br /><br />For example, look at this gcc bugzilla:<br /><br />    <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86952">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86952</a><br /><br />which basically is about the compiler generating a jump table (is a<br />single indirect branch) vs a series of conditional branches. With<br />retpoline, the cross-over point is basically when you need to have<br />over 10 conditional branches - and because of the log2(N) behavior,<br />that's around a thousand cases!<br /><br />(But this depends hugely on microarchitectural details).<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
