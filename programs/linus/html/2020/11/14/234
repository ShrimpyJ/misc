    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/14/190">First message in thread</a></li><li><a href="/lkml/2020/11/14/190">David Laight</a><ul><li class="origin"><a href="/lkml/2020/11/14/370">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/14/370">David Laight</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Nov 2020 10:02:10 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: load_unaligned_zeropad() on x86-64</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Nov 14, 2020 at 7:53 AM David Laight &lt;David.Laight&#64;aculab.com&gt; wrote:<br />&gt;<br />&gt; The change e419b4cc585680940bc42f8ca8a071d6023fb1bb added<br />&gt; asm code for load_unaligned_zeropad().<br />&gt;<br />&gt; However it doesn't look right for 64bit.<br />&gt; It masks the address with ~3 not ~7 so the second<br />&gt; access could still cross a page boundary and fault.<br /><br />Can you explain more what you think is wrong?<br /><br />It uses<br /><br />                "and %3,%1\n\t"<br /><br />for the masking, but note how that's a "%3", not a "$3".<br /><br />And %3 is this asm argument<br /><br />                "i" (-sizeof(unsigned long)),<br /><br />which is -4 or -8 (which is the same as ~3 or ~7).<br /><br />The other masking is to get the byte offset within the unsigned long,<br />to do the shifting. Again, that uses '%4', which is<br /><br />                "i" (sizeof(unsigned long)-1));<br /><br />so 3 or 7.<br /><br />So on my build, the code expands to<br /><br />1:      mov (%rsi),%rdx # MEM[(long unsigned int *)ct_58], ret<br />2:<br />.section .fixup,"ax"<br />3:      lea (%rsi),%rcx # MEM[(long unsigned int *)ct_58], dummy<br />        and $-8,%rcx    #, dummy<br />        mov (%rcx),%rdx # dummy, ret<br />        leal (%rsi),%ecx        # MEM[(long unsigned int *)ct_58]<br />        andl $7,%ecx    #<br />        shll $3,%ecx<br />        shr %cl,%rdx    # ret<br />        jmp 2b<br />.previous<br /><br />which looks ok to me.<br /><br />It's possible that it's buggy (that page crossing basically never<br />happens - only with PAGEALLOC debugging, and even then only in some<br />really odd and unlikely situations). So it gets basically zero test<br />coverage, which is never a good thing. But if it's buggy, it's not<br />obvious to me, and I don't see any ~3 issue.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
