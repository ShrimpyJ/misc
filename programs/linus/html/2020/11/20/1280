    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/20/1184">First message in thread</a></li><li><a href="/lkml/2020/11/20/1184">Jens Axboe</a><ul><li class="origin"><a href="/lkml/2020/11/20/1357">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/20/1357">Jens Axboe</a><ul><li><a href="/lkml/2020/11/20/1498">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/20/1610">Jens Axboe</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/11/20/1503">   pr-tracker-bot&#64;kernel ...</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Nov 2020 12:02:47 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] io_uring fixes for 5.10-rc</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 20, 2020 at 10:45 AM Jens Axboe &lt;axboe&#64;kernel.dk&gt; wrote:<br />&gt; Jens Axboe (4):<br />&gt;       proc: don't allow async path resolution of /proc/self components<br /><br />This one is ok.<br /><br />&gt;       io_uring: handle -EOPNOTSUPP on path resolution<br /><br />But this one smells. It talks about how it shouldn't block, but the<br />fact is, it can easily block when the path going through another<br />filesystem (think ".." to get to root before even hitting /proc/self,<br />but also think /proc/self/cwd/randompathgoeshere).<br /><br />The whole concept seems entirely broken anyway. Why would you retry<br />the failure after doing it asynchronously? If it really doesn't block,<br />then it shouldn't have been done async in the first place.<br /><br />IMNSHO, the openat logic is just wrong. And that "ignore_nonblock"<br />thing is a disgusting hack that is everything that is wrong with<br />io_uring. Stop doing these kinds of hacky things that will just cause<br />problems down the line.<br /><br />I think the correct thing to do is to just start the open<br />synchronously with an RCU lookup, and if that fails, go to the async<br />one. And if the async one fails because it's /proc/self, then it just<br />fails. None of this kind of "it should be ok" stuff.<br /><br />And that would likely be the faster model anyway - do it synchronously<br />and immediately for the easy cases.<br /><br />And if it really is something like "/proc/self/cwd/randompathgoeshere"<br />that actually will block, maybe io_uring just shouldn't support it?<br /><br />I've pulled this, but I really object to how io_uring keeps having<br />subtle bugs, and then they get worked around with this kind of hackery<br />which really smells like "this will be a subtle bug some time in the<br />future".<br /><br />       Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
