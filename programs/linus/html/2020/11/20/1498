    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/20/1184">First message in thread</a></li><li><a href="/lkml/2020/11/20/1280">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/20/1357">Jens Axboe</a><ul><li class="origin"><a href="/lkml/2020/11/20/1610">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/20/1610">Jens Axboe</a><ul><li><a href="/lkml/2020/11/20/1620">Jens Axboe</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Nov 2020 16:23:41 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] io_uring fixes for 5.10-rc</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 20, 2020 at 1:36 PM Jens Axboe &lt;axboe&#64;kernel.dk&gt; wrote:<br />&gt;<br />&gt; I don't disagree with you on that. I've been a bit gun shy on touching<br />&gt; the VFS side of things, but this one isn't too bad. I hacked up a patch<br />&gt; that allows io_uring to do LOOKUP_RCU and a quick test seems to indicate<br />&gt; it's fine. On top of that, we just propagate the error if we do fail and<br />&gt; get rid of that odd retry loop.<br /><br />Ok, this looks better to me (but is obviously not 5.10 material).<br /><br />That said, I think I'd prefer to keep 'struct nameidata' internal to<br />just fs/namei.c, and maybe we can just expert that<br /><br />        struct nameidata nd;<br /><br />        set_nameidata(&amp;nd, req-&gt;open.dfd, req-&gt;open.filename);<br />        file = path_openat(&amp;nd, &amp;op, op.lookup_flags | LOOKUP_RCU);<br />        restore_nameidata();<br />        return filp == ERR_PTR(-ECHILD) ? -EAGAIN : filp;<br /><br />as a helper from namei.c instead? Call it "do_filp_open_rcu()" or something?<br /><br />That "force_nonblock" test seems a bit off, though. Why is that RCU<br />case only done when "!force_nonblock"? It would seem that if<br />force_nonblock is set, you want to do this too?<br /><br />Al? You can see the background on lkml, but basically io_uring wants<br />to punt file open to a kernel thread, except if it can just be done<br />directly without blocking (which is pretty much that RCU lookup case).<br /><br />And the thing that triggered this is that /proc/self/ can only be done<br />directly - not in a kernel thread. So the RCU case actually ends up<br />being interesting in that it would handl those things.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
