    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/11/1308">First message in thread</a></li><li><a href="/lkml/2020/11/13/1007">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/13/1059">Alexei Starovoitov</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Nov 2020 13:14:12 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH bpf v5 1/2] lib/strncpy_from_user.c: Don't overcopy bytes after NUL terminator</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 13, 2020 at 12:57 PM Alexei Starovoitov<br />&lt;alexei.starovoitov&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; (a) is the only case.<br /><br />Ok, good.<br /><br />The (b) case is certainly valid in theory (and we might even<br />traditionaly have had something like that for things like -&gt;comm[]<br />accesses, although I think we got rid of it).<br /><br />But the (b) case is _so_ hard to think about and so easy to get wrong<br />- readers have to be very careful to only read each byte of the source<br />exactly once - that it's much much better to try to avoid it.<br /><br />&gt; But I think if glibc's strncpy() did something like this it would<br />&gt; probably caused a lot of pain for user space.<br /><br />Oh, absolutely. The standard strncpy() function has some very strict<br />behavior issues, including that zero-padding of the *whole*<br />destination buffer, which would be absolutely horrid for things like<br />fetching pathnames from user space (our buffer is generally close to a<br />page in size).<br /><br />In fact, the kernel strncpy() (ie the one that doesn't copy from user)<br />does ado the whole "pad all zeroes at the end" exactly because people<br />might depend on that. So the _actual_ strncpy() function conforms to<br />the standard use - but you generally shouldn't use it, exactly because<br />it's such a horrible interface. Only good for very small buffers.<br /><br />&gt; The hash element example above is typical bpf usage.<br /><br />The core kernel does have one very common string hash case, but it's<br />for path components, and never the whole string - so it already has to<br />deal with the fact that the string is very much delimited in place by<br />not just NUL at the end, but also '/' characters etc.<br /><br />So no "copy it as a string from user space, and then use it as a<br />block" that I'm aware of.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
