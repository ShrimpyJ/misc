    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/11/11/1308">First message in thread</a></li><li><a href="/lkml/2020/11/13/903">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/13/961">Alexei Starovoitov</a><ul><li><a href="/lkml/2020/11/13/972">Linus Torvalds</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2020/11/13/1007">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/13/1059">Alexei Starovoitov</a><ul><li><a href="/lkml/2020/11/13/1073">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Nov 2020 11:46:36 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH bpf v5 1/2] lib/strncpy_from_user.c: Don't overcopy bytes after NUL terminator</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 13, 2020 at 11:17 AM Alexei Starovoitov<br />&lt;alexei.starovoitov&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; The destination buffer was already initialized with zeros before the call.<br /><br />Side note: this is another example of you using the interface incorrectly.<br /><br />You should *not* initialize the buffer with zeroes. That's just extra<br />work. One of the points of the strncpy_from_user() interface is that<br />it is *not* the incredibly broken garbage that "strncpy()" is.<br /><br />strncpy_from_user() returns the size of the resulting string,<br />*EXACTLY* so that people who care can then use that information<br />directly and efficiently.<br /><br />Most of the time it's to avoid a strlen() on the result (and check for<br />overflow), of course, but the other use-case is exactly that "maybe I<br />need to pad out the result", so that you don't need to initialize the<br />buffer beforehand.<br /><br />I'm not sure exactly which strncpy_from_user() user you have issues<br />with, but I did a<br /><br />     git grep strncpy_from_user -- '*bpf*'<br /><br />and several of them look quite questionable.<br /><br />All of the ones in kernel/bpf/syscall.c seem to handle overflow<br />incorrectly, for example, with a silent truncation instead of error.<br />Maybe that's fine,  but it's questionable.<br /><br />And the bpf_trace_copy_string() thing doesn't check the result at all,<br />so the end result may not be NUL-terminated. Maybe that's ok. I didn't<br />check the call chain.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
