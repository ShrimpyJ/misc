    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/26/1445">First message in thread</a></li><li><a href="/lkml/2020/8/31/920">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/23/2006">Hugh Dickins</a><ul><li><a href="/lkml/2020/11/23/2019">Linus Torvalds</a></li><li class="origin"><a href="/lkml/2020/11/24/77">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/24/77">Hugh Dickins</a><ul><li><a href="/lkml/2020/11/24/937">Hugh Dickins</a></li></ul></li></ul></li><li><a href="/lkml/2020/11/24/562">Matthew Wilcox</a><ul><li><a href="/lkml/2020/11/24/924">Hugh Dickins</a><ul><li><a href="/lkml/2020/11/24/1084">Matthew Wilcox</a></li></ul></li><li><a href="/lkml/2020/11/25/146">Jan Kara</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Nov 2020 20:53:20 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: kernel BUG at fs/ext4/inode.c:LINE!</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 23, 2020 at 8:07 PM Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt; Then on crashing a second time, realized there's a stronger reason against<br />&gt; that approach.  If my testing just occasionally crashes on that check,<br />&gt; when the page is reused for part of a compound page, wouldn't it be much<br />&gt; more common for the page to get reused as an order-0 page before reaching<br />&gt; wake_up_page()?  And on rare occasions, might that reused page already be<br />&gt; marked PageWriteback by its new user, and already be waited upon?  What<br />&gt; would that look like?<br />&gt;<br />&gt; It would look like BUG_ON(PageWriteback) after wait_on_page_writeback()<br />&gt; in write_cache_pages() (though I have never seen that crash myself).<br /><br />So looking more at the patch, I started looking at this part:<br /><br />&gt; +       writeback = TestClearPageWriteback(page);<br />&gt; +       /* No need for smp_mb__after_atomic() after TestClear */<br />&gt; +       waiters = PageWaiters(page);<br />&gt; +       if (waiters) {<br />&gt; +               /*<br />&gt; +                * Writeback doesn't hold a page reference on its own, relying<br />&gt; +                * on truncation to wait for the clearing of PG_writeback.<br />&gt; +                * We could safely wake_up_page_bit(page, PG_writeback) here,<br />&gt; +                * while holding i_pages lock: but that would be a poor choice<br />&gt; +                * if the page is on a long hash chain; so instead choose to<br />&gt; +                * get_page+put_page - though atomics will add some overhead.<br />&gt; +                */<br />&gt; +               get_page(page);<br />&gt; +       }<br /><br />and thinking more about this, my first reaction was "but that has the<br />same race, just a smaller window".<br /><br />And then reading the comment more, I realize you relied on the i_pages<br />lock, and that this odd ordering was to avoid the possible latency.<br /><br />But what about the non-mapping case? I'm not sure how that happens,<br />but this does seem very fragile.<br /><br />I'm wondering why you didn't want to just do the get_page()<br />unconditionally and early. Is avoiding the refcount really such a big<br />optimization?<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
