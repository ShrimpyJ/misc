    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/9/15/242">First message in thread</a></li><li><a href="/lkml/2020/9/15/242">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2020/9/15/977">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/15/977">Thomas Gleixner</a><ul><li><a href="/lkml/2020/9/16/683">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2020/9/16/204">Daniel Vetter</a><ul><li><a href="/lkml/2020/9/16/756">"Paul E. McKenney"</a><ul><li><a href="/lkml/2020/9/16/640">Linus Torvalds</a></li><li><a href="/lkml/2020/9/16/964">Daniel Vetter</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 15 Sep 2020 10:35:20 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch 00/13] preempt: Make preempt count unconditional</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 15, 2020 at 1:39 AM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt; OTOH, having a working 'preemptible()' or maybe better named<br />&gt; 'can_schedule()' check makes tons of sense to make decisions about<br />&gt; allocation modes or other things.<br /><br />No. I think that those kinds of decisions about actual behavior are<br />always simply fundamentally wrong.<br /><br />Note that this is very different from having warnings about invalid<br />use. THAT is correct. It may not warn in all configurations, but that<br />doesn't matter: what matters is that it warns in common enough<br />configurations that developers will catch it.<br /><br />So having a warning in "might_sleep()" that doesn't always trigger,<br />because you have a limited configuration that can't even detect the<br />situation, that's fine and dandy and intentional.<br /><br />But having code like<br /><br />       if (can_schedule())<br />           .. do something different ..<br /><br />is fundamentally complete and utter garbage.<br /><br />It's one thing if you test for "am I in hardware interrupt context".<br />Those tests aren't great either, but at least they make sense.<br /><br />But a driver - or some library routine - making a difference based on<br />some nebulous "can I schedule" is fundamentally and basically WRONG.<br /><br />If some code changes behavior, it needs to be explicit to the *caller*<br />of that code.<br /><br />So this is why GFP_ATOMIC is fine, but "if (!can_schedule())<br />do_something_atomic()" is pure shite.<br /><br />And I am not IN THE LEAST interested in trying to help people doing<br />pure shite. We need to fix them. Like the crypto code is getting<br />fixed.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
