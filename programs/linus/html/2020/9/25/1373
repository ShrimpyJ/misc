    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/9/21/1969">First message in thread</a></li><li><a href="/lkml/2020/9/25/1219">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/25/1295">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/25/1497">Jason Gunthorpe</a><ul><li><a href="/lkml/2020/9/25/1516">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/26/387">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2020/9/25/1301">Peter Xu</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 25 Sep 2020 15:08:46 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/5] mm: Introduce mm_struct.has_pinned</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 25, 2020 at 2:13 PM Peter Xu &lt;peterx&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On Fri, Sep 25, 2020 at 12:56:05PM -0700, Linus Torvalds wrote:<br />&gt; &gt; So I think we can simply add a<br />&gt; &gt;<br />&gt; &gt;         if (page_mapcount(page) != 1)<br />&gt; &gt;                 return false;<br />&gt; &gt;<br />&gt; &gt; to page_maybe_dma_pinned(), and that very naturally protects against<br />&gt; &gt; the "is the page count perhaps elevated due to a lot of forking?"<br />&gt;<br />&gt; How about the MAP_SHARED case where the page is pinned by some process but also<br />&gt; shared (so mapcount can be &gt;1)?<br /><br />MAP_SHARED doesn't matter, since it's not getting COW'ed anyway, and<br />we keep the page around regardless.<br /><br />So MAP_SHARED is the easy case. We'll never get to any of this code,<br />because is_cow_mapping() won't be true.<br /><br />You can still screw up MAP_SHARED if you do a truncate() on the<br />underlying file or something like that, but that most *definitely*<br />falls under the "you only have yourself to blame" heading.<br /><br />&gt; Would the ATOMIC version always work?  I mean, I thought it could fail anytime,<br />&gt; so any fork() can start to fail for the tests too.<br /><br />Sure. I'm not really happy about GFP_ATOMIC, but I suspect it works in practice.<br /><br />Honestly, if somebody first pins megabytes of memory, and then does a<br />fork(), they are doing some seriously odd and wrong things. So I think<br />this should be a "we will try to handle it gracefully, but your load<br />is broken" case.<br /><br />I am still inclined to add some kind of warning to this case, but I'm<br />also a bit on the fence wrt the whole "convenience" issue - for some<br />very occasional use it's probably convenient to not have to worry<br />about this in user space.<br /><br />Actually, what I'm even less happy about than the GFP_ATOMIC is how<br />much annoying boilerplate this just "map anonymous page" required with<br />the whole cgroup_charge, throttle, anon_rmap, lru_cache_add thing.<br />Looking at that patch, it all looks _fairly_ simple, but there's a lot<br />of details that got duplicated from the pte_none() new-page-fault case<br />(and that the do_cow_page() case also shares)<br /><br />I understand why it happens, and there's not *that* many cases, it<br />made me go "ouch, this is a lot of small details, maybe I missed<br />some", and I got the feeling that I should try to re-organize a few<br />helper functions to avoid duplicating the same basic code over and<br />over again.<br /><br />But I decided that I wanted to keep the patch minimal and as focused<br />as possible, so I didn't actually do that. But we clearly have decades<br />of adding rules that just makes even something as "simple" as "add a<br />new page to a VM" fairly complex.<br /><br />Also, to avoid making the patch bigger, I skipped your "pass<br />destination vma around" patch. I think it's the right thing<br />conceptually, but everything I looked at also screamed "we don't<br />actually care about the differences" to me.<br /><br />I dunno. I'm conflicted. This really _feels_ to me like "we're so<br />close to just fixing this once and for all", but then I also go "maybe<br />we should just revert everything and do this for 5.10".<br /><br />Except "reverting everything" is sadly really really problematic too.<br />It will fix the rdma issue, but in this case "everything" goes all the<br />way back to "uhhuh, we have a security issue with COW going the wrong<br />way". Otherwise I'd have gone that way two weeks ago already.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
