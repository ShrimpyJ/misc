    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/9/21/1969">First message in thread</a></li><li><a href="/lkml/2020/9/24/1088">Jason Gunthorpe</a><ul><li><a href="/lkml/2020/9/24/1221">Peter Xu</a><ul><li class="origin"><a href="/lkml/2020/9/25/1295">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/25/1295">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/25/1497">Jason Gunthorpe</a></li></ul></li><li><a href="/lkml/2020/9/25/1301">Peter Xu</a><ul><li><a href="/lkml/2020/9/25/1373">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 25 Sep 2020 12:56:05 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/5] mm: Introduce mm_struct.has_pinned</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Sep 24, 2020 at 2:30 PM Peter Xu &lt;peterx&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; &gt; &gt;<br />&gt; &gt; &gt; With the extra mprotect(!WRITE), I think we'll see a !pte_write() entry.  Then<br />&gt; &gt; &gt; it'll not go into maybe_dma_pinned() at all since cow==false.<br />&gt; &gt;<br />&gt; &gt; Hum that seems like a problem in this patch, we still need to do the<br />&gt; &gt; DMA pinned logic even if the pte is already write protected.<br />&gt;<br />&gt; Yes I agree.  I'll take care of that in the next version too.<br /><br />You people seem to be worrying too much about crazy use cases.<br /><br />The fact is, if people do pinning, they had better be careful<br />afterwards. I agree that marking things MADV_DONTFORK may not be<br />great, and there may be apps that do it. But honestly, if people then<br />do mprotect() to make a VM non-writable after pinning a page for<br />writing (and before the IO has completed), such an app only has itself<br />to blame.<br /><br />So I don't think this issue is even worth worrying about.  At some<br />point, when apps do broken things, the kernel says "you broke it, you<br />get to keep both pieces". Not "Oh, you're doing unreasonable things,<br />let me help you".<br /><br />This has dragged out a lot longer than I hoped it would, and I think<br />it's been over-complicated.<br /><br />In fact, looking at this all, I'm starting to think that we don't<br />actually even need the mm_struct.has_pinned logic, because we can work<br />with something much simpler: the page mapping count.<br /><br />A pinned page will have the page count increased by<br />GUP_PIN_COUNTING_BIAS, and my worry was that this would be ambiguous<br />with the traditional "fork a lot" UNIX style behavior. And that<br />traditional case is obviously one of the cases we very much don't want<br />to slow down.<br /><br />But a pinned page has _another_ thing that is special about it: the<br />pinning action broke COW.<br /><br />So I think we can simply add a<br /><br />        if (page_mapcount(page) != 1)<br />                return false;<br /><br />to page_maybe_dma_pinned(), and that very naturally protects against<br />the "is the page count perhaps elevated due to a lot of forking?"<br /><br />Because pinning forces the mapcount to 1, and while it is pinned,<br />nothing else should possibly increase it - since the only thing that<br />would increase it is fork, and the whole point is that we won't be<br />doing that "page_dup_rmap()" for this page (which is what increases<br />the mapcount).<br /><br />So we actually already have a very nice flag for "this page isn't<br />duplicated by forking".<br /><br />And if we keep the existing early "ptep_set_wrprotect()", we also know<br />that we cannot be racing with another thread that is pinning at the<br />same time, because the fast-gup code won't be touching a read-only<br />pte.<br /><br />So we'll just have to mark it writable again before we release the<br />page table lock, and we avoid that race too.<br /><br />And honestly, since this is all getting fairly late in the rc, and it<br />took longer than I thought, I think we should do the GFP_ATOMIC<br />approach for now - not great, but since it only triggers for this case<br />that really should never happen anyway, I think it's probably the best<br />thing for 5.9, and we can improve on things later.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
