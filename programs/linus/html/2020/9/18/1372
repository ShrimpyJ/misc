    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/9/17/1230">First message in thread</a></li><li><a href="/lkml/2020/9/18/1296">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/18/1368">Arvind Sankar</a><ul><li><a href="/lkml/2020/9/18/1370">Matthew Wilcox</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 18 Sep 2020 20:04:06 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] percpu fix for v5.9-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 18, 2020 at 7:53 PM Arvind Sankar &lt;nivedita&#64;alum.mit.edu&gt; wrote:<br />&gt;<br />&gt; Is it ever necessary to allocate _at least_ sizeof() even if<br />&gt; offsetof()+size is smaller?<br /><br />Not that I can tell.<br /><br />Obviously all allocators tend to have their own alignment concerns, so<br />they'll all align things up internally anyway.<br /><br />But why would the alignment of the earlier members of the structure<br />have anything to do with the size of it? That's nonsensical outside of<br />the array situation, I feel.<br /><br />Of course, maybe somebody has such a case: an "array of structures,<br />each with the same size of flexible array member". And then you _do_<br />want to align all those entries.<br /><br />But honestly, once you start doing things like that, why would you<br />only have one single structure type, much less just one single size of<br />that flexible array? If you lay out these variably-sized things in<br />memory each after each other, maybe you lay out multiple different<br />_kinds_ of variably sized structures?<br /><br />So there are lots of reasons to want alignment at the end, but why<br />would the alignment be the same as the beginning of that particular<br />type?<br /><br />That said, in the kernel, this probably practically never really<br />matters. Because typically, our allocation alignment tends to be<br />bigger than any individual structure type alignment anyway.<br /><br />So it's probably all moot. The difference between using "sizeof()" and<br />"offsetof()" is in the noise and not important per se.<br /><br />No, the real reason I would advocate using 'offsetof()' is really just<br />that I'd rather have 'sizeof()' cause a warning.<br /><br />&gt; I think you can't do this in standard C. It's a GCC extension.<br />&gt;<br />&gt;         A structure containing a flexible array member, or a union<br />&gt;         containing such a structure (possibly recursively), may not be a<br />&gt;         member of a structure or an element of an array. (However, these<br />&gt;         uses are permitted by GCC as extensions.)<br /><br />Ahh.<br /><br />But I'm pretty sure the 'sizeof()' thing is actually the standard, not gcc.<br /><br />Arrays of those things is odd, and apparently the standard got that<br />right. Good (but I think it also means that allowing sizeof() makes<br />even less sense).<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
