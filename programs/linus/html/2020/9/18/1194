    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/21/1560">First message in thread</a></li><li><a href="/lkml/2020/9/18/938">Jason Gunthorpe</a><ul><li><a href="/lkml/2020/9/18/1152">Peter Xu</a><ul><li><a href="/lkml/2020/9/18/1192">John Hubbard</a><ul><li><a href="/lkml/2020/9/18/1267">Jason Gunthorpe</a><ul><li><a href="/lkml/2020/9/21/268">Jan Kara</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2020/9/18/1280">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/18/1280">Jason Gunthorpe</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 18 Sep 2020 13:59:41 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/4] mm: Trial do_wp_page() simplification</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 18, 2020 at 1:41 PM Peter Xu &lt;peterx&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; What would be the result if we simply use GFP_ATOMIC?  Would there be too many<br />&gt; pages to allocate in bulk for ATOMIC?<br /><br />It's very easy to run out of memory with GFP_ATOMIC, and also cause<br />various nasty issues with networking (ie when you've depleted atomic<br />memory, networking starts losing packets etc).<br /><br />So yeah, this code should not use GFP_ATOMIC, I think it just needs to<br />drop and re-take the paeg table lock.<br /><br />Which is easy enough to do: returning a zero 'entry.val' already does<br />that for other reasons, there's nothing magical about holding the lock<br />here, there's no larger page table lock requirement.<br /><br />The main annoyance is that I think it means that copy_pte_range()<br />would also have to have a special "preallocation page" thing for this<br />case, so that it can drop the lock, do the allocation, and then take<br />the lock again and return 0 (to repeat - now with the preallocation<br />filled).<br /><br />Honestly, if we had a completely *reliable* sign of "this page is<br />pinned", then I think the much nicer option would be to just say<br />"pinned pages will not be copied at all". Kind of an implicit<br />VM_DONTCOPY.<br /><br />(Or we'd do the reverse, and say "pinned pages stay pinned even in the child").<br /><br />But that's not an option when the pinning test is a "maybe". Oh well.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
