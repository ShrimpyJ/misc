    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/21/1560">First message in thread</a></li><li><a href="/lkml/2020/9/17/1179">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/18/878">Peter Xu</a><ul><li class="origin"><a href="/lkml/2020/9/18/1081">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/18/1081">Peter Xu</a></li></ul></li><li><a href="/lkml/2020/9/18/938">Jason Gunthorpe</a><ul><li><a href="/lkml/2020/9/18/1152">Peter Xu</a><ul><li><a href="/lkml/2020/9/18/1192">John Hubbard</a></li><li><a href="/lkml/2020/9/18/1194">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2020/9/21/845">Michal Hocko</a><ul><li><a href="/lkml/2020/9/21/886">Peter Xu</a><ul><li><a href="/lkml/2020/9/21/890">Michal Hocko</a></li></ul></li><li><a href="/lkml/2020/9/21/953">Christian Brauner</a><ul><li><a href="/lkml/2020/9/21/1039">Michal Hocko</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 18 Sep 2020 10:16:19 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/4] mm: Trial do_wp_page() simplification</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Sep 18, 2020 at 9:40 AM Peter Xu &lt;peterx&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Firstly in the draft patch mm-&gt;has_pinned is introduced and it's written to 1<br />&gt; as long as FOLL_GUP is called once.  It's never reset after set.<br /><br />That's fine. That was what I was expecting you to do. It only needs to<br />be cleared at mm creation time (fork/exec), and I see you added that<br />in mm_init() already.<br /><br />Since this only matters for fork(), and is really just a filter for<br />the (very) special behavior, and people who _actually_ do the page<br />pinning won't likely be mixing that with thousands of forks anyway, it<br />really doesn't matter.<br /><br />It's literally just about "I'm a normal process, I've never done any<br />special rdma page pinning, let me fork a lot with no overhead" flag.<br /><br />The only change I'd make is to make it a "int" and put it next to the<br />"int map_count", since that will pack better on 64-bit (assuming you<br />don't do the randomize_layout thing, in which case it's all moot).<br /><br />Even if we were to expand it to an actual page count, I'm not<br />convinced we'd ever want anybody to pin more than 2 billion pages.<br />That's a minimum of 8 TB of RAM. Even if that were physically possibly<br />on some machines, it doesn't seem reasonable.<br /><br />So even if that flag were to ever become an actual count, more than 32<br />bits seems pointless and wrong.<br /><br />And as a flag, it most certainly doesn't need "unsigned long".<br /><br />&gt; One more thing (I think) we need to do is to pass the new vma from<br />&gt; copy_page_range() down into the end because if we want to start cow during<br />&gt; fork() then we need to operate on that new vma too when new page linked to it<br />&gt; rather than the parent's.<br /><br />Ahh. Because you  pass the new vma down to the rmap routines.<br /><br />I actually think it's unnecessary, because all the rmap routines<br />*really* care about is not the vma, but the anonvma associated with<br />it. Which will be the same for the parent and the child.<br /><br />But we'd probably have to change the calling convention for rmap for<br />that to be obvious, so your solution seems ok. Maybe not optimal, but<br />I think we're going for "let's make things as clear as possible"<br />rather than optimal right now.<br /><br />My main worry here is that it makes the calls really ugly, and we<br />generally try to avoid having that many arguments, but it was bad<br />before, and these are generally inlined, so changing it to use a<br />argument structure wouldn't even help code generation.<br /><br />So it's not pretty. But it is what it is.<br /><br />&gt; One issue is when we charge for cgroup we probably can't do that onto the new<br />&gt; mm/task, since copy_namespaces() is called after copy_mm().<br /><br />That cannot possibly matter as far as I can see.<br /><br />Copying the page in between those two calls is already possible since<br />we've already dropped the mmap_lock by the time copy_namespaces() is<br />called. So if the parent was threaded, and another thread did a write<br />access, the parent would have caused that COW that we did early.<br /><br />And any page copying cost should be to the parent anyway, since that<br />is who did the pinning that caused the copy in the first place.<br /><br />So for both of those reasons - the COW can already happen between<br />copy_mm() and copy_namespaces(), *and* charging it to the parent<br />namespace is proper anyway - I think your cgroup worry is not<br />relevant.<br /><br />I'm not even sure anything relevant to accounting is created, but my<br />point is that even if it is, I don't see how it could be an issue.<br /><br />&gt; The other thing is on how to fail.  E.g., when COW failed due to either<br />&gt; charging of cgroup or ENOMEM, ideally we should fail fork() too.  Though that<br />&gt; might need more changes - current patch silently kept the shared page for<br />&gt; simplicity.<br /><br />We already can fail forkind due to memory allocations failing. Again,<br />not an issue. It happens.<br /><br />The only real thing to worry about would be that this doesn't affect<br />normal programs, and that mm flag takes care of that.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
