    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/9/19/103">First message in thread</a></li><li><a href="/lkml/2020/9/20/18">Thomas Gleixner</a><ul><li><a href="/lkml/2020/9/20/34">Thomas Gleixner</a><ul><li class="origin"><a href="/lkml/2020/9/20/224">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/20/224">Thomas Gleixner</a><ul><li><a href="/lkml/2020/9/20/225">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 20 Sep 2020 09:57:40 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch RFC 00/15] mm/highmem: Provide a preemptible variant of kmap_atomic &amp; friends</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 20, 2020 at 1:49 AM Thomas Gleixner &lt;tglx&#64;linutronix.de&gt; wrote:<br />&gt;<br />&gt; Actually most usage sites of kmap atomic do not need page faults to be<br />&gt; disabled at all.<br /><br />Right. I think the pagefault disabling has (almost) nothing at all to<br />do with the kmap() itself - it comes from the "atomic" part, not the<br />"kmap" part.<br /><br />I say *almost*, because there is one issue that needs some thought:<br />the amount of kmap nesting.<br /><br />The kmap_atomic() interface - and your local/temporary/whatever<br />versions of it - depends very much inherently on being strictly<br />nesting. In fact, it depends so much on it that maybe that should be<br />part of the new name?<br /><br />It's very wrong to do<br /><br />    addr1 = kmap_atomic();<br />    addr2 = kmap_atomic();<br />    ..do something with addr 1..<br />    kunmap_atomic(addr1);<br />    .. do something with addr 2..<br />    kunmap_atomic(addr2);<br /><br />because the way we allocate the slots is by using a percpu-atomic<br />inc-return (and we deallocate using dec).<br /><br />So it's fundamentally a stack.<br /><br />And that's perfectly fine for page faults - if they do any kmaps,<br />those will obviously nest.<br /><br />So the only issue with page faults might be that the stack grows<br />_larger_. And that might need some thought. We already make the kmap<br />stack bigger for CONFIG_DEBUG_HIGHMEM, and it's possibly that if we<br />allow page faults we need to make the kmap stack bigger still.<br /><br />Btw, looking at the stack code, Ithink your new implementation of it<br />is a bit scary:<br /><br />   static inline int kmap_atomic_idx_push(void)<br />   {<br />  -       int idx = __this_cpu_inc_return(__kmap_atomic_idx) - 1;<br />  +       int idx = current-&gt;kmap_ctrl.idx++;<br /><br />and now that 'current-&gt;kmap_ctrl.idx' is not atomic wrt<br /><br /> (a) NMI's (this may be ok, maybe we never do kmaps in NMIs, and with<br />nesting I think it's fine anyway - the NMI will undo whatever it did)<br /><br /> (b) the prev/next switch<br /><br />And that (b) part worries me. You do the kmap_switch_temporary() to<br />switch the entries, but you do that *separately* from actually<br />switching 'current' to the new value.<br /><br />So kmap_switch_temporary() looks safe, but I don't think it actually<br />is. Because while it first unmaps the old entries and then remaps the<br />new ones, an interrupt can come in, and at that point it matters what<br />is *CURRENT*.<br /><br />And regardless of whether 'current' is 'prev' or 'next', that<br />kmap_switch_temporary() loop may be doing the wrong thing, depending<br />on which one had the deeper stack. The interrupt will be using<br />whatever "current-&gt;kmap_ctrl.idx" is, but that might overwrite entries<br />that are in the process of being restored (if current is still 'prev',<br />but kmap_switch_temporary() is in the "restore &#64;next's kmaps" pgase),<br />or it might stomp on entries that have been pte_clear()'ed by the<br />'prev' thing.<br /><br />I dunno. The latter may be one of those "it works anyway, it<br />overwrites things we don't care about", but the former will most<br />definitely not work.<br /><br />And it will be completely impossible to debug, because it will depend<br />on an interrupt that uses kmap_local/atomic/whatever() coming in<br />_just_ at the right point in the scheduler, and only when the<br />scheduler has been entered with the right number of kmap entries on<br />the prev/next stack.<br /><br />And no developer will ever see this with any amount of debug code<br />enabled, because it will only hit on legacy platforms that do this<br />kmap anyway.<br /><br />So honestly, that code scares me. I think it's buggy. And even if it<br />"happens to work", it does so for all the wrong reasons, and is very<br />fragile.<br /><br />So I would suggest:<br /><br /> - continue to use an actual per-cpu kmap_atomic_idx<br /><br /> - make the switching code save the old idx, then unmap the old<br />entries one by one (while doing the proper "pop" action), and then map<br />the new entries one by one (while doing the proper "push" action).<br /><br />which would mean that the only index that is actually ever *USED* is<br />the percpu one, and it's always up-to-date and pushed/popped for<br />individual entries, rather than this - imho completely bogus -<br />optimization where you use "p-&gt;kmap_ctrl.idx" directly and very very<br />unsafely.<br /><br />Alternatively, that process counter would need about a hundred lines<br />of commentary about exactly why it's safe. Because I don't think it<br />is.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
