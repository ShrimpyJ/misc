    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/10/21/498">First message in thread</a></li><li><a href="/lkml/2020/10/22/904">Naresh Kamboju</a><ul><li><a href="/lkml/2020/10/22/983">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2020/10/22/991">Linus Torvalds</a><ul><li><a href="/lkml/2020/10/22/991">Linus Torvalds</a></li><li><a href="/lkml/2020/10/22/1020">=?UTF-8?B?RGFuaWVsIETDrWF6?=</a><ul><li><a href="/lkml/2020/10/22/1049">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 22 Oct 2020 17:11:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mmstress[1309]: segfault at 7f3d71a36ee8 ip 00007f3d77132bdf sp 00007f3d71a36ee8 error 4 in libc-2.27.so[7f3d77058000+1aa000]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 22, 2020 at 4:43 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Thanks. Very funky, but thanks. I've been running that commit on my<br />&gt; machine for over half a year, and it still looks "trivially correct"<br />&gt; to me, but let me go look at it one more time. Can't argue with a<br />&gt; reliable bisect and revert..<br /><br />Hmm. The fact that it only happens with KASAN makes me suspect it's<br />some bad interaction with the inline asm syntax change (and explains<br />why I've run with this for half a year without issues).<br /><br />In particular, I wonder if it's that KASAN causes some reload pattern,<br />and the whole<br /><br />     register __typeof__(*(ptr)) __val_pu asm("%"_ASM_AX);<br />..<br />     asm volatile(.. "r" (__val_pu) ..)<br /><br />thing causes problems. That's an ugly pattern, but it's written that<br />way to get gcc to handle the 64-bit case properly (with the value in<br />%rax:%rdx).<br /><br />It turns out that the decode of the user-mode SIGSEGV code is a<br />variation of system calls, ie<br /><br />   0: b8 18 00 00 00        mov    $0x18,%eax<br />   5: 0f 05                syscall<br />   7: 48 3d 01 f0 ff ff    cmp    $0xfffffffffffff001,%rax<br />   d: 73 01                jae    0x10<br />   f:* c3                    retq    &lt;-- trapping instruction<br /><br />or<br /><br />   0: 41 52                push   %r10<br />   2: 52                    push   %rdx<br />   3: 4d 31 d2              xor    %r10,%r10<br />   6: ba 02 00 00 00        mov    $0x2,%edx<br />   b: be 80 00 00 00        mov    $0x80,%esi<br />  10: 39 d0                cmp    %edx,%eax<br />  12: 75 07                jne    0x1b<br />  14: b8 ca 00 00 00        mov    $0xca,%eax<br />  19: 0f 05                syscall<br />  1b: 89 d0                mov    %edx,%eax<br />  1d: 87 07                xchg   %eax,(%rdi)<br />  1f: 85 c0                test   %eax,%eax<br />  21: 75 f1                jne    0x14<br />  23:* 5a                    pop    %rdx &lt;-- trapping instruction<br />  24: 41 5a                pop    %r10<br />  26: c3                    retq<br /><br />so in both cases it looks like 'syscall' returned with a bad stack pointer.<br /><br />Which is certainly a sign of some code generation issue.<br /><br />Very annoying, because it probably means that it's compiler-specific<br />too. And that "syscall 018" looks very odd. I think that's<br />sched_yield() on x86-64, which doesn't have any __put_user() cases at<br />all..<br /><br />Would you mind sending me the problematic vmlinux file in private (or,<br />likely better - a pointer to some place I can download it, it's going<br />to be huge).<br /><br />                      Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
