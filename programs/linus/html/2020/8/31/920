    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/26/1445">First message in thread</a></li><li><a href="/lkml/2020/8/28/288">Jan Kara</a><ul><li><a href="/lkml/2020/8/31/281">Jan Kara</a><ul><li class="origin"><a href="/lkml/2020/11/23/2006">Linus Torvalds</a><ul><li><a href="/lkml/2020/11/23/2006">Hugh Dickins</a><ul><li><a href="/lkml/2020/11/23/2019">Linus Torvalds</a></li><li><a href="/lkml/2020/11/23/2037">Linus Torvalds</a></li><li><a href="/lkml/2020/11/24/562">Matthew Wilcox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 31 Aug 2020 11:21:50 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: kernel BUG at fs/ext4/inode.c:LINE!</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 31, 2020 at 3:03 AM Jan Kara &lt;jack&#64;suse.cz&gt; wrote:<br />&gt;<br />&gt; On Fri 28-08-20 12:07:55, Jan Kara wrote:<br />&gt; &gt;<br />&gt; &gt; Doh, so this is:<br />&gt; &gt;<br />&gt; &gt;                         wait_on_page_writeback(page);<br />&gt; &gt; &gt;&gt;&gt;                     BUG_ON(PageWriteback(page));<br />&gt; &gt;<br />&gt; &gt; in mpage_prepare_extent_to_map(). So we have PageWriteback() page after we<br />&gt; &gt; have called wait_on_page_writeback() on a locked page. Not sure how this<br />&gt; &gt; could ever happen even less how ext4 could cause this...<br />&gt;<br />&gt; I was poking a bit into this and there were actually recent changes into<br />&gt; page bit waiting logic by Linus. Linus, any idea?<br /><br />So the main change is that now if somebody does a wake_up_page(), the<br />page waiter will be released - even if somebody else then set the bit<br />again (or possible if the waker never cleared it!).<br /><br />It used to be that the waiter went back to sleep.<br /><br />Which really shouldn't matter, but if we had any code that did something like<br /><br />        end_page_writeback();<br />        .. something does set_page_writeback() on the page again ..<br /><br />then the old BUG_ON() would likely never have triggered (because the<br />waiter would have seen the writeback bit being set again and gone back<br />to sleep), but now it will.<br /><br />So I would suspect a pre-existing issue that was just hidden by the<br />old behavior and was basically impossible to trigger unless you hit<br />*just* the right timing.<br /><br />And now it's easy to trigger, because the first time somebody clears<br />PG_writeback, the wait_on_page_writeback() will just return *without*<br />re-testing and *without* going back to sleep.<br /><br />Could there be somebody who does set_page_writeback() without holding<br />the page lock?<br /><br />Maybe adding a<br /><br />        WARN_ON_ONCE(!PageLocked(page));<br /><br />at the top of __test_set_page_writeback() might find something?<br /><br />Note that it looks like this problem has been reported on Android<br />before according to that syzbot thing. Ie, this thing:<br /><br />    <a href="https://groups.google.com/g/syzkaller-android-bugs/c/2CfEdQd4EE0/m/xk_GRJEHBQAJ">https://groups.google.com/g/syzkaller-android-bugs/c/2CfEdQd4EE0/m/xk_GRJEHBQAJ</a><br /><br />looks very similar, and predates the wake_up_page() changes.<br /><br />So it was probably just much _harder_ to hit before, and got easier to hit.<br /><br />Hmm. In fact, googling for<br /><br />        mpage_prepare_extent_to_map "kernel BUG"<br /><br />seems to find stuff going back years. Here's a patchwork discussion<br />where you had a debug patch to try to figure it out back in 2016:<br /><br />    <a href="https://patchwork.ozlabs.org/project/linux-ext4/patch/20161122133452.GF3973&#64;quack2.suse.cz/">https://patchwork.ozlabs.org/project/linux-ext4/patch/20161122133452.GF3973&#64;quack2.suse.cz/</a><br /><br />although that one seems to be a different BUG_ON() in the same area.<br /><br />Maybe entirely unrelated, but the fact that this function shows up a<br />fair amount is perhaps a sign of some long-running issue..<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
