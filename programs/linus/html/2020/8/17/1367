    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/3/882">First message in thread</a></li><li><a href="/lkml/2020/8/12/714">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/12/902">Ian Kent</a></li><li><a href="/lkml/2020/8/13/283">Karel Zak</a></li><li><a href="/lkml/2020/8/14/120">Lennart Poettering</a></li><li><a href="/lkml/2020/8/17/649">Steven Whitehouse</a><ul><li class="origin"><a href="/lkml/2020/8/17/2550">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/17/2550">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/18/535">Miklos Szeredi</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Aug 2020 10:15:08 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: file metadata via fs API</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 17, 2020 at 4:33 AM Steven Whitehouse &lt;swhiteho&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; That said, the overall aim here is to solve the problem and if there are<br />&gt; better solutions available then I'm sure that everyone is very open to<br />&gt; those. I agree very much that monitoring at kHz frequencies is not<br />&gt; useful, but at the same time, there are cases which can generate large<br />&gt; amounts of mount changes in a very short time period.<br /><br />So the thing is, I absolutely believe in the kernel _notifying_ about<br />changes so that people don't need to poll. It's why I did merge the<br />notification queues, although I wanted to make sure that those worked.<br /><br />&gt; You recently requested some details of real users for the notifications,<br />&gt; and (I assumed) by extension fsinfo too.<br /><br />No, fsinfo wasn't on the table there. To me, notifications are a<br />completely separate issue, because you *can* get the information from<br />existing sources (ie things like /proc/mounts etc), and notification<br />seemed to be the much more fundamental issue.<br /><br />If you poll for changes, parsing something like /proc/mounts is<br />obviously very heavy indeed. I don't find that particularly<br />controversial. Plus the notification queues had other uses, even if it<br />wasn't clear how many or who would use them.<br /><br />But honestly, the actual fsinfo thing seems (a) overdesigned and (b)<br />broken. I've now had two different people say how they want to use it<br />to figure out whether a filesystem supports certain things that aren't<br />even per-filesystem things in the first place.<br /><br />And this feature is clearly controversial, with actual discussion about it.<br /><br />And I find the whole thing confusing and over-engineered. If this was<br />a better statfs(), that would be one thing. But it is designed to be<br />this monstoer thing that does many different things, and I find it<br />distasteful.  Yes, you can query "extended statfs" kind of data with<br />it and get the per-file attributes. I find it really annoying how the<br />vfs layer calls to the filesystems, that then call back to the vfs<br />layer to fill things in, but I guess we have that nasty pattern from<br />stat() already. I'd rather have the VFS layer just fill in all the<br />default values and the stuff it already knows about, and then maybe<br />have the filesystem callback fill in the ones the vfs *doesn't* know<br />about, but whatever.<br /><br />But then you can *also* query odd things like mounts that aren't even<br />visible, and the topology, and completely random error state.<br /><br />So it has this very complex "random structures of random things"<br />implementation. It's a huge sign of over-design and "I don't know what<br />the hell I want to expose, so I'll make this generic thing that can<br />expose anything, and then I start adding random fields".<br /><br />Some things are per-file, some things are per-mount, and some things<br />are per-namespace and cross mount boundaries.<br /><br />And honestly, the "random binary interfaces" just turns me off a lot.<br /><br />A simple and straightforward struct? Sure. But this random "whatever<br />goes" thing? No.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
