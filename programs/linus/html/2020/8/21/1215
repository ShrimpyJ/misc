    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/17/2466">First message in thread</a></li><li><a href="/lkml/2020/8/20/2240">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/21/1191">Arvind Sankar</a><ul><li class="origin"><a href="/lkml/2020/8/21/1218">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/21/1218">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/21/1328">Arvind Sankar</a></li></ul></li><li><a href="/lkml/2020/8/21/1389">Arvind Sankar</a><ul><li><a href="/lkml/2020/8/21/1417">Peter Zijlstra</a></li><li><a href="/lkml/2020/8/21/1477">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 21 Aug 2020 10:54:57 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/4] -ffreestanding/-fno-builtin-* patches</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 21, 2020 at 10:29 AM Arvind Sankar &lt;nivedita&#64;alum.mit.edu&gt; wrote:<br />&gt;<br />&gt; The no-builtin- options _don't_ disable<br />&gt; __builtin_ functions. They remove the default definition of foo() as<br />&gt; __builtin_foo().<br /><br />Oh, ok, then it's fine.<br /><br />&gt; Take the problem that instigated this thread. __builtin_stpcpy() doesn't<br />&gt; work in the kernel because the fallback, stpcpy(), isn't implemented.<br /><br />Right.<br /><br />The only problem is the - bogus - recognition of (or rewriting of)<br />code patterns that the compiler recohnmizes.<br /><br />__builtin_stpcpy() itself is fine if somebody wants to use it - and<br />has the fallback.<br /><br />But implicitly recognizing some code sequence and turning it into<br />something else is the problem.<br /><br />&gt; This is why I'm saying clang's no-builtin-foo option is useful for<br />&gt; embedded: it doesn't prevent the programmer using __builtin_foo(), it<br />&gt; prevents the _compiler_ using __builtin_foo() on its own.<br /><br />And that's fine. But it's apparently not what gcc does.<br /><br />&gt; &gt; So this is things like the compiler silently seeing "oh, you called<br />&gt; &gt; your function 'free()', so we know that the stores you did to it are<br />&gt; &gt; dead and we'll remove them".<br />&gt; &gt;<br />&gt; &gt; Or this is the compiler doing "Oh, you did four stores of zero in a<br />&gt; &gt; row, and and you asked for size optimizations, so we'll turn those<br />&gt; &gt; into a 'bzero()' call".<br />&gt;<br />&gt; This one is slightly different from the previous one. The first case is<br />&gt; really a call to __builtin_free().<br /><br />No, the first case is a disgrace and a compiler bug.<br /><br />We've had a situation where gcc complained about a static function<br />called "free()", without any header file inclusion, and then<br />complained about it not matching its idea of what "free()" is.<br /><br />Which is pure and utter garbage.<br /><br />It's like you have a local variable "int free", and the compiler says<br />"hey, this doesn't match the prototype that I know this name should<br />have". It's BS. You just saw the user not just *use* that name, but<br />*define* it, and do it in a scope where the complaint is irrelevant<br />and stupid, and when we hadn't even included the header that would<br />have resulted in conflicts.<br /><br />IOW, it's an example of a compiler that thinks "it knows better".<br /><br />It's a broken compiler. And it's an example of the kind of breakage<br />that compilers absolutely shouldn't do.<br /><br />The second example is from clang doesn't something horribly horribly stupid.<br /><br />&gt; This one is turning something that wasn't a function call into<br />&gt; __builtin_bzero(), and I would hope that no-builtin-bzero would stop it<br />&gt; as well. OTOH, the compiler is free to turn it into memset(), just like<br />&gt; it could for structure/array initializers.<br /><br />The whole "the compiler is free to do X" argument is pure BS. Stop<br />repeating that bogus argument.<br /><br />Of COURSE a compiler can do whatever the hell it wants.<br /><br />That doesn't change the fact that certain things are broken beyond<br />words and utterly stupid, and a compiler that does them is a *BAD*<br />compiler.<br /><br />Turning four stores into a memset() is garbage. Just admit it, instead<br />of trying to say that it's allowed.<br /><br />Technically a compiler can decode to simply not compile the kernel at<br />all, because we do things that are outside a lot of standards.<br /><br />So the "technically allowed" is not an argument.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
