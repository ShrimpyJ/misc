    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/11/725">First message in thread</a></li><li><a href="/lkml/2020/8/21/1249">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/21/1323">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2020/8/21/1337">Peter Xu</a><ul><li><a href="/lkml/2020/8/21/1345">Linus Torvalds</a></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2020/8/21/1325/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 21 Aug 2020 12:06:17 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v3] mm/gup: Allow real explicit breaking of COW</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 21, 2020 at 12:05 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Well, the fix is simple, although I don't love the magic PageKsm<br />&gt; semantics that hide it from the page count.<br />&gt;<br />&gt; But since (a) a Ksm page is presumably normally shared (ie things like<br />&gt; all zeroes) and (b) copying should always be safe, just do that.<br /><br />I meant to attach the patch that did that, but didn't. Here is the<br />obvious modified version.<br /><br />             Linus<br />From cd78bb72c7447b05ae30341eed2d07a046d32e5f Mon Sep 17 00:00:00 2001<br />From: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />Date: Tue, 11 Aug 2020 14:23:04 -0700<br />Subject: [PATCH] Trial do_wp_page() simplification<br /><br />How about we just make sure we're the only possible valid user fo the<br />page before we bother to reuse it?<br /><br />Simplify, simplify, simplify.<br /><br />And get rid of the nasty serialization on the page lock at the same time.<br /><br />Signed-off-by: Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt;<br />---<br /> mm/memory.c | 59 +++++++++++++++--------------------------------------<br /> 1 file changed, 17 insertions(+), 42 deletions(-)<br /><br />diff --git a/mm/memory.c b/mm/memory.c<br />index 602f4283122f..cb9006189d22 100644<br />--- a/mm/memory.c<br />+++ b/mm/memory.c<br />&#64;&#64; -2927,50 +2927,25 &#64;&#64; static vm_fault_t do_wp_page(struct vm_fault *vmf)<br /> 	 * not dirty accountable.<br /> 	 */<br /> 	if (PageAnon(vmf-&gt;page)) {<br />-		int total_map_swapcount;<br />-		if (PageKsm(vmf-&gt;page) &amp;&amp; (PageSwapCache(vmf-&gt;page) ||<br />-					   page_count(vmf-&gt;page) != 1))<br />+		struct page *page = vmf-&gt;page;<br />+<br />+		/* PageKsm() doesn't necessarily raise the page refcount */<br />+		if (PageKsm(page) || page_count(page) != 1)<br />+			goto copy;<br />+		if (!trylock_page(page))<br />+			goto copy;<br />+		if (PageKsm(page) || page_mapcount(page) != 1 || page_count(page) != 1) {<br />+			unlock_page(page);<br /> 			goto copy;<br />-		if (!trylock_page(vmf-&gt;page)) {<br />-			get_page(vmf-&gt;page);<br />-			pte_unmap_unlock(vmf-&gt;pte, vmf-&gt;ptl);<br />-			lock_page(vmf-&gt;page);<br />-			vmf-&gt;pte = pte_offset_map_lock(vma-&gt;vm_mm, vmf-&gt;pmd,<br />-					vmf-&gt;address, &amp;vmf-&gt;ptl);<br />-			if (!pte_same(*vmf-&gt;pte, vmf-&gt;orig_pte)) {<br />-				update_mmu_tlb(vma, vmf-&gt;address, vmf-&gt;pte);<br />-				unlock_page(vmf-&gt;page);<br />-				pte_unmap_unlock(vmf-&gt;pte, vmf-&gt;ptl);<br />-				put_page(vmf-&gt;page);<br />-				return 0;<br />-			}<br />-			put_page(vmf-&gt;page);<br />-		}<br />-		if (PageKsm(vmf-&gt;page)) {<br />-			bool reused = reuse_ksm_page(vmf-&gt;page, vmf-&gt;vma,<br />-						     vmf-&gt;address);<br />-			unlock_page(vmf-&gt;page);<br />-			if (!reused)<br />-				goto copy;<br />-			wp_page_reuse(vmf);<br />-			return VM_FAULT_WRITE;<br />-		}<br />-		if (reuse_swap_page(vmf-&gt;page, &amp;total_map_swapcount)) {<br />-			if (total_map_swapcount == 1) {<br />-				/*<br />-				 * The page is all ours. Move it to<br />-				 * our anon_vma so the rmap code will<br />-				 * not search our parent or siblings.<br />-				 * Protected against the rmap code by<br />-				 * the page lock.<br />-				 */<br />-				page_move_anon_rmap(vmf-&gt;page, vma);<br />-			}<br />-			unlock_page(vmf-&gt;page);<br />-			wp_page_reuse(vmf);<br />-			return VM_FAULT_WRITE;<br /> 		}<br />-		unlock_page(vmf-&gt;page);<br />+		/*<br />+		 * Ok, we've got the only map reference, and the only<br />+		 * page count reference, and the page is locked,<br />+		 * it's dark out, and we're wearing sunglasses. Hit it.<br />+		 */<br />+		wp_page_reuse(vmf);<br />+		unlock_page(page);<br />+		return VM_FAULT_WRITE;<br /> 	} else if (unlikely((vma-&gt;vm_flags &amp; (VM_WRITE|VM_SHARED)) ==<br /> 					(VM_WRITE|VM_SHARED))) {<br /> 		return wp_page_shared(vmf);<br />-- <br />2.28.0.218.gc12ef3d349<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
