    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/21/1560">First message in thread</a></li><li><a href="/lkml/2020/8/24/1114">Jan Kara</a><ul><li><a href="/lkml/2020/8/24/1211">Kirill Tkhai</a><ul><li class="origin"><a href="/lkml/2020/9/1/126">Linus Torvalds</a><ul><li><a href="/lkml/2020/9/1/126">Hugh Dickins</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 24 Aug 2020 11:22:03 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 1/4] mm: Trial do_wp_page() simplification</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Aug 24, 2020 at 8:38 AM Kirill Tkhai &lt;ktkhai&#64;virtuozzo.com&gt; wrote:<br />&gt;<br />&gt; Sure, KSM does not increment page counter, when a page becomes PageKsm().<br />&gt; Is patch comment about that? Even if so, I don't understand what this<br />&gt; comment is about. "PageKsm() does not take additional counter" is not<br />&gt; a reason the page can't be reused there.<br /><br />No, the reason is that we don't want to reuse a KSM page, and the<br />page_count() check apparently isn't sufficient in all circumstances.<br /><br />So the comment is there to explain why a plain "page_count()"<br />apparently isn't sufficient.<br /><br />&gt; The reason is that readers<br />&gt; of this page may increase a counter without taking the lock, so<br />&gt; this page_count() == 1 under the lock does not guarantee anything.<br /><br />The intent is to get rid of<br /><br /> (a) all the locking costs. The "lock_page()" we had here used to be<br />very expensive.<br /><br />     It's shown up several times in the page lock problems, and the<br />reason seems to be simply that this is _the_ hottest non-IO path there<br />is, so it's somewhat easy to generate lots of contention on a shared<br />page.<br /><br /> (b) the problems with GUP - because GUP (and some other page sharing<br />cases) don't increase the page_mapping() count, GUP was "invisible" to<br />the re-use code, and as a result the reuse code was a buggy mess.<br /><br /> (c) the complete and pointless complexity of this path, that isn't<br />actually done anywhere else. The GUP issue was the immediate - and<br />currently existing - bug caused by this, but the locking costs are<br />another example.<br /><br />So the page reuse is simply wrong. It's almost certainly also<br />pointless and entirely historical. The _reason_ for trying to reuse<br />the KSM pages was documented not as performance, but simple to match<br />the other (also pointless) complexity of the swap cache reuse.<br /><br />So the intent is to do the "page_count()" test early, to get rid of<br />the locking issues with any shared pages.<br /><br />So the logic is "if this page is marked PageKsm(), or if it has an<br />elevated page count, don't even try - just copy".<br /><br />To make a very concrete example: it's not unusual at all to basically<br />have simultaneous page faults on a dirty page because it's COW-shared<br />in both parent and child. Trivial to trigger, with the child and<br />parent running on different CPU's and just writing to the same page<br />right after a fork. And there is absolutely _zero_ reason that should<br />be serialized by anything at all. The parent and child are complete<br />share-nothing things: taking the page lock was and is simply wrong.<br /><br />Solution: don't do it. Just notice "Oh, this page has other users"<br />(and page_count() is the correct thing to do for that, not<br />page_mappings(), since GUP is also another user), and actively *avoid*<br />any serialization. Just copy the damn thing.<br /><br />I'll take full blame for the historical stupidity. This was a bigger<br />deal back in the days when 4MB of RAM was considered normal. Plus page<br />locking wasn't even an issue back then. In fact, no locking at all was<br />needed back when the "try to reuse" code was originally written.<br />Things were simpler back then.<br /><br />It's just that I'm 100% convinced that that historical legacy is very<br />very wrong these days. That "serialize on page lock if COW fault in<br />parent and child" is just an example of where this is fundamentally<br />wrong. But the whole complexity in the map count logic is just wholly<br />and totally wrong too.<br /><br />I dare anybody to read the swapfile code for "total_map_swapcount" and<br />tell me they understand it fully.<br /><br />So my theory is that this code - that is meant to *improve*<br />performance by sharing pages aggressively after a fork(), because that<br />used to be a primary issue, is now in fact making performance *much<br />worse*, because it's trying to optimize for a case that doesn't even<br />matter any more (does anybody truly believe that swap cache and shared<br />COW pages are a major source of performance?) and it does so at a huge<br />complexity _and_ performance cost.<br /><br />So ripping out the KSM reuse code is just another "this is pointless<br />and wrong" issue. If you seriously try to KSM share a page that now<br />only has _one_ single user left, and that one single user writes to it<br />and is modifying it, then the problem is absolutely *NOT* that we<br />should try to re-use the page. No, the problem is that the KSM code<br />picked a horribly bad page to try to share.<br /><br />Will that happen _occasionally_? Sure. But if it happens once in a<br />blue moon, we really shouldn't have that code to deal with it.<br /><br />It's really that simple. All that reuse code is pointless and wrong.<br />It has historical roots, and it made sense at the time, but in this<br />day and age I'm convinced it's completely wrong.<br /><br />Now, I'm _also_ admittedly convinced that I am occasionally completely<br />wrong, and people do odd things, and maybe there are loads where it<br />really matters. I doubt it in this case, but I think what we should do<br />is rip out all the existing historical code, and _if_ somebody has a<br />case where it matters, we can look at THAT case, and people can show<br /><br /> (a) what the exact pattern is that we actually care about<br /><br /> (b) numbers<br /><br />and then maybe we can re-introduce some sort of re-use code with -<br />hopefully - a much more targeted and documented "this is why this<br />matters" approach.<br /><br />So the intent is to get rid of the page lock thing, but I also hope<br />that long-term, we can get rid of reuse_swap_page() and some of that<br />mapcount stuff entirely.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
