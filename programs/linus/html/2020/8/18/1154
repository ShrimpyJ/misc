    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/3/882">First message in thread</a></li><li><a href="/lkml/2020/8/18/1061">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/18/1143">Miklos Szeredi</a><ul><li class="origin"><a href="/lkml/2020/8/21/584">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/21/584">Miklos Szeredi</a></li></ul></li></ul></li><li><a href="/lkml/2020/8/18/1299">Al Viro</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Aug 2020 13:53:11 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: file metadata via fs API</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 18, 2020 at 1:18 PM Miklos Szeredi &lt;miklos&#64;szeredi.hu&gt; wrote:<br />&gt;<br />&gt; So why mix a binary structure into it?  Would it not make more sense<br />&gt; to make it text only?<br /><br />.. because for basic and standard stuff, the binary structure just<br />makes sense and is easier for everybody.<br /><br />When I want to get the size of a file, I do "stat()" on it, and get<br />the size from st.st_size. That's convenient, and there's no reason<br />_not_ to do it. Returning the size as an ASCII string would be<br />completely pointless and annoying as hell.<br /><br />So binary formats have their places. But those places are for standard<br />and well-understood fields that are commonly accessed and do not have<br />any free-form or wild components to them that needs to be marshalled<br />into some binary format.<br /><br />Whenever you have free-form data, just use ASCII.<br /><br />It's what "mount" already uses, for chrissake. We pass in mount<br />options as ASCII for a good reason.<br /><br />Basically, I think a rough rule of thumb can and should be:<br /><br /> - stuff that the VFS knows about natively and fully is clearly pretty<br />mount-agnostic and generic, and can be represented in whatever<br />extended "struct statfs_x" directly.<br /><br /> - anything that is variable-format and per-fs should be expressed in<br />the ASCII buffer<br /><br />Look at our fancy new fs_context - that's pretty much what it does<br />even inside the kernel. Sure, we have "binary" fields there for core<br />basic information ("struct dentry *root", but also things like flags<br />with MNT_NOSUID), but the configuration stuff is ASCII that the<br />filesystem can parse itself.<br /><br />Exactly because some things are very much specific to some<br />filesystems, not generic things.<br /><br />So we fundamentally already have a mix of "standard FS data" and<br />"filesystem-specific options", and it's already basically split that<br />way: binary flag fields for the generic stuff, and ASCII text for the<br />odd options.<br /><br />Again: binary data isn't wrong when it's a fixed structure that didn't<br />need some odd massaging or marshalling or parsing. Just a simple fixed<br />structure. That is _the_ most common kernel interface, used for almost<br />everything.  Sometimes we have arrays of them, but most of the time<br />it's a single struct pointer.<br /><br />But binary data very much is wrong the moment you think you need to<br />have a parser to read it, or a marshaller to write it. Just use ASCII.<br /><br />I really would prefer for the free-form data to have a lot of<br />commonalities with the /proc/mounts line. Not because that's a<br />wonderful format, but because there are very very few truly wonderful<br />formats out there, and in the absense of "wonderful", I'd much prefer<br />"familiar" and "able to use common helpers" (hopefully both on the<br />kernel side and the user side)..<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
