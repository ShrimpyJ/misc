    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/18/1227">First message in thread</a></li><li><a href="/lkml/2020/8/18/1242">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/18/1319">Arvind Sankar</a><ul><li class="origin"><a href="/lkml/2020/8/19/644">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/19/644">Arvind Sankar</a></li><li><a href="/lkml/2020/8/19/734">Arvind Sankar</a><ul><li><a href="/lkml/2020/8/19/1034">Nick Desaulniers</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Aug 2020 20:32:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] lib/string.c: Disable tree-loop-distribute-patterns</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 18, 2020 at 8:04 PM Arvind Sankar &lt;nivedita&#64;alum.mit.edu&gt; wrote:<br />&gt;<br />&gt; On Tue, Aug 18, 2020 at 05:44:03PM -0700, Linus Torvalds wrote:<br />&gt; &gt; Using -fno-tree-loop-distribute-patterns seems to really be a bit too<br />&gt; &gt; incestuous with internal compiler knowledge.<br />&gt;<br />&gt; Fair enough -- you ok with just the -ffreestanding? That's what protects<br />&gt; the memset in arch/x86/boot/compressed/string.c.<br /><br />Yeah, I think -ffreestanding makes sense. It may not be optimal, but<br />it doesn't smell wrong to me.<br /><br />&gt; &gt; Looking at the implementation of "strscpy()" in the same file, and<br />&gt; &gt; then comparing that to the ludicrously simplisting "memcpy()", I<br />&gt; &gt; really get the feeling that that memcpy() is not worth having.<br />&gt;<br />&gt; I don't think anything actually uses the generic memcpy, and I think<br />&gt; only c6x uses the generic memset.<br /><br />I do think maybe we should just remove the generic memcpy and memset<br />and say "hey people, you really do need to implement your own".<br /><br />Even if you don't have this "recognize and recurse" issue, you end up<br />having other issues like just tracing etc. Yeah, we've hopefully<br />turned everything like that off, but considering that no major<br />architecture uses this, I wonder how many small details we've missed<br />with ftrace recursion etc?<br /><br />&gt; Might be worth optimizing strnlen etc with the word-at-a-time thing though.<br /><br />Yeah, possibly. Except the kernel almost never uses strnlen for<br />anything bigger. At least I haven't seen it very much in the profiles.<br /><br />The "strncpy_from_user()" stuff shows up like a sore thumb on some<br />loads (lots and lots of strings from user space for pathnames and<br />execve), but the kernel itself tends to seldom deal a lot with any<br />longer strings.  Stuff like device names etc, I  guess, but any time I<br />see string handling in profiles, it tends to be in user space (GNU<br />make spends all of its time in string handling, it sometimes seems).<br /><br />Of course, that may be just me looking at very particular profiles, so<br />maybe I've just not seen the loads where the kernel strnlen matters.<br /><br />memcpy and memset? Those matter. A lot.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
