    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/5/27/766">First message in thread</a></li><li><a href="/lkml/2020/8/22/313">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/22/325">Arvind Sankar</a><ul><li class="origin"><a href="/lkml/2020/8/22/339">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/22/339">Arvind Sankar</a><ul><li><a href="/lkml/2020/8/23/209">Arvind Sankar</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 22 Aug 2020 17:10:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: work around clang IAS bug referencing __force_order</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 22, 2020 at 4:11 PM Arvind Sankar &lt;nivedita&#64;alum.mit.edu&gt; wrote:<br />&gt;<br />&gt; Actually, is a memory clobber required for correctness? Memory accesses<br />&gt; probably shouldn't be reordered across a CRn write. Is asm volatile<br />&gt; enough to stop that or do you need a memory clobber?<br /><br />You do need a memory clobber if you really care about ordering wrt<br />normal memory references.<br /><br />That said, I'm not convinced we do care here. Normal memory accesses<br />(as seen by the compiler) should be entirely immune to any changes we<br />do wrt CRx registers.<br /><br />Because code that really fundamentally changes kernel mappings or<br />access rules is already written in low-level assembler (eg the entry<br />routines or bootup).<br /><br />Anything that relies on the more subtle changes (ie user space<br />accesses etc) should already be ordered by other things - usually by<br />the fact that they are also "asm volatile".<br /><br />But hey, maybe somebody can come up with an exception to that.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
