    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/12/884">First message in thread</a></li><li><a href="/lkml/2020/8/14/725">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/14/756">Hugh Dickins</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 14 Aug 2020 17:59:04 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] dma-debug: fix debug_dma_assert_idle(), use rcu_read_lock()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 14, 2020 at 5:26 PM Hugh Dickins &lt;hughd&#64;google.com&gt; wrote:<br />&gt;<br />&gt; We used to rely on page count there, and on trylock_page() only; but<br />&gt; there was at least one user whose app went wrong when occasionally we<br />&gt; COWed the page, just because something else momentarily took a reference<br />&gt; to it, or locked it.  Around 2006, bug report from 2004: I did look up<br />&gt; the history a week ago, but was interrupted before taking notes.<br /><br />I actually think you may be talking about the exact problem that that<br />debug patch from Dan was originally created for:<br /><br />  0abdd7a81b7e dma-debug: introduce debug_dma_assert_idle()<br />  77873803363c net_dma: mark broken<br /><br />and your memory sounds exactly like that net_dma case (and the timing<br />matches roughly too - the NET_DMA code was merged in 2006, but I think<br />people had been playing trial games with it before that).<br /><br />IOW, net_dma was horribly broken, and just couldn't deal with COW<br />because it did things wrong.<br /><br />The thing is, doing extra COW's really shouldn't matter in _any_<br />half-way correct situation. There's a few cases:<br /><br /> - user space writing to it, so we COW.<br /><br />   This is the "simple" case that is obvious and we've always done the<br />same thing. User space will get the new copy, and there's no possible<br />situation when that can be wrong.<br /><br /> - get_user_pages() for reading.<br /><br />   This is the one we actually used to get wrong, and when another<br />user *didn't* cow, the data that was read might not match what the<br />original get_uiser_pages() case expected.<br /><br />    But in this case, the bug only happened when we didn't cow<br />aggressively enough.<br /><br /> - get_user_pages() for writing<br /><br />   This is another 'simple" case, because it does the COW at<br />get_user_pages() time and gets it's own copy (which is also installed<br />in the thread that does the GUP, of course, so a subsequent fork an<br />danother write can obviously cause *further* COW action).<br /><br />But in no case should an extra COW matter. Except if somebody uses<br />get_user_pages() to write to the page, and the COW "hides" that write<br />by giving a new copy to whoever expected to see it, but that's exactly<br />the case that Dan's patch was supposed to notice.<br /><br />And since it never triggered outside of that invalid net_dma case, I<br />don't think any other case really ever existed.<br /><br />Yes, I can well imagine that some people loved the concept of that TCP<br />receive copy offload, but it really was broken, and was removed<br />entirely by Dan in commit 7bced397510a ("net_dma: simple removal") a<br />year after being marked broken (the author date makes it look like<br />it's just a couple of weeks after being marked broken, but the commit<br />date for that removal is September 2014).<br /><br />So I don't think that the trylock and checking page counts is a<br />correctness issue.<br /><br />It had better not be, because anybody that writes to a shared-cow page<br /> without breaking COW is simply broken.<br /><br />No, I really think that the real worry about doing more aggressive<br />copying is that it doesn't steal back the KSM page or the swap cache<br />page, so it will leave those pages around, and while they should then<br />be really easy for the VM to reclaim, I really worry that we have a<br />couple of decades of VM reclaim tuning with that swap cache reuse<br />behavior (KSM, not so much).<br /><br />And while it works fine on my machine, I currently have 40GB or RAM<br />free, because honestly, the stuff I do doesn't need all that much<br />memory, and I ridiculously overspecced my new machine RAM'wise. So<br />nothing I will do would show any problems.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
