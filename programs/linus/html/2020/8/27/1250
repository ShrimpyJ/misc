    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/27/4">First message in thread</a></li><li><a href="/lkml/2020/8/27/1162">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/27/1211">Kees Cook</a><ul><li class="origin"><a href="/lkml/2020/8/27/1295">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/27/1295">Kees Cook</a></li></ul></li></ul></li><li><a href="/lkml/2020/8/27/1261">Arnd Bergmann</a><ul><li><a href="/lkml/2020/8/27/1298">Kees Cook</a></li><li><a href="/lkml/2020/8/27/1367">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 27 Aug 2020 12:02:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: lib/crypto/chacha.c:65:1: warning: the frame size of 1604 bytes is larger than 1024 bytes</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 27, 2020 at 11:42 AM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; Do you mean you checked both gcc and clang and it was only a problem with gcc?<br /><br />I didn't check with clang, but Arnd claimed it was fine.<br /><br />&gt; (If so, I can tweak the "depends" below...)<br /><br />Ugh.<br /><br />Instead of making the Makefile even uglier, why don't you just make<br />this all be done in the Kconfig.<br /><br />Also, I'm not seeing the point of your patch. You didn't actually<br />change anything, you just made a new config variable with the same<br />semantics as the old one.<br /><br />Add a<br /><br />        depends on CLANG<br /><br />or something, with a comment saying that it doesn't work on gcc due to<br />excessive stack use.<br /><br />&gt; +ifdef CONFIG_UBSAN_OBJECT_SIZE<br />&gt; +      CFLAGS_UBSAN += $(call cc-option, -fsanitize=object-size)<br />&gt; +endif<br /><br />All of this should be thrown out, and this code should use the proper<br />patterns for configuration entries in the Makefile, ie just<br /><br />  ubsan-cflags-$(CONFIG_UBSAN_OBJECT_SIZE) += -fsanitize=object-size<br /><br />and the Kconfig file is the thing that should check if that CC option<br />exists with<br /><br />  config UBSAN_OBJECT_SIZE<br />        bool "Check for accesses beyond known object sizes"<br />        default UBSAN<br />        depends on CLANG  # gcc makes a mess of it<br />        depends on $(cc-option,-fsanitize-coverage=trace-pc)<br /><br />and the same goes for all the other cases too:<br /><br />&gt;  ifdef CONFIG_UBSAN_MISC<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=shift)<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=integer-divide-by-zero)<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=unreachable)<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=signed-integer-overflow)<br />&gt; -      CFLAGS_UBSAN += $(call cc-option, -fsanitize=object-size)<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=bool)<br />&gt;        CFLAGS_UBSAN += $(call cc-option, -fsanitize=enum)<br />&gt;  endif<br /><br />and if you don't want to ask for them (which is a good idea), you keep that<br /><br />    config UBSAN_MISC<br />        bool "Misc UBSAN.."<br /><br />thing, and just make all of the above have the pattern of<br /><br />    config UBSAN_OBJECT_SIZE<br />        def_bool UBSAN_MISC<br />        depends on CLANG  # gcc makes a mess of it<br />        depends on $(cc-option,-fsanitize-coverage=trace-pc)<br /><br />which makes the Makefile much cleaner, and makes all our choices very<br />visible in the config file when they then get passed around.<br /><br />We should basically strive for our Makefiles to have as little "ifdef"<br />etc magic as possible. We did the config work already, the Makefiles<br />should primarily just have those<br /><br />   XYZ-$(CONFIG_OPTION) += abc<br /><br />kind of lines (and then  you often end up having<br /><br />  CFLAGS_UBSAN := $(ubsan-cflags-y)<br /><br />at the end).<br /><br />Doesn't that all look much cleaner?<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
