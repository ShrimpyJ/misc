    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/26/1415">First message in thread</a></li><li><a href="/lkml/2020/8/27/1215">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/27/1279">Kees Cook</a><ul><li class="origin"><a href="/lkml/2020/8/27/1426">Linus Torvalds</a><ul><li><a href="/lkml/2020/8/27/1426">Al Viro</a><ul><li><a href="/lkml/2020/8/27/1449">Kees Cook</a></li></ul></li><li><a href="/lkml/2020/8/28/79">Allen</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 27 Aug 2020 13:46:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] linux/kernel.h: add container_from()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 27, 2020 at 12:28 PM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; The common raw pattern for callbacks is:<br />&gt;<br />&gt; void callback(struct callback_handle *inner)<br />&gt; {<br />&gt;         struct outer *instance;<br />&gt;         ...<br />&gt;         instance = container_of(inner, struct outer, member_name_of_inner);<br />&gt;<br />&gt; There's so much redundancy here.<br /><br />What?<br /><br />It's not all that complicated or even particularly redundant. The main<br />redundancy comes from you splitting up the declaration from the<br />initialization - which is certainly fine, and often a good idea, but<br />it does mean that you mention "struct outer" and "instance" twice.<br /><br />I don't see that kind of redundancy being a _problem_, though. "So<br />much redundancy" is just over-stating the issue completely.<br /><br />In fact, we often encourage people to split declaration from<br />initialization exactly because it results in simpler expressions and<br />more legible code, even if that name is now redundant. So it's a small<br />extra typing of the type. Big deal.<br /><br />The above is also a common pattern that once you know how<br />container_of() works, it's very legible.<br /><br />Sure, if you're new to the kernel, and haven't seen "container_of()"<br />in other projects, it might initially be a bit of an odd pattern, but<br />that's the advantage of having one single standardized model: it<br />becomes a pattern, and you don't have to think about it.<br /><br />And particularly with that argument-type pattern, you really have to<br />work at making over-long lines, since the indentation level will by<br />definition be just one.<br /><br />Looking around, I do see a lot of people doing line-breaks, but that<br />tends to be when they insist on putting the variable initialization in<br />the declaration. And even then, it often seems pointless (eg<br /><br />        struct idp_led *led = container_of(cdev,<br />                        struct idp_led, cdev);<br /><br />was split for no good reason I can see, but it seems to be a pattern<br />in that file).<br /><br />You really have to pick some pretty excessive type names (or variable<br />names) to get close to 80 characters. Again, to pick an example:<br /><br />        struct timer_group_priv *priv = container_of(handle,<br />                        struct timer_group_priv, timer[handle-&gt;num]);<br /><br />ends up being long even if you were to split it, but that funky<br />container_from() wouldn't have helped the real problem - the fact that<br />the above is complex and nasty.<br /><br />And I had to _search_ for that example. All the normal cases of<br />split-line container-of's were due to doing it with the declaration,<br />or beause the first argument ended up being an expression in itself<br />and the nested expressions made it more complex.<br /><br />And in the above example, the real complexity - and the reason the<br />line ends up long - is because the "member" isn't a member. The above<br />case works - and it's in fact *intended* to work, I'm not claiming<br />it's some mis-use of the macro.  But it's really a rather complex<br />case, where it would probably have been a good idea to add a comment<br />about how this really depends on handle-&gt;num being set correctly.<br /><br />And in fact, it would probably have been a *perfect* example of where<br />a helper function really would have improved the code, not so much<br />from a line length perspective, but exactly because the above is a<br />much more complicated case than most container_of() cases are.<br /><br />So a helper function like the kvm one I quoted would have been a good<br />idea. In ways that "container_from()" would not have been, since it<br />doesn't actually even address the source of complexity.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
