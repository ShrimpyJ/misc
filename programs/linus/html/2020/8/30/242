    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2020/8/24/985">First message in thread</a></li><li><a href="/lkml/2020/8/26/1227">Sean Christopherson</a><ul><li><a href="/lkml/2020/8/30/211">Andy Lutomirski</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 30 Aug 2020 11:37:34 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: TDX #VE in SYSCALL gap (was: [RFD] x86: Curing the exception and syscall trainwreck in hardware)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Aug 30, 2020 at 8:37 AM Andy Lutomirski &lt;luto&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; There's no such thing as "just" using an IST.  Using IST opens a huge<br />&gt; can of works due to its recursion issues.<br /><br />I absolutely despise all the x86 "indirect system structures". They<br />are horrible garbage. IST is only yet another example of that kind of<br />brokenness, and annoys me particularly because it (and swapgs) were<br />actually making x86 _worse_.<br /><br />The old i386 exception model was actually better than what x86-64 did,<br />and IST is a big part of the problem. Just have a supervisor stack,<br />and push the state on it. Stop playing games with multiple stacks<br />depending on some magical indirect system state.<br /><br />Other examples of stupid and bad indirection:<br /><br /> - the GDT and LDT.<br /><br />   The kernel should never have to use them. It would be much better<br />if the segment "shadow" state would stop being shadow state, and be<br />the REAL state that the kernel (and user space, for that matter)<br />accesses.<br /><br />   Yeah, we got halfway there with MSR_FS/GS_BASE, but what a complete<br />garbage crock that was. So now we're forced to use the selector *and*<br />the base reghister, and they may be out of sync with each other, so<br />you have the worst of both worlds.<br /><br />   Keep the GDT and LDT around for compatibility reasons, so that old<br />broken programs that want to load the segment state the oldfashioned<br />way can do so. But make it clear that that is purely for legacy, and<br />make the modern code just save and restore the actual true<br />non-indirect segment state.<br /><br />   For new models, give us a way to load base/limit/permissions<br />directly, and reset them on kernel entry. No more descriptor table<br />indirection games.<br /><br /> - the IDT and the TSS segment.<br /><br />   Exact same arguments as above. Keep them around for legacy<br />programs, but let us just set "this is the entrypoint, this the the<br />kernel stack" as registers. Christ, we're probably better off with one<br />single entry-point for the whole kernel (ok, give us a separate one<br />for NMI/MCE/doublefault, since they are _so_ special, and maybe<br />separate "CPU exceptions" from "external interrupts), together with<br />just a register that says what the exception was.<br /><br /> - swapgs needs to die.<br /><br />   The kernel GS/FS segments should just be separate segment registers<br />from user space. No "swapping" needed. In CPL0, "gs" just means<br />something different from user space. No save/restore code for it, no<br />swapping, no nothing.<br /><br />Honestly, I think %rsp/%rip could work like that too. Just make "rsp"<br />and "rip" be a completely different register in kernel mode - rename<br />it in the front-end of the CPU or whatever.<br /><br />Imagine not having to save/restore rsp/rip on kernel entry/exit at<br />all, because returning to user more just implicitly starts using<br />ursp/urip. And a context switch uses (fast) MSR's to save/restore the<br />user state (or, since it's actually a real register in the register<br />file, just a new "mov" instruction to access the user registers).<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
