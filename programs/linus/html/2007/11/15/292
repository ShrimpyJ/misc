    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/11/15/278">First message in thread</a></li><li><a href="/lkml/2007/11/15/278">Ulrich Drepper</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Nov 2007 09:02:02 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/4] x86&amp;x86-64 support for sys_indirect</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />[ Ingo, Thomas - see the whole series on linux-kernel ]<br /><br />On Thu, 15 Nov 2007, Ulrich Drepper wrote:<br />&gt;<br />&gt; This part adds support for sys_indirect on x86 and x86-64.<br /><br />The thing is, not all system calls can do this.<br /><br />Some system calls are magic, and don't just take the arguments in <br />registers: they also care about the actual stack pointer and the whole <br />pt_regs struct when returning to user mode. <br /><br />So this does need more infrastructure: some way of marking which system <br />calls cannot be executed indirectly.<br /><br />The magic system calls are things like:<br /><br /> - sys_iopl() - this one changes the eflags value restored on iret<br /> - execve/clone/vfork() - need direct access to pt_regs<br /> - vm86() - does magic with the stack, cares about pt_regs<br /> - sigreturn - magic pt_regs accesses again<br /><br />and there may be others I have forgotten about.<br /><br />Calling these system calls from C code will just corrupt the kernel stack, <br />and is a big big no-no.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
