    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/11/13/17">First message in thread</a></li><li><a href="/lkml/2007/11/15/7">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/15/210">Bron Gondwana</a><ul><li class="origin"><a href="/lkml/2007/11/15/362">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/15/362">Peter Zijlstra</a><ul><li><a href="/lkml/2007/11/15/386">Peter Zijlstra</a></li></ul></li><li><a href="/lkml/2007/11/21/270">Bron Gondwana</a><ul><li><a href="/lkml/2007/11/21/297">Bron Gondwana</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/11/15/274/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Nov 2007 08:32:22 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: mmap dirty limits on 32 bit kernels (Was: [BUG] New Kernel Bugs)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Nov 2007, Bron Gondwana wrote:<br />&gt; <br />&gt; I guess we'll be doing the one-liner kernel mod and testing<br />&gt; that then.<br /><br />The thing to look at is "get_dirty_limits()" in mm/page-writeback.c, and <br />in this particular case it's the<br /><br />	unsigned long available_memory = determine_dirtyable_memory();<br /><br />that's going to bite you. In particular, note the<br /><br />	x -= highmem_dirtyable_memory(x);<br /><br />that we do in determine_dirtyable_memory().<br /><br />So in this case, if you basically remove that line, it will allow all of <br />memory to be dirtied (including highmem), and then the background_ratio <br />will work on the whole 6GB.<br /><br />HOWEVER! It's worth noting that we also have some other old legacy cruft <br />there that may interfere with your code. In particular, if you look at the <br />top of "get_dirty_limits()", it *also* does a<br /><br />        unmapped_ratio = 100 - ((global_page_state(NR_FILE_MAPPED) +<br />                                global_page_state(NR_ANON_PAGES)) * 100) /<br />                                        available_memory;<br /><br />        dirty_ratio = vm_dirty_ratio;<br />        if (dirty_ratio &gt; unmapped_ratio / 2)<br />                dirty_ratio = unmapped_ratio / 2;<br /><br />and that whole "unmapped_ratio" comparison is probably bogus these days, <br />since we now take the mapped dirty pages into account. That code harks <br />back to the days before we did that, and dirty ratios only affected <br />non-mapped pages.<br /><br />And in particular, now that I look at it, I wonder if it can even go <br />negative (because "available_memory" may be *smaller* than the <br />NR_FILE_MAPPED|ANON_PAGES sum!).<br /><br />We'll fix up a negative value anyway (because of the clamping of <br />dirty_ratio to no less than 5), but the point is that the whole <br />"unmapped_ratio" thing probably doesn't make sense any more, and may well <br />make the dirty_ratio not work for you, because you may have a very small <br />unmapped_ratio that effectively makes all dirty limits always clamp to a <br />very small value.<br /><br />So regardless, I think you may want to try the appended patch *first*.<br /><br />If this patch makes a difference, please holler. I think it's the correct <br />thing to do, but I'm not going to actually commit it without somebody <br />saying that it makes a difference (and preferably Peter Zijlstra and <br />Andrew acking it too).<br /><br />Only *after* testing this change is it probably a good idea to test the <br />real hack of then removing the highmem_dirtyable_memory() thing. <br /><br />Peter? Andrew?<br /><br />		Linus<br /><br />---<br /> mm/page-writeback.c |    8 --------<br /> 1 files changed, 0 insertions(+), 8 deletions(-)<br /><br />diff --git a/mm/page-writeback.c b/mm/page-writeback.c<br />index 81a91e6..d55cfca 100644<br />--- a/mm/page-writeback.c<br />+++ b/mm/page-writeback.c<br />&#64;&#64; -297,20 +297,12 &#64;&#64; get_dirty_limits(long *pbackground, long *pdirty, long *pbdi_dirty,<br /> {<br /> 	int background_ratio;		/* Percentages */<br /> 	int dirty_ratio;<br />-	int unmapped_ratio;<br /> 	long background;<br /> 	long dirty;<br /> 	unsigned long available_memory = determine_dirtyable_memory();<br /> 	struct task_struct *tsk;<br /> <br />-	unmapped_ratio = 100 - ((global_page_state(NR_FILE_MAPPED) +<br />-				global_page_state(NR_ANON_PAGES)) * 100) /<br />-					available_memory;<br />-<br /> 	dirty_ratio = vm_dirty_ratio;<br />-	if (dirty_ratio &gt; unmapped_ratio / 2)<br />-		dirty_ratio = unmapped_ratio / 2;<br />-<br /> 	if (dirty_ratio &lt; 5)<br /> 		dirty_ratio = 5;<br /> <br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
