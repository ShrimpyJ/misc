    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/11/20/51">First message in thread</a></li><li><a href="/lkml/2007/11/26/178">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/26/183">Ingo Molnar</a><ul><li><a href="/lkml/2007/11/26/192">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/26/203">Davide Libenzi</a></li></ul></li></ul></li><li><a href="/lkml/2007/11/26/196">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/26/294">Ulrich Drepper</a><ul><li><a href="/lkml/2007/11/26/319">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/26/328">Ulrich Drepper</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2007/11/26/353">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/26/353">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 26 Nov 2007 18:14:40 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCHv4 5/6] Allow setting O_NONBLOCK flag for new sockets</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 26 Nov 2007, H. Peter Anvin wrote:<br />&gt; <br />&gt; I'm presuming you're not talking about some sort of syslets/fibrils/threadlets<br />&gt; here (executing an interpreted thread of execution in kernel space).  That's a<br />&gt; whole separate ball of wax.<br /><br />Indeed. <br /><br />I'm hoping that just dies. It's too complex. But the "do this single <br />system call asynchronously" isn't, and has lots of historical <br />implementations, ranging from VMS to the braindead POSIX "aio" setup.<br /><br />I do think that more complex threadlets could be useful in theory, I just <br />doubt they'd be used in practice..<br /><br />&gt; &gt; So the choice is basically one of:<br />&gt; &gt; <br />&gt; &gt;  - come up with a totally new interface to system calls, and effectively<br />&gt; &gt; duplicating the whole system call table.<br />&gt; &gt; <br />&gt; &gt;    I'd hate to do this. We already have duplicated system call tables due<br />&gt; &gt; to compat stuff, it's painful.<br />&gt; <br />&gt; This would be the right thing to do if we were to redesign the system call<br />&gt; interface from the ground up, which it doesn't exactly sound like we are<br />&gt; intending.<br /><br />Yeah. I'm also not sure it's the right thing even if we did redesign from <br />scratch.<br /><br />The current system call interface may look less than regular, but it has <br />some very solid foundation: it's fast. Passing arguments in registers is <br />by definition a lot faster *and*safer* than passing them any other way. <br />There are no subtle security issues with people playing games with the <br />argument base pointer (ie usually the stack pointer) and trying to fool <br />the kernel into accessing kernel memory etc.<br /><br />Immediately when you do anything but registers, it is much *much* more <br />costly. The "get_user()" and "copy_from_user()" stuff is not exactly slow, <br />but it's quite noticeable overhead for simple system calls. It gets worse <br />if this all is described by some indirect table setup.<br /><br />In the system call path, right now, for some system calls, the biggest two <br />overheads are<br /><br /> - the CPU system call overhead itself. We can't do much about this, but <br />   the CPU designers do seem to be slowly getting it fixed (ie it's slower <br />   than it should need to be, but it's a hell of a lot faster than a P4 <br />   used to be ;)<br /><br /> - the cost of just the single indirect - and unpredictable - call.<br /><br />(The second cost is actually often totally hidden in the trivial system <br />call benchmarks people run: if the benchmark just does "getppid()" a <br />million times in a tight loop, the indirect call on the system call number <br />seems really quite fast, but outside of benchmarks it is generally totally <br />unpredictable indeed, and a real cost for real-life system call usage).<br /><br />Everything else in the system call path is generally as fast as we can <br />make it. Doing more indirection and conditionals would be really quite <br />nasty.<br /><br />Of course, for *most* of system calls, the work the kernel actually does <br />ends up being so big that it doesn't much matter, but I was literally <br />chasing down why a page fault had slowed down by ~70 cycles two weeks ago. <br />And it doesn't take more than a couple of unpredictable jumps to do things <br />like that!<br /><br />&gt; The 6-word limit is a red herring.  There is at least two ways to deal with it<br />&gt; (and this doesn't mean wiping the legacy stuff we already have):<br />&gt; <br />&gt; - Let each architecture pick a calling convention and redefine the<br />&gt; architecture-independent bits to take an arbitrary number of arguments.  This<br />&gt; is a one-time panarchitectural change.<br /><br />Not applicable on x86-32.<br /><br />The six-word limit is effectively a hardware limit there. Once it goes <br />past that limit, one of the words needs to be a pointer to extended <br />information that is fundamentally slower to access. Happily, only very <br />rare system calls do that (and none of them are of the simple variety <br />where we see a few cycles easily).<br /><br />On other architectures, we could more easily just use more registers. But <br />x86-32 is still a big part (bulk) of what matters for most people.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
