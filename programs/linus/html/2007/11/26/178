    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/11/20/51">First message in thread</a></li><li><a href="/lkml/2007/11/20/236">Ulrich Drepper</a><ul><li><a href="/lkml/2007/11/20/285">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/20/290">Zach Brown</a><ul><li><a href="/lkml/2007/11/20/337">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/20/460">Ingo Molnar</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2007/11/26/183">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/26/183">Ingo Molnar</a><ul><li><a href="/lkml/2007/11/26/192">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2007/11/26/196">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/26/294">Ulrich Drepper</a></li><li><a href="/lkml/2007/11/26/349">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/11/20/437">David Miller</a><ul><li><a href="/lkml/2007/11/20/443">Zach Brown</a><ul><li><a href="/lkml/2007/11/20/467">David Miller</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 26 Nov 2007 10:17:58 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCHv4 5/6] Allow setting O_NONBLOCK flag for new sockets</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 20 Nov 2007, H. Peter Anvin wrote:<br />&gt; <br />&gt; If the whole thing about "a dozen new [system calls]" then a dozen system<br />&gt; calls added to the existing tables are better than this mess.<br /><br />No it's not.<br /><br />The point about the indirect calls is that we can do it for other things <br />than just a dozen random things that wants this one flag.<br /><br />We'll eventually want AIO calls for filename lookup etc, for example. <br />That's another dozen calls (stat, lstat, open, etc). Having an indirect <br />call interface to do these kinds of things would be wonderful, instead of <br />having to add new system calls every time some issue with a flag that <br />changes behaviour for an already existing system call comes up.<br /><br />THAT is why I'd much rather have indirect system calls. <br /><br />The actual calling convention details are open for debate, of course. We <br />could encode the information in the system call number itself, for example <br />(eg have a bit there that says "extended information"). But we'll never <br />get away from the fact that we have the odd architecture-specific system <br />call interfaces with things like "pselect()" having pointers etc, if only <br />because of legacy issues.<br /><br />So we can *never* have a truly "generic" argument marshalling setup. We'll <br />have to live with each architecture having system calls with special <br />rules: some of those rules will be architecture-specific (eg number of <br />easily available registers and/or historical reasons), and a few of the <br />rules will be architecture-independent (eg things like sigreturn, clone <br />and execve, that need to have direct access to the whole kernel return <br />stack and simply *cannot* be called from any indirect code!)<br /><br />So the choice is basically one of:<br /><br /> - come up with a totally new interface to system calls, and effectively <br />   duplicating the whole system call table.<br /><br />   I'd hate to do this. We already have duplicated system call tables due <br />   to compat stuff, it's painful.<br /><br /> - just emulate the *existing* interface exactly, but with indirection. <br />   IOW, the system call interface on x86 an unconditional "six words in <br />   six registers, the meaning of which is totally up to the system call <br />   implementation itself".<br /><br />   This is what Uli's sys_indirect() does.<br /><br /> - add whole new system calls with extended information, making the 6-word <br />   limits even worse, and likely forcing a whole new argument marshalling <br />   code with conditionals depending on per-system-call flags, which <br />   further complicates it and slows things down.<br /><br />Quite frankly, I can't really see many other approaches. And of the above <br />three ones, the sys_indirect() approach really does seem to be the <br />simplest *and* the best-performing. It's basically faster to just <br />unconditionally load six registers off an indirect block than it would be <br />to have any conditionals based on which system call it is.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
