    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/11/15/427">First message in thread</a></li><li><a href="/lkml/2007/11/15/438">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/15/454">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/15/491">William Lee Irwin III</a><ul><li><a href="/lkml/2007/11/15/492">"H. Peter Anvin"</a><ul><li><a href="/lkml/2007/11/16/52">Andi Kleen</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/11/16/144">Jeremy Fitzhardinge</a><ul><li class="origin"><a href="/lkml/2007/11/16/190">Linus Torvalds</a><ul><li><a href="/lkml/2007/11/16/190">Jeremy Fitzhardinge</a></li><li><a href="/lkml/2007/11/16/222">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2007/11/16/234">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2007/11/16/171">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Nov 2007 09:35:03 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Why preallocate pmd in x86 32-bit PAE?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 16 Nov 2007, Jeremy Fitzhardinge wrote:<br />&gt; &gt;<br />&gt; &gt; IIRC, the present bit is ignored in the magic 4-entry PGD.  All entries <br />&gt; &gt; have to be present.<br />&gt; <br />&gt; Hm, do you recall what processors that might affect?  As far as I know,<br />&gt; current processors will ignore non-present top-level entries.<br /><br />Are you sure?<br /><br />Anyway, this is not worth making a distinction for. Just pre-allocate all <br />of them. There really is just 4 PGD entries, and it really *is* different <br />from having a full three-level page table, and of the four PGD entries:<br /><br /> - one is used for the kernel mapping (assuming the regular 1:3 layout)<br /> - AT LEAST two are required by user space anyway<br /><br />so pre-allocating is never going to waste more than one page.<br /><br />And you may feel that pre-allocating is a special case, but it's an <br />*easier* special case than the one that you are apparently thinking about <br />(which is to special-case according to CPU version).<br /><br />So don't do it. Just preallocate for the magic 4-entry PGD. You can make <br />the special case just be something like<br /><br />	/* Preallocate for small PGD's */<br />	#if PTRS_PER_PGD == 4<br />		for (i = 0; i &lt; USER_PTRS_PER_PGD; i++) {<br />			pmd_t *pmd = pmd_alloc();<br />			set_pgd(pgd+i, __pgd(PAGE_PRESENT | __pa(pmd));<br />		}	<br />	#endif<br /><br />or similar. <br /><br />There is absolutely *zero* reason not to do this, and there is also zero <br />reason to make this be a "32-bit vs 64-bit" issue. The code can be there <br />in both, and the #if could even be all in C code (ie there may be reasons <br />to prefer writing it as<br /><br />	/* The old-style PAE PGD needs to be preallocated */<br />	if (USER_PTRS_PER_PGD &lt;= 4) {<br />		...<br />	}<br /><br />and the compiler should even compile it away entirely for all practical <br />cases even without using the preprocessor.<br /><br />&gt; Anyway, we can point them not present to empty_zero_page, so testing the <br />&gt; present bit will still be sufficient to tell if we need to allocate a <br />&gt; new pmd, but if the hardware decides to follow the page reference <br />&gt; there's no harm done.  (Hm, unless the hardware decides it wants to set <br />&gt; A or D bits in empty_zero_page for some reason...)<br /><br />x86 page table walking never sets A/D bits on non-present entries.<br /><br />That said, there's still a huge difference. <br /><br />For "real" page table walking, you can always just insert entries without <br />flushing the cache if those entries weren't there before (because the TLB <br />is supposed to not cache negative entries). <br /><br />Again, because of the way the mahic 4-entry PGD works, that isn't true for <br />it. It caches the entries regardless, so if you change it from non-present <br />to present, you have to flush the TLB (well, "reload %cr3", which is the <br />same thing in practice, although it's for a different *reason*).<br /><br />&gt; That just means we need to reload cr3 after populating the pgd with a<br />&gt; new pmd, right?<br /><br />BUT ONLY FOR THIS CASE!<br /><br />And if you preallocate it, you make *that* special case go away. <br /><br />So you're going to have special cases regardless. Do the simple and <br />really straightforward one, please! Nothing subtle.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
