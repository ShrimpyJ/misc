    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/7/17/560">First message in thread</a></li><li><a href="/lkml/2007/7/18/13">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/18/315">Roland Dreier</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Jul 2007 11:02:46 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [git patches 1/2] warnings: attack valid cases spotted by warnings</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 18 Jul 2007, Roland Dreier wrote:<br />&gt; <br />&gt; BTW, I noticed one interesting thing while starting on this cleanup.<br />&gt; I wanted to make sure that the generated code didn't change with the<br />&gt; first step, and I actually discovered that the patch below seems to<br />&gt; make the generated code *better*, maybe because some gcc alias<br />&gt; analysis doesn't get as paranoid without the void *:<br /><br />Absolutely.<br /><br />The way to get pretty much any compiler to generate better code is:<br /> - code it simply<br /> - don't have tons of variables with overlapping lifetime<br /> - use limited-scope variables (ie don't have the variables at the <br />   outermost scope, declare them in the smallest scope you can)<br /><br />and trying to split things up into functions helps all of these. <br /><br />In fact, you can often get better code even when the functions aren't even <br />inlined, because of the "simpler code" issue. Gcc sometimes tries to be <br />too clever with its CSE etc, and generates really nasty complex code with <br />lots of register spills, just because it keeps stuff live rather than just <br />regenerating them.<br /><br />So inlining a function doesn't even make it faster, all the time. You want <br />to inline when <br /><br /> - the function is so small that the call is literally a big part of it, <br />   and it doesn't even need more than a couple of registers, so the <br />   calling convention has more register pressure than inlining the <br />   function itself would have.<br /><br />OR<br /><br /> - the callers tend to have constant arguments that can benefit from <br />   constant folding inside the function<br /><br />but inlining in many other circumstances actually generates *worse* code <br />and just makes debugging harder and the I$ footprint bigger.<br /><br />&gt; And here's the patch itself -- I think this is a reasonable size step<br />&gt; to break things up into.  I assume that this is the basic form of the<br />&gt; cleanup that you're proposing?<br /><br />Yes, this looks good. Doing these kinds of things for the various other <br />things is likely to make the code more readable, and as you already found <br />out, the generated code doesn't tend to be worse either. It might not <br />_always_ be a win size and performance-wise, but it can be, and so <br />readability should generally always be the #1 goal, because quite often it <br />actually does help the compiler too.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
