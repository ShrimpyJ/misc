    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/7/23/249">First message in thread</a></li><li><a href="/lkml/2007/7/24/373">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/24/375">Andi Kleen</a><ul><li><a href="/lkml/2007/7/24/395">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/24/447">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2007/7/24/454">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/7/25/492">Trent Piepho</a><ul><li class="origin"><a href="/lkml/2007/7/25/496">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/25/496">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 25 Jul 2007 18:18:14 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 6/8] i386: bitops: Don't mark memory as clobbered unnecessarily</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 25 Jul 2007, Trent Piepho wrote:<br />&gt; <br />&gt; Specifically, check test6_memasm.s.  The C code looks like this:<br />&gt; <br />&gt; extern int a; /* keep asm from being elided for having no used output */<br />&gt; static inline void bar(void) { asm("call bar" : "=m"(a) : : "memory"); }<br />&gt; /* float x can't alias asm's output int a */<br />&gt; void foo(float *x) { x[20] = 1; bar(); x[20] = 2; }<br />&gt; <br />&gt; The asm code ends up like this:<br />&gt; foo:<br />&gt;         call bar<br />&gt;         movl    4(%esp), %eax   # x, x<br />&gt;         movl    $0x40000000, 80(%eax)   #,<br />&gt;         ret<br /><br />Hmm. I really think you should take this up with the gcc people. That <br />looks like a gcc bug - because there really is nothing that guarantees <br />that the asm doesn't change the array that "x" points to, and the asm <br />clearly talks about clobbering memory.<br /><br />&gt; Notice that the first write to x[20] was NOT done.  It's also not done for a<br />&gt; volatile asm without a memory clobber.  But if you combine both volatile and a<br />&gt; memory clobber, then it is!  How to explain that?<br /><br />I can't explain it. I do think you've found a gcc bug.<br /><br />That said, the kernel mostly uses "asm volatile()" _together_ with a <br />memory clobber for these kinds of things, so it sounds like the kernel <br />wouldn't be impacted. But you're definitely right - the above report makes <br />me worry.<br /><br />&gt; The difference between test2_volasm.s and test2_normasm.s is hard to explain<br />&gt; too.  It seems like some times gcc forgets that imull is commutative.  It will<br />&gt; emit "imull %edx, %eax" in some cases, but change an asm slightly and it will<br />&gt; decide it must do "imull %eax, %edx ; movl %edx, %eax" for no apparent reason.<br /><br />Well, that's likely just a subtle register allocation issue, and <br />understandable. Generating perfect code is impossible, you want to <br />generate good code on average.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
