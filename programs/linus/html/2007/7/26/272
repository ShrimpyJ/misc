    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/7/26/151">First message in thread</a></li><li><a href="/lkml/2007/7/26/151">"Rafael J. Wysocki"</a><ul><li class="origin"><a href="/lkml/2007/7/26/359">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/26/359">"Rafael J. Wysocki"</a><ul><li><a href="/lkml/2007/7/26/371">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/7/30/457">Chris Wright</a><ul><li><a href="/lkml/2007/7/30/464">Linus Torvalds</a><ul><li><a href="/lkml/2007/7/30/476">Chris Wright</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/7/26/272/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 26 Jul 2007 09:43:40 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [2.6.23-rc1 REGRESSION] CPU hotplug totally broken on HPC nx6325 (x86_64)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 26 Jul 2007, Rafael J. Wysocki wrote:<br />&gt;<br />&gt; On my Turion64-based HPC nx6325 with the 2.6.23-rc1 x86_64 kernel doing<br />&gt; <br />&gt; # echo 0 &gt; /sys/devices/system/cpu/cpu1/online<br />&gt; <br />&gt; causes the system to crash in a spectacular fashion (call traces going<br />&gt; continuously on the console, no reaction to anything except for the power<br />&gt; button).  For this reason, suspend and hibernation don't work as well.<br /><br />Yeah, I really shouldn't have applied that patch. I didn't notice that it <br />not only cleaned up the direct memcpy's, it also re-introduced the damn <br />broken code that we fixed once already.<br /><br />Dammit, that read-only debug support IS NOT WORTH THIS CRAP.<br /><br />I absolutely *detest* it when "debugging features" end up being the thing <br />that causes crashes. I think it shows a total lack of taste and <br />understanding, and I'm totally tired of it. This has happened too many <br />times.<br /><br />Andi: please don't send this patch *ever* again. If a patch that is <br />supposed to help debugging just causes problems, that patch should be <br />thrown away FOREVER.<br /><br />Andrew - on that same note: please throw away the dwarf traceback crap <br />from your tree that Andi is still apparently pushing. Exact same issue. <br /><br />Debugging "helper" code that has historically only caused problems. We <br />could equally well just enable frame pointers for debugging and add the <br />trivial code to follow that instead, and it would work (the way it has <br />worked on x86 basically forever).<br /><br />Rafael, does reverting just this part (and leaving the "text_poke()" <br />cleanups) work for you?<br /><br />			Linus<br /><br />---<br /> arch/i386/kernel/alternative.c |   10 ----------<br /> arch/i386/mm/init.c            |   14 +++++++++++---<br /> arch/x86_64/mm/init.c          |   10 ++++++++++<br /> 3 files changed, 21 insertions(+), 13 deletions(-)<br /><br />diff --git a/arch/i386/kernel/alternative.c b/arch/i386/kernel/alternative.c<br />index c3750c2..c0d0a89 100644<br />--- a/arch/i386/kernel/alternative.c<br />+++ b/arch/i386/kernel/alternative.c<br />&#64;&#64; -432,20 +432,10 &#64;&#64; void __init alternative_instructions(void)<br />  */<br /> void __kprobes text_poke(void *oaddr, unsigned char *opcode, int len)<br /> {<br />-        u8 *addr = oaddr;<br />-	if (!pte_write(*lookup_address((unsigned long)addr))) {<br />-		struct page *p[2] = { virt_to_page(addr), virt_to_page(addr+PAGE_SIZE) };<br />-		addr = vmap(p, 2, VM_MAP, PAGE_KERNEL);<br />-		if (!addr)<br />-			return;<br />-		addr += ((unsigned long)oaddr) % PAGE_SIZE;<br />-	}<br /> 	memcpy(addr, opcode, len);<br /> 	sync_core();<br /> 	/* Not strictly needed, but can speed CPU recovery up. Ignore cross cacheline<br /> 	   case. */<br /> 	if (cpu_has_clflush)<br /> 		asm("clflush (%0) " :: "r" (oaddr) : "memory");<br />-	if (addr != oaddr)<br />-		vunmap(addr);<br /> }<br />diff --git a/arch/i386/mm/init.c b/arch/i386/mm/init.c<br />index 1b1a1e6..4c4809f 100644<br />--- a/arch/i386/mm/init.c<br />+++ b/arch/i386/mm/init.c<br />&#64;&#64; -800,9 +800,17 &#64;&#64; void mark_rodata_ro(void)<br /> 	unsigned long start = PFN_ALIGN(_text);<br /> 	unsigned long size = PFN_ALIGN(_etext) - start;<br /> <br />-	change_page_attr(virt_to_page(start),<br />-	                 size &gt;&gt; PAGE_SHIFT, PAGE_KERNEL_RX);<br />-	printk("Write protecting the kernel text: %luk\n", size &gt;&gt; 10);<br />+#ifndef CONFIG_KPROBES<br />+#ifdef CONFIG_HOTPLUG_CPU<br />+	/* It must still be possible to apply SMP alternatives. */<br />+	if (num_possible_cpus() &lt;= 1)<br />+#endif<br />+	{<br />+		change_page_attr(virt_to_page(start),<br />+		                 size &gt;&gt; PAGE_SHIFT, PAGE_KERNEL_RX);<br />+		printk("Write protecting the kernel text: %luk\n", size &gt;&gt; 10);<br />+	}<br />+#endif<br /> 	start += size;<br /> 	size = (unsigned long)__end_rodata - start;<br /> 	change_page_attr(virt_to_page(start),<br />diff --git a/arch/x86_64/mm/init.c b/arch/x86_64/mm/init.c<br />index 38f5d63..458893b 100644<br />--- a/arch/x86_64/mm/init.c<br />+++ b/arch/x86_64/mm/init.c<br />&#64;&#64; -600,6 +600,16 &#64;&#64; void mark_rodata_ro(void)<br /> {<br /> 	unsigned long start = (unsigned long)_stext, end;<br /> <br />+#ifdef CONFIG_HOTPLUG_CPU<br />+	/* It must still be possible to apply SMP alternatives. */<br />+	if (num_possible_cpus() &gt; 1)<br />+		start = (unsigned long)_etext;<br />+#endif<br />+<br />+#ifdef CONFIG_KPROBES<br />+	start = (unsigned long)__start_rodata;<br />+#endif<br />+	<br /> 	end = (unsigned long)__end_rodata;<br /> 	start = (start + PAGE_SIZE - 1) &amp; PAGE_MASK;<br /> 	end &amp;= PAGE_MASK;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
