    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/9/176">First message in thread</a></li><li><a href="/lkml/2007/8/24/112">"Kenn Humborg"</a><ul><li><a href="/lkml/2007/8/24/165">Denys Vlasenko</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 24 Aug 2007 10:34:22 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] i386: Fix a couple busy loops in mach_wakecpu.h:wait_for_init_deassert()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 24 Aug 2007, Denys Vlasenko wrote:<br />&gt; <br />&gt; So you are ok with compiler propagating n1 to n2 here:<br />&gt; <br />&gt; n1 += atomic_read(x);<br />&gt; other_variable++;<br />&gt; n2 += atomic_read(x);<br />&gt; <br />&gt; without accessing x second time. What's the point? Any sane coder<br />&gt; will say that explicitly anyway:<br /><br />No.<br /><br />This is a common mistake, and it's total crap.<br /><br />Any "sane coder" will often use inline functions, macros, etc helpers to <br />do certain abstract things. Those things may contain "atomic_read()" <br />calls.<br /><br />The biggest reason for compilers doing CSE is exactly the fact that many <br />opportunities for CSE simple *are*not*visible* on a source code level. <br /><br />That is true of things like atomic_read() equally as to things like shared <br />offsets inside structure member accesses. No difference what-so-ever.<br /><br />Yes, we have, traditionally, tried to make it *easy* for the compiler to <br />generate good code. So when we can, and when we look at performance for <br />some really hot path, we *will* write the source code so that the compiler <br />doesn't even have the option to screw it up, and that includes things like <br />doing CSE at a source code level so that we don't see the compiler <br />re-doing accesses unnecessarily.<br /><br />And I'm not saying we shouldn't do that. But "performance" is not an <br />either-or kind of situation, and we should:<br /><br /> - spend the time at a source code level: make it reasonably easy for the <br />   compiler to generate good code, and use the right algorithms at a <br />   higher level (and order structures etc so that they have good cache <br />   behaviour).<br /><br /> - .. *and* expect the compiler to handle the cases we didn't do by hand<br />   pretty well anyway. In particular, quite often, abstraction levels at a <br />   software level means that we give compilers "stupid" code, because some <br />   function may have a certain high-level abstraction rule, but then on a <br />   particular architecture it's actually a no-op, and the compiler should <br />   get to "untangle" our stupid code and generate good end results.<br /><br /> - .. *and* expect the hardware to be sane and do a good job even when the <br />   compiler didn't generate perfect code or there were unlucky cache miss<br />   patterns etc.<br /><br />and if we do all of that, we'll get good performance. But you really do <br />want all three levels. It's not enough to be good at any one level (or <br />even any two).<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
