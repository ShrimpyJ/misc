    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/9/176">First message in thread</a></li><li><a href="/lkml/2007/8/18/3">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/18/59">Satyam Sharma</a></li><li><a href="/lkml/2007/8/18/126">"Paul E. McKenney"</a><ul><li><a href="/lkml/2007/8/18/132">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/18/136">"Paul E. McKenney"</a></li></ul></li></ul></li><li><a href="/lkml/2007/8/24/109">Denys Vlasenko</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 24 Aug 2007 10:19:50 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/24] make atomic_read() behave consistently across all architectures</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 24 Aug 2007, Denys Vlasenko wrote:<br />&gt;<br />&gt; &gt; No, you don't use "x.counter++". But you *do* use<br />&gt; &gt;<br />&gt; &gt; 	if (atomic_read(&amp;x) &lt;= 1)<br />&gt; &gt;<br />&gt; &gt; and loading into a register is stupid and pointless, when you could just<br />&gt; &gt; do it as a regular memory-operand to the cmp instruction.<br />&gt; <br />&gt; It doesn't mean that (volatile int*) cast is bad, it means that current gcc<br />&gt; is bad (or "not good enough"). IOW: instead of avoiding volatile cast,<br />&gt; it's better to fix the compiler.<br /><br />I would agree that fixing the compiler in this case would be a good thing, <br />even quite regardless of any "atomic_read()" discussion.<br /><br />I just have a strong suspicion that "volatile" performance is so low down <br />the list of any C compiler persons interest, that it's never going to <br />happen. And quite frankly, I cannot blame the gcc guys for it.<br /><br />That's especially as "volatile" really isn't a very good feature of the C <br />language, and is likely to get *less* interesting rather than more (as <br />user space starts to be more and more threaded, "volatile" gets less and <br />less useful.<br /><br />[ Ie, currently, I think you can validly use "volatile" in a "sigatomic_t" <br />  kind of way, where there is a single thread, but with asynchronous <br />  events. In that kind of situation, I think it's probably useful. But <br />  once you get multiple threads, it gets pointless.<br /><br />  Sure: you could use "volatile" together with something like Dekker's or <br />  Peterson's algorithm that doesn't depend on cache coherency (that's <br />  basically what the C "volatile" keyword approximates: not atomic <br />  accesses, but *uncached* accesses! But let's face it, that's way past <br />  insane. ]<br /><br />So I wouldn't expect "volatile" to ever really generate better code. It <br />might happen as a side effect of other improvements (eg, I might hope that <br />the SSA work would eventually lead to gcc having a much better defined <br />model of valid optimizations, and maybe better code generation for <br />volatile accesses fall out cleanly out of that), but in the end, it's such <br />an ugly special case in C, and so seldom used, that I wouldn't depend on <br />it.<br /><br />&gt; Linus, in all honesty gcc has many more cases of suboptimal code,<br />&gt; case of "volatile" is just one of many.<br /><br />Well, the thing is, quite often, many of those "suboptimal code" <br />generations fall into two distinct classes:<br /><br /> - complex C code. I can't really blame the compiler too much for this. <br />   Some things are *hard* to optimize, and for various scalability <br />   reasons, you often end up having limits in the compiler where it <br />   doesn't even _try_ doing certain optimizations if you have excessive <br />   complexity.<br /><br /> - bad register allocation. Register allocation really is hard, and <br />   sometimes gcc just does the "obviously wrong" thing, and you end up <br />   having totally unnecessary spills.<br /><br />&gt; Off the top of my head:<br /><br />Yes, "unsigned long long" with x86 has always generated atrocious code. In <br />fact, I would say that historically it was really *really* bad. These <br />days, gcc actually does a pretty good job, but I'm not surprised that it's <br />still quite possible to find cases where it did some optimization (in this <br />case, apparently noticing that "shift by &gt;= 32 bits" causes the low <br />register to be pointless) and then missed *another* optimization (better <br />register use) because that optimization had been done *before* the first <br />optimization was done.<br /><br />That's a *classic* example of compiler code generation issues, and quite <br />frankly, I think that's very different from the issue of "volatile".<br /><br />Quite frankly, I'd like there to be more competition in the open source <br />compiler game, and that might cause some upheavals, but on the whole, gcc <br />actually does a pretty damn good job. <br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
