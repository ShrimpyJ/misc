    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/9/176">First message in thread</a></li><li><a href="/lkml/2007/8/21/63">David Miller</a><ul><li><a href="/lkml/2007/8/21/181">Chris Snook</a><ul><li><a href="/lkml/2007/8/21/194">Segher Boessenkool</a></li><li><a href="/lkml/2007/8/21/226">Satyam Sharma</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 21 Aug 2007 09:43:52 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/24] make atomic_read() behave consistently across all architectures</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 21 Aug 2007, Chris Snook wrote:<br />&gt; <br />&gt; Moore's law is definitely working against us here.  Register counts, pipeline<br />&gt; depths, core counts, and clock multipliers are all increasing in the long run.<br />&gt; At some point in the future, barrier() will be universally regarded as a<br />&gt; hammer too big for most purposes.<br /><br />Note that "barrier()" is purely a compiler barrier. It has zero impact on <br />the CPU pipeline itself, and also has zero impact on anything that gcc <br />knows isn't visible in memory (ie local variables that don't have their <br />address taken), so barrier() really is pretty cheap.<br /><br />Now, it's possible that gcc messes up in some circumstances, and that the <br />memory clobber will cause gcc to also do things like flush local registers <br />unnecessarily to their stack slots, but quite frankly, if that happens, <br />it's a gcc problem, and I also have to say that I've not seen that myself.<br /><br />So in a very real sense, "barrier()" will just make sure that there is a <br />stronger sequence point for the compiler where things are stable. In most <br />cases it has absolutely zero performance impact - apart from the <br />-intended- impact of making sure that the compiler doesn't re-order or <br />cache stuff around it.<br /><br />And sure, we could make it more finegrained, and also introduce a <br />per-variable barrier, but the fact is, people _already_ have problems with <br />thinking about these kinds of things, and adding new abstraction issues <br />with subtle semantics is the last thing we want.<br /><br />So I really think you'd want to show a real example of real code that <br />actually gets noticeably slower or bigger.<br /><br />In removing "volatile", we have shown that. It may not have made a big <br />difference on powerpc, but it makes a real difference on x86 - and more <br />importantly, it removes something that people clearly don't know how it <br />works, and incorrectly expect to just fix bugs.<br /><br />[ There are *other* barriers - the ones that actually add memory barriers <br />  to the CPU - that really can be quite expensive. The good news is that <br />  the expense is going down rather than up: both Intel and AMD are not <br />  only removing the need for some of them (ie "smp_rmb()" will become a <br />  compiler-only barrier), but we're _also_ seeing the whole "pipeline <br />  flush" approach go away, and be replaced by the CPU itself actually <br />  being better - so even the actual CPU pipeline barriers are getting<br />  cheaper, not more expensive. ]<br /><br />For example, did anybody even _test_ how expensive "barrier()" is? Just <br />as a lark, I did<br /><br />	#undef barrier<br />	#define barrier() do { } while (0)<br /><br />in kernel/sched.c (which only has three of them in it, but hey, that's <br />more than most files), and there were _zero_ code generation downsides. <br />One instruction was moved (and a few line numbers changed), so it wasn't <br />like the assembly language was identical, but the point is, barrier() <br />simply doesn't have the same kinds of downsides that "volatile" has.<br /><br />(That may not be true on other architectures or in other source files, of <br />course. This *does* depend on code generation details. But anybody who <br />thinks that "barrier()" is fundamentally expensive is simply incorrect. It <br />is *fundamnetally* a no-op).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
