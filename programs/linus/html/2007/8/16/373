    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/9/176">First message in thread</a></li><li><a href="/lkml/2007/8/16/359">Nick Piggin</a><ul><li><a href="/lkml/2007/8/16/371">Paul Mackerras</a><ul><li><a href="/lkml/2007/8/16/372">Nick Piggin</a><ul><li><a href="/lkml/2007/8/16/376">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/17/316">"Paul E. McKenney"</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2007/8/17/16">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/17/16">"Paul E. McKenney"</a></li><li><a href="/lkml/2007/8/17/25">Satyam Sharma</a><ul><li><a href="/lkml/2007/8/17/45">Nick Piggin</a></li><li><a href="/lkml/2007/8/17/301">Segher Boessenkool</a></li></ul></li><li><a href="/lkml/2007/8/17/34">Geert Uytterhoeven</a></li><li><a href="/lkml/2007/8/17/75">Andi Kleen</a><ul><li><a href="/lkml/2007/8/17/90">Satyam Sharma</a></li></ul></li><li><a href="/lkml/2007/8/17/303">Segher Boessenkool</a></li></ul></li></ul></li><li><a href="/lkml/2007/8/17/195">Segher Boessenkool</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 16 Aug 2007 20:42:23 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/24] make atomic_read() behave consistently across all architectures</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 17 Aug 2007, Paul Mackerras wrote:<br />&gt; <br />&gt; I'm really surprised it's as much as a few K.  I tried it on powerpc<br />&gt; and it only saved 40 bytes (10 instructions) for a G5 config.<br /><br />One of the things that "volatile" generally screws up is a simple<br /><br />	volatile int i;<br /><br />	i++;<br /><br />which a compiler will generally get horribly, horribly wrong.<br /><br />In a reasonable world, gcc should just make that be (on x86)<br /><br />	addl $1,i(%rip)<br /><br />on x86-64, which is indeed what it does without the volatile. But with the <br />volatile, the compiler gets really nervous, and doesn't dare do it in one <br />instruction, and thus generates crap like<br /><br />        movl    i(%rip), %eax<br />        addl    $1, %eax<br />        movl    %eax, i(%rip)<br /><br />instead. For no good reason, except that "volatile" just doesn't have any <br />good/clear semantics for the compiler, so most compilers will just make it <br />be "I will not touch this access in any way, shape, or form". Including <br />even trivially correct instruction optimization/combination.<br /><br />This is one of the reasons why we should never use "volatile". It <br />pessimises code generation for no good reason - just because compilers <br />don't know what the heck it even means! <br /><br />Now, people don't do "i++" on atomics (you'd use "atomic_inc()" for that), <br />but people *do* do things like<br /><br />	if (atomic_read(..) &lt;= 1)<br />		..<br /><br />On ppc, things like that probably don't much matter. But on x86, it makes <br />a *huge* difference whether you do<br /><br />	movl i(%rip),%eax<br />	cmpl $1,%eax<br /><br />or if you can just use the value directly for the operation, like this:<br /><br />	cmpl $1,i(%rip)<br /><br />which is again a totally obvious and totally safe optimization, but is <br />(again) something that gcc doesn't dare do, since "i" is volatile.<br /><br />In other words: "volatile" is a horribly horribly bad way of doing things, <br />because it generates *worse*code*, for no good reason. You just don't see <br />it on powerpc, because it's already a load-store architecture, so there is <br />no "good code" for doing direct-to-memory operations.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
