    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/22/94">First message in thread</a></li><li><a href="/lkml/2007/8/31/16">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/31/37">Rusty Russell</a><ul><li class="origin"><a href="/lkml/2007/8/31/216">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/31/216">Rusty Russell</a><ul><li><a href="/lkml/2007/8/31/224">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/8/31/61/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 31 Aug 2007 00:51:46 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Fix out-by-one error in traps.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 31 Aug 2007, Rusty Russell wrote:<br /><br />&gt; On Thu, 2007-08-30 at 21:44 -0700, Linus Torvalds wrote:<br />&gt; &gt; <br />&gt; &gt; Hmm.. This *really* cannot happen with a normal kernel - it implies that <br />&gt; &gt; the stack has crossed into an invalid page. <br />&gt; <br />&gt; AFAICT, a corrupt stack could lead us to touch a page which isn't<br />&gt; mapped.  If we assume the stack isn't corrupt, we don't have to do the<br />&gt; valid_stack_ptr() check at all...<br /><br />Fair enough. That said, you seem to see this even without a corrupt stack.<br /><br />&gt; &gt; Why is that allowed with lguest? What kind of code could validly *ever* <br />&gt; &gt; come in here and cause problems?<br />&gt; <br />&gt; head.S pushes a "$0" on the stack to stop the unwinder, lguest doesn't.<br /><br />The unwinder should stop when it sees an invalid frame pointer, and even <br />without the push 0 I'd have expected it to be invalid.<br /><br />But I suspect lguest triggers another thing: you actually make the stack <br />start at the *very*top* of the stack area. Afaik, normal x86 does not. A <br />normal x86 kernel will start off with a pt_regs[] setup, I think - ie the <br />kernel stack is always set up so that it has the "return to user mode" <br />information.<br /><br />And *that* difference may be what triggers this for lguest, even though it <br />can never trigger for a "real" kernel.<br /><br />But your patch does improve the sanity checking of the frame pointer. That <br />said, I think the following patch improves it more: does this also work <br />for you? (Totally untested, but it looks like the RightThing(tm) to do)<br /><br />		Linus<br /><br />---<br />diff --git a/arch/i386/kernel/traps.c b/arch/i386/kernel/traps.c<br />index cfffe3d..b9998f3 100644<br />--- a/arch/i386/kernel/traps.c<br />+++ b/arch/i386/kernel/traps.c<br />&#64;&#64; -100,10 +100,10 &#64;&#64; asmlinkage void machine_check(void);<br /> int kstack_depth_to_print = 24;<br /> static unsigned int code_bytes = 64;<br /> <br />-static inline int valid_stack_ptr(struct thread_info *tinfo, void *p)<br />+static inline int valid_stack_ptr(struct thread_info *tinfo, void *p, unsigned size)<br /> {<br /> 	return	p &gt; (void *)tinfo &amp;&amp;<br />-		p &lt; (void *)tinfo + THREAD_SIZE - 3;<br />+		p &lt;= (void *)tinfo + THREAD_SIZE - size;<br /> }<br /> <br /> static inline unsigned long print_context_stack(struct thread_info *tinfo,<br />&#64;&#64; -113,7 +113,7 &#64;&#64; static inline unsigned long print_context_stack(struct thread_info *tinfo,<br /> 	unsigned long addr;<br /> <br /> #ifdef	CONFIG_FRAME_POINTER<br />-	while (valid_stack_ptr(tinfo, (void *)ebp)) {<br />+	while (valid_stack_ptr(tinfo, (void *)ebp, 2*sizeof(unsigned long))) {<br /> 		unsigned long new_ebp;<br /> 		addr = *(unsigned long *)(ebp + 4);<br /> 		ops-&gt;address(data, addr);<br />&#64;&#64; -129,7 +129,7 &#64;&#64; static inline unsigned long print_context_stack(struct thread_info *tinfo,<br /> 		ebp = new_ebp;<br /> 	}<br /> #else<br />-	while (valid_stack_ptr(tinfo, stack)) {<br />+	while (valid_stack_ptr(tinfo, stack, sizeof(*stack))) {<br /> 		addr = *stack++;<br /> 		if (__kernel_text_address(addr))<br /> 			ops-&gt;address(data, addr);<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
