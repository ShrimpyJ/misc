    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/22/94">First message in thread</a></li><li><a href="/lkml/2007/8/31/61">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/31/216">Rusty Russell</a><ul><li class="origin"><a href="/lkml/2007/9/4/121">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/4/121">Rusty Russell</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/8/31/224/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 31 Aug 2007 11:24:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Fix out-by-one error in traps.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 1 Sep 2007, Rusty Russell wrote:<br />&gt; <br />&gt; This is only for the initial booting stack (init_thread_union); see<br />&gt; arch/i386/kernel/head.S:<br />&gt; 	/* Set up the stack pointer */<br />&gt; 	lss stack_start,%esp<br />&gt; 	...<br />&gt; 	pushl $0		# fake return address for unwinder<br /><br />Ok, we should fix that. We should just make it look like all other stack <br />frames.<br /><br />There is other code in the kernel that "knows" that all kernel stacks have <br />the fields for the user stack return on it, namely the ptrace code etc. <br />Now, the initial stack is hopefully never *accessed* by that kind of code, <br />but this kind of special-case code is just wrong.<br /><br />&gt; &gt; But your patch does improve the sanity checking of the frame pointer. That <br />&gt; &gt; said, I think the following patch improves it more: does this also work <br />&gt; &gt; for you? (Totally untested, but it looks like the RightThing(tm) to do)<br />&gt; <br />&gt; Yes, looks good.  Perhaps one additional magic num removal:<br /><br />Well, we might as well then just make the code readable instead. IOW, how <br />about this one, which just declares a structure that describes the stack <br />frame thing? That just makes everything clearer, since we can then use <br />"sizeof(that structure)" instead of using the magic "2*sizeof(unsigned <br />long)".<br /><br />		Linus<br /><br />---<br />diff --git a/arch/i386/kernel/traps.c b/arch/i386/kernel/traps.c<br />index cfffe3d..47b0bef 100644<br />--- a/arch/i386/kernel/traps.c<br />+++ b/arch/i386/kernel/traps.c<br />&#64;&#64; -100,36 +100,45 &#64;&#64; asmlinkage void machine_check(void);<br /> int kstack_depth_to_print = 24;<br /> static unsigned int code_bytes = 64;<br /> <br />-static inline int valid_stack_ptr(struct thread_info *tinfo, void *p)<br />+static inline int valid_stack_ptr(struct thread_info *tinfo, void *p, unsigned size)<br /> {<br /> 	return	p &gt; (void *)tinfo &amp;&amp;<br />-		p &lt; (void *)tinfo + THREAD_SIZE - 3;<br />+		p &lt;= (void *)tinfo + THREAD_SIZE - size;<br /> }<br /> <br />+/* The form of the top of the frame on the stack */<br />+struct stack_frame {<br />+	struct stack_frame *next_frame;<br />+	unsigned long return_address;<br />+};<br />+<br /> static inline unsigned long print_context_stack(struct thread_info *tinfo,<br /> 				unsigned long *stack, unsigned long ebp,<br /> 				struct stacktrace_ops *ops, void *data)<br /> {<br />-	unsigned long addr;<br />-<br /> #ifdef	CONFIG_FRAME_POINTER<br />-	while (valid_stack_ptr(tinfo, (void *)ebp)) {<br />-		unsigned long new_ebp;<br />-		addr = *(unsigned long *)(ebp + 4);<br />+	struct stack_frame *frame = (struct stack_frame *)ebp;<br />+	while (valid_stack_ptr(tinfo, frame, sizeof(*frame))) {<br />+		struct stack_frame *next;<br />+		unsigned long addr;<br />+<br />+		addr = frame-&gt;return_address;<br /> 		ops-&gt;address(data, addr);<br /> 		/*<br /> 		 * break out of recursive entries (such as<br /> 		 * end_of_stack_stop_unwind_function). Also,<br /> 		 * we can never allow a frame pointer to<br /> 		 * move downwards!<br />-	 	 */<br />-	 	new_ebp = *(unsigned long *)ebp;<br />-		if (new_ebp &lt;= ebp)<br />+		 */<br />+		next = frame-&gt;next_frame;<br />+		if (next &lt;= frame)<br /> 			break;<br />-		ebp = new_ebp;<br />+		frame = next;<br /> 	}<br /> #else<br />-	while (valid_stack_ptr(tinfo, stack)) {<br />+	while (valid_stack_ptr(tinfo, stack, sizeof(*stack))) {<br />+		unsigned long addr;<br />+<br /> 		addr = *stack++;<br /> 		if (__kernel_text_address(addr))<br /> 			ops-&gt;address(data, addr);<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
