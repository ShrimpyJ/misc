    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/8/9/176">First message in thread</a></li><li><a href="/lkml/2007/8/18/3">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/18/59">Satyam Sharma</a></li><li><a href="/lkml/2007/8/18/126">"Paul E. McKenney"</a><ul><li class="origin"><a href="/lkml/2007/8/18/136">Linus Torvalds</a><ul><li><a href="/lkml/2007/8/18/136">"Paul E. McKenney"</a></li></ul></li></ul></li><li><a href="/lkml/2007/8/24/109">Denys Vlasenko</a><ul><li><a href="/lkml/2007/8/24/253">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 18 Aug 2007 15:41:13 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 0/24] make atomic_read() behave consistently across all architectures</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 18 Aug 2007, Paul E. McKenney wrote:<br />&gt; <br />&gt; One of the gcc guys claimed that he thought that the two-instruction<br />&gt; sequence would be faster on some x86 machines.  I pointed out that<br />&gt; there might be a concern about code size.  I chose not to point out<br />&gt; that people might also care about the other x86 machines.  ;-)<br /><br />Some (very few) x86 uarchs do tend to prefer "load-store" like code <br />generation, and doing a "mov [mem],reg + op reg" instead of "op [mem]" can <br />actually be faster on some of them. Not any that are relevant today, <br />though.<br /><br />Also, that has nothing to do with volatile, and should be controlled by <br />optimization flags (like -mtune). In fact, I thought there was a separate <br />flag to do that (ie something like "-mload-store"), but I can't find it, <br />so maybe that's just my fevered brain..<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
