    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/22/54">First message in thread</a></li><li><a href="/lkml/2007/12/23/136">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/24/11">Jeff Garzik</a><ul><li class="origin"><a href="/lkml/2007/12/24/104">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/24/104">Matthew Wilcox</a></li><li><a href="/lkml/2007/12/27/31">Jeff Garzik</a><ul><li><a href="/lkml/2007/12/27/42">Arjan van de Ven</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 24 Dec 2007 10:51:22 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] Make MMCONFIG space (extended PCI config space) a driver opt-in issue</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 24 Dec 2007, Jeff Garzik wrote:<br />&gt; <br />&gt; Definitely.  So, two questions:<br />&gt; <br />&gt; What's the preferred way to deal with the desire to view extended config space<br />&gt; with "lspci -vvvxxx"?<br /><br />Well, there's two issues right now with MMCONFIG<br /><br /> - we've hit various bugs in it. The bugs are admittedly very rare, but <br />   they are really painful when they happen.<br /><br />   This is the more "fundamental" of the problems, and this is the one <br />   that means that on some machines, the answer to the above question will <br />   simply *always* be that we simply will never *ever* show the extended <br />   config space - because even though it might work, we are going to <br />   decide that it's simply too dangerous.<br /><br />   (Hypothetical example: we might, for example, end up saying that we <br />   will simply never enable mmconfig at all unless the BIOS DMI date says <br />   that the motherboard was built in 2008 or later)<br /><br /> - the (currently more common) problem that our initial probing is totally <br />   screwed up with mmconfig.<br /><br />   This is the thing that causes *most* of our current problems, and the <br />   fact is, we absolutely cannot do the initial kernel PCI probing using <br />   mmconfig accesses. Not only do we not have enough information about the <br />   resources yet at that stage to decide sanely whether mmconfig can <br />   really work, but it is my sincere hope that some day the mmconfig MMIO <br />   region itself will be defined by some standard BAR etc, so trying to <br />   probe the BARs using mmconfig would be a chicken-and-egg problem.<br /><br />   There's also the issue that we want to often *validate* the mmconfig <br />   address using config space accesses, and right now we have some really <br />   ugly code that actually uses "pci_conf1_read()" _explicitly_ to avoid <br />   using mmconfig for this (see arch/x86/pci/mmconfig-shared.c).<br /><br />The *second* problem is entirely a kernel internal issue. It's the one <br />that causes us the biggest issues right now, but it's also the one that <br />will not impact user space at all once if is fixed. So once we do the <br />*early* probing using anything but mmconfig accesses, we can then much <br />more easily enable mmconfig later, and by the time the user does anything <br />like "lspci -vvvxxxx", we could do those mmconfig accesses.<br /><br />I also suspect that we *may* want to use a separate file for the extended <br />config. Right now, things like lspci read the config space by accessing <br />a file like<br /><br />	/sys/bus/pci/devices/0000:00:00.0/config<br /><br />and I'm not at all sure we want to extend that one past the first 256 <br />bytes of config space. Why? Because I don't want old programs that may not <br />know how dangerous the rest of the space is to read extended config space <br />by mistake when they don't know how to parse it anyway.<br /><br />So I would *suggest* (but this may be overly cautious) that we at least <br />consider forcing people who actually want to read extended config space to <br />have to use a separate file for it ("/sys/.../extended-config"), because <br />that would then also be a sign to the kernel that "ok, the user really <br />asked for us to use mmconfig cycles here".<br /><br />&gt; Is there a path for hw vendors, after passing 1,001 anal checks, to maintain<br />&gt; the current behavior as it exists today in arch/x86/pci/mmconfig_{32,64}.c?<br /><br />Well, the *current* behaviour as far as setup is concerned is <br />unacceptable. But yes, longer term, we should be able to just have quirk <br />entries for saying "enable mmconfig because I know it's safe", except we <br />should not enable them until after the core PCI probing has completed.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
