    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/15/128">First message in thread</a></li><li><a href="/lkml/2007/12/16/16">Andrew Morton</a><ul><li><a href="/lkml/2007/12/16/66">Krzysztof Oledzki</a><ul><li><a href="/lkml/2007/12/16/142">Andrew Morton</a><ul><li><a href="/lkml/2007/12/17/126">Jan Kara</a></li><li><a href="/lkml/2007/12/17/210">Krzysztof Oledzki</a></li></ul></li><li class="origin"><a href="/lkml/2007/12/19/284">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/19/284">Jan Kara</a><ul><li><a href="/lkml/2007/12/19/294">Nick Piggin</a></li></ul></li><li><a href="/lkml/2007/12/20/210">=?iso-8859-1?Q?Bj=F6rn?= Steinbrink</a><ul><li><a href="/lkml/2007/12/20/254">Jan Kara</a></li><li><a href="/lkml/2007/12/20/335">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/12/19/168/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 19 Dec 2007 09:44:50 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug 9182] Critical memory leak (dirty pages)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 16 Dec 2007, Krzysztof Oledzki wrote:<br />&gt; <br />&gt; I'll confirm this tomorrow but it seems that even switching to data=ordered<br />&gt; (AFAIK default o ext3) is indeed enough to cure this problem.<br /><br />Ok, do we actually have any ext3 expert following this? I have no idea <br />about what the journalling code does, but I have painful memories of ext3 <br />doing really odd buffer-head-based IO and totally bypassing all the normal <br />page dirty logic.<br /><br />Judging by the symptoms (sorry for not following this well, it came up <br />while I was mostly away travelling), something probably *does* clear the <br />dirty bit on the pages, but the dirty *accounting* is not done properly, <br />so the kernel keeps thinking it has dirty pages.<br /><br />Now, a simple "grep" shows that ext3 does not actually do any <br />ClearPageDirty() or similar on its own, although maybe I missed some other <br />subtle way this can happen. And the *normal* VFS routines that do <br />ClearPageDirty should all be doing the proper accounting.<br /><br />So I see a couple of possible cases:<br /><br /> - actually clearing the PG_dirty bit somehow, without doing the <br />   accounting.<br /><br />   This looks very unlikely. PG_dirty is always cleared by some variant of <br />   "*ClearPageDirty()", and that bit definition isn't used for anything <br />   else in the whole kernel judging by "grep" (the page allocator tests <br />   the bit, that's it).<br /><br />   And there aren't that many hits for ClearPageDirty, and they all seem <br />   to do the proper "dec_zone_page_state(page, NR_FILE_DIRTY);" etc if the <br />   mapping has dirty state accounting.<br /><br />   The exceptions seem to be:<br />    - the page freeing path, but that path checks that "mapping" is NULL <br />      (so no accounting), and would complain loudly if it wasn't<br />    - the swap state stuff ("move_from_swap_cache()"), but that should <br />      only ever trigger for swap cache pages (we have a BUG_ON() in that <br />      path), and those don't do dirty accounting anyway.<br />    - pageout(), but again only for pages that have a NULL mapping.<br /><br /> - ext3 might be clearing (probably indirectly) the "page-&gt;mapping" thing <br />   or similar, which in turn will make the VFS think that even a dirty <br />   page isn't actually to be accounted for - so when the page *turned* <br />   dirty, it was accounted as a dirty page, but then, when it was cleaned, <br />   the accounting wasn't reversed because -&gt;mapping had become NULL.<br /><br />   This would be some interaction with the truncation logic, and quite <br />   frankly, that should be all shared with the non-journal case, so I find <br />   this all very unlikely. <br /><br />However, that second case is interesting, because the pageout case <br />actually has a comment like this:<br /><br />	/*<br />	 * Some data journaling orphaned pages can have<br />	 * page-&gt;mapping == NULL while being dirty with clean buffers.<br />	 */<br /><br />which really sounds like the case in question. <br /><br />I may know the VM, but that special case was added due to insane <br />journaling filesystems, and I don't know what insane things they do. Which <br />is why I'm wondering if there is any ext3 person who knows the journaling <br />code?<br /><br />How/when does it ever "orphan" pages? Because yes, if it ever does that, <br />and clears the -&gt;mapping field on a mapped page, then that page will have <br />incremented the dirty counts when it became dirty, but will *not* <br />decrement the dirty count when it is an orphan.<br /><br />&gt; Two questions remain then: why system dies when dirty reaches ~200MB and what<br />&gt; is wrong with ext3+data=journal with &gt;=2.6.20-rc2?<br /><br />Well, that one is probably pretty straightforward: since the kernel thinks <br />that there are too many dirty pages, it will ask everybody who creates <br />more dirty pages to clean out some *old* dirty pages, but since they don't <br />exist, the whole thing will basically wait forever for a writeout to clean <br />things out that will never happen.<br /><br />200MB is 10% of your 2GB of low-mem RAM, and 10% is the default <br />dirty_ratio that causes synchronous waits for writeback. If you use the <br />normal 3:1 VM split, the hang should happen even earlier (at the ~100MB <br />"dirty" mark).<br /><br />So that part isn't the bug. The bug is in the accounting, but I'm pretty <br />damn sure that the core VM itself is pretty ok, since that code has now <br />been stable for people for the last year or so. It seems that ext3 (with <br />data journaling) does something dodgy wrt some page.<br /><br />But how about trying this appended patch. It should warn a few times if <br />some page is ever removed from a mapping while it's dirty (and the mapping <br />is one that should have been accouned). It also tries to "fix up" the <br />case, so *if* this is the cause, it should also fix the bug.<br /><br />I'd love to hear if you get any stack dumps with this, and what the <br />backtrace is (and whether the dirty counts then stay ok).<br /><br />The patch is totally untested. It compiles for me. That's all I can say.<br /><br />(There's a few other places that set -&gt;mapping to NULL, but they're pretty <br />esoteric. Page migration? Stuff like that).<br /><br />			Linus<br /><br />---<br /> mm/filemap.c |   12 ++++++++++++<br /> 1 files changed, 12 insertions(+), 0 deletions(-)<br /><br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index 188cf5f..7560843 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -124,6 +124,18 &#64;&#64; void __remove_from_page_cache(struct page *page)<br /> 	mapping-&gt;nrpages--;<br /> 	__dec_zone_page_state(page, NR_FILE_PAGES);<br /> 	BUG_ON(page_mapped(page));<br />+<br />+	if (PageDirty(page) &amp;&amp; mapping_cap_account_dirty(mapping)) {<br />+		static int count = 10;<br />+		if (count) {<br />+			count--;<br />+			WARN_ON(1);<br />+		}<br />+<br />+		/* Try to fix up the bug.. */<br />+		dec_zone_page_state(page, NR_FILE_DIRTY);<br />+		dec_bdi_stat(mapping-&gt;backing_dev_info, BDI_RECLAIMABLE);<br />+	}<br /> }<br /> <br /> void remove_from_page_cache(struct page *page)<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
