    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/14/313">First message in thread</a></li><li><a href="/lkml/2007/12/14/419">John Reiser</a><ul><li><a href="/lkml/2007/12/14/467">Theodore Tso</a><ul><li><a href="/lkml/2007/12/17/192">John Reiser</a><ul><li><a href="/lkml/2007/12/17/216">Theodore Tso</a><ul><li><a href="/lkml/2007/12/17/444">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2007/12/17/308">"David Schwartz"</a></li></ul></li></ul></li><li><a href="/lkml/2007/12/15/25">Herbert Xu</a><ul><li><a href="/lkml/2007/12/15/81">Matt Mackall</a></li><li class="origin"><a href="/lkml/2007/12/17/220">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/17/220">Al Viro</a></li><li><a href="/lkml/2007/12/17/223">Eric Dumazet</a><ul><li><a href="/lkml/2007/12/17/225">"Ray Lee"</a></li><li><a href="/lkml/2007/12/17/233">Al Viro</a></li><li><a href="/lkml/2007/12/17/235">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/12/17/215/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 17 Dec 2007 09:28:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Signed divides vs shifts (Re: [Security] /dev/urandom uses uninit bytes, leaks user data)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 15 Dec 2007, Herbert Xu wrote:<br />&gt; <br />&gt; There ought to be a warning about this sort of thing.<br /><br />We could add it to sparse. The appended (untested) patch seems to say <br />there's a lot of those signed divides-by-power-of-twos.<br /><br />However, the problem with such warnings is that it encourages people to do <br />the simple fix that may be *wrong*. For example, you fixed it with patches <br />like<br /><br />&gt; -		int rsvd = r-&gt;limit ? 0 : random_read_wakeup_thresh/4;<br />&gt; +		int rsvd = r-&gt;limit ? 0 : random_read_wakeup_thresh / 4u;<br /><br />which is really quite dangerous for several reasons:<br /><br /> - it depends intimately on the type of the thing being divided (try it: <br />   it will do nothing at all if the thing you divide is larger than <br />   "unsigned int", since then the "4u" will be turned into a _signed_ <br />   larger type by the C type expansion).<br /><br />   So in general, the above doesn't even do what it's supposed to do on a <br />   64-bit architecture if the thing to be divided is 64-bit!<br /><br /> - it changes behaviour. If that thing really is signed and can be <br />   negative, that "trivial" patch just changed the divide to be <br />   fundamentally something totally different.<br /><br />so I think this patch is horribly wrong.<br /><br />The *correct* way to fix signed divisions is by doing one of two things:<br /><br /> - really make the data we divide be unsigned. With all the thinking that <br />   involves!<br /><br />   This is the good change, but it does involve making sure that there are <br />   no tests against zero and that the value really cannot go negative. <br />   Usually the unsigned types are (a) faster and (b) more robust, but if <br />   somebody is depending on signs, unsigned types are obviously not <br />   appropriate.<br /><br /> - change a divide-by-power-of-2 into a signed shift instead.<br /><br />   Yes, this also changes the end result for negative values, but it <br />   changes it in a sane and generally good way (ie it will still be a <br />   "valid" divide, it will just be a divide that rounds differently, and <br />   is more likely than turning it into an unsigned divide to generally <br />   result in working code).<br /><br />Hmm?<br /><br />			Linus<br />---<br /> simplify.c |   30 ++++++++++++++++++++++++++++++<br /> 1 files changed, 30 insertions(+), 0 deletions(-)<br /><br />diff --git a/simplify.c b/simplify.c<br />index 94e14d2..91f1120 100644<br />--- a/simplify.c<br />+++ b/simplify.c<br />&#64;&#64; -286,6 +286,36 &#64;&#64; static int simplify_constant_rightside(struct instruction *insn)<br /> 		if (!value)<br /> 			return replace_with_pseudo(insn, insn-&gt;src2);<br /> 		return 0;<br />+<br />+	case OP_DIVU: case OP_DIVS:<br />+		if (!value)<br />+			break;<br />+		if (value == 1)<br />+			return replace_with_pseudo(insn, insn-&gt;src1);<br />+		/* Power-of-two? */<br />+		if (!(value &amp; (value-1))) {<br />+			int log2 = -1;<br />+			do {<br />+				log2++;<br />+				value &gt;&gt;= 1;<br />+			} while (value);<br />+<br />+			/* Turn unsigned divides into shifts */<br />+			if (insn-&gt;opcode == OP_DIVU) {<br />+				insn-&gt;src2-&gt;value = log2;<br />+				insn-&gt;opcode = OP_LSR;<br />+				return 1;<br />+			}<br />+<br />+			/*<br />+			 * This is incorrect, but we care more about<br />+			 * the warning than the code generation<br />+			 */<br />+			warning(insn-&gt;pos, "expensive signed divide");<br />+			insn-&gt;src2-&gt;value = log2;<br />+			insn-&gt;opcode = OP_ASR;<br />+			return 1;<br />+		}<br /> 	}<br /> 	return 0;<br /> }<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
