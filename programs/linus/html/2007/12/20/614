    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/17/429">First message in thread</a></li><li><a href="/lkml/2007/12/20/544">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/603">Richard Henderson</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/12/20/659">Benjamin Herrenschmidt</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Dec 2007 17:00:39 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PCI resource problems caused by improper address rounding</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 20 Dec 2007, Richard Henderson wrote:<br />&gt;<br />&gt; This breaks in odd cases where the amount of memory in the system<br />&gt; is not a nice round number.  Like throwing two 128MB sticks into<br />&gt; a system that already has 2gb.  A 512MB allocation will get placed<br />&gt; back at 2gb, on top of the end of ram.<br /><br />No, no, you misunderstand.<br /><br />The kernel *always* takes known memory allocations into account. The <br />"minimum PCI starting allocation" value is not there to protect memory we <br />know about: the resource management already does that!<br /><br />So if you have real memory of 2GB+128MB, and you want a 512MB allocation, <br />then yes, maybe the "preferred starting point" would be rounded back down <br />to 2GB, but the resource allocator would still take known resources into <br />account, and skip that address as being a conflict, and then try the next <br />address that suits the alignment requirements, and try to see if there's a <br />big enough hole at the 2.5GB mark.<br /><br />So it would all work fine.<br /><br />The reason we have that "min" parameter is not because of those _known_ <br />resources, it's exactly because we have been bitten too many times by <br />BIOSes that lay out magic undocumented resources in memory that we simply <br />don't know about, because they aren't standard BAR resources, but some <br />other special magic stuff. Things like the special ACPI areas that the <br />northbridge recognizes, but aren't exposed as regular BAR's, but as just <br />magic registers hidden in some undocumented NB register space.<br /><br />So the reason we have those PCIBIOS_MIN_IO/MEM things is not because we'd <br />trample on top of memory without them, it's because we might trample the <br />BIOS resources that it never told us about!<br /><br />Quite often, that's things like stolen RAM that doesn't show up in the <br />e820 tables (it *should* show up as "reserved", but BIOS writers are <br />generally incompetent drug-addicts picked up from the streets, who just <br />randomly change BIOS tables until Windows boots on the machine), or the <br />afore-mentioned magic IO registers for some special motherboard resource.<br /><br />&gt; In order to get this kind of thing to work, you'd have to have a hard <br />&gt; and a soft minimum.<br /><br />We do have that "hard limit" - the resource management keeps track of all <br />the resources it already knows about. The "soft limit" is exactly that <br />PCIBIOS_MIN_MEM (which on a PC is that "pci_mem_start" variable). It's <br />just a hint, but it's a pretty important one, exactly because we've been <br />burned so many times by crap firmware and undocumented memory and MMIO <br />ranges.<br /><br />				Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
