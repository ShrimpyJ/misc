    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/15/128">First message in thread</a></li><li><a href="/lkml/2007/12/19/168">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/19/284">Jan Kara</a><ul><li><a href="/lkml/2007/12/19/294">Nick Piggin</a></li></ul></li><li><a href="/lkml/2007/12/20/210">=?iso-8859-1?Q?Bj=F6rn?= Steinbrink</a><ul><li><a href="/lkml/2007/12/20/254">Jan Kara</a><ul><li><a href="/lkml/2007/12/20/326">Jan Kara</a></li></ul></li><li class="origin"><a href="/lkml/2007/12/20/361">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/361">Jan Kara</a><ul><li><a href="/lkml/2007/12/20/409">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/12/20/546">=?iso-8859-1?Q?Bj=F6rn?= Steinbrink</a><ul><li><a href="/lkml/2007/12/21/201">Krzysztof Oledzki</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Dec 2007 08:25:56 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug 9182] Critical memory leak (dirty pages)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 20 Dec 2007, Bj?rn Steinbrink wrote:<br />&gt; <br />&gt; OK, so I looked for PG_dirty anyway.<br />&gt; <br />&gt; In 46d2277c796f9f4937bfa668c40b2e3f43e93dd0 you made try_to_free_buffers<br />&gt; bail out if the page is dirty.<br />&gt; <br />&gt; Then in 3e67c0987d7567ad666641164a153dca9a43b11d, Andrew fixed<br />&gt; truncate_complete_page, because it called cancel_dirty_page (and thus<br />&gt; cleared PG_dirty) after try_to_free_buffers was called via<br />&gt; do_invalidatepage.<br />&gt; <br />&gt; Now, if I'm not mistaken, we can end up as follows.<br />&gt; <br />&gt; truncate_complete_page()<br />&gt;   cancel_dirty_page() // PG_dirty cleared, decr. dirty pages<br />&gt;   do_invalidatepage()<br />&gt;     ext3_invalidatepage()<br />&gt;       journal_invalidatepage()<br />&gt;         journal_unmap_buffer()<br />&gt;           __dispose_buffer()<br />&gt;             __journal_unfile_buffer()<br />&gt;               __journal_temp_unlink_buffer()<br />&gt;                 mark_buffer_dirty(); // PG_dirty set, incr. dirty pages<br /><br />Good, this seems to be the exact path that actually triggers it. I got to <br />journal_unmap_buffer(), but was too lazy to actually then bother to follow <br />it all the way down - I decided that I didn't actually really even care <br />what the low-level FS layer did, I had already convinced myself that it <br />obviously must be dirtying the page some way, since that matched the <br />symptoms exactly (ie only the journaling case was impacted, and this was <br />all about the journal).<br /><br />But perhaps more importantly: regardless of what the low-level filesystem <br />did at that point, the VM accounting shouldn't care, and should be robust <br />in the face of a low-level filesystem doing strange and wonderful things. <br />But thanks for bothering to go through the whole history and figure out <br />what exactly is up.<br /><br />&gt; As try_to_free_buffers got its ext3 hack back in<br />&gt; ecdfc9787fe527491baefc22dce8b2dbd5b2908d, maybe<br />&gt; 3e67c0987d7567ad666641164a153dca9a43b11d should be reverted? (Except for<br />&gt; the accounting fix in cancel_dirty_page, of course).<br /><br />Yes, I think we have room for cleanups now, and I agree: we ended up <br />reinstating some questionable code in the VM just because we didn't really <br />know or understand what was going on in the ext3 journal code. <br /><br />Of course, it may well be that there is something *else* going on too, but <br />I do believe that this whole case is what it was all about, and the hacks <br />end up just (a) making the VM harder to understand (because they cause <br />non-obvious VM code to work around some very specific filesystem <br />behaviour) and (b) the hacks obviously hid the _real_ issue, but I think <br />we've established the real cause, and the hacks clearly weren't enough to <br />really hide it 100% anyway.<br /><br />However, there's no way I'll play with that  right now (I'm planning on an <br />-rc6 today), but it might be worth it to make a test-cleanup patch for -mm <br />which does some VM cleanups:<br /><br /> - don't touch dirty pages in fs/buffer.c (ie undo the meat of commit <br />   ecdfc9787fe527491baefc22dce8b2dbd5b2908d, but not resurrecting the <br />   debugging code)<br /><br /> - remove the calling of "cancel_dirty_page()" entirely from <br />   "truncate_complete_page()", and let "remove_from_page_cache()" just <br />   always handle it (and probably just add a "ClearPageDirty()" to match <br />   the "ClearPageUptodate()").<br /><br /> - remove "cancel_dirty_page()" from "truncate_huge_page()", which seems <br />   to be the exact same issue (ie we should just use the logic in <br />   remove_from_page_cache()).<br /><br />at that point "cancel_dirty_page()" literally is only used for what its <br />name implies, and the only in-tree use of it seems to be NFS for when <br />the filesystem gets called for -&gt;invalidatepage - which makes tons of <br />conceptual sense, but I suspect we could drop it from there too, since the <br />VM layer _will_ cancel the dirtiness at a VM level when it then later <br />removes it from the page cache.<br /><br />So we essentially seem to be able to simplify things a bit by getting rid <br />of a hack in try_to_free_buffers(), and potentially getting rid of <br />cancel_dirty_page() entirely.<br /><br />It would imply that we need to do the task_io_account_cancelled_write() <br />inside "remove_from_page_cache()", but that should be ok (I don't see any <br />locking issues there).<br /><br />&gt; On a side note, before 8368e328dfe1c534957051333a87b3210a12743b the task<br />&gt; io accounting for cancelled writes happened always happened if the page<br />&gt; was dirty, regardless of page-&gt;mapping. This was also already true for<br />&gt; the old test_clear_page_dirty code, and the commit log for<br />&gt; 8368e328dfe1c534957051333a87b3210a12743b doesn't mention that semantic<br />&gt; change either, so maybe the "if (account_size)" block should be moved<br />&gt; out of the if "(mapping &amp;&amp; ...)" block?<br /><br />I think the "if (account_size)" thing was *purely* for me being worried <br />about hugetlb entries, and I think that's the only thing that passes in a <br />zero account size.<br /><br />But hugetlbfs already has BDI_CAP_NO_ACCT_DIRTY set (exactly because we <br />cannot account for those pages *anyway*), so I think we could go further <br />than move the account_size outside of the test, I think we could probably <br />remove that test entirely and drop the whole thing.<br /><br />The thing is, task_io_account_cancelled_write() doesn't make sense on <br />mappings that don't do dirty accounting, since those mappings are all <br />special anyway: they don't actually do any real IO, they are all in-ram <br />things. So I think it should stay inside the<br /><br />	if (mapping &amp;&amp; mapping_cap_account_dirty(mapping))<br />		..<br /><br />test, simply because I don't think it makes any conceptual sense outside <br />of it.<br /><br />Hmm?<br /><br />But none of this seems really critical - just simple cleanups.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
