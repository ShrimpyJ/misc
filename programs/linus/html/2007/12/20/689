    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/20/622">First message in thread</a></li><li><a href="/lkml/2007/12/20/683">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/684">Kyle McMartin</a></li><li><a href="/lkml/2007/12/20/686">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2007/12/20/693">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/693">Kyle McMartin</a></li></ul></li><li><a href="/lkml/2007/12/20/692">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/21/180">Junio C Hamano</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Dec 2007 20:40:54 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.24-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 20 Dec 2007, Linus Torvalds wrote:<br />&gt; <br />&gt; It only happened for a few files that had lots of repeated lines - so that <br />&gt; the diff could literally be done multiple different ways - and in fact, <br />&gt; the file that caused the problems really had a bogus commit that <br />&gt; duplicated *way* too much data, and caused lots of #define's to exist <br />&gt; twice.<br /><br />Here's the example of this kind of behaviour: in the 2.6.26-rc5 tree the <br />file drivers/video/mbx/reg_bits.h has the #defines for <br /><br />	/* DINTRS - Display Interrupt Status Register */<br />	/* DINTRE - Display Interrupt Enable Register */<br /><br />duplicated twice due to commit ba282daa919f89c871780f344a71e5403a70b634 <br />("mbxfb: Improvements and new features") by Raphael Assenat mistakenly <br />adding another copy of the same old set of defines that we already got <br />added once before by commit fb137d5b7f2301f2717944322bba38039083c431 <br />("mbxfb: Add more registers bits access macros").<br /><br />Now, that was a mistake - and one that probably happened because Rafael or <br />more likely Andrew Morton used GNU patch with its insane defaults (which <br />is to happily apply the same patch that adds things twice, because it <br />doesn't really care if the context matches or not).<br /><br />But what that kind of thing causes is that when you create a patch of the <br />end result, it can show the now new duplicate lines two different (but <br />equally valid) ways: it can show it as an addition of the _first_ set of <br />lines, or it can show it as an addition of the _second_ set of lines. They <br />are the same, after all.<br /><br />Now, it doesn't really matter which way you choose to show it, although <br />because of how "git diff" finds similarities, it tends to prefer to show <br />the second set of identical lines as the "new" ones. Which is generally <br />reasonable.<br /><br />However, that interacted really badly with the new git logic that said <br />that "if the two files end in the same sequence, just ignore the common <br />tail of the file", because the latter copy of the identical lines would <br />now show up as _part_ of that common tail, so the lines that the git diff <br />machinery would normally like to show up as "new" did in fact end up being <br />considered uninteresting, because they were part of an idential tail. <br /><br />So now "git diff" would happily pick _earlier_ lines as the new ones, and <br />it would still be a conceptually valid diff, but because we had trimmed <br />the tail of the file, that conceptually valid diff no longer had the <br />expected shared context at the end.<br /><br />And while it's a bit embarrassing, I'm really rather happy that both GNU <br />patch and "git apply" actually refused to apply the patch. It may have <br />been "conceptually correct" (ie it did really contain all of the changes!) <br />but because it lacked the expected context it really wasn't a good patch. <br /><br />That was a rather long-winded explanation of what happened, mainly because <br />it was all very unexpected to me, and I had personally mistakenly thought <br />the git optimization was perfectly valid and actually had to go through <br />the end result to see what was going on.<br /><br />Anyway, the diff on kernel.org should be all ok now, and mirrored out too.<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
