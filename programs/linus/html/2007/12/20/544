    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/17/429">First message in thread</a></li><li><a href="/lkml/2007/12/18/388">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/496">Richard Henderson</a><ul><li class="origin"><a href="/lkml/2007/12/20/603">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/603">Richard Henderson</a><ul><li><a href="/lkml/2007/12/20/614">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/12/20/659">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/12/20/544/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Dec 2007 14:24:48 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PCI resource problems caused by improper address rounding</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 20 Dec 2007, Richard Henderson wrote:<br /><br />&gt; On Tue, Dec 18, 2007 at 05:38:58PM -0800, Linus Torvalds wrote:<br />&gt; &gt; That<br />&gt; &gt; <br />&gt; &gt; 	PCI: Cannot allocate resource region 9 of bridge 0000:00:01.0<br />&gt; &gt; 	PCI: Cannot allocate resource region 1 of device 0000:01:00.0<br />&gt; &gt; <br />&gt; &gt; thing is really starting to bug me.<br />&gt; &gt; <br />&gt; &gt; I bet that is the real problem here, but it's not printing out enough <br />&gt; &gt; information about the resource to actually give us much of a clue about <br />&gt; &gt; what is wrong.<br />&gt; &gt; <br />&gt; &gt; I suspect that it had a bridge mapping (device 0:01.0) that included the <br />&gt; &gt; range from 0xc0000000 to 0xcfffffff, but there was something stupid wrong <br />&gt; &gt; with it (eg the BIOS had allocated overlapping regions), so we disabled <br />&gt; &gt; it. That, in turn, then caused us to also refuse the existing 0xc0000000 <br />&gt; &gt; mapping for the graphics card (device 01:00.0), because now there was no <br />&gt; &gt; valid resource for it.<br />&gt; <br />&gt; That is exactly it.  The relevant section of the debug info is<br />&gt; <br />&gt; PCI: Bridge 0000:00:01.0<br />&gt; PCI: Bridge resource 7 00008000-00008fff (%f=100)<br />&gt; PCI: Bridge resource 8 f7d00000-fddfffff (%f=200)<br />&gt; PCI: Bridge resource 9 bdf00000-ddefffff (%f=1201)<br />&gt; <br />&gt; The bridge was assigned to a piece of the end of physical memory.  <br /><br />Oh, wow. That's just really bogus. So the kernel message about<br /><br />	PCI: Cannot allocate resource region 9 of bridge 0000:00:01.0<br /><br />was perfectly fine, and we did absolutely the right thing.<br /><br />But it also says that if the graphics adaptor really had a resource mapped <br />at 0xc0000000 - 0xcfffffff by the BIOS, then that mapping never worked at <br />all, since it never had any bridge mapping it could rely on. So our <br />decision to unmap that one as invalid was _also_ right.<br /><br />Damn. Very irritating.<br /><br />You know what? I think this simple (BUT TOTALLY UNTESTED!) patch will get <br />your case right, and I think it is preferable to just always lowering the <br />"minimum" starting point.<br /><br />What it does is to just take the minimum PCI address for new allocations <br />(which is only used for the case where we don't have an explicit starting <br />point for the parent bus anyway!), and just saying "we'll always align it <br />down to the required alignment of the allocation".<br /><br />I'm not exactly 100% happy with it, but it does mean that if we need a big <br />area, we'll relax the suggested starting point by that amount. It's not <br />wonderful, but it essentially admits that the minimum for the allocations <br />is really just a hint, and if we need lots of space for a resource, we'll <br />relax the minimum point appropriately.<br /><br />So in your case, it should *result* in the exact same situation that your <br />patch did, but at the same time, when dealing with the (more common) case <br />of smaller allocations, we still continue to try to avoid being too close <br />to the top-of-memory.<br /><br />So it's not perfect, but perhaps it is a good compromise between being <br />careful and having to make room?<br /><br />Does this work for your case?<br /><br />		Linus<br /><br />---<br /> drivers/pci/bus.c |    2 +-<br /> 1 files changed, 1 insertions(+), 1 deletions(-)<br /><br />diff --git a/drivers/pci/bus.c b/drivers/pci/bus.c<br />index 9e5ea07..d48d270 100644<br />--- a/drivers/pci/bus.c<br />+++ b/drivers/pci/bus.c<br />&#64;&#64; -61,7 +61,7 &#64;&#64; pci_bus_alloc_resource(struct pci_bus *bus, struct resource *res,<br /> <br /> 		/* Ok, try it out.. */<br /> 		ret = allocate_resource(r, res, size,<br />-					r-&gt;start ? : min,<br />+					r-&gt;start ? : min &amp; -align,<br /> 					-1, align,<br /> 					alignf, alignf_data);<br /> 		if (ret == 0)<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
