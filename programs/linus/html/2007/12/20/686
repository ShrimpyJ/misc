    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/20/622">First message in thread</a></li><li><a href="/lkml/2007/12/20/670">Kyle McMartin</a><ul><li><a href="/lkml/2007/12/20/683">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/684">Kyle McMartin</a></li><li class="origin"><a href="/lkml/2007/12/20/689">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/689">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/693">Kyle McMartin</a></li></ul></li><li><a href="/lkml/2007/12/20/692">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/21/180">Junio C Hamano</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/12/20/686/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 20 Dec 2007 20:22:46 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 2.6.24-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 20 Dec 2007, Linus Torvalds wrote:<br />&gt; <br />&gt; The tar-ball and the git archive itself is fine, but yes, the diff from <br />&gt; 2.6.23 to 2.6.24-rc6 is bad. It's the "trim_common_tail()" optimization <br />&gt; that has caused way too much pain.<br /><br />Very interesting breakage. The patch was actually "correct" in a (rather <br />limited) technical sense, but the context at the end was missing because <br />while the trim_common_tail() code made sure to keep enough common context <br />to allow a valid diff to be generated, the diff machinery itself could <br />decide that it could generate the diff differently than the "obvious" <br />solution.<br /><br />It only happened for a few files that had lots of repeated lines - so that <br />the diff could literally be done multiple different ways - and in fact, <br />the file that caused the problems really had a bogus commit that <br />duplicated *way* too much data, and caused lots of #define's to exist <br />twice.<br /><br />But the sad fact appears that the git optimization (which is very <br />important for "git blame", which needs no context), is only really valid <br />for that one case where we really don't need any context.<br /><br />I uploaded a fixed patch. And here's the git patch to avoid this <br />optimization when there is context.<br /><br />		Linus<br /><br />---<br /> xdiff-interface.c |   12 ++++++------<br /> 1 files changed, 6 insertions(+), 6 deletions(-)<br /><br />diff --git a/xdiff-interface.c b/xdiff-interface.c<br />index 9ee877c..0b7e057 100644<br />--- a/xdiff-interface.c<br />+++ b/xdiff-interface.c<br />&#64;&#64; -110,22 +110,22 &#64;&#64; int xdiff_outf(void *priv_, mmbuffer_t *mb, int nbuf)<br /> static void trim_common_tail(mmfile_t *a, mmfile_t *b, long ctx)<br /> {<br /> 	const int blk = 1024;<br />-	long trimmed = 0, recovered = 0;<br />+	long trimmed = 0;<br /> 	char *ap = a-&gt;ptr + a-&gt;size;<br /> 	char *bp = b-&gt;ptr + b-&gt;size;<br /> 	long smaller = (a-&gt;size &lt; b-&gt;size) ? a-&gt;size : b-&gt;size;<br /> <br />+	if (ctx)<br />+		return;<br />+<br /> 	while (blk + trimmed &lt;= smaller &amp;&amp; !memcmp(ap - blk, bp - blk, blk)) {<br /> 		trimmed += blk;<br /> 		ap -= blk;<br /> 		bp -= blk;<br /> 	}<br /> <br />-	while (recovered &lt; trimmed &amp;&amp; 0 &lt;= ctx)<br />-		if (ap[recovered++] == '\n')<br />-			ctx--;<br />-	a-&gt;size -= (trimmed - recovered);<br />-	b-&gt;size -= (trimmed - recovered);<br />+	a-&gt;size -= trimmed;<br />+	b-&gt;size -= trimmed;<br /> }<br /> <br /> int xdi_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *xecb)<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
