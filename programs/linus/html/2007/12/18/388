    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/12/17/429">First message in thread</a></li><li><a href="/lkml/2007/12/18/292">Richard Henderson</a><ul><li><a href="/lkml/2007/12/18/322">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2007/12/20/496">Linus Torvalds</a><ul><li><a href="/lkml/2007/12/20/496">Richard Henderson</a><ul><li><a href="/lkml/2007/12/20/544">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/12/18/388/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 18 Dec 2007 17:38:58 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PCI resource problems caused by improper address rounding</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 18 Dec 2007, Linus Torvalds wrote:<br />&gt; <br />&gt; That question also brings up another issue: how come did we actually <br />&gt; choose address 0xc0000000 with the original patch you sent in? If we can't <br />&gt; find it in the parent resources, we shouldn't have accepted it even if it <br />&gt; had room for it!<br /><br />That<br /><br />	PCI: Cannot allocate resource region 9 of bridge 0000:00:01.0<br />	PCI: Cannot allocate resource region 1 of device 0000:01:00.0<br /><br />thing is really starting to bug me.<br /><br />I bet that is the real problem here, but it's not printing out enough <br />information about the resource to actually give us much of a clue about <br />what is wrong.<br /><br />I suspect that it had a bridge mapping (device 0:01.0) that included the <br />range from 0xc0000000 to 0xcfffffff, but there was something stupid wrong <br />with it (eg the BIOS had allocated overlapping regions), so we disabled <br />it. That, in turn, then caused us to also refuse the existing 0xc0000000 <br />mapping for the graphics card (device 01:00.0), because now there was no <br />valid resource for it.<br /><br />But that PCI bridge resource handling happens even *before* we look at any <br />PnP reserved areas (because we - for really good reasons - trust the <br />hardware a _lot_ more than we trust any idiotic firmware tables), so I <br />wonder what that strange PCI bridge mapping in 00:01.0 was - it must have <br />been _really_ off in order to not fit in the resource tree.<br /><br />Could you just make it print out what the bridge resources are when it <br />scans them? Something like the appended..<br /><br />		Linus<br /><br />---<br />diff --git a/arch/x86/pci/i386.c b/arch/x86/pci/i386.c<br />index 42ba0e2..37c4b92 100644<br />--- a/arch/x86/pci/i386.c<br />+++ b/arch/x86/pci/i386.c<br />&#64;&#64; -117,11 +117,16 &#64;&#64; static void __init pcibios_allocate_bus_resources(struct list_head *bus_list)<br /> 	/* Depth-First Search on bus tree */<br /> 	list_for_each_entry(bus, bus_list, node) {<br /> 		if ((dev = bus-&gt;self)) {<br />+			printk(KERN_DEBUG "PCI: Bridge %s\n", pci_name(dev));<br /> 			for (idx = PCI_BRIDGE_RESOURCES;<br /> 			    idx &lt; PCI_NUM_RESOURCES; idx++) {<br /> 				r = &amp;dev-&gt;resource[idx];<br /> 				if (!r-&gt;flags)<br /> 					continue;<br />+				printk(KERN_DEBUG "PCI: Bridge resource "<br />+					"%08llx-%08llx (f=%lx)\n",<br />+					r-&gt;start, r-&gt;end, r-&gt;flags);<br />+<br /> 				pr = pci_find_parent_resource(dev, r);<br /> 				if (!r-&gt;start || !pr ||<br /> 				    request_resource(pr, r) &lt; 0) {<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
