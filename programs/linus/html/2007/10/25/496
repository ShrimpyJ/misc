    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/24/673">First message in thread</a></li><li><a href="/lkml/2007/10/25/476">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/25/486">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2007/10/25/520">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/25/520">Zachary Amsden</a></li></ul></li><li><a href="/lkml/2007/10/26/15">Willy Tarreau</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Oct 2007 16:57:34 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Andi Kleen wrote:<br />&gt; <br />&gt; The conditional add/sub using carry trick is not generally bogus. <br />&gt; But for registers it's a fine optimization.<br /><br />For registers it's fine. For memory, it's a disaster. It's more than just <br />dirty cachelines and introducing race conditions, it's also about <br />protection and dirty pages.<br /><br />So even in user space, to even be correct in the first place, the compiler <br />would need to make sure that the variable is writable at all (or you might <br />take a SIGSEGV), but I guess that gcc just assumes it is, at least for <br />globals (or gcc could depend on seeing *other* writes that are done <br />unconditionally).<br /><br />More likely, the compiler people don't even care, because "the C standard <br />doesn't specify that behaviour" - ie things like write-protected memory or <br />garbage collection based on dirty/accessed bits are outside the scope of <br />what the language specifies. Much less things like pthreads or other <br />synchronization primitives in threads.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
