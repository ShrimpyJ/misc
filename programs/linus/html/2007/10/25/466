    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/24/673">First message in thread</a></li><li><a href="/lkml/2007/10/25/452">Nick Piggin</a><ul><li><a href="/lkml/2007/10/25/461">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2007/10/25/467">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/25/467">Andi Kleen</a><ul><li><a href="/lkml/2007/10/25/476">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2007/10/25/489">Nick Piggin</a><ul><li><a href="/lkml/2007/10/25/494">Andi Kleen</a><ul><li><a href="/lkml/2007/10/25/499">Nick Piggin</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Oct 2007 16:14:41 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Andi Kleen wrote:<br />&gt; &gt; <br />&gt; &gt; Marking volatile I think is out of the question. To start with,<br />&gt; &gt; volatile creates really poor code (and most of the time we actually<br />&gt; &gt; do want the code in critical sections to be as tight as possible).<br />&gt; <br />&gt; Poor code is better than broken code I would say.<br /><br />No. A *working*compiler* is better than broken code.<br /><br />There's no way to use volatile for these things, since it can hit <br />*anything*. When the compiler generates buggy code, it's buggy code. We <br />can't add volatiles to every single data structure. We'd be better off <br />having a million monkeys on crack try to hand-assemble the thing, than <br />having a totally buggy compiler do it for us.<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
