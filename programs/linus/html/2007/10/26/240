    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/26/213">First message in thread</a></li><li><a href="/lkml/2007/10/26/213">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/231">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/246">Andrew Haley</a><ul><li><a href="/lkml/2007/10/26/362">"David Schwartz"</a><ul><li><a href="/lkml/2007/10/30/135">Andrew Haley</a></li></ul></li></ul></li><li><a href="/lkml/2007/10/26/487">Giacomo Catenazzi</a><ul><li><a href="/lkml/2007/10/26/500">Linus Torvalds</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2007/10/26/276">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/276">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/318">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/330">Andrew Haley</a></li><li><a href="/lkml/2007/10/26/360">Alan Cox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2007 08:27:18 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Bart Van Assche wrote:<br />&gt; <br />&gt; You can find my proposal to improve gcc here:<br />&gt; <a href="https://gcc.gnu.org/ml/gcc/2007-10/msg00465.html">http://gcc.gnu.org/ml/gcc/2007-10/msg00465.html</a><br /><br />Btw, I think this is fine per se, but putting "__attribute__((acquire))" <br />on the functions that acquire a lock does seem to be problematic, in that <br />quite often you might well want to inline those things. How would you <br />handle that?<br /><br />The fact is, the whole optimization is broken. You should never do <br />extraneous writes to anything but registers (or your own spill pool on the <br />stack - anything that hasn't had its address taken and cannot be visible <br />to outsiders). A C compiler should basically do what the user asks it to <br />do, and that means that it simply should be _very_ nervous about doing <br />optimizations that can have visible secondary effects.<br /><br />So the first question that should be asked is: "is that optimization even <br />worth it in the first place outside of registers and the spill pool?"<br /><br />If an optimization introduces visible behaviour differences to the <br />"obvious" stupid interpretation of the code, it should automatically be <br />something that should be given a lot of thought, and perhaps not enabled <br />at all by default (where "default" is certainly normal optimization <br />levels).<br /><br />And different languages have different usages. In C, it's quite common <br />(and _possible_) for the programmer to specify how to do things at a <br />fairly low level. That's not true in all other languages, and it affects <br />how a compiler should optimize things. In C, a compiler should give more <br />weight to "this is how the user specified the solution" because in C, <br />programmers really *do* that. <br /><br />So I don't think your proposal is wrong, but I think before even going to <br />something like that, you should ask yourself: "was that a valid <br />optimization to start with?"<br /><br />(That said, there may well be *other* reasons for wanting gcc to know <br />about lock/unlock behaviour and teaching gcc about barriers. If gcc starts <br />getting more threading knowledge, gcc may well need to have that kind of <br />information in other places).<br /><br />				Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
