    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/26/213">First message in thread</a></li><li><a href="/lkml/2007/10/26/318">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/330">Andrew Haley</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/10/26/360">Alan Cox</a><ul><li><a href="/lkml/2007/10/26/367">Linus Torvalds</a></li><li><a href="/lkml/2007/10/26/441">Andi Kleen</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2007 10:25:29 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Andrew Haley wrote:<br />&gt;<br />&gt; Bart Van Assche writes:<br />&gt; <br />&gt;  &gt; Andrew, do you know whether gcc currently contains any optimization<br />&gt;  &gt; that interchanges the order of accesses to non-volatile variables<br />&gt;  &gt; and function calls ?<br />&gt; <br />&gt; It sure does.<br /><br />Note that doing so is perfectly fine.<br /><br />But only for local variables that haven't had their addresses taken.<br /><br />The fact is, those kinds of variables really *are* special. They are <br />provably not accessible from any other context, and re-ordering them (or <br />doing anything AT ALL to them - the most basic and very important <br />optimization is caching them in registers, of course) is always purely an <br />internal compiler issue.<br /><br />But if gcc re-orders functions calls with *other* memory accesses, gcc is <br />totally broken. I doubt it does that. It would break on all but the most <br />trivial programs, and it would be a clear violation of even standard C.<br /><br />HOWEVER: the bug that started this thread isn't even "reordering <br />accesses", it's *adding* accesses that weren't there (and please don't mix <br />this up with "volatile", since volatile is a totally unrelated issue and <br />has nothing what-so-ever to do with anything).<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
