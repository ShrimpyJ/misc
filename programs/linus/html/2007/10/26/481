    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/26/478">First message in thread</a></li><li><a href="/lkml/2007/10/26/478">Karl Schendel</a><ul><li class="origin"><a href="/lkml/2007/10/26/498">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/498">Karl Schendel</a></li><li><a href="/lkml/2007/10/26/503">Zach Brown</a><ul><li><a href="/lkml/2007/10/26/508">Karl Schendel</a></li><li><a href="/lkml/2007/10/26/511">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/514">Zach Brown</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/10/26/481/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2007 14:34:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Fix bad data from non-direct-io read after direct-io write</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Hmm. If I read this right, this bug seems to have been introduced by <br />commit 65b8291c4000e5f38fc94fb2ca0cb7e8683c8a1b ("dio: invalidate clean <br />pages before dio write") back in March.<br /><br />Before that, we'd call invalidate_inode_pages2_range() unconditionally <br />after the call mapping-&gt;a_ops-&gt;direct_IO() if it was a write and there <br />were cached pages in the mapping (well, "unconditionally" in the sense <br />that it didn't depend on the return value of the -&gt;direct_IO() call).<br /><br />However, with both the old and the new code _and_ with your patch, the <br />return code - in case the invalidate failed - was corrupted. So we may <br />actually end up doing some IO, but then returning the "wrong" error code <br />from the invalidate. Hmm?<br /><br />Somebody who cares about direct-IO and who - unlike me - doesn't think <br />it's a total and idiotic crock should think hard about this. I'm including <br />Karl's email, but also an alternate patch for consideration.<br /><br />And maybe some day we can all agree that direct_IO is crap and should not <br />be done.<br /><br />		Linus<br /><br />--<br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index 5209e47..032371a 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -2510,22 +2510,17 &#64;&#64; generic_file_direct_IO(int rw, struct kiocb *iocb, const struct iovec *iov,<br /> 	}<br /> <br /> 	retval = mapping-&gt;a_ops-&gt;direct_IO(rw, iocb, iov, offset, nr_segs);<br />-	if (retval)<br />+	if (retval &lt; 0)<br /> 		goto out;<br /> <br /> 	/*<br /> 	 * Finally, try again to invalidate clean pages which might have been<br /> 	 * faulted in by get_user_pages() if the source of the write was an<br /> 	 * mmap()ed region of the file we're writing.  That's a pretty crazy<br />-	 * thing to do, so we don't support it 100%.  If this invalidation<br />-	 * fails and we have -EIOCBQUEUED we ignore the failure.<br />+	 * thing to do, so we don't support it 100%.<br /> 	 */<br />-	if (rw == WRITE &amp;&amp; mapping-&gt;nrpages) {<br />-		int err = invalidate_inode_pages2_range(mapping,<br />-					      offset &gt;&gt; PAGE_CACHE_SHIFT, end);<br />-		if (err &amp;&amp; retval &gt;= 0)<br />-			retval = err;<br />-	}<br />+	if (rw == WRITE &amp;&amp; mapping-&gt;nrpages)<br />+		invalidate_inode_pages2_range(mapping, offset &gt;&gt; PAGE_CACHE_SHIFT, end);<br /> out:<br /> 	return retval;<br /> }<br />On Fri, 26 Oct 2007, Karl Schendel wrote:<br />&gt;<br />&gt; This patch fixes a race between direct IO writes and non-direct IO<br />&gt; reads on the same file.  The symptom is a stale file page seen by<br />&gt; any non-direct-IO reader, which persists until the page is invalidated<br />&gt; somehow (e.g. page rewritten again, or memory pressure, or reboot).<br />&gt; <br />&gt; An improper return test caused direct-IO's after-write page invalidations<br />&gt; to be skipped.  If we're writing page N, and the reader is reading<br />&gt; page N-x for small x, and the read code decides to readahead, it's<br />&gt; not too hard to cause a race that leaves an old, stale copy of the<br />&gt; page in the page cache.  Retval is usually +nonzero after the<br />&gt; mapping-&gt;a_ops-&gt;direct_IO call!<br />&gt; <br />&gt; Signed-off-by: Karl Schendel &lt;kschendel&#64;datallegro.com&gt;<br />&gt; <br />&gt; ---<br />&gt; <br />&gt; By the way, I agree that the userland situation is stupid, and I'm<br />&gt; addressing that in the application (happens to be the Ingres DBMS).<br />&gt; However, the kernel shouldn't compound the stupidity.<br />&gt; <br />&gt; I'll try to watch for replies, but it would be very useful to<br />&gt; cc me at kschendel&#64;datallegro.com if any discussion is needed;<br />&gt; I'm not subscribed to lkml.<br />&gt; <br />&gt; <br />&gt; --- linux-2.6.23.1-base/mm/filemap.c	2007-10-12 12:43:44.000000000 -0400<br />&gt; +++ linux-2.6.23.1/mm/filemap.c	2007-10-26 16:12:08.000000000 -0400<br />&gt; &#64;&#64; -2194,7 +2194,7 &#64;&#64; generic_file_direct_IO(int rw, struct ki<br />&gt;  	}<br />&gt; <br />&gt;  	retval = mapping-&gt;a_ops-&gt;direct_IO(rw, iocb, iov, offset, nr_segs);<br />&gt; -	if (retval)<br />&gt; +	if (retval &lt; 0)<br />&gt;  		goto out;<br />&gt; <br />&gt;  	/*<br />&gt; <br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
