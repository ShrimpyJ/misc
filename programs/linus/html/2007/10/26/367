    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/26/213">First message in thread</a></li><li><a href="/lkml/2007/10/26/318">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/330">Andrew Haley</a><ul><li><a href="/lkml/2007/10/26/332">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/10/26/360">Alan Cox</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2007/10/26/441">Andi Kleen</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2007 11:14:17 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Alan Cox wrote:<br />&gt;<br />&gt; &gt; non-volatile variables. But for asm statements this can be solved by<br />&gt; &gt; adding memory to the list of clobbered registers -- this will prevent<br />&gt; &gt; any reordering of manipulations of non-volatile variables and asm<br />&gt; &gt; statements.<br />&gt; <br />&gt; IFF the processor doesn't reorder them in hardware, which on some<br />&gt; processors is visibly out of order when viewed from an I/O device or<br />&gt; another CPU.<br />&gt; <br />&gt; You can stop the compiler but not the CPU - and some processors will<br />&gt; certainly speculatively load across conditionals, reorder writes etc<br /><br />Well, when we're talking inline asms used for locking, the whole point of <br />using inline asm is exactly that you cannot do it with regular accesses, <br />and have to add architecture-specific barriers. If the user gets that <br />wrong, then it's a user problem, not a compiler issue.<br /><br />So that's not the problem. The problem is if the compiler then does other <br />things wrong *despite* the inline asm being correct. <br /><br />				Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
