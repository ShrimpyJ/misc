    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/26/213">First message in thread</a></li><li><a href="/lkml/2007/10/26/213">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/231">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/246">Andrew Haley</a><ul><li><a href="/lkml/2007/10/26/362">"David Schwartz"</a><ul><li><a href="/lkml/2007/10/30/135">Andrew Haley</a></li></ul></li></ul></li><li><a href="/lkml/2007/10/26/487">Giacomo Catenazzi</a><ul><li><a href="/lkml/2007/10/26/500">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2007/10/26/240">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2007/10/26/318">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/26/318">"Bart Van Assche"</a><ul><li><a href="/lkml/2007/10/26/330">Andrew Haley</a></li><li><a href="/lkml/2007/10/26/360">Alan Cox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2007 09:28:47 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is gcc thread-unsafe?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Oct 2007, Linus Torvalds wrote:<br /><br />&gt; <br />&gt; <br />&gt; On Fri, 26 Oct 2007, Bart Van Assche wrote:<br />&gt; &gt; <br />&gt; &gt; You can find my proposal to improve gcc here:<br />&gt; &gt; <a href="https://gcc.gnu.org/ml/gcc/2007-10/msg00465.html">http://gcc.gnu.org/ml/gcc/2007-10/msg00465.html</a><br />&gt; <br />&gt; Btw, I think this is fine per se, but putting "__attribute__((acquire))" <br />&gt; on the functions that acquire a lock does seem to be problematic, in that <br />&gt; quite often you might well want to inline those things. How would you <br />&gt; handle that?<br /><br />Thinking some more about this, you really have two cases:<br /><br /> - full functions taking/releasing locks (possibly conditionally, ie <br />   with something lik etrylock and/or based on argument values). <br /><br />   You simply *cannot* require these to be marked, because the locking may <br />   have been done indirectly. Yes, you can mark things like <br />   "pthread_mutex_trylock()" as being an acquire-function, but the fact <br />   is, users will then wrap these things in *other* functions, and return <br />   their return values.<br /><br />   Ergo: a compiler *must* assume that a function call that it <br />   didn't inline involves locking. There's no point in adding some <br />   gcc-specific attributes to system header files, because it's not going <br />   to fix anything in any portable program.<br /><br /> - inline assembly (together with, potentially, compiler primitives). <br />   That's the only other way to reliably do locking from C. <br /><br />   This one gcc could certainly extend on. But would there really be any <br />   upside? It would be easier/better to say that inline assembly (at least <br />   if it clobbers memory or is volatile) has the same serialization issues <br />   as a function call.<br /><br />So the fact is, any compiler that turns<br /><br />	if (conditional)<br />		x++;<br /><br />into an unconditional write to x (where 'x' is potentially visible to the <br />outside - global visibility or has had its address taken) is just broken. <br /><br />No ifs, buts or maybes about it. You simply cannot do that optimization, <br />because there is no way for the compiler to know whether the conditional <br />implies that you hold a lock or not.<br /><br />				Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
