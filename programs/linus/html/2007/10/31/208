    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/30/559">First message in thread</a></li><li><a href="/lkml/2007/10/30/559">"Duane Griffin"</a><ul><li><a href="/lkml/2007/10/31/7">Nick Piggin</a><ul><li><a href="/lkml/2007/10/31/129">"Duane Griffin"</a></li><li class="origin"><a href="/lkml/2007/10/31/210">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/31/210">Nick Piggin</a><ul><li><a href="/lkml/2007/10/31/251">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/10/31/50">Nick Piggin</a><ul><li><a href="/lkml/2007/10/31/56">David Miller</a><ul><li><a href="/lkml/2007/10/31/68">Nick Piggin</a><ul><li><a href="/lkml/2007/10/31/69">David Miller</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/10/31/208/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Oct 2007 08:11:10 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 2.6.23 regression: accessing invalid mmap'ed memory from gdb causes unkillable spinning</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 31 Oct 2007, Nick Piggin wrote:<br />&gt; <br />&gt; However I actually don't really like how this all works. I don't like that<br />&gt; filemap.c should have to know about ptrace, or exactly what ptrace wants here.<br /><br />It shouldn't. It should just fail when it fails. Then, handle_mm_fault() <br />should return an error code, which should cause get_user_pages() to return <br />an error code. Which should make ptrace just stop.<br /><br />So I think your patch is wrong. mm/filemap.c should *not* care about who <br />does the fault.  I think the proper patch is something untested like the <br />appended...<br /><br />&gt; It's a bit hairy to force insert page into pagecache and pte into pagetables<br />&gt; here, given the races.<br /><br />It's also wrong. They shouldn't be in the page cache, since that can cause <br />problems with truncate etc. Maybe it doesn't any more, but it's reasonable <br />to believe that a page outside of i_size should not exist.<br /><br />&gt; In access_process_vm, can't we just zero fill in the case of a sigbus? Linus?<br />&gt; That will also avoid changing applicatoin behaviour due to a gdb read...<br /><br />access_process_vm() should just return how many bytes it could fill (which <br />means a truncated copy - very including zero bytes - for an error), and <br />the caller should decide what the right thing to do is.<br /><br />But who knows, maybe I missed something.<br /><br />Duane? Does this fix things for you?<br /><br />			Linus<br /><br />---<br /> mm/filemap.c |   13 ++-----------<br /> 1 files changed, 2 insertions(+), 11 deletions(-)<br /><br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index 9940895..188cf5f 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -1300,7 +1300,7 &#64;&#64; int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)<br /> <br /> 	size = (i_size_read(inode) + PAGE_CACHE_SIZE - 1) &gt;&gt; PAGE_CACHE_SHIFT;<br /> 	if (vmf-&gt;pgoff &gt;= size)<br />-		goto outside_data_content;<br />+		return VM_FAULT_SIGBUS;<br /> <br /> 	/* If we don't want any read-ahead, don't bother */<br /> 	if (VM_RandomReadHint(vma))<br />&#64;&#64; -1377,7 +1377,7 &#64;&#64; retry_find:<br /> 	if (unlikely(vmf-&gt;pgoff &gt;= size)) {<br /> 		unlock_page(page);<br /> 		page_cache_release(page);<br />-		goto outside_data_content;<br />+		return VM_FAULT_SIGBUS;<br /> 	}<br /> <br /> 	/*<br />&#64;&#64; -1388,15 +1388,6 &#64;&#64; retry_find:<br /> 	vmf-&gt;page = page;<br /> 	return ret | VM_FAULT_LOCKED;<br /> <br />-outside_data_content:<br />-	/*<br />-	 * An external ptracer can access pages that normally aren't<br />-	 * accessible..<br />-	 */<br />-	if (vma-&gt;vm_mm == current-&gt;mm)<br />-		return VM_FAULT_SIGBUS;<br />-<br />-	/* Fall through to the non-read-ahead case */<br /> no_cached_page:<br /> 	/*<br /> 	 * We're only likely to ever get here if MADV_RANDOM is in<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
