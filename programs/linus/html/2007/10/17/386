    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/17/221">First message in thread</a></li><li><a href="/lkml/2007/10/17/354">Jens Axboe</a><ul><li><a href="/lkml/2007/10/17/362">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/17/370">Jens Axboe</a><ul><li><a href="/lkml/2007/10/17/378">Jens Axboe</a><ul><li><a href="/lkml/2007/10/17/394">Linus Torvalds</a></li><li><a href="/lkml/2007/10/17/411">Ingo Molnar</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/10/17/364">Jens Axboe</a><ul><li><a href="/lkml/2007/10/17/376">Ingo Molnar</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2007/10/18/59">Ingo Molnar</a><ul><li><a href="/lkml/2007/10/18/62">Jens Axboe</a></li><li><a href="/lkml/2007/10/18/78">Jeff Garzik</a><ul><li><a href="/lkml/2007/10/18/80">Jens Axboe</a><ul><li><a href="/lkml/2007/10/18/82">Jeff Garzik</a></li><li><a href="/lkml/2007/10/18/92">Jeff Garzik</a></li><li><a href="/lkml/2007/10/20/59">"Torsten Kaiser"</a></li></ul></li></ul></li><li><a href="/lkml/2007/10/18/149">Ingo Molnar</a><ul><li><a href="/lkml/2007/10/18/151">Jens Axboe</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Oct 2007 13:10:59 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [bug] ata subsystem related crash with latest -git</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 17 Oct 2007, Jens Axboe wrote:<br />&gt; <br />&gt; Well, hang on - where does it end up doing sg_next() on the LAST sg<br />&gt; entry?<br /><br />They pretty much *all* do, as far as I can tell.<br /><br />For example, to look at the very first one:<br /><br />	#define for_each_sg(sglist, sg, nr, __i)        \<br />		for (__i = 0, sg = (sglist); __i &lt; (nr); __i++, sg = sg_next(sg))<br /><br />let's say that "nr" is 1 (and that's also the allocation size), and look <br />at what that causes.<br /><br />Right. It causes us to do "sg = sg_next(sg)" once. Which will do what? It <br />will increment sg (so that it now points past the single-entry array!) and <br />then it will dereference that invalid entry to see if it's a chain entry!<br /><br /><br />And no, "1" is not the special case. The special case is *any* time when <br />you iterate over as many sg entries as you allocated. You *always* have to <br />leave the last one unused in order to avoid this "access past the end" <br />problem.<br /><br />The alternative is to rewrite the loop, but it's going to be ugly as hell, <br />and you need to do that for *every*single*user* of sg_next(). You can <br />re-write the above loop as something like<br /><br />	define for_each_sg(sglist, sg, nr, __i)<br />		for (__i = 0, sg = NULL ;<br />			__i &lt; (nr) &amp;&amp; sg = (sg ? sglist : sg_next(sg) ;<br />			__i++))<br /><br />but the important part here is that you must do that "sg_next()" *after* <br />you have broken out of the loop, and you must basically do it one less <br />time than you go through the loop.<br /><br />IOW, any loop that leaves "sg" pointing to past the array is inevitably <br />buggy, because it will have accessed that last past-tne-end entry as part <br />of tryign to decide whether it should perhaps follow a link.<br /><br />&gt; I'd argue that this is a bug, like it was in ll_rw_blk.c. I still<br />&gt; agree that I should make the interface more robust, I just don't see<br />&gt; where libata ends up doing the sg_next() on the last entry.<br /><br />See above. I think the exact sequence may be:<br /><br />    ata_qc_issue()<br />	(implicitly inlined) ata_sg_setup()<br />		(explicitly inlined) dma_map_sg()<br />			(macro) for_each_sg()<br /><br />but I didn't see if there are other possible chains that get you to one of <br />those invalid sg loops.<br /><br />And no, it's *not* just for_each_sg(). Pretty much any "natural" loop over <br />the SG list will cause it, because that's how you write loops in C: you <br />almost always end up pointing to one past the last entry after the loop.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
