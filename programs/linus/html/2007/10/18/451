    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/17/519">First message in thread</a></li><li><a href="/lkml/2007/10/18/440">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/18/446">Benjamin Herrenschmidt</a><ul><li class="origin"><a href="/lkml/2007/10/18/457">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/18/457">Benjamin Herrenschmidt</a></li><li><a href="/lkml/2007/10/18/473">Herbert Xu</a><ul><li><a href="/lkml/2007/10/18/476">Nick Piggin</a></li><li><a href="/lkml/2007/10/18/478">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/10/18/451/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 18 Oct 2007 16:39:59 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] synchronize_irq needs a barrier</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 19 Oct 2007, Benjamin Herrenschmidt wrote:<br />&gt; <br />&gt; I agree and you can see that in fact, we don't have enough barrier on<br />&gt; the other side since spin_unlock doesn't prevent subsequent loads from<br />&gt; crossing a previous store...<br />&gt; <br />&gt; I wonder if that's worth trying to address, adding a barrier in<br />&gt; handle_IRQ_event for example, or we can continue ignoring the barrier<br />&gt; and let some drivers do their own fixes in fancy ways.<br /><br />So how about something like this (untested! not necessarily very well <br />thought through either!)<br /><br />Basic notion: the only thing that serializes the IRQ_INPROGRESS flag is <br />the descriptor lock. And we don't have to (or even want to!) hold it while <br />waiting for the thing, but we want to *have*held*it* in between whatever <br />we're synchronizing with.<br /><br />The internal irq handler functions already held the lock when they did <br />whatever they need to serialize - and they are possibly performance <br />critical too - so they use the "internal" function that doesn't get the <br />lock unnecessarily again.<br /><br />Hmm? <br /><br />		Linus<br /><br />---<br /> kernel/irq/manage.c |   22 ++++++++++++++++++----<br /> 1 files changed, 18 insertions(+), 4 deletions(-)<br /><br />diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c<br />index 80eab7a..f3e9575 100644<br />--- a/kernel/irq/manage.c<br />+++ b/kernel/irq/manage.c<br />&#64;&#64; -14,6 +14,18 &#64;&#64;<br /> <br /> #include "internals.h"<br /> <br />+/*<br />+ * Internally wait for IRQ_INPROGRESS to go away on other CPU's,<br />+ * after having serialized with the descriptor lock.<br />+ */<br />+static inline void do_synchronize_irq(struct irq_desc *desc)<br />+{<br />+#ifdef CONFIG_SMP<br />+	while (desc-&gt;status &amp; IRQ_INPROGRESS)<br />+		cpu_relax();<br />+#endif<br />+}<br />+<br /> #ifdef CONFIG_SMP<br /> <br /> /**<br />&#64;&#64; -28,13 +40,15 &#64;&#64;<br />  */<br /> void synchronize_irq(unsigned int irq)<br /> {<br />+	unsigned long flags;<br /> 	struct irq_desc *desc = irq_desc + irq;<br /> <br /> 	if (irq &gt;= NR_IRQS)<br /> 		return;<br /> <br />-	while (desc-&gt;status &amp; IRQ_INPROGRESS)<br />-		cpu_relax();<br />+	spin_lock_irqsave(&amp;desc-&gt;lock, flags);<br />+	spin_unlock_irqrestore(&amp;desc-&gt;lock, flags);<br />+	do_synchronize_irq(desc);<br /> }<br /> EXPORT_SYMBOL(synchronize_irq);<br /> <br />&#64;&#64; -129,7 +143,7 &#64;&#64; void disable_irq(unsigned int irq)<br /> <br /> 	disable_irq_nosync(irq);<br /> 	if (desc-&gt;action)<br />-		synchronize_irq(irq);<br />+		do_synchronize_irq(desc);<br /> }<br /> EXPORT_SYMBOL(disable_irq);<br /> <br />&#64;&#64; -443,7 +457,7 &#64;&#64; void free_irq(unsigned int irq, void *dev_id)<br /> 			unregister_handler_proc(irq, action);<br /> <br /> 			/* Make sure it's not being used on another CPU */<br />-			synchronize_irq(irq);<br />+			do_synchronize_irq(desc);<br /> #ifdef CONFIG_DEBUG_SHIRQ<br /> 			/*<br /> 			 * It's a shared IRQ -- the driver ought to be<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
