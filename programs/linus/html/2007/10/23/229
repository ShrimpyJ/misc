    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/10/22/216">First message in thread</a></li><li><a href="/lkml/2007/10/23/135">Jens Axboe</a><ul><li><a href="/lkml/2007/10/23/152">Boaz Harrosh</a><ul><li><a href="/lkml/2007/10/23/153">Jens Axboe</a></li><li class="origin"><a href="/lkml/2007/10/24/82">Linus Torvalds</a><ul><li><a href="/lkml/2007/10/24/82">Jens Axboe</a><ul><li><a href="/lkml/2007/10/24/100">Geert Uytterhoeven</a></li></ul></li><li><a href="/lkml/2007/10/25/89">Rusty Russell</a><ul><li><a href="/lkml/2007/10/25/103">Jens Axboe</a></li><li><a href="/lkml/2007/10/25/209">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 23 Oct 2007 08:22:55 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 09/10] Change table chaining layout</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 23 Oct 2007, Boaz Harrosh wrote:<br />&gt;<br />&gt; A nice design is to have an struct like BIO. That holds a pointer to the <br />&gt; array of scatterlists, size, ..., and a next and prev pointers to the next<br />&gt; chunks. Than have all kernel code that now accepts scatterlist* and size<br />&gt; accept a pointer to such structure. And all is clear and defined.<br /><br />Yes, that would be one clean situation.<br /><br />&gt; But since we do not do that, and every single API in the kernel that<br />&gt; receives a scatterlist pointer also receives an sg_count parameter,<br />&gt; than I do not see what is so hacky about giving that sg_count parameter<br />&gt; to the one that needs it the most. sg_next();<br /><br />Well, I'd personally actually prefer to *not* have the count be passed <br />down explicitly, because it's just too error prone. So I'd much rather see <br />the count implicit in the list: whether it's in an explicit header <br />structure (that is the *only* thing passed down) or whether it's embedded <br />in the list itself is not important.<br /><br />Since the list itself has to have the "next pointer" for chaining, and <br />thus already has "embedded information" in it, it actually does make sense <br />in my opinion to just embed the end-of-list information too. And the end <br />result right now is pretty simple, with "sg_next()" being really simple to <br />use, and there being no way to screw things up by getting the count and <br />the sg pointer out of sync.<br /><br />My biggest complaint right now is that a lot of users of the sg *filling* <br />functions were mindlessly converted, so we have code like<br /><br />	cryptoloop.c:             sg_set_page(&amp;sg_in, in_page);<br />	cryptoloop.c:             sg_in.offset = in_offs;<br />	cryptoloop.c:             sg_in.length = sz;<br /><br />which is just really stupid, and we should have a function for that. But <br />worse is code like this:<br /><br />	ub.c:     sg_set_page(sg, virt_to_page(sc-&gt;top_sense));<br />	ub.c:     sg-&gt;offset = (unsigned long)sc-&gt;top_sense &amp; (PAGE_SIZE-1);<br />	ub.c:     sg-&gt;length = UB_SENSE_SIZE;<br /><br />which again was converted "line by line" and we actually *do* have a <br />function to do the above three lines as<br /><br />	sg_set_buf(sg, sc-&gt;top_sense, UB_SENSE_SIZE);<br /><br />where that *single* line is just tons shorter but more importantly, more <br />readable, than the mess that is a brute-force conversion.<br /><br />So I think the SG stuff looks ok now, but I think we have a lot of "fix up <br />the rough edges" to go!<br /><br />(The above is not the only case. Just grep for "sg_set_page", and you'll <br />see several examples of this kind of hard-to-read code. Basically, I don't <br />think it's ever a good idea to initialize the SG entries one by one, and <br />even when we have a hard page/offset/size thing, we should not set them <br />one by one, and we should probably extend sg_set_page() to always take <br />offset and length too, since setting one without the other two is never <br />really sensible!)<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
