    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/9/13/19">First message in thread</a></li><li><a href="/lkml/2007/9/15/205">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/15/207">Randy Dunlap</a><ul><li class="origin"><a href="/lkml/2007/9/16/66">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/16/66">Randy Dunlap</a><ul><li><a href="/lkml/2007/9/16/72">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2007/9/15/213">Andi Kleen</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2007/9/15/208/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 15 Sep 2007 17:34:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: crashme fault</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 15 Sep 2007, Randy Dunlap wrote:<br />&gt; Command: ./crashme +2000 666 1000 1:00:00 1<br /><br />Ok, that's close to what I was testing (one of the examples from the <br />crashme docs).<br /><br />&gt; &gt; The original gjc crashme doesn't even do a "mprotect(PROT_EXEC)" by default<br />&gt; &gt; (nor does it even compile on a modern unix), so it's not going to do<br />&gt; &gt; anything. I hacked it up, and it appears to work ok for me, but I'm not at<br />&gt; &gt; all confident that I'm even close to recreating what you are doing.<br />&gt; <br />&gt; So I'm missing some mprotect() call also?<br />&gt; Oops.<br /><br />Yeah, by default, it won't do a mprotect(), so as far as I can tell, <br />you're always going to hit NX on a writable data page. I'm running with <br />the appended patch.<br /><br />That said, I didn't actually *check* that the mprotect makes any <br />difference, and maybe you have one of the early EM64T chips that didn't <br />have NX support at all. Or maybe it's dodgy, and is actually the whole <br />*reason* for the page fault problem..<br /><br />I don't have any P4's capable of 64-bit operation (nor do I really want <br />any ;)<br /><br />		Linus<br /><br />---<br />diff --git a/crashme.c b/crashme.c<br />index 5e7e663..19a2fbb 100644<br />--- a/crashme.c<br />+++ b/crashme.c<br />&#64;&#64; -1,3 +1,5 &#64;&#64;<br />+#define pyr<br />+#define PAGSIZ 4096<br /> /* crashme: Create a string of random bytes and then jump to it.<br />             crashme [+]&lt;nbytes&gt;[.inc] &lt;srand&gt; &lt;ntrys&gt; [nsub] [verboseness] */<br /> <br />&#64;&#64; -143,7 +145,6 &#64;&#64; a script.<br /> #include &lt;sys/mman.h&gt;<br /> #include &lt;sys/types.h&gt;<br /> #include &lt;sys/param.h&gt;<br />-#include &lt;sys/vmmac.h&gt;<br /> #define strchr index<br /> #endif<br /> <br />&#64;&#64; -215,7 +216,7 &#64;&#64; unsigned char *bad_malloc(n)<br /> {unsigned char *data;<br />  data = (unsigned char *) malloc(n);<br /> #ifdef pyr<br />- if (mprotect(((int)data/PAGSIZ)*PAGSIZ, (n/PAGSIZ+1)*PAGSIZ,<br />+ if (mprotect(((long)data/PAGSIZ)*PAGSIZ, (n/PAGSIZ+1)*PAGSIZ,<br /> 	      PROT_READ|PROT_WRITE|PROT_EXEC))<br />    perror("mprotect");<br /> #endif<br />&#64;&#64; -259,11 +260,8 &#64;&#64; void my_signal(sig, func)<br />  signal(sig, func);<br /> #else<br />  struct sigaction act;<br />+ memset(&amp;act, 0, sizeof(act));<br />  act.sa_handler = func;<br />- act.sa_mask = 0;<br />-#ifdef linux<br />- act.sa_restorer = 0;<br />-#endif /* linux */<br />  act.sa_flags = SA_NOMASK;<br /> #ifdef SA_RESTART<br />  act.sa_flags |= SA_RESTART;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
