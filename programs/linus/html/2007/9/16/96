    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/9/11/47">First message in thread</a></li><li><a href="/lkml/2007/9/16/88">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/16/92">=?utf-8?B?SsO2cm4=?= Engel</a><ul><li class="origin"><a href="/lkml/2007/9/16/155">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/16/155">Goswin von Brederlow</a></li><li><a href="/lkml/2007/9/23/69">=?utf-8?B?SsO2cm4=?= Engel</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 16 Sep 2007 11:44:09 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [00/41] Large Blocksize Support V7 (adds memmap support)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 16 Sep 2007, Jörn Engel wrote:<br />&gt; <br />&gt; My approach is to have one for mount points and ramfs/tmpfs/sysfs/etc.<br />&gt; which are pinned for their entire lifetime and another for regular<br />&gt; files/inodes.  One could take a three-way approach and have<br />&gt; always-pinned, often-pinned and rarely-pinned.<br />&gt; <br />&gt; We won't get never-pinned that way.<br /><br />That sounds pretty good. The problem, of course, is that most of the time, <br />the actual dentry allocation itself is done before you really know which <br />case the dentry will be in, and the natural place for actually giving the <br />dentry lifetime hint is *not* at "d_alloc()", but when we "instantiate" <br />it with d_add() or d_instantiate().<br /><br />But it turns out that most of the filesystems we care about already use a <br />special case of "d_add()" that *already* replaces the dentry with another <br />one in some cases: "d_splice_alias()".<br /><br />So I bet that if we just taught "d_splice_alias()" to look at the inode, <br />and based on the inode just re-allocate the dentry to some other slab <br />cache, we'd already handle a lot of the cases!<br /><br />And yes, you'd end up with the reallocation overhead quite often, but at <br />least it would now happen only when filling in a dentry, not in the <br />(*much* more critical) cached lookup path.<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
