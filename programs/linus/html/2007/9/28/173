    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/9/28/67">First message in thread</a></li><li><a href="/lkml/2007/9/28/67">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2007/9/28/215">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/28/215">Chuck Ebbert</a></li><li><a href="/lkml/2007/9/28/237">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 28 Sep 2007 07:27:10 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] Correct the SMAP check in the e820 probe</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 28 Sep 2007, H. Peter Anvin wrote:<br />&gt;<br />&gt;     [x86 setup] Correct the SMAP check for INT 0x15, AX=0xe820<br />&gt; <br />&gt;     The e820 probe code was checking %edx, not %eax, for the SMAP<br />&gt;     signature on return.  This worked on *almost* all systems, since %edx<br />&gt;     still contained SMAP from the call on entry, but on a handful of<br />&gt;     systems it failed -- plus, we would have missed real mismatches.<br />&gt; <br />&gt;     Signed-off-by: H. Peter Anvin &lt;hpa&#64;zytor.com&gt;<br />&gt; <br />&gt; diff --git a/arch/i386/boot/memory.c b/arch/i386/boot/memory.c<br />&gt; index bccaa1c..2f37568 100644<br />&gt; --- a/arch/i386/boot/memory.c<br />&gt; +++ b/arch/i386/boot/memory.c<br />&gt; &#64;&#64; -28,11 +28,10 &#64;&#64; static int detect_memory_e820(void)<br />&gt; <br />&gt;  	do {<br />&gt;  		size = sizeof(struct e820entry);<br />&gt; -		id = SMAP;<br />&gt;  		asm("int $0x15; setc %0"<br />&gt; -		    : "=am" (err), "+b" (next), "+d" (id), "+c" (size),<br />&gt; +		    : "=dm" (err), "+b" (next), "=a" (id), "+c" (size),<br />&gt;  		      "=m" (*desc)<br />&gt; -		    : "D" (desc), "a" (0xe820));<br />&gt; +		    : "D" (desc), "d" (SMAP), "a" (0xe820));<br /><br />Hmm. If I read this correctly, I don't think this can be right.<br /><br />Why? You don't mark %edx as possibly corrupted by the asm any more.<br /><br />The "=dm" means that quite often (probably effectively always), gcc will <br />allocate %edx to be the output register for %0, but at least in theory, it <br />could easily decide that it's going to put %0 in memory, and in that case, <br />it may well decide that %edx is not modified by the asm statement. Which <br />may or may not be true - I'd bet that there are BIOSes out there that *do* <br />modify it.<br /><br />So what happens then? If gcc decides that %edx isn't modified by the asm, <br />it will assume that it still contains the value it had on entry, which is <br />the "SMAP" value, and then it might decide to do the<br /><br />	if (id != SMAP) {<br /><br />check as a <br /><br />	cmpl %edx,%eax<br /><br />since the "id" return is in %eax, and the compiler decides that it may be <br />cheaper to re-use the register that already contains the constant, than to <br />use a (longer) compare instruction with an explicit constant.<br /><br />IOW, I think you need to either (a) _force_ gcc to use %edx for the "err" <br />return, avoiding this issue, or (b) mark edx clobbered (which in turn <br />means that you need to remove it from the output constraint for "err"). I <br />suspect (a) is simpler/more straightforward.<br /><br />I haven't pulled this, so maybe you can just amend the commit in-place, <br />and we can avoid?<br /><br />			Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
