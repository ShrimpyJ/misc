    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2007/9/13/148">First message in thread</a></li><li><a href="/lkml/2007/9/13/189">Adrian Bunk</a><ul><li><a href="/lkml/2007/9/13/197">Alan Stern</a><ul><li><a href="/lkml/2007/9/13/217">Greg KH</a></li><li class="origin"><a href="/lkml/2007/9/13/267">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/13/267">Alan Stern</a><ul><li><a href="/lkml/2007/9/13/375">Matthew Dharm</a></li><li><a href="/lkml/2007/9/14/41">Jiri Kosina</a></li></ul></li><li><a href="/lkml/2007/9/13/272">Pete Zaitcev</a></li></ul></li><li><a href="/lkml/2007/9/13/292">Adrian Bunk</a><ul><li><a href="/lkml/2007/9/13/298">Alan Stern</a></li><li><a href="/lkml/2007/9/13/306">Linus Torvalds</a><ul><li><a href="/lkml/2007/9/13/317">Adrian Bunk</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 13 Sep 2007 09:43:13 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PATCH] USB autosuspend fixes for 2.6.23-rc6</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 13 Sep 2007, Alan Stern wrote:<br />&gt; <br />&gt; But mainly it's a question of maintenance and modification.  Kernel<br />&gt; developers don't really enjoy maintaining black- or whitelists of<br />&gt; devices, together with all the work involved in sorting through the<br />&gt; issues when somebody posts an email saying "My device doesn't work!".<br /><br />Yeah.<br /><br />In general, I think the USB blacklist/whitelists are generally a sign of <br />some deeper bug.<br /><br />We used to have a lot of those things due to simply incorrect SCSI <br />probing, causing devices to lock up because Linux probed them with bad or <br />unexpected modepages etc. I suspect we still have old blacklist entries <br />from those days that just never got cleaned up, because nobody ever dared <br />remove the blacklist entry.<br /><br />We should strive to make the default behaviour be so safe that we never <br />need a black-list (or a whitelist), and basically consider blacklists to <br />be not a way to "fix up a device", but a way to avoid some really serious <br />AND *RARE* error.<br /><br />The moment you have lots of devices having the same blacklist entry, <br />that's a sign that the blacklist is wrong, and the subsystem itself is <br />likely doing something bad!<br /><br />So, I would seriously suggest:<br /> - look at USB quirks that have more than ten entries (and the entries <br />   aren't just the exact same device in various guises)<br /> - start considering that feature to be something that is known broken, <br />   and shouldn't be done AT ALL by default.<br /> - have some way to enable some extension on a device-by-device basis from <br />   the /sysfs interface, and then users can enable those things on their <br />   own with a graphical interface or something (or using whitelists in <br />   user space saying "ok, this device can actually do this")<br /> - REMOVE THE DAMN QUIRK<br /><br />It looks like the current situation now is that the latest autosuspend <br />patches did basically everything but the last point.<br /><br />Btw, this is in no way just an AUTOSUSPEND issue. The USB layer has a <br />*lot* of these quirks. They are often called "UNUSUAL_DEV()", but the <br />thing is, some of those things seem to be so usual that the naming is <br />dubious, and thus calling it a "quirk" or "unusual" is pretty dubious too. <br /><br />For example, why do we have that US_FL_MAX_SECTORS_64 at all? The fact <br />that some USB device is broken with more than 64 sectors would seem to <br />indicate that Windows *never* does more than 64 sectors, and that in turn <br />means that pretty much *no* devices have ever been tested with anything <br />bigger.<br /><br />So why not make the 64 sector limit be the default? Get rid of the quirk: <br />we already allow people to override it in /sys if they really want to, but <br />realistically, it's probably not going to make any difference what-so-ever <br />for *any* normal load. So we seem to have a quirk that really doesn't buy <br />us anything but headache.<br /><br />Other quirks worth looking at (but likely unfixable) are:<br /> - US_FL_IGNORE_RESIDUE:<br />	Does this really matter? Can we not just always do the <br />	US_FL_IGNORE_RESIDUE thing? Windows must not be doing what we're <br />	doing.<br /> - US_FL_FIX_CAPACITY: <br />	This is a generic SCSI issue, not a USB one, and maybe there are <br />	better solutions to it. Are we perhaps doing something wrong? Is <br />	there some patterns we haven't seen? Why do we need this, when <br />	presumably Windows does not?<br /> - US_FL_SINGLE_LUN:<br />	At least a few of these seem to indicate that the real problem <br />	could be detected dynamically ("device reports Sub=ff") rather <br />	than with a quirk. Quirks are unmaintainable (and change), but <br />	noticing when devices return impossible values and going into a <br />	"safe mode" is just defensive programming.<br /><br />&gt; Maybe you're concerned about propagating updates as painlessly as <br />&gt; possible -- if the whitelist is in the kernel then every kernel release <br />&gt; would include an update.  But in userspace it's possible to do updates <br />&gt; even more quickly and painlessly.  For example, there could be a <br />&gt; network server available for both interactive lookups and automatic <br />&gt; queries from HAL.<br /><br />For a lot of these things, you probably do not need a whitelist *at*all*!<br /><br />IOW, just default to something safe (the 64 sector example), and then <br />perhaps allow people to explicitly play with their settings in a hardware <br />manager. People actually tend to *like* being able to tweak meaningless <br />things, and it makes them feel in control. So you'd have the Gentoo people <br />who want to optimize their iPod access times by 0.2% by raising the <br />maximum sector number - good for them! They'll feel empowered, and if it <br />stops working, they know it was because of something *they* did.<br /><br />So at least in some cases, I think we should "default to stupid, but give <br />users rope".<br /><br />		Linus<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
