    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/8/21/558">First message in thread</a></li><li><a href="/lkml/2012/8/21/558">Miklos Szeredi</a><ul><li><a href="/lkml/2012/8/21/552">Miklos Szeredi</a></li><li><a href="/lkml/2012/8/21/554">Miklos Szeredi</a></li><li><a href="/lkml/2012/8/21/561">Miklos Szeredi</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 21 Aug 2012 12:37:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/3] audit: clean up refcounting in audit-tree</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 21, 2012 at 12:03 PM, Miklos Szeredi &lt;miklos&#64;szeredi.hu&gt; wrote:<br />&gt; +       /*<br />&gt; +        * We are guaranteed to have at least one reference to the mark from<br />&gt; +        * either the inode or the caller of fsnotify_destroy_mark().<br />&gt; +        */<br />&gt; +       BUG_ON(atomic_read(&amp;entry-&gt;refcnt) &lt; 1);<br /><br />I pulled, but *please* don't use BUG_ON() as some kind of "let's<br />assert some random crap" thing. We've literally had DoS security<br />issues due to code having BUG_ON()'s and killing the machine, and<br />BUG_ON() often makes things *worse* if it ends up happening in irq<br />context or with some critical lock held, and then the machine is just<br />dead with no logging and no messages left anywhere.<br /><br />So before adding a BUG_ON(), you should ask yourself the following questions:<br /><br /> (a) is this something I need to even test?<br /><br />     There are lots of rules we have in the kernel. We don't add<br />BUG_ON() for each and every one of them. Is it such a critical data<br />structure that I really need to test for that condition that should<br />never happen?<br /><br /> (b) Is this data structure *so* central that I need to immediately<br />kill everything, or do I just want it logged?<br /><br />     If it's just a "I want people to know about it, but I don't<br />expect it to happen, I'm just adding a debug thing to make sure", then<br />WARN_ON_ONCE() is likely the right thing. It's *more* likely to get<br />reported, exactly because the machine is more likely to survive a<br />WARN_ON_ONCE().<br /><br /> (c) am I sure that none of the callers hold any central locks that<br />make the BUG_ON() be worse than the alternatives?<br /><br />BUG_ON() is really drastic. Some machines will reboot on bugs. Others<br />will halt. And a even the common ones that are just set to kill the<br />particular process can effectively kill the whole machine due to locks<br />or preemption counts etc that never get released.<br /><br />The kind of place that deserves a BUG_ON() is some really *central*<br />code where you have major issues, and there's just not anything you<br />can do to continue. If somebody passes kfree() a bad pointer, there's<br />just nothing kfree() can sanely do about it. If somebody does a<br />list_del() with list debugging enabled, and it notices that the list<br />pointer are crap, what are you going to do? You can't continue.<br /><br />But some random data structure that has the wrong refcount? If you<br />*can* return with a warning (and ONCE, at that, so that not only does<br />it get logged, the log doesn't get spammed and useless because it gets<br />too big), that's likely what you should do.<br /><br />And this is *doubly* true if it's a patch in the -rc series and you<br />added the code because you weren't sure you tested all possible random<br />cases. Don't potentially kill the machine because you weren't sure you<br />got all cases!<br /><br />            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
