    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/11/30/693">First message in thread</a></li><li><a href="/lkml/2012/11/30/693">Vincent Palatin</a><ul><li><a href="/lkml/2012/11/30/464">"H. Peter Anvin"</a></li><li><a href="/lkml/2012/11/30/466">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/30/486">Vincent Palatin</a><ul><li><a href="/lkml/2012/11/30/496">Vincent Palatin</a><ul><li><a href="/lkml/2012/11/30/563">tip-bot for Vincent Palatin</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2012/11/30/484">"H. Peter Anvin"</a></li><li><a href="/lkml/2012/11/30/487">"H. Peter Anvin"</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2012/11/30/526">Vincent Palatin</a></li><li><a href="/lkml/2012/11/30/599">Vincent Palatin</a><ul><li><a href="/lkml/2012/11/30/476">tip-bot for Vincent Palatin</a></li></ul></li><li><a href="/lkml/2012/11/30/635">"H. Peter Anvin"</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Nov 2012 11:25:40 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86, fpu: avoid FPU lazy restore after suspend</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Nov 30, 2012 at 10:52 AM, Vincent Palatin &lt;vpalatin&#64;chromium.org&gt; wrote:<br />&gt; When a cpu enters S3 state, the FPU state is lost.<br />&gt; After resuming for S3, if we try to lazy restore the FPU for a process running<br />&gt; on the same CPU, this will result in a corrupted FPU context.<br /><br />Good catch, and I think the patch is technically correct, but:<br /><br />&gt; We can just invalidate the "fpu_owner_task", so nobody will try to<br />&gt; lazy restore a state which no longer exists in the hardware.<br /><br />I think this works well, but is a tiny bit subtle.<br /><br />And what I _don't_ necessarily think is the right thing to do is to<br />only comment on it in the commit message, because it means that later<br />generations will not necessarily ever notice. And it does result in a<br />new combination that I don't think we've had before: if the current<br />task is the owner, we now have "tsk-&gt;thread.fpu.has_fpu  = 1" but with<br />"fpu_owner_task" being NULL.<br /><br />Which gets us the semantics we want (we will save the current CPU info<br />when switching away, but we will not restore when switching back), but<br />my gut feel is that we really want to comment on that exact thing. And<br />possibly even make a helper function for this in &lt;sm/fpu-internal.h&gt;,<br />something like<br /><br />    /*<br />     * Must be run with preemption disabled: this clears the fpu_owner_task,<br />     * on this CPU.<br />     *<br />     * This will disable any lazy FPU state restore of the current FPU state,<br />     * but if the current thread owns the FPU, it will still be saved by.<br />     */<br />    static inline void __cpu_disable_lazy_restore(void)<br />    {<br />        this_cpu_write(fpu_owner_task, NULL);<br />    }<br /><br />and in fact I think the right place to do this *might* be in<br />"native_cpu_die()" instead, at which point it would actually be<br />something like<br /><br />    per_cpu(fpu_owner_task, cpu) = NULL;<br /><br />*after* the CPU is dead, so that nothing ever can actually see the<br />state where a process is still running on the CPU and might possibly<br />use the FPU.<br /><br />I dunno. I think doing it after really killing the CPU (ie in the<br />native_cpu_die() function) might be easier to think about, but I don't<br />really hate your patch either (it does make me go "ok, we need to<br />guarantee no scheduling or FP use after" - which is probably true, but<br />it's still some non-local thing). Either way, a comment about it and<br />abstracting whatever the invalidation sequence is in fpu-internal.h<br />sounds like a good idea.<br /><br />Hmm?<br /><br />                  Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
