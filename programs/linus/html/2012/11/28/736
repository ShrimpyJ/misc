    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/11/18/182">First message in thread</a></li><li><a href="/lkml/2012/11/28/667">Mikulas Patocka</a><ul><li><a href="/lkml/2012/11/28/717">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2012/11/29/39">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/29/39">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/29/47">Al Viro</a></li><li><a href="/lkml/2012/11/29/269">Chris Mason</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 28 Nov 2012 18:58:40 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Introduce a method to catch mmap_region (was: Recent kernel "mount" slow)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 28, 2012 at 6:04 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Interesting. The code *has* the block size (it's in "bh-&gt;b_size"), but<br />&gt; it actually then uses the inode blocksize instead, and verifies the<br />&gt; two against each other. It could just have used the block size<br />&gt; directly (and then used the inode i_blkbits only when no buffers<br />&gt; existed), avoiding that dependency entirely..<br /><br />Looking more at this code, that really would be the nicest solution.<br /><br />There's two cases for the whole get_block() thing:<br /><br /> - filesystems. The block size will not change randomly, and<br />"get_block()" seriously depends on the block size.<br /><br /> - the raw device. The block size *will* change, but to simplify the<br />problem, "get_block()" is a 1:1 mapping, so it doesn't even care about<br />the block size because it will always return "bh-&gt;b_blocknr = nr".<br /><br />So we *could* just say that all the fs/buffer.c code should use<br />"inode-&gt;i_blkbits" for creating buffers (because that's the size new<br />buffers should always use), but use "bh-&gt;b_size" for any *existing*<br />buffer use.<br /><br />And looking at it, it's even simple. Except for one *very* annoying<br />thing: several users really don't want the size of the buffer, they<br />really do want the *shift* of the buffer size.<br /><br />In fact, that single issue seems to be the reason why<br />"inode-&gt;i_blkbits" is really used in fs/buffer.c.<br /><br />Otherwise it would be fairly trivial to just make the pattern be just a simple<br /><br />        if (!page_has_buffers(page))<br />                create_empty_buffers(page, 1 &lt;&lt; inode-&gt;i_blkbits, 0);<br />        head = page_buffers(page);<br />        blocksize = head-&gt;b_size;<br /><br />and just use the blocksize that way, without any other games. All<br />done, no silly WARN_ON() to verify against some global block-size, and<br />the fs/buffer.c code would be perfectly simple, and would have no<br />problem at all with multiple different blocksizes in different pages<br />(the page lock serializes the buffers and thus the blocksize at the<br />per-page level).<br /><br />But the fact that the code wants to do things like<br /><br />        block = (sector_t)page-&gt;index &lt;&lt; (PAGE_CACHE_SHIFT - bbits);<br /><br />seriously seems to be the main thing that keeps us using<br />'inode-&gt;i_blkbits'. Calculating bbits from bh-&gt;b_size is just costly<br />enough to hurt (not everywhere, but on some machines).<br /><br />Very annoying.<br /><br />                       Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
