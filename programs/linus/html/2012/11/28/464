    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/11/18/182">First message in thread</a></li><li><a href="/lkml/2012/11/28/444">Mikulas Patocka</a><ul><li><a href="/lkml/2012/11/28/454">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2012/11/28/471">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/471">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/482">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2012/11/28/513">Mikulas Patocka</a><ul><li><a href="/lkml/2012/11/28/581">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 28 Nov 2012 12:13:27 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Introduce a method to catch mmap_region (was: Recent kernel "mount" slow)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 28, 2012 at 12:03 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; mmap() is in *no* way special. The exact same thing happens for<br />&gt; regular read/write. Yet somehow the mmap code is special-cased, while<br />&gt; the normal read-write code is not.<br /><br />I just double-checked, because it's been a long time since I actually<br />looked at the code.<br /><br />But yeah, block device read/write uses the pure page cache functions.<br />IOW, it has the *exact* same IO engine as mmap() would have.<br /><br />So here's my suggestion:<br /><br /> - get rid of *all* the locking in aio_read/write and the splice paths<br /> - get rid of all the stupid mmap games<br /><br /> - instead, add them to the functions that actually use<br />"blkdev_get_block()" and "blkdev_get_blocks()" and nowhere else.<br /><br />   That's a fairly limited number of functions:<br />blkdev_{read,write}page(), blkdev_direct_IO() and<br />blkdev_write_{begin,end}()<br /><br />Doesn't that sounds simpler? And more logical: it protects the actual<br />places that use the block size of the device.<br /><br />I dunno. Maybe there is some fundamental reason why the above is<br />broken, but it seems to be a much simpler approach. Sure, you need to<br />guarantee that the people who get the write-lock cannot possibly cause<br />IO while holding it, but since the only reason to get the write lock<br />would be to change the block size, that should be pretty simple, no?<br /><br />Yeah, yeah, I'm probably missing something fundamental, but the above<br />sounds like the simple approach to fixing things. Aiming for having<br />the block size read-lock be taken by the things that pass in the<br />block-size itself.<br /><br />It would be nice for things to be logical and straightforward.<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
