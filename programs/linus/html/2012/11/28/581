    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/11/18/182">First message in thread</a></li><li><a href="/lkml/2012/11/28/464">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/471">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/482">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/558">Mikulas Patocka</a></li></ul></li></ul></li><li><a href="/lkml/2012/11/28/513">Mikulas Patocka</a><ul><li class="origin"><a href="/lkml/2012/11/28/602">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/602">Linus Torvalds</a><ul><li><a href="/lkml/2012/11/28/720">Mikulas Patocka</a></li></ul></li><li><a href="/lkml/2012/11/28/667">Mikulas Patocka</a><ul><li><a href="/lkml/2012/11/28/717">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 28 Nov 2012 14:52:36 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Introduce a method to catch mmap_region (was: Recent kernel "mount" slow)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Nov 28, 2012 at 1:29 PM, Mikulas Patocka &lt;mpatocka&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; The problem with this approach is that it is very easy to miss points<br />&gt; where it is assumed that the block size doesn't change - and if you miss a<br />&gt; point, it results in a hidden bug that has a little possibility of being<br />&gt; found.<br /><br />Umm. Mikulas, *your* approach has resulted in bugs. So let's not throw<br />stones in glass houses, shall we?<br /><br />The whole reason for this long thread (and several threads before it)<br />is that your model isn't working and is causing problems. I already<br />pointed out how bogus your arguments about mmap() locking were, and<br />then you have the gall to talk about potential bugs, when I have<br />pointed you to *actual* bugs, and actual mistakes.<br /><br />&gt; For example, __block_write_full_page and __block_write_begin do<br />&gt;         if (!page_has_buffers(page)) { create_empty_buffers... }<br />&gt; and then they do<br />&gt;         WARN_ON(bh-&gt;b_size != blocksize)<br />&gt;         err = get_block(inode, block, bh, 1)<br /><br />Right. And none of this is new.<br /><br />&gt; ... so if the buffers were left over from some previous call to<br />&gt; create_empty_buffers with a different blocksize, that WARN_ON is trigged.<br /><br />None of this can happen.<br /><br />&gt; Locking the whole read/write/mmap operations is crude, but at least it can<br />&gt; be done without thorough review of all the memory management code.<br /><br />Umm. Which you clearly didn't do, and raised totally crap arguments for.<br /><br />In contrast, I have a very simple argument for the correctness of my<br />patch: every single user of the "get_block[s]()" interface now takes<br />the lock for as long as get_block[s]() is passed off to somebody else.<br />And since get_block[s]() is the only way to create those empty<br />buffers, I think I pretty much proved exactly what you ask for.<br /><br />And THAT is the whole point and advantage of making locking sane. Sane<br />locking you can actually *think* about!<br /><br />In contrast, locking around "mmap()" is absolutely *guaranteed* to be<br />insane, because mmap() doesn't actually do any of the IO that the lock<br />is supposed to protect against!<br /><br />So Mikulas, quite frankly, your arguments argue against you. When you<br />say "Locking the whole read/write/mmap operations is crude, but at<br />least it can<br />be done without thorough", you are doubly correct: it *is* crude, and<br />it clearly *was* done without thought, since it's a f*cking idiotic<br />AND INCORRECT thing to do.<br /><br />Seriously. Locking around "mmap()" is insane. It leads to insane<br />semantics (the whole EBUSY thing is purely because of that problem)<br />and it leads to bad code (your "let's add a new "mmap_region" hook is<br />just disgusting, and while Al's idea of doing it in the existing<br />"-&gt;open" method is at least not nasty, it's definitely extra code and<br />complexity).<br /><br />There are serious *CORRECTNESS* advantages to simplicity and<br />directness. And locking at the right point is definitely very much<br />part of that.<br /><br />Anyway, as far as block size goes, we have exactly two cases:<br /><br /> - random IO that does not care about the block size, and will just do<br />whatever the current block size is (ie normal anonymous accesses to<br />the block device).  This is the case that needs the locking - but it<br />only needs it around the individual page operations, ie exactly where<br />I put it. In fact, they can happily deal with different block sizes<br />for different pages, they don't really care.<br /><br /> - mounted filesystems etc that require a particular block size and<br />set it at mount time, and they have exclusivity rules<br /><br />The second case is the case that actually calls set_blocksize(), and<br />if "kill_bdev()" doesn't get rid of the old blocksizes, then they have<br />always been in trouble, and would always _continue_ to be in trouble,<br />regardless of locking.<br /><br />                    Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
