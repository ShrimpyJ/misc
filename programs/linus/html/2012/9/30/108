    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/9/30/14">First message in thread</a></li><li><a href="/lkml/2012/9/30/14">Michael Kerrisk</a><ul><li class="origin"><a href="/lkml/2012/10/1/34">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/1/34">Michael Kerrisk</a></li><li><a href="/lkml/2012/10/1/39">Michael Kerrisk</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 30 Sep 2012 10:51:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: ABI change for setitimer(2) [in feature-removal-schedule.txt]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Sep 29, 2012 at 11:30 PM, Michael Kerrisk<br />&lt;mtk.manpages&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt;&gt; I think the whole "let's deprecate this six months into the future" is<br />&gt;&gt; unnecessary. Yes, it may well be worth doing for something with bigger<br />&gt;&gt; consequences, but I think that for something like this, it's just<br />&gt;&gt; overthinking the issue.<br />&gt;<br />&gt; When it comes to ABIs, I think there *is* value in a lead time on the<br />&gt; change. This particular example is a good example of why.<br /><br />No. This whole example is a good example of the fact that YOU SHOULD<br />NOT MAKE ABI CHANGES.<br /><br />I don't understand why this seems to be so hard for people to understand.<br /><br />There are exactly *zero* reasons to change the ABI for its own sake,<br />and this whole thread is a wonderful example of how F*CKING STUPID it<br />was to even consider it.<br /><br />There are real and valid reasons to change the ABI, but for every<br />single one of them, there is some external issue:<br /><br /> - security. We've had cases where we had an ABI that simply exposed<br />too much information.<br /><br /> - implementation issues. Sometimes, we've done something really<br />really badly, and some subtle ABI issue may simply not work. This is<br />basically never about normal system calls used by normal applications,<br />though - it's about things like the whole iptables flaps etc.<br /><br /> - actual real applications breaking. We've had cases where we simply<br />did things wrong, and portable applications broke. Then we can *try*<br />to fix it, and see if something else breaks from that.<br /><br />And quite frankly, for all but the security case, even then we're<br />often better off at least having a compatibilty layer for the old<br />cases, even if it was bad and wrong (example: the very original linux<br />'select()' timeout behavior, where Linux did the documented thing, but<br />nobody else did. Or the various versions of 'stat()' we've had. Or the<br />inotify/dnotify/fsnotify things).<br /><br />Occasionally some compat model may not be worth it (if the interface<br />is too specialized and there really is just one or two system apps<br />that use it), but that's very very rare to the point where it<br />shouldn't even be considered an issue.<br /><br />Quite frankly, our most common ABI change is that we don't even<br />realize that something changed. And then people may or may not notice<br />it. And we've had cases where the same system call returned<br />*different* things for different subsystems, and we tried to make it<br />at least internally consistent.<br /><br />But the "premeditated ABI change just for the reason of an ABI<br />change"? It's bullshit. And it's bullshit whether it shows up in<br />feature-removal or not.<br /><br />(The whole feature-removal file is BS, for that matter, but that's a<br />different issue).<br /><br />SO STOP DOING ABI CHANGES. WE DON'T DO THEM.<br /><br />The absolute worst thing a kernel can do is "change the user-level<br />interfaces". It has to be done occasionally (see above), and sometimes<br />we do it by mistake, but anybody who does it on purpose "just because"<br />should not be involved in kernel development (or library development<br />for that matter).<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
