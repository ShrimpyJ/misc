    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/9/14/99">First message in thread</a></li><li><a href="/lkml/2012/9/25/476">Linus Torvalds</a><ul><li><a href="/lkml/2012/9/25/517">Borislav Petkov</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2012/9/25/694">Mike Galbraith</a><ul><li><a href="/lkml/2012/9/26/336">Borislav Petkov</a></li></ul></li></ul></li><li><a href="/lkml/2012/9/25/687">Mike Galbraith</a><ul><li><a href="/lkml/2012/9/25/693">Linus Torvalds</a><ul><li><a href="/lkml/2012/9/25/697">Mike Galbraith</a></li><li><a href="/lkml/2012/9/26/334">Borislav Petkov</a></li></ul></li></ul></li><li><a href="/lkml/2012/9/26/310">Borislav Petkov</a><ul><li><a href="/lkml/2012/9/26/378">Linus Torvalds</a><ul><li><a href="/lkml/2012/9/26/454">Borislav Petkov</a><ul><li><a href="/lkml/2012/9/27/23">Mike Galbraith</a></li><li><a href="/lkml/2012/9/27/135">	david&#64;lang ...</a></li></ul></li><li><a href="/lkml/2012/9/27/15">Mike Galbraith</a></li><li><a href="/lkml/2012/9/27/265">Peter Zijlstra</a><ul><li><a href="/lkml/2012/9/27/459">	david&#64;lang ...</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 25 Sep 2012 12:08:16 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 20% performance drop on PostgreSQL 9.2 from kernel 3.5.3 to 3.6-rc5 on AMD chipsets - bisected</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Sep 25, 2012 at 11:42 AM, Borislav Petkov &lt;bp&#64;alien8.de&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; Is this literally just removing it entirely?<br />&gt;<br />&gt; Basically yes:<br /><br />Ok, so you make it just always select 'target'. Fine. I wondered if<br />you just removed the calling logic entirely.<br /><br />&gt;&gt; How does pgbench look? That's the one that apparently really wants to<br />&gt;&gt; spread out, possibly due to user-level spinlocks. So I assume it will<br />&gt;&gt; show the reverse pattern, with "kill select_idle_sibling" being the<br />&gt;&gt; worst case.<br />&gt;<br />&gt; Let me run pgbench tomorrow (I had run it only on an older family 0x10<br />&gt; single-node box) on Bulldozer to check that out. And we haven't started<br />&gt; the multi-node measurements at all.<br /><br />Ack, this clearly needs much more testing. That said, I really would<br />*love* to just get rid of the function entirely.<br /><br />&gt;&gt; Sad, because it really would be lovely to just remove that thing ;)<br />&gt;<br />&gt; Right, so why did we need it all, in the first place? There has to be<br />&gt; some reason for it.<br /><br />I'm not entirely convinced.<br /><br />Looking at the history of that thing, it's long and tortuous, and has<br />a few commits completely fixing the "logic" of it (eg see commit<br />99bd5e2f245d).<br /><br />To the point where I don't think it necessarily even matches what the<br />original cause for it was. So it's *possible* that we have a case of<br />historical code that may have improved performance originally on at<br />least some machines, but that has (a) been changed due to it being<br />broken and (b) CPU's have changed too, so it may well be that it<br />simply doesn't help any more.<br /><br />And we've had problems with this function before. See for example:<br /> - 4dcfe1025b51: sched: Avoid SMT siblings in select_idle_sibling() if possible<br /> - 518cd6234178: sched: Only queue remote wakeups when crossing cache boundaries<br /><br />so we've basically had odd special-case "tuning" of this function from<br />the original. I do not think that there is any solid reason to believe<br />that it does what it used to do, or that what it used to do makes<br />sense any more.<br /><br />It's entirely possible that "prev_cpu" basically ends up being the<br />better choice for spreading things out.<br /><br />That said, my *guess* is that when you run pgbench, you'll see the<br />same regression that we saw due to Mike's patch too. It simply looks<br />like tbench wants to have minimal cpu selection and avoid moving<br />things around, while pgbench probably wants to spread out maximally.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
