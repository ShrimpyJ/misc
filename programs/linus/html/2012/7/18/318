    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/7/18/20">First message in thread</a></li><li><a href="/lkml/2012/7/18/20">Knut Petersen</a><ul><li class="origin"><a href="/lkml/2012/7/18/437">Linus Torvalds</a><ul><li><a href="/lkml/2012/7/18/437">Al Viro</a><ul><li><a href="/lkml/2012/7/18/440">Linus Torvalds</a><ul><li><a href="/lkml/2012/7/18/443">Al Viro</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 18 Jul 2012 09:26:57 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Bug 3.4.5] reiserfs: mutex_destroy called with locked mutex</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 17, 2012 at 10:26 PM, Knut Petersen<br />&lt;Knut_Petersen&#64;t-online.de&gt; wrote:<br />&gt; I hit the following problem during a heavy compile job on kernel 3.4.5:<br /><br />I think it's triggered by the fact that reiserfs does<br /><br />        d_instantiate(dentry, inode);<br />        unlock_new_inode(inode);<br /><br />ie it does the "unlock_new_inode()" *after* it has already made the<br />inode visible to others in the filesystem. So you can now have a<br />concurrent lookup of that dentry that finds the (locked) inode before<br />"unlock_new_inode()" has had the chance to set the lockdep class.<br />Also, since it's been instantiated, the only *valid* inode pointer is<br />in the dentry, so the code really really shouldn't use the "inode"<br />pointer any more because the refcount has been transferred to the<br />dentry. So maybe memory pressure could turn the dentry negative (and<br />free the inode) while the unlock_new_inode() code runs.<br /><br />fs/ext[23]/namei.c has the same pattern, though, and I think it should<br />be harmless (the inode is marked I_NEW and we get the i_lock for<br />unlock_new_inode, so the freeing code should know to keep away from<br />it). So I don't think the freeing code could trigger, but a concurrent<br />lookup then trying to look up the new directory (and taking the new<br />directory i_semaphore lock) could happen, afaik.<br /><br />So I think we should re-order the d_instantiate/unlock_new_inode calls. Al?<br /><br />                   Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
