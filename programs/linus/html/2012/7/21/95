    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/7/20/153">First message in thread</a></li><li><a href="/lkml/2012/7/21/86">Linus Torvalds</a><ul><li><a href="/lkml/2012/7/21/88">"Rafael J. Wysocki"</a></li><li><a href="/lkml/2012/7/21/93">Ming Lei</a><ul><li class="origin"><a href="/lkml/2012/7/21/96">Linus Torvalds</a><ul><li><a href="/lkml/2012/7/21/96">	david&#64;lang ...</a></li><li><a href="/lkml/2012/7/21/123">Ming Lei</a></li><li><a href="/lkml/2012/7/22/59">Borislav Petkov</a><ul><li><a href="/lkml/2012/7/22/110">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2012/7/21/99">Francois Romieu</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Jul 2012 13:38:52 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] firmware load: defer request_firmware during early boot and resume</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Jul 21, 2012 at 12:55 PM, Ming Lei &lt;tom.leiming&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; Suppose it is not good for resume case, I think it still makes sense<br />&gt; for early boot situation, at least the patch will support to request<br />&gt; firmware inside init call, and allow drivers to be built in kernel i<br />&gt; case of requesting firmware from probe().<br /><br />I agree that this is a problem. At the same time, early boot has some<br />of the exact same problems as resume has, and I do wish that people<br />would ask themselves: "why do I try to load the firmware at early boot<br />time"?<br /><br />There is really only *one* real reason to load firmware at device<br />probe time, and that's because the device is needed for the boot. But<br />in that case, deferral is wrong, isn't it?<br /><br />And if the device isn't needed for boot, then why is it loading so<br />early? For network devices, for example (and this is a *common*<br />issue), firmware should be loaded not at device init, but at device<br />*open* time, exactly because we don't want to load it too early when<br />it might not even be available yet.<br /><br />So I would prefer if people basically just understood that "if you're<br />trying to load firmware at module init time, you are almost certainly<br />doing something wrong".<br /><br />Delaying the firmware load as much as possible (and here "delaying"<br />does *not* mean your kind of "deferred" load, but explicitly doing it<br />only when really needed) allows things like "boot the system, copy the<br />new firmware from a USB stick in single-user mode, then bring up<br />networking". It also simply avoids the whole module load ordering<br />issue.<br /><br />So I really think you are looking (again) too much at working around<br />the symptoms, rather than fixing the deeper issue.<br /><br />&gt; It is a good idea to let the driver defer request explicitly, but still need<br />&gt; some changes in generic code to support it.<br /><br />That's fine. I am not arguing against making core driver core changes,<br />I'm just arguing against making them so that you facilitate bad<br />behavior and work around the symptoms of bad choices.<br /><br />In fact, I'd actually want to argue for *bigger* core device layer<br />changes to make it easier to do the right thing. Right now, one of the<br />reasons why driver writers load the firmware at init time is that it's<br />often _easiest_ for them to do it there, even if it's the wrong point<br />to do it. And that is partly because I think the device layer doesn't<br />help enough in making it really convenient to do later.<br /><br />&gt; In my opinion,  we should cache firmware data for all hotplug<br />&gt; devices or devices which may experience power loss automatically<br />&gt; in kernel during suspend-resume cycle because all such devices may be<br />&gt; disconnected and connected again during suspend-resume cycle.<br /><br />Yes. *THAT* is absolutely the kind of change I'd love to see. The core<br />device layer doesn't really make it easy to handle firmware sanely<br />over suspend/resume, which is kind of sad. Why does every driver have<br />to have its own "let me remember my firmware over the suspend/resume<br />event" and have extra code in suspend/resume, when it's really a<br />pretty generic situation: if the device has firmware, wouldn't it be<br />really nice if the core driver layer just knew about that and kept<br />track of it?<br /><br />&gt; Looks it is not difficult to cache firmware data by kernel, for example, just<br />&gt; call the<br />&gt;<br />&gt;            cache_firmware(fw_name)<br />&gt;<br />&gt; for each device which need firmware before suspending,<br />&gt; then call the below to uncache firmware after resume:<br />&gt;<br />&gt;            uncache_firmware(fw_name)<br /><br />Exactly. But we should make it automatic, and we should only do it if<br />the device is actually *active*. If nobody is using the device over<br />the suspend-resume event, the firmware shouldn't be loaded in the<br />first place, and resume obviously shouldn't need to re-load it.<br />Wouldn't it be nice if something like the PCI layer (or the USB layer)<br />just knew to do the rigth thing for the device on its own?<br /><br />I would also suggest that the firmware caching have some internal<br />timeout, so that for the (fairly common) case where a suspend/resume<br />event might look like a unplug/replug event, the caching would<br />actually still remember the firmware despite the fact that it looked<br />(for a short while) like the device went away.<br /><br />So *this* is where I think we could improve on the generic code. Make<br />it really easy for devices to do the right thing. Make sure that<br />firmware caches work, even if it looks like devices disappeared<br />momentarily. Maybe add a few callbacks from generic code to say "you<br />can load your firmware now, because the system is up".<br /><br />So I'm really not against improving the situation with firmware<br />loading. What I'm against is making it easy for device drivers to do<br />all the wrong things - like loading firmware in their init routines,<br />or trying to load firmware at resume time. Because those are both<br />fundamentally *BAD* things to do.<br /><br />Don't try to help people do bad things.<br /><br />&gt; The problem is that many firmwares may consume much<br />&gt; memory<br /><br />This tends to come up as an argument, but is it actually true?<br /><br />I don't think so. Especially for suspend-resume, if the device is<br />active, you *KNOW* that you will want to load the firmware at resume<br />time. But at the same time, resume time is when you want to be really<br />quick: you want to aim for a model where the resume has fully<br />*completed* by the time the user has opened the lid of the laptop<br />fully (just as an example). And what does that imply? It implies that<br />you really want to do as much of the expensive stuff at *suspend*<br />time.<br /><br />Who cares if you use memory for firmware while the device is<br />suspended? NOBODY. And if it takes two extra seconds for the laptop to<br />really suspend after you close the lid, that's fine too. You'd much<br />rather spend the time then (when the user clearly doesn't care about<br />using his device), than at resume time.<br /><br />So it's really FUNDAMENTALLY WRONG to load firmware at resume time.<br />It's fundamentally wrong not just because it can be hard to do (the<br />machine isn't really fully functional yet), but it's fundamentally<br />wrong because it's STUPID. You want to load the firmware at suspend<br />time because that's better for the user interface too!<br /><br />&gt; So saving memory space is another advantage of the deferral<br />&gt; of request_firmware.<br /><br />I agree, but see above: I think that argument is only true for the<br />"the device is not actually in use".<br /><br />So I really think the rules should always be:<br /><br /> - firmware should NEVER be loaded at module init time, because it's<br />the wrong time to do it - the device may never be needed at all.<br />Slowing down the init sequence is just stupid.<br /><br />   For example, you may have both a wired and a wireless network in<br />your laptop, but if you have turned off wireless (airplane mode, for<br />example), maybe you shouldn't be loading the firmware at all. Or<br />conversely, maybe you *did* load the firmware of both the wired and<br />wireless networking when you booted, but the wired network then<br />noticed that there's no cable attached (after you loaded the firmware<br />- maybe the driver cannot even tell without the firmware), so the<br />wired network is not in use, and is not opened. When a suspend<br />happens, in a perfect world, we should just notice. So we wouldn't<br />preload the firmware for suspend, because the device isn't even *open*<br />while suspended, so resume doesn't need to load the firmware.<br /><br />   Of course, after resume, maybe networkmanager wakes up and checks<br />the cables, and at that point we load the wired firmware too (*after*<br />resume, and as a result of opening the device). But then it's the<br />*correct* thing to load the firmware only after resume, because it<br />wasn't loaded as *part* of the resume. See what I'm saying.<br /><br /> - If firmware is needed for resume, it should be loaded by the<br />suspend logic and cached in memory.<br /><br />   The reason for this is not just that loading it at resume time<br />might be hard (so load it when you know the system is fully working),<br />but also the user interface issue I already mentioned.<br /><br />Sure, sometimes firmware is a few megabytes in size. But machines<br />where a few megabytes is a big deal will *not* be running those kinds<br />of devices. Plus if you load it at suspend-time, nobody really cares<br />if it takes a while to load and wastes memory while the machine isn't<br />doing anything. Why would they care?<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
