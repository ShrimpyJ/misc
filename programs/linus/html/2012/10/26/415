    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/25/273">First message in thread</a></li><li><a href="/lkml/2012/10/26/283">Ingo Molnar</a><ul><li><a href="/lkml/2012/10/26/303">Peter Zijlstra</a><ul><li><a href="/lkml/2012/10/26/301">Ingo Molnar</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2012 09:47:27 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 26/31] sched, numa, mm: Add fault driven placement and migration policy</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 26, 2012 at 7:14 AM, Ingo Molnar &lt;mingo&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; * Peter Zijlstra &lt;a.p.zijlstra&#64;chello.nl&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; Shouldn't the pte_lock serialize all that still? All sites<br />&gt;&gt; that modify PTE contents should hold the pte_lock (and do<br />&gt;&gt; afaict).<br />&gt;<br />&gt; Hm, indeed.<br />&gt;<br />&gt; Is there no code under down_read() (in the page fault path) that<br />&gt; modifies the pte via just pure atomics?<br /><br />Well, the ptep_set_access_flags() thing modifies the pte under<br />down_read(). Not using atomics, though. If it races with itself or<br />with a hardware page walk, that's fine, but if it races with something<br />changing other bits than A/D, that would be horribly horribly bad - it<br />could undo any other bit changes exactly because it's a unlocked<br />read-do-other-things-write sequence.<br /><br />But it's always run under the page table lock - as should all other SW<br />page table modifications - so it *should* be fine. The down_read() is<br />for protecting other VM data structures (notably the vma lists etc),<br />not the page table bit-twiddling.<br /><br />In fact, the whole SW page table modification scheme *depends* on the<br />page table lock, because the ptep_modify_prot_start/commit thing does<br />a "atomically clear the page table pointer to protect against hardware<br />walkers". And if another software walker were to see that cleared<br />state, it would do bad things (the exception, as usual, is the GUP<br />code, which does the optimistic unlocked accesses and conceptually<br />emulates a hardware page table walk)<br /><br />So I really think that the mmap_sem should be entirely a non-issue for<br />this kind of code.<br /><br />            Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
