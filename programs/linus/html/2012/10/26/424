    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/25/273">First message in thread</a></li><li><a href="/lkml/2012/10/26/5">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/26/44">Ingo Molnar</a></li><li><a href="/lkml/2012/10/26/229">Michel Lespinasse</a><ul><li><a href="/lkml/2012/10/26/241">Andi Kleen</a><ul><li><a href="/lkml/2012/10/26/256">Rik van Riel</a><ul><li><a href="/lkml/2012/10/26/264">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2012/10/26/263">Michel Lespinasse</a></li></ul></li><li class="origin"><a href="/lkml/2012/10/26/447">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/26/447">Rik van Riel</a><ul><li><a href="/lkml/2012/10/26/452">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2012 10:01:14 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 05/31] x86/mm: Reduce tlb flushes from ptep_set_access_flags()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 26, 2012 at 5:34 AM, Michel Lespinasse &lt;walken&#64;google.com&gt; wrote:<br />&gt; On Thu, Oct 25, 2012 at 9:23 PM, Linus Torvalds &lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; Yes. It's not architected as far as I know, though. But I agree, it's<br />&gt;&gt; possible - even likely - we could avoid TLB flushing entirely on x86.<br />&gt;<br />&gt; Actually, it is architected on x86. This was first described in the<br />&gt; intel appnote 317080 "TLBs, Paging-Structure Caches, and Their<br />&gt; Invalidation", last paragraph of section 5.1. Nowadays, the same<br />&gt; contents are buried somewhere in Volume 3 of the architecture manual<br />&gt; (in my copy: 4.10.4.1 Operations that Invalidate TLBs and<br />&gt; Paging-Structure Caches)<br /><br />Good. I should have known it must be architected, because we've gone<br />back-and-forth on this in the kernel historically. We used to have<br />some TLB invalidates in the faulting path because I wasn't sure<br />whether they were needed or not, but we clearly don't have them any<br />more (and I suspect coverage was always spotty).<br /><br />And Intel (and AMD) have been very good at documenting as architected<br />these kinds of details that people end up relying on even if they<br />weren't necessarily originally explicitly documented.<br /><br />&gt;&gt; I *suspect* that whole TLB flush just magically became an SMP one<br />&gt;&gt; without anybody ever really thinking about it.<br />&gt;<br />&gt; I would be very worried about assuming every non-x86 arch has similar<br />&gt; TLB semantics. However, if their fault handlers always invalidate TLB<br />&gt; for pages that get spurious faults, then skipping the remote<br />&gt; invalidation would be fine. (I believe this is what<br />&gt; tlb_fix_spurious_fault() is for ?)<br /><br />Yes. Of course, there may be some case where we unintentionally don't<br />necessarily flush a faulting address (on some architecture that needs<br />it), and then removing the cross-cpu invalidate could expose that<br />pre-existing bug-let, and cause an infinite loop of page faults due to<br />a TLB entry that never gets invalidated even if the page tables are<br />actually up-to-date.<br /><br />So changing the mm/pgtable-generic.c function sounds like the right<br />thing to do, but would be a bit more scary.<br /><br />Changing the x86 version sounds safe, *especially* since you point out<br />that the "fault-causes-tlb-invalidate" is architected behavior.<br /><br />So I'd almost be willing to drop the invalidate in just one single<br />commit, because it really should be safe. The only thing it does is<br />guarantee that the accessed bit gets updated, and the accessed bit<br />just isn't that important. If we never flush the TLB on another CPU<br />that continues to use a TLB entry where the accessed bit is set (even<br />if it's cleared in the in-memory page tables), the worst that can<br />happen is that the accessed bit doesn't ever get set even if that CPU<br />constantly uses the page.<br /><br />And nobody will *ever* care. The A bit is purely a heuristic for the<br />page LRU thing, we don't care about irrelevant special cases that<br />won't even affect correctness (much less performance - if that thing<br />is really hot and stays in the TLB, if we evict it, it will<br />immediately get reloaded anyway).<br /><br />And doing a TLB invalidate even locally is worthless: sure, setting<br />the dirty bit and not invalidating the TLB can cause a local micro-tlb<br />fault (not a software-visible one, just microarchitectural pipeline<br />restart with TLB reload) on the next write access (because the TLB<br />would still contain D=0), so *eve*if* the CPU didn't<br />invalidate-on-fault, there's no reason we should invalidate in<br />software on x86.<br /><br />Again, this can be different on non-x86 architectures with software<br />dirty bits, where a stale TLB entry that never gets flushed could<br />cause infinite TLB faults that never make progress, but that's really<br />a TLB _walker_ issue, not a generic VM issue.<br /><br />          Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
