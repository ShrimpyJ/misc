    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/24/885">First message in thread</a></li><li><a href="/lkml/2012/10/24/885">Juri Lelli</a><ul><li><a href="/lkml/2012/10/24/570">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/590">"H. Peter Anvin"</a></li><li><a href="/lkml/2012/10/24/597">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/598">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/600">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/602">"H. Peter Anvin"</a></li><li><a href="/lkml/2012/10/24/605">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/607">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/641">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/650">Steven Rostedt</a></li><li><a href="/lkml/2012/10/24/653">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/656">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/669">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/733">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/754">Juri Lelli</a></li><li><a href="/lkml/2012/10/25/17">Geert Uytterhoeven</a></li><li><a href="/lkml/2012/10/25/59">Ingo Molnar</a></li><li><a href="/lkml/2012/10/25/142">Borislav Petkov</a></li><li><a href="/lkml/2012/10/25/270">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/275">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/310">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/414">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/789">Juri Lelli</a></li><li><a href="/lkml/2012/10/25/588">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/804">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/805">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/110">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/129">Ingo Molnar</a></li><li><a href="/lkml/2012/10/26/138">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/149">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/155">Harald Gustafsson</a></li><li><a href="/lkml/2012/10/26/157">Ingo Molnar</a></li><li><a href="/lkml/2012/10/26/170">Thomas Gleixner</a></li><li><a href="/lkml/2012/10/26/173">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/230">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/251">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/302">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/24/807">Juri Lelli</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2012/10/26/462">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/467">Thomas Gleixner</a></li><li><a href="/lkml/2012/10/26/469">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/479">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/625">Ingo Molnar</a><ul><li><a href="/lkml/2012/10/26/188">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2012/10/24/835">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/844">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/849">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/865">Juri Lelli</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Oct 2012 08:17:22 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 01/16] math128: Introduce various 128bit primitives</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Oct 26, 2012 at 1:49 AM, Peter Zijlstra &lt;peterz&#64;infradead.org&gt; wrote:<br />&gt;<br />&gt; No, it does a compare on two u128<br /><br />Actually, it apparently compares two multiplications.<br /><br />That might be optimizable in itself.<br /><br />&gt; The point is (as mentioned in the comments below) overflowing an actual<br />&gt; u64 is rare, however since some of this (specifically the<br />&gt; dl_{runtime,deadline} parameters) is user specified, we have to assume<br />&gt; we will overflow.<br /><br />Any chance we could just limit them?<br /><br />&gt; +       u128 left, right;<br />&gt; +<br />&gt; +       /*<br />&gt; +        * left and right are the two sides of the equation above,<br />&gt; +        * after a bit of shuffling to use multiplications instead<br />&gt; +        * of divisions.<br />&gt; +        *<br />&gt; +        * Note that none of the time values involved in the two<br />&gt; +        * multiplications are absolute: dl_deadline and dl_runtime<br />&gt; +        * are the relative deadline and the maximum runtime of each<br />&gt; +        * instance, runtime is the runtime left for the last instance<br />&gt; +        * and (deadline - t), since t is rq-&gt;clock, is the time left<br />&gt; +        * to the (absolute) deadline. Therefore, overflowing the u64<br />&gt; +        * type is very unlikely to occur in both cases.<br />&gt; +        */<br />&gt; +       left = mul_u64_u64(dl_se-&gt;dl_deadline, dl_se-&gt;runtime);<br />&gt; +       right = mul_u64_u64((dl_se-&gt;deadline - t), dl_se-&gt;dl_runtime);<br />&gt; +<br />&gt; +       if (cmp_u128(left, right) &gt; 0)<br />&gt; +               return true;<br />&gt; +<br />&gt; +       return false;<br /><br />So how often could we do this without doing the multiplication at all?<br /><br />It's trivial to see that 'right &gt; left' if the individual<br />multiplicands are both bigger, for example. Maybe that is common?<br /><br />And even if it overflows in 64-bit does it overflow in 92? For 32-bit<br />machines, the difference there is quite noticeable.<br /><br />So the above might actually be better written as a<br />"compare_64bit_multiply(a,b,c,d)". At the same time, are we<br />*seriously* ever talking about multi-second runtimes or deadlines?<br />Because even in nanoseconds, I assume that the common case *by*far* in<br />scheduling would be about values smaller than four seconds, in which<br />case all of the above values are 32-bit, making the compares *much*<br />cheaper.<br /><br />So on a 32-bit machine (say, x86-32), you might just have:<br /><br /> - or all the high words together, jump to slow case if the result is non-zero<br /> - otherwise, do just two 32x32 multiplies and check which of the two is bigger.<br /><br />That's a *huge* reduction in expensive multiplications.<br /><br />And *THAT* is why generic 128-bit math is stupid. Don't do it.<br /><br />           Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
