    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/25/273">First message in thread</a></li><li><a href="/lkml/2012/10/25/531">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/25/750">Rik van Riel</a><ul><li class="origin"><a href="/lkml/2012/10/25/802">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/25/802">Rik van Riel</a><ul><li><a href="/lkml/2012/10/26/5">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Oct 2012 19:56:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 05/31] x86/mm: Reduce tlb flushes from ptep_set_access_flags()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Oct 25, 2012 at 7:30 PM, Rik van Riel &lt;riel&#64;redhat.com&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; LOOK at the code, for chrissake. Just look at it. And if you don't see<br />&gt;&gt; why the above is stupid and retarded, you damn well shouldn't be<br />&gt;&gt; touching VM code.<br />&gt;<br />&gt; I agree it is pretty ugly.  However, the above patch<br />&gt; did get rid of a gigantic performance regression with<br />&gt; Peter's code.<br /><br />Rik, *LOOK* at the code like I asked you to, instead of making excuses for it.<br /><br />I'm not necessarily arguing with what the code tries to do. I'm<br />arguing with the fact that the code is pure and utter *garbage*.<br /><br />It has two major (and I mean *MAJOR*) problems, both of which<br />individually should make you ashamed for ever posting that piece of<br />shit:<br /><br />The obvious-without-even-understanding-semantics problem:<br /><br /> - it's humongously stupidly written. It calculates that<br />'flush_remote' flag WHETHER IT GETS USED OR NOT.<br /><br />   Christ. I can kind of expect stuff like that in driver code etc,<br />but in VM routines?<br /><br />   Yes, the compiler may be smart enough to actually fix up the<br />idiocy. That doesn't make it less stupid.<br /><br />The more-subtle-but-fundamental-problem:<br /><br /> - regardless of how stupidly written it is on a very superficial<br />level, it's even more stupid in a much more fundamental way.<br /><br />   That whole routine is explicitly written to be opportunistic. It is<br />*documented* to only set the access flags, so comparing anything else<br />is stupid, wouldn't you say?<br /><br />Documented where? It's actually explicitly documented in the<br />pgtable-generic.c file which has the generic implementation of that<br />thing. But it's implicitly documented both in the name of the function<br />(do take another look) *and* in the actual implementation of the<br />function.<br /><br />Look at the code: it doesn't even always update the page tables AT ALL<br />(and no, the return value does *not* reflect whether it updated it or<br />not!)<br /><br />Also, notice how we update the pte entry with a simple<br /><br />    *ptep = entry;<br /><br />statement, not with the usual expensive page table updates? The only<br />thing that makes this safe is that we *only* do it with the exact same<br />page frame number (anything else would be disastrously buggy on 32-bit<br />PAE, for example). And we only ever do it with the dirty bit always<br />set, because otherwise we might be silently dropping a concurrent<br />hardware update of the dirty bit of the previous pte value on another<br />CPU.<br /><br />The latter requirement is why the x86 code does<br /><br />    if (changed &amp;&amp; dirty) {<br /><br />while the generic code checks just "If (changed)" (and then uses the<br />much more expensive set_pte_at() that has the proper dirty-bit<br />guarantees, and generates atomic accesses, not to mention various<br />virtualization crap).<br /><br />In other words, everything that was added by that patch is PURE AND<br />UTTER SHIT. And THAT is what I'm objecting to.<br /><br />Guess what? If you want to optimize the function to not do remote TLB<br />flushes, then just do that! None of the garbage. Just change the<br /><br />    flush_tlb_page(vma, address);<br /><br />line to<br /><br />    __flush_tlb_one(address);<br /><br />and it should damn well work. Because everything I see about<br />"flush_remote" looks just wrong, wrong, wrong.<br /><br />And if there really is some reason for that whole flush_remote<br />braindamage, then we have much bigger problems, namely the fact that<br />we've broken the documented semantics of that function, and we're<br />doing various other things that are completely and utterly invalid<br />unless the above semantics hold.<br /><br />So that patch should be burned, and possibly used as an example of<br />horribly crappy code for later generations. At no point should it be<br />applied.<br /><br />                 Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
