    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/16/534">First message in thread</a></li><li><a href="/lkml/2012/10/16/534">Mikulas Patocka</a><ul><li class="origin"><a href="/lkml/2012/10/17/30">Linus Torvalds</a><ul><li><a href="/lkml/2012/10/17/30">Lai Jiangshan</a><ul><li><a href="/lkml/2012/10/17/303">Mikulas Patocka</a><ul><li><a href="/lkml/2012/10/17/464">Steven Rostedt</a></li></ul></li></ul></li><li><a href="/lkml/2012/10/17/134">Alan Cox</a></li><li><a href="/lkml/2012/10/18/388">Mikulas Patocka</a><ul><li><a href="/lkml/2012/10/19/445">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 16 Oct 2012 19:23:07 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] percpu-rwsem: use barrier in unlock path</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">[ Architecture people, note the potential new SMP barrier! ]<br /><br />On Tue, Oct 16, 2012 at 4:30 PM, Mikulas Patocka &lt;mpatocka&#64;redhat.com&gt; wrote:<br />&gt; +       /*<br />&gt; +        * The lock is considered unlocked when p-&gt;locked is set to false.<br />&gt; +        * Use barrier prevent reordering of operations around p-&gt;locked.<br />&gt; +        */<br />&gt; +#if defined(CONFIG_X86) &amp;&amp; (!defined(CONFIG_X86_PPRO_FENCE) &amp;&amp; !defined(CONFIG_X86_OOSTORE))<br />&gt; +       barrier();<br />&gt; +#else<br />&gt; +       smp_mb();<br />&gt; +#endif<br />&gt;         p-&gt;locked = false;<br /><br />Ugh. The #if is too ugly to live.<br /><br />This is a classic case of "people who write their own serialization<br />primitives invariably get them wrong". And this fix is just horrible,<br />and code like this should not be allowed.<br /><br />I suspect we could make the above x86-specific optimization be valid<br />by introducing a new barrier, called "smp_release_before_store()" or<br />something like that, which on x86 just happens to be a no-op (but<br />still a compiler barrier). That's because earlier reads will not pass<br />a later stores, and stores are viewed in program order, so all x86<br />stores have "release consistency" modulo the theoretical PPro bugs<br />(that I don't think we actually ever saw in practice).<br /><br />But it is possible that that is true on other architectures too, so<br />your hand-crafted x86-specific #if is not just ugly, it's liable to<br />get worse.<br /><br />The alternative is to just say that we should use "smp_mb()"<br />unconditionally, depending on how critical this code actually ends up<br />being.<br /><br />Added linux-arch in case architecture-maintainers have comments on<br />"smp_release_before_store()" thing. It would be kind of similar to the<br />odd "smp_read_barrier_depends()", except it would normally be a full<br />memory barrier, except on architectures where a weaker barrier might<br />be sufficient.<br /><br />I suspect there may be many architectures where a "smp_wmb()" is<br />sufficient for this case, for the simple reason that no sane<br />microarchitecture would *ever* move earlier reads down past a later<br />write, so release consistency really only needs the local writes to be<br />ordered, not the full memory ordering.<br /><br />Arch people?<br /><br />The more optimal solution may be to mark the store *itself* to be<br />"store with release consistency", which on x86 would be a regular<br />store (with the compiler barrier), but on other architectures may be a<br />special memory operation. On architectures with<br />release/aqcuire-consistency, there's not a separate barrier before the<br />store, the store instruction itself is done with special semantics. So<br />maybe the right thing to do is<br /><br />   #define smp_release_consistency_store(val, ptr) ...<br /><br />where on x86, the implementation would be a simple<br /><br />   do { barrier(); *(ptr)=(val); } while (0)<br /><br />but on other architectures it might be a inline asm with the required<br />magic store-with-release instruction.<br /><br />How important is this code sequence? Is the "percpu_up_write()"<br />function really so critical that we can't have an extra memory<br />barrier? Or do people perhaps see *other* places where<br />release-consistency-stores might be worth doing?<br /><br />But in no event do I want to see that butt-ugly #if statement.<br /><br />                Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
