    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2012/10/24/885">First message in thread</a></li><li><a href="/lkml/2012/10/24/885">Juri Lelli</a><ul><li><a href="/lkml/2012/10/24/570">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/590">"H. Peter Anvin"</a></li><li><a href="/lkml/2012/10/24/597">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/598">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/600">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/602">"H. Peter Anvin"</a></li><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/607">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/641">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/650">Steven Rostedt</a></li><li><a href="/lkml/2012/10/24/653">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/656">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/669">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/733">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/754">Juri Lelli</a></li><li><a href="/lkml/2012/10/25/17">Geert Uytterhoeven</a></li><li><a href="/lkml/2012/10/25/59">Ingo Molnar</a></li><li><a href="/lkml/2012/10/25/142">Borislav Petkov</a></li><li><a href="/lkml/2012/10/25/270">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/275">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/310">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/25/414">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/789">Juri Lelli</a></li><li><a href="/lkml/2012/10/25/588">Linus Torvalds</a></li><li><a href="/lkml/2012/10/24/804">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/805">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/110">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/129">Ingo Molnar</a></li><li><a href="/lkml/2012/10/26/138">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/149">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/155">Harald Gustafsson</a></li><li><a href="/lkml/2012/10/26/157">Ingo Molnar</a></li><li><a href="/lkml/2012/10/26/170">Thomas Gleixner</a></li><li><a href="/lkml/2012/10/26/173">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/26/230">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/251">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/302">Peter Zijlstra</a></li><li><a href="/lkml/2012/10/24/807">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/349">Linus Torvalds</a></li><li><a href="/lkml/2012/10/26/462">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/467">Thomas Gleixner</a></li><li><a href="/lkml/2012/10/26/469">Steven Rostedt</a></li><li><a href="/lkml/2012/10/26/479">Juri Lelli</a></li><li><a href="/lkml/2012/10/26/625">Ingo Molnar</a><ul><li><a href="/lkml/2012/10/26/188">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2012/10/24/835">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/844">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/849">Juri Lelli</a></li><li><a href="/lkml/2012/10/24/865">Juri Lelli</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 24 Oct 2012 16:18:13 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 01/16] math128: Introduce various 128bit primitives</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 24, 2012 at 2:53 PM, Juri Lelli &lt;juri.lelli&#64;gmail.com&gt; wrote:<br />&gt; From: Peter Zijlstra &lt;a.p.zijlstra&#64;chello.nl&gt;<br />&gt;<br />&gt; Grow rudimentary u128 support without relying on gcc/libgcc.<br /><br />I missed the part where somebody explains why and what needs this?<br />It's going to be very expensive indeed on some platforms, so the fact<br />that it is *sometimes* cheap doesn't necessarily imply it should ever<br />be used.<br /><br />So please, explain what the pressing need is that is so worthwhile<br />that this is worth it. Maybe it was in a 00/16 cover letter, but not<br />only was that not sent out to the people who got 01, you'd still want<br />it in the commit message.<br /><br />&gt; +typedef union {<br />&gt; +       struct {<br />&gt; +#if __BYTE_ORDER__  == __ORDER_LITTLE_ENDIAN__<br />&gt; +               u64 lo, hi;<br />&gt; +#else<br />&gt; +               u64 hi, lo;<br />&gt; +#endif<br />&gt; +       };<br />&gt; +#ifdef __SIZEOF_INT128__ /* gcc-4.6+ */<br />&gt; +       unsigned __int128 val;<br />&gt; +#endif<br />&gt; +} u128;<br /><br />This also looks totally wrong.<br /><br />If gcc has native support for __int128, then the union is pointless.<br />Don't do it. Just do<br /><br />  #ifdef __SIZEOF_INT128__<br />    typedef unsigned __int128 u128;<br />  #else<br />    typedef struct { ... u64 hi/lo in the right order } u128;<br />  #endif<br /><br />because it's possible that using the native bare type will make gcc<br />able to do better for various things.<br /><br />Sure, it's possible that you want to use a union in low-level<br />architecture code that implements the actual math, BUT EVEN THEN the<br />above union is pure and utter garbage. On 32-bit machines, you'd want<br />to make it a union of 4 32-bit entities etc. So putting it like this<br />in a generic file looks wrong. In fact, your very own generic<br />mul_u64_u64() would seem to want to use the "4 32-bit words" kind of<br />model.<br /><br />Also, the union isn't used for generic code anyway, since the generic<br />code has that same __SIZEOF_INT128__ test for which generic version it<br />should include (and I wonder if it should just be<br /><br />  #ifdef __SIZEOF_INT128__<br />    #include &lt;linux/native-128bit.h&gt;<br />  #elif CONFIG_64BIT<br />    #include &lt;linux/generic64bit-128bit.h&gt;<br />  #else<br />    #include &lt;linux/generic64bit-128bit.h&gt;<br />  #endif<br /><br />and then have separate files entirely for the "gcc handles the common<br />operations" vs "64-bit architecture needs two words for most things"<br />vs "32-bit architectures need 4 words for most things".<br /><br />I dunno. But I think this is wrong.<br /><br />             Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
