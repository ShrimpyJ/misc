    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/9/27/107">First message in thread</a></li><li><a href="/lkml/2002/9/27/107">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2002/9/27/113">Linus Torvalds</a><ul><li><a href="/lkml/2002/9/27/113">Ingo Molnar</a><ul><li><a href="/lkml/2002/9/27/115">Linus Torvalds</a><ul><li><a href="/lkml/2002/9/27/118">Ingo Molnar</a></li></ul></li></ul></li><li><a href="/lkml/2002/9/28/28">Arjan van de Ven</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Sep 2002 09:26:36 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] 'virtual =&gt; physical page mapping cache', vcache-2.5.38-B8</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 27 Sep 2002, Ingo Molnar wrote:<br />&gt; <br />&gt; the attached patch implements the virtual =&gt; physical cache. Right now<br />&gt; only the COW code calls the invalidation function, because futexes do not<br />&gt; need notification on unmap.<br /><br />Ok, looks good. Except you make get_user_page() do a write fault on the <br />page, and one of the points of this approach was that that shouldn't even <br />be needed. Or did I miss some case that does need it?<br /><br />&gt; I have fixed a new futex bug as well: pin_page() alone does not guarantee<br />&gt; that the mapping does not change magically, only taking the MM semaphore<br />&gt; in write-mode does.<br /><br />And this makes no sense to me.<br /><br />A read lock on the semaphore should give you all the same protection as a<br />write lock does.<br /><br />To protect against the swapper etc, you really need to get the mm<br />spinlock, not the semaphore. And once you have the spinlock, you should be<br />totally safe.  Please explain what you saw?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
