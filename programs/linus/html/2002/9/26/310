    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/9/26/101">First message in thread</a></li><li><a href="/lkml/2002/9/26/101">Ingo Molnar</a><ul><li><a href="/lkml/2002/9/26/158">(Linus Torvalds)</a></li><li><a href="/lkml/2002/9/26/305">Andrew Morton</a><ul><li><a href="/lkml/2002/9/26/308">Linus Torvalds</a><ul><li><a href="/lkml/2002/9/27/33">Ingo Molnar</a></li></ul></li><li class="origin"><a href="/lkml/2002/9/26/317">Linus Torvalds</a><ul><li><a href="/lkml/2002/9/26/317">Linus Torvalds</a></li><li><a href="/lkml/2002/9/27/54">Ingo Molnar</a></li></ul></li></ul></li><li><a href="/lkml/2002/10/4/346">Jamie Lokier</a><ul><li><a href="/lkml/2002/10/4/361">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 26 Sep 2002 15:45:43 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] 'sticky pages' support in the VM, futex-2.5.38-C5</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Actually, thinking more on this..<br /><br />Ingo Molnar wrote: <br />&gt;<br />&gt;  - if the faulting context is a non-owner (ie. the fork()-ed child), then<br />&gt;    the normal COW path is taken - new page allocated and installed.<br />&gt; <br />&gt;  - if the faulting context is the owner, then the pte chain is walked, and<br />&gt;    the new page is installed into every 'other' pte. This needs a<br />&gt;    cross-CPU single-page TLB flush though. The TLB flush could be<br />&gt;    optimized if we had a way to get to the mapping MM's of the individual<br />&gt;    pte chain entries - is this possible?<br /><br />Actually, we don't have to do it this way. My preferred solution would be <br />to make the pinning data structure be a special one with a callback (which <br />also means that you do _not_ have to re-use the LRU list), and what we do <br />is that when we're getting called back the futex code just updates to the <br />new physical page instead.<br /><br />So the data structures would look something like this:<br /><br />	struct page_change_struct {<br />		unsigned long address;<br />		struct mm_struct *vm;<br />		struct list_head list;<br />		void (*callback)(struct page_change_struct *data, struct page *new);<br />	}<br /><br />	struct list_head page_change_struct_hash[HASHSIZE];<br /><br />and then when we pin a page, we do<br /><br />	/* This is part of the <br />	struct page_change_struct pinned_data;<br /><br />	pinned_data.address = virtual_address;<br />	pinned_data.vm = current_mm;<br />	pinned_data.callback = futex_cow_callback;<br /><br />	insert_pin_page(page, &amp;pinned_data);<br />		.. this does a hash on address, inserts it into the<br />		   page_change_struct_hash table, and is done..<br /><br />unpinning does:<br /><br />	remove_pin_page(page, &amp;pinned_data);<br />		.. this just does a "list_del(&amp;pinned_data); ...<br /><br />and COW does:<br /><br />	.. hash the COW address, look up the page_change_struct_hash,<br />	   search if the page/vm tuple exists in the index, and if it<br />	   does, call the callback()..<br /><br />and then the "callback" function just updates the page information in the <br />futex block directly - as if it was looked up anew.<br /><br />This has the advantage that it works without any cross-CPU tlb stuff, and <br />that other users (not just futexes) can also register themselves for <br />getting callbacks if somebody COW's a page they had.<br /><br />We could extend it to work for unmapping etc too if we wanted (ie anybody <br />who caches a virtual-&gt;physical translation for a specific page can always <br />ask for a "invalidate this particular page mapping" event.<br /><br />I really like this approach. <br /><br />[ Of course I do, since I thought it up. All my ideas are absolutely <br />  brilliant, until somebody points out why they can't work. The locking<br />  might be interesting, but the most obvious locking seems to be to have <br />  some per-hash thing. ]<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
