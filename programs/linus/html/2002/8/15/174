    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/8/13/136">First message in thread</a></li><li><a href="/lkml/2002/8/15/63">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/15/147">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2002/8/15/162">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/15/162">Ingo Molnar</a><ul><li><a href="/lkml/2002/8/15/15">Ingo Molnar</a></li><li><a href="/lkml/2002/8/15/81">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Aug 2002 17:06:37 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] user-vm-unlock-2.5.31-A2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 16 Aug 2002, Ingo Molnar wrote:<br />&gt; &gt; [...] In which case we sure as heck don't want the original child to<br />&gt; &gt; modify the VM that it now shares with a subthread.<br />&gt; <br />&gt; in what way is clone() utilized? if it's via any threading library then<br />&gt; the fork()-ed process has its own thread state, which must be freed when<br />&gt; exiting.<br /><br />See this:<br /><br />	process X<br /><br />	fork()			<br />			-------&gt;	Process Y<br />					clone()<br />								----&gt; thread Z<br /><br />					exit()<br />					THIS MUST NOT<br />					WRITE TO MEMORY<br />					IN Z!!<br /><br /><br />Notice how the exit() in Y will never be able to write into the address <br />space of X - it would only write into the address space of Z, and Z is not <br />expecting that at all!<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
