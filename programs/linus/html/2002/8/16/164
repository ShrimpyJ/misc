    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/8/13/136">First message in thread</a></li><li><a href="/lkml/2002/8/15/81">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/15/70">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/16/67">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2002/8/16/42">Ingo Molnar</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Aug 2002 09:54:16 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] user-vm-unlock-2.5.31-A2</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 16 Aug 2002, Ingo Molnar wrote:<br />&gt; <br />&gt; okay, this is the misunderstanding then. If it fork()s and then uses some<br />&gt; threading (which uses clone()) then in all cases i know about it must be<br />&gt; linked against some threading library. Otherwise Y couldnt do a clone()  <br />&gt; call and expect threading to work.<br /><br />But of course it would. You can make your own async-io-like things by just <br />using clone() directly, that's what all the original clone() users were.<br /><br />&gt;		 So right now 'threading' is a property that comes with the<br />&gt; process image at exec()  time. But this must not be so from a conceptual<br />&gt; angle, so i agree with you.<br /><br />Even from a practical angle, it's not a "global" property. Sure, the code <br />that does the clone() itself must have come in through the execve() (or <br />through a loadable library later on), so in that sense you can think of it <br />as a global thing - since the code must obviously be in the address space <br />that the clone thing shares.<br /><br />But a lot of the clone() decisions can be local, without anythign else <br />really knowing about the fact that something started up a thread. The most <br />trivial example is simply something like the appended, which just does a <br />asynchronous read (yeah yeah, stupid example, but it's basically a <br />threaded "cat").<br /><br />Notice how none of this depends on any global state, so a library could do<br />the clone() without the caller even knowing that it does part of its work<br />in a local thread (it obviously wouldn't be doing anything this stupid,<br />but an async writer thread for sound output etc is not impossible to<br />imagine in a game library or something like that).<br /><br />In fact, inside libraries there may well be reasons _not_ to use a global <br />threading model like pthreads, because the library might want to take <br />advantage of things like separate file descriptor address spaces etc that <br />clone() can give it.<br /><br />		Linus<br /><br />---<br />#include &lt;stdlib.h&gt;<br />#include &lt;unistd.h&gt;<br />#include &lt;signal.h&gt;<br /><br />#include &lt;sched.h&gt;<br /><br />#define UNFINISHED (-1000)<br /><br />struct iodesc {<br />	int fd, len, status;<br />	void *buffer;<br />};<br /><br />int io_fn(void *_desc)<br />{<br />	struct iodesc *desc = _desc;<br /><br />	desc-&gt;status = read(desc-&gt;fd, desc-&gt;buffer, desc-&gt;len);<br />	_exit(0);<br />}<br /><br />int main()<br />{<br />	char buffer[4096];<br />	struct iodesc desc = { 0, sizeof(buffer), UNFINISHED, buffer };<br /><br />	clone(io_fn, malloc(4096)+4096, CLONE_VM | CLONE_FILES | CLONE_FS | CLONE_DETACHED, &amp;desc);<br />	while (desc.status == UNFINISHED)<br />		sched_yield();<br />	write(1, buffer, desc.status);<br />}<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
