    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/7/30/54">First message in thread</a></li><li><a href="/lkml/2002/8/16/156">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/17/17">"Martin J. Bligh"</a><ul><li class="origin"><a href="/lkml/2002/8/17/39">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/17/39">"Martin J. Bligh"</a><ul><li><a href="/lkml/2002/8/17/51">Linus Torvalds</a></li><li><a href="/lkml/2002/8/22/74">Andrea Arcangeli</a></li></ul></li><li><a href="/lkml/2002/8/17/42">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/17/26">"Martin J. Bligh"</a></li></ul></li><li><a href="/lkml/2002/8/19/214">Ingo Molnar</a></li><li><a href="/lkml/2002/8/23/164">Pavel Machek</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Aug 2002 21:46:09 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: aio-core why not using SuS? [Re: [rfc] aio-core for 2.5.29 (Re: async-io API registration for 2.5.29)]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 16 Aug 2002, Martin J. Bligh wrote:<br />&gt; <br />&gt; 1. We have a per-process UKVA (user-kernel virtual address space), <br /><br />What is your definition of a "process"?<br /><br />Linux doesn't really have any such thing. Linux threads share different <br />amounts of stuff, and a traditional process just happens to share nothing. <br />However, since they _can_ share more, it's damn hard to see what a <br />"per-process" mapping means.<br /><br />&gt; 2. A per task UKVA, that'd probably have to come out of something<br />&gt; like the vmalloc space. I think Bill Irwin derived something like <br />&gt; that from Dave's work, though I'm not sure it's complete &amp; working <br />&gt; as yet. Per task things like the kernel stack (minus the task_struct <br />&gt; &amp;  waitqueues) could go in here.<br /><br />And what is your definition of a "task"?<br /><br />You seem to think that a task is one thread ("per task things like the<br />kernel stack"), ie a 1:1 mapping with a "struct task_stuct".<br /><br />But if you have such a mapping, then you _cannot_ make a per-task VM<br />space, because many tasks will share the same VM. You cannot even do a<br />per-cpu mapping change (and rewrite the VM on thread switch), since the VM<br />is _shared_ across CPU's, and absolutely has to be in order to work with<br />CPU's that do TLB fill in hardware (eg x86).<br /><br />The fact is, that in order to get the right TLB behaviour, the _only_<br />thing you can do is to have a "per-MM UKVA". It's not per thread, and it's<br />not per process. It's one per MM, which is _neither_.<br /><br />And this is where the problems come in. Since it is per-MM (and thus <br />shared across CPU's) updates need to be SMP-safe. And since it is per-MM, <br />it means that _any_ data structure that might be shared across different <br />MM's are really really dangerous to put in this thing (think virtual <br />caches on some hardware). <br /><br />And since it is per-MM, it means that anything that there can be multiple <br />of per MM (which is pretty much _every_ data structure in the kernel) <br />cannot go at a fixed address or anything like that, but needs to be <br />allocated within the per-MM area dynamically.<br /><br />I suspect that you are used to the traditional UNIX "process" notion,<br />where a "process" has exactly one file table, and has exactly one set of<br />signals, one set of semaphores etc. In that setup it can be quite<br />convenient to map these into the VM address space at magical addresses.<br /><br />You may also be used to per-CPU page tables or software TLB fill<br />situations, where different CPU's can have different TLB contents. That<br />can be used to have per-thread mappings. Again, that doesn't work on Linux<br />due to page table sharing and hw TLB fills.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
