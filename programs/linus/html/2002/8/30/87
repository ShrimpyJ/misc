    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/8/30/35">First message in thread</a></li><li><a href="/lkml/2002/8/30/116">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/30/118">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/2002/8/30/104">Linus Torvalds</a><ul><li><a href="/lkml/2002/8/30/104">Ingo Molnar</a><ul><li><a href="/lkml/2002/8/30/124">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2002/8/30/100">Ingo Molnar</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Aug 2002 10:19:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] scheduler fixes, 2.5.32-BK</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Fri, 30 Aug 2002, Ingo Molnar wrote:<br />&gt; <br />&gt; it touches the waitqueue spinlock - and the __down() path [ie. the process<br />&gt; that gets woken up, which has the semaphore on the stack] takes the<br />&gt; spinlock after waking up. Ie. there's guaranteed synchronization, the<br />&gt; semaphore will not be 'unused' before the __down() path takes the spinlock<br />&gt; - ie. after the __up() path releases the spinlock. What am i missing?<br /><br />So why couldn't this happen? This is what used to happen before, I don't <br />see that consolidating the spinlock had any impact at all.<br /><br />	CPU #0						CPU #1<br /><br />	down()						up()<br /><br />		lock decl (negative)<br />		__down()				lock incl<br />			spinlock()			__up()<br />			atomic_add_negative()<br />				success - break<br />			spinunlock();<br />		}					wake_up()<br />	return - semaphore is now invalid		spin_lock()<br /><br />							BOOM!<br /><br /><br />The fact is, that as long as down() and up() avoid taking the spinlock <br />_before_ they touch "count", they aren't synchronized. <br /><br />And we definitely do _not_ want to take the spinlock before we touch <br />count, since that would make the fast path a lot slower.<br /><br />What?<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
