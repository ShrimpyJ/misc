    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/54">First message in thread</a></li><li><a href="/lkml/2002/12/22/15">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/22/45">Jamie Lokier</a></li><li><a href="/lkml/2002/12/22/62">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2002/12/23/16">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/23/16">Ulrich Drepper</a></li><li><a href="/lkml/2002/12/23/91">Petr Vandrovec</a><ul><li><a href="/lkml/2002/12/23/96">Stephen Rothwell</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/24/55">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/24/56">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/24/57">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/24/58">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/24/60">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/27/117">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2002/12/27/116">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2002/12/26/63">Pavel Machek</a></li><li><a href="/lkml/2003/1/10/99">Gabriel Paubert</a><ul><li><a href="/lkml/2003/1/10/216">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2002/12/22/123/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 22 Dec 2002 21:03:44 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 22 Dec 2002, Linus Torvalds wrote:<br />&gt;<br />&gt; I looked a bit at what it would take to have the TF bit handled by the<br />&gt; sysenter path, and it might not be so horrible - certainly not as ugly as<br />&gt; the register restore bits.<br /><br />Hey, I tried it out, and it does indeed turn out to be fairly easy and<br />clean (in fact, it's mostly four pretty obvious "one-liners").<br /><br />Let nobody say I won't change my mind - you were right Jamie (*). The<br />pushfl/popfl is unnessary, and does show up in microbenchmarks.<br /><br />How does the attached patch work for people? I've verified that<br />single-stepping works, and I've also verified that it does improve<br />performance for simple system calls. Everything looks quite simple.<br /><br />		Linus<br /><br />(*) In fact, people sometimes complain that I change my mind way too<br />often. Hey, sue me.<br /><br />-=-=-=<br /><br />===== arch/i386/kernel/signal.c 1.22 vs edited =====<br />--- 1.22/arch/i386/kernel/signal.c	Fri Dec  6 09:43:43 2002<br />+++ edited/arch/i386/kernel/signal.c	Sun Dec 22 20:31:38 2002<br />&#64;&#64; -609,6 +609,11 &#64;&#64;<br /> void do_notify_resume(struct pt_regs *regs, sigset_t *oldset,<br /> 		      __u32 thread_info_flags)<br /> {<br />+	/* Pending single-step? */<br />+	if (thread_info_flags &amp; _TIF_SINGLESTEP) {<br />+		regs-&gt;eflags |= TF_MASK;<br />+		clear_thread_flag(TIF_SINGLESTEP);<br />+	}<br /> 	/* deal with pending signal delivery */<br /> 	if (thread_info_flags &amp; _TIF_SIGPENDING)<br /> 		do_signal(regs,oldset);<br />===== arch/i386/kernel/sysenter.c 1.4 vs edited =====<br />--- 1.4/arch/i386/kernel/sysenter.c	Sat Dec 21 16:02:02 2002<br />+++ edited/arch/i386/kernel/sysenter.c	Sun Dec 22 20:17:28 2002<br />&#64;&#64; -54,19 +54,18 &#64;&#64;<br /> 		0xc3			/* ret */<br /> 	};<br /> 	static const char sysent[] = {<br />-		0x9c,			/* pushf */<br /> 		0x51,			/* push %ecx */<br /> 		0x52,			/* push %edx */<br /> 		0x55,			/* push %ebp */<br /> 		0x89, 0xe5,		/* movl %esp,%ebp */<br /> 		0x0f, 0x34,		/* sysenter */<br />+		0x00,			/* align return point */<br /> 	/* System call restart point is here! (SYSENTER_RETURN - 2) */<br /> 		0xeb, 0xfa,		/* jmp to "movl %esp,%ebp" */<br /> 	/* System call normal return point is here! (SYSENTER_RETURN in entry.S) */<br /> 		0x5d,			/* pop %ebp */<br /> 		0x5a,			/* pop %edx */<br /> 		0x59,			/* pop %ecx */<br />-		0x9d,			/* popf - restore TF */<br /> 		0xc3			/* ret */<br /> 	};<br /> 	unsigned long page = get_zeroed_page(GFP_ATOMIC);<br />===== arch/i386/kernel/traps.c 1.36 vs edited =====<br />--- 1.36/arch/i386/kernel/traps.c	Mon Nov 18 10:10:45 2002<br />+++ edited/arch/i386/kernel/traps.c	Sun Dec 22 20:03:35 2002<br />&#64;&#64; -605,7 +605,7 &#64;&#64;<br /> 		 * interface.<br /> 		 */<br /> 		if ((regs-&gt;xcs &amp; 3) == 0)<br />-			goto clear_TF;<br />+			goto clear_TF_reenable;<br /> 		if ((tsk-&gt;ptrace &amp; (PT_DTRACE|PT_PTRACED)) == PT_DTRACE)<br /> 			goto clear_TF;<br /> 	}<br />&#64;&#64; -637,6 +637,8 &#64;&#64;<br /> 	handle_vm86_trap((struct kernel_vm86_regs *) regs, error_code, 1);<br /> 	return;<br /><br />+clear_TF_reenable:<br />+	set_tsk_thread_flag(tsk, TIF_SINGLESTEP);<br /> clear_TF:<br /> 	regs-&gt;eflags &amp;= ~TF_MASK;<br /> 	return;<br />===== include/asm-i386/thread_info.h 1.8 vs edited =====<br />--- 1.8/include/asm-i386/thread_info.h	Fri Dec  6 09:43:43 2002<br />+++ edited/include/asm-i386/thread_info.h	Sun Dec 22 20:30:28 2002<br />&#64;&#64; -109,6 +109,7 &#64;&#64;<br /> #define TIF_NOTIFY_RESUME	1	/* resumption notification requested */<br /> #define TIF_SIGPENDING		2	/* signal pending */<br /> #define TIF_NEED_RESCHED	3	/* rescheduling necessary */<br />+#define TIF_SINGLESTEP		4	/* restore singlestep on return to user mode */<br /> #define TIF_USEDFPU		16	/* FPU was used by this task this quantum (SMP) */<br /> #define TIF_POLLING_NRFLAG	17	/* true if poll_idle() is polling TIF_NEED_RESCHED */<br /><br />&#64;&#64; -116,6 +117,7 &#64;&#64;<br /> #define _TIF_NOTIFY_RESUME	(1&lt;&lt;TIF_NOTIFY_RESUME)<br /> #define _TIF_SIGPENDING		(1&lt;&lt;TIF_SIGPENDING)<br /> #define _TIF_NEED_RESCHED	(1&lt;&lt;TIF_NEED_RESCHED)<br />+#define _TIF_SINGLESTEP		(1&lt;&lt;TIF_SINGLESTEP)<br /> #define _TIF_USEDFPU		(1&lt;&lt;TIF_USEDFPU)<br /> #define _TIF_POLLING_NRFLAG	(1&lt;&lt;TIF_POLLING_NRFLAG)<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
