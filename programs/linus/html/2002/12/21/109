    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/54">First message in thread</a></li><li><a href="/lkml/2002/12/21/76">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/21/107">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/2002/12/22/15">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/22/15">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/22/45">Jamie Lokier</a></li><li><a href="/lkml/2002/12/22/62">Linus Torvalds</a></li><li><a href="/lkml/2002/12/24/55">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/22/16">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 21 Dec 2002 19:11:59 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 22 Dec 2002, Jamie Lokier wrote:<br />&gt;<br />&gt; It is better to use iret with TF.  The penalty of forcing _every_<br />&gt; system call to pushfl and popfl in user space is quite a lot: I<br />&gt; measured 30 cycles for "pushfl;popfl" on my 366MHz Celeron.<br /><br />Jamie, please stop these emails.<br /><br />The fact is, when a user enters the kernel with TF set using "sysenter",<br />the kernel doesn't even _know_ that TF is set, because it will take a<br />debug trap on the very first instruction, and the debug handler has no<br />real option except to just return with TF cleared before the kernel even<br />had a chance to save eflags. So at no point in the sysenter/sysexit path<br />does the code have a chance to even _realize_ that the user called it with<br />single-stepping on.<br /><br />So how do you want the code to figure that out, and then (a) set TF on the<br />stack and (b) do the jump to the slow path? Sure, we could add magic<br />per-process flags in the debug handler, and then test them in the sysenter<br />path - but that really is pretty gross.<br /><br />Saving and restoring eflags in user mode avoids all of these<br />complications, and means that there are no special cases. None. Zero.<br />Nada.<br /><br />Special case code is bad. It's certainly a lot more important to me to<br />have a straightforward approach that doesn't have any strange cases, and<br />where debugging "just works", instead of having a lot of magic small<br />details scattered all over the place.<br /><br />So if you really care, create all your special case magic tricks, and see<br />just how ugly it gets. Then see whether it makes any difference at all<br />except on the very simplest system calls ("getpid" really isn't very<br />important).<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
