    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/9/13">First message in thread</a></li><li><a href="/lkml/2002/12/17/5">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/3">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/4">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/19/186">Shuji YAMAMURA</a></li></ul></li><li><a href="/lkml/2002/12/17/7">GrandMasterLee</a></li><li><a href="/lkml/2002/12/17/10">dean gaudet</a><ul><li><a href="/lkml/2002/12/17/85">Linus Torvalds</a></li><li><a href="/lkml/2002/12/17/132">"H. Peter Anvin"</a><ul><li><a href="/lkml/2002/12/17/187">Benjamin LaHaise</a></li></ul></li><li><a href="/lkml/2002/12/19/217">Pavel Machek</a><ul><li><a href="/lkml/2002/12/19/274">"H. Peter Anvin"</a></li></ul></li></ul></li><li><a href="/lkml/2002/12/17/131">"H. Peter Anvin"</a><ul><li><a href="/lkml/2002/12/17/166">Alan Cox</a><ul><li><a href="/lkml/2002/12/17/173">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2002/12/17/172">"Martin J. Bligh"</a><ul><li><a href="/lkml/2002/12/17/169">"H. Peter Anvin"</a></li><li><a href="/lkml/2002/12/17/170">Alan Cox</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/17/32">Andre Hedrick</a><ul><li><a href="/lkml/2002/12/17/54">Dave Jones</a><ul><li><a href="/lkml/2002/12/17/216">Andre Hedrick</a></li></ul></li><li><a href="/lkml/2002/12/17/68">Alan Cox</a><ul><li><a href="/lkml/2002/12/19/202">Pavel Machek</a><ul><li><a href="/lkml/2002/12/19/215">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/17/41">Ulrich Drepper</a><ul><li><a href="/lkml/2002/12/17/44">"dada1"</a><ul><li><a href="/lkml/2002/12/17/104">Ulrich Drepper</a></li></ul></li><li class="origin"><a href="/lkml/2002/12/17/112">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/112">Ulrich Drepper</a><ul><li><a href="/lkml/2002/12/17/113">Linus Torvalds</a></li><li><a href="/lkml/2002/12/17/123">Alan Cox</a></li></ul></li></ul></li><li><a href="/lkml/2002/12/19/249">Pavel Machek</a></li></ul></li><li><a href="/lkml/2002/12/17/77">Hugh Dickins</a><ul><li><a href="/lkml/2002/12/17/82">"Richard B. Johnson"</a><ul><li><a href="/lkml/2002/12/17/107">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/17/86">Hugh Dickins</a></li><li><a href="/lkml/2002/12/17/91">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/116">Matti Aarnio</a><ul><li><a href="/lkml/2002/12/17/111">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/19/159">Pavel Machek</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Dec 2002 09:06:06 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 17 Dec 2002, Ulrich Drepper wrote:<br />&gt;<br />&gt; The problem with the current solution is the instruction set of the x86.<br />&gt;  In your test code you simply use call 0xfffff000 and it magically work.<br />&gt;  But this is only the case because your program is linked statically.<br /><br />Yeah, it's not very convenient. I didn't find any real alternatives,<br />though, and you can always just put 0xfffff000 in memory or registers and<br />jump to that. In fact, I suspect that if you actually want to use it in<br />glibc, then at least in the short term that's what you need to do anyway,<br />sinc eyou probably don't want to have a glibc that only works with very<br />recent kernels.<br /><br />So I was actually assuming that the glibc code would look more like<br />something like this:<br /><br />	old_fashioned:<br />		int $0x80<br />		ret<br /><br />	unsigned long system_call_ptr = old_fashioned;<br /><br />	/* .. startup .. */<br />	if (kernel_version &gt; xxx)<br />		system_call_ptr = 0xfffff000;<br /><br /><br />	/* ... usage ... */<br />		call *system_call_ptr;<br /><br />since you cannot depend on the 0xfffff000 on older kernels anyway..<br /><br />&gt; Instead I've changed the syscall handling to effectve do<br />&gt;<br />&gt;    pushl %ebp<br />&gt;    movl $0xfffff000, %ebp<br />&gt;    call *%ebp<br />&gt;    popl %ebp<br /><br />The above will work, but then you'd have limited yourself to a binary that<br />_only_ works on new kernels. So I'd suggest the memory indirection<br />instead.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
