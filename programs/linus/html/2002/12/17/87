    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/17/27">First message in thread</a></li><li><a href="/lkml/2002/12/17/27">Andi Kleen</a><ul><li class="origin"><a href="/lkml/2002/12/18/8">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/18/8">Brian Gerst</a><ul><li><a href="/lkml/2002/12/18/92">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/21/31">Ingo Molnar</a></li></ul></li><li><a href="/lkml/2002/12/21/44">Christian Leber</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Dec 2002 08:57:44 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 17 Dec 2002, Andi Kleen wrote:<br />&gt;<br />&gt; Linus Torvalds &lt;torvalds&#64;transmeta.com&gt; writes:<br />&gt; &gt;<br />&gt; &gt; That NMI problem is pretty fundamentally unfixable due to the stupid<br />&gt; &gt; sysenter semantics, but we could just make the NMI handlers be real<br />&gt; &gt; careful about it and fix it up if it happens.<br />&gt;<br />&gt; You just have to make the NMI a task gate with an own TSS, then the<br />&gt; microcode will set up an own stack for you.<br /><br />Actually, I came up with a much simpler solution (which I didn't yet<br />implement, but should be just a few lines).<br /><br />The simpler solution is to just make the temporary ESP stack _look_ like<br />it's a real process - ie make it 8kB per CPU (instead of the current 4kB)<br />and put a fake "thread_info" at the bottom of it with the right CPU<br />number etc. That way if an NMI comes in (in the _extremely_ tiny window),<br />it will still see a sane picture of the system. It will basically think<br />that we had a micro-task-switch between two instructions.<br /><br />It's also entirely possible that the NMI window may not actually even<br />exist, since I'm not even sure that Intel checks for pending interrupt<br />before the first instruction of a trap handler.<br /><br />&gt; Using a task gate would be a good idea for kernel stack faults and<br />&gt; double faults too, then it would be at least possible to get an oops<br />&gt; for them, not the usual double fault.<br /><br />We can't get stack faults without degrading performance horribly (they<br />require you to set up the stack segment in magic ways that gcc doesn't<br />even support). For double-faults, yes, but quite frankly, if you ever get<br />a double fault things are _so_ screwed up that it's not very funny any<br />more.<br /><br />&gt; I cannot implement SYSENTER for x86-64/32bit emulation, but I think<br />&gt; I can change the vsyscall code to use SYSCALL, not SYSENTER.<br /><br />Right. The point of my patches is that user-level really _cannot_ use<br />sysenter directly, because the sysenter semantics are just not useful for<br />user land. So as far as user land is concerned, it really _is_ just a<br />"call 0xfffff000", and then the kernel can do whatever is appropriate for<br />that CPU.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
