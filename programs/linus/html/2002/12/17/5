    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/9/13">First message in thread</a></li><li><a href="/lkml/2002/12/16/235">Dave Jones</a><ul><li><a href="/lkml/2002/12/16/244">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2002/12/17/3">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/3">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/17/4">Linus Torvalds</a></li><li><a href="/lkml/2002/12/17/7">GrandMasterLee</a></li><li><a href="/lkml/2002/12/17/10">dean gaudet</a></li><li><a href="/lkml/2002/12/17/131">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2002/12/17/32">Andre Hedrick</a><ul><li><a href="/lkml/2002/12/17/54">Dave Jones</a></li><li><a href="/lkml/2002/12/17/68">Alan Cox</a></li></ul></li><li><a href="/lkml/2002/12/17/41">Ulrich Drepper</a><ul><li><a href="/lkml/2002/12/17/44">"dada1"</a></li><li><a href="/lkml/2002/12/17/90">Linus Torvalds</a></li><li><a href="/lkml/2002/12/19/249">Pavel Machek</a></li></ul></li><li><a href="/lkml/2002/12/17/77">Hugh Dickins</a><ul><li><a href="/lkml/2002/12/17/82">"Richard B. Johnson"</a></li><li><a href="/lkml/2002/12/17/86">Hugh Dickins</a></li><li><a href="/lkml/2002/12/17/91">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/19/159">Pavel Machek</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Dec 2002 21:55:13 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Mon, 16 Dec 2002, Linus Torvalds wrote:<br />&gt;<br />&gt; (Modulo the missing syscall page I already mentioned and potential bugs<br />&gt; in the code itself, of course ;)<br /><br />Ok, I did the vsyscall page too, and tried to make it do the right thing<br />(but I didn't bother to test it on a non-SEP machine).<br /><br />I'm pushing the changes out right now, but basically it boils down to the<br />fact that with these changes, user space can instead of doing an<br /><br />	int $0x80<br /><br />instruction for a system call just do a<br /><br />	call 0xfffff000<br /><br />instead. The vsyscall page will be set up to use sysenter if the CPU<br />supports it, and if it doesn't, it will just do the old "int $0x80"<br />instead (and it could use the AMD syscall instruction if it wants to).<br />User mode shouldn't know or care, the calling convention is the same as it<br />ever was.<br /><br />On my P4 machine, a "getppid()" is 641 cycles with sysenter/sysexit, and<br />something like 1761 cycles with the old "int 0x80/iret" approach. That's a<br />noticeable improvement, but I have to say that I'm a bit disappointed in<br />the P4 still, it shouldn't be even that much.<br /><br />As a comparison, an Athlon will do a full int/iret faster than a P4 does a<br />sysenter/sysexit. Pathetic. But it's better than it used to be.<br /><br />Whatever. The code is extremely simple, and while I'm sure there are<br />things I've missed I'd love to hear if this works for anybody else. I'm<br />appending the (extremely stupid) test-program I used to test it.<br /><br />The way I did this, things like system call restarting etc _should_ all<br />work fine even with "sysenter", simply by virtue of both sysenter and "int<br />0x80" being two-byte opcodes. But it might be interesting to verify that a<br />recompiled glibc (or even just a preload) really works with this on a<br />"whole system" testbed rather than just testing one system call (and not<br />even caring about the return value) a million times.<br /><br />The good news is that the kernel part really looks pretty clean.<br /><br />		Linus<br /><br />---<br />#include &lt;time.h&gt;<br />#include &lt;sys/time.h&gt;<br />#include &lt;asm/unistd.h&gt;<br />#include &lt;sys/stat.h&gt;<br />#include &lt;stdio.h&gt;<br /><br />#define rdtsc() ({ unsigned long a,d; asm volatile("rdtsc":"=a" (a), "=d" (d)); a; })<br /><br />int main()<br />{<br />	int i, ret;<br />	unsigned long start, end;<br /><br />	start = rdtsc();<br />	for (i = 0; i &lt; 1000000; i++) {<br />		asm volatile("call 0xfffff000"<br />			:"=a" (ret)<br />			:"0" (__NR_getppid));<br />	}<br />	end = rdtsc();<br />	printf("%f cycles\n", (end - start) / 1000000.0);<br /><br />	start = rdtsc();<br />	for (i = 0; i &lt; 1000000; i++) {<br />		asm volatile("int $0x80"<br />			:"=a" (ret)<br />			:"0" (__NR_getppid));<br />	}<br />	end = rdtsc();<br />	printf("%f cycles\n", (end - start) / 1000000.0);<br />}<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
