    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/9/13">First message in thread</a></li><li><a href="/lkml/2002/12/17/255">"H. Peter Anvin"</a><ul><li><a href="/lkml/2002/12/17/265">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Dec 2002 22:38:09 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 17 Dec 2002, Linus Torvalds wrote:<br />&gt;<br />&gt; Which is ok for a regular fast system call (ebp will get restored<br />&gt; immediately), but it is NOT ok for the system call restart case, since in<br />&gt; that case we want %ebp to contain the old stack pointer, not the sixth<br />&gt; argument.<br /><br />I came up with an absolutely wonderfully _disgusting_ solution for this.<br /><br />The thing to realize on how to solve this is that since "sysenter" loses<br />track of EIP, there's really no real reason to try to return directly<br />after the "sysenter" instruction anyway. The return point is really<br />totally arbitrary, after all.<br /><br />Now, couple this with the fact that system call restarting will always<br />just subtract two from the "return point" aka saved EIP value (that's the<br />size of an "int 0x80" instruction), and what you can do is to make the<br />kernel point the sysexit return point not at just past the "sysenter", but<br />instead make it point to just past a totally unrelated 2-byte jump<br />instruction.<br /><br />With that in mind, I made the sysentry trampoline look like this:<br /><br />        static const char sysent[] = {<br />                0x51,                   /* push %ecx */<br />                0x52,                   /* push %edx */<br />                0x55,                   /* push %ebp */<br />                0x89, 0xe5,             /* movl %esp,%ebp */<br />                0x0f, 0x34,             /* sysenter */<br />        /* System call restart point is here! (SYSENTER_RETURN - 2) */<br />                0xeb, 0xfa,             /* jmp to "movl %esp,%ebp" */<br />        /* System call normal return point is here! (SYSENTER_RETURN in entry.S) */<br />                0x5d,                   /* pop %ebp */<br />                0x5a,                   /* pop %edx */<br />                0x59,                   /* pop %ecx */<br />                0xc3                    /* ret */<br />        };<br /><br />which does the right thing for a "restarted" system call (ie when it<br />restarts, it won't re-do just the sysenter instruction, it will really<br />restart at the backwards jump, and thus re-start the "movl %esp,%ebp"<br />too).<br /><br />Which means that now the kernel can happily trash %ebp as part of the<br />sixth argument setup, since system call restarting will re-initialize it<br />to point to the user-level stack that we need in %ebp because otherwise it<br />gets totally lost.<br /><br />I'm a disgusting pig, and proud of it to boot.<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
