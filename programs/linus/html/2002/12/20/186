    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/54">First message in thread</a></li><li><a href="/lkml/2002/12/19/127">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/20/11">Ulrich Drepper</a></li><li><a href="/lkml/2002/12/19/96">Jamie Lokier</a><ul><li><a href="/lkml/2002/12/19/180">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/19/17">"H. Peter Anvin"</a><ul><li><a href="/lkml/2002/12/19/135">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/22/23">"James H. Cloos Jr."</a><ul><li><a href="/lkml/2002/12/22/61">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/19/178">"H. Peter Anvin"</a></li><li><a href="/lkml/2002/12/20/118">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/2002/12/20/58">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/20/58">"H. Peter Anvin"</a></li><li><a href="/lkml/2002/12/20/133">Jamie Lokier</a><ul><li><a href="/lkml/2002/12/20/119">Linus Torvalds</a></li><li><a href="/lkml/2002/12/21/48">Jamie Lokier</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Dec 2002 08:47:05 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 20 Dec 2002, Jamie Lokier wrote:<br />&gt;<br />&gt; Ulrich Drepper wrote:<br />&gt; &gt;   int $0x80  -&gt;  call *%gs:0x18<br />&gt;<br />&gt; The calling convention has been (slightly) changed - i.e. 6 argument<br />&gt; calls don't work, so why not go a bit further: allow the vsyscall entry<br />&gt; point to clobber more GPRs?<br /><br />Actually, six-argument syscalls _do_ work. I admit that the way to make<br />them work is "interesting", but it's also extremely simple.<br /><br />&gt; The benefit is that this allows Glibc to do a wholesale replacement of<br />&gt; "int $0x80" -&gt; "single call instruction".  Otherwise, those pushes are<br />&gt; completely unnecessary.  It could be this short instead:<br />&gt;<br />&gt; 	vsyscall:<br />&gt; 		movl	%esp,%ebp<br />&gt; 		sysenter<br />&gt; 		jmp	vsyscall<br />&gt; 		ret<br /><br />Yes, we could have changed the implementation to clobber more registers,<br />but if we want to support all system calls it would still have to save<br />%ebp, so the minimal approach would have been<br /><br />	vsyscall:<br />		pushl %ebp<br />	0:<br />		movl %esp,%ebp<br />		sysenter<br />		jmp 0b	/* only done for restarting */<br />		popl %ebp<br />		ret<br /><br />which is all of 4 (simple) instructions cheaper than the one we have now.<br /><br />And if the caller cannot depend on registers being saved, the caller may<br />actually end up being more complicated. For example, with the current<br />setup, you can have<br /><br />	getpid():<br />		movl $__NR_getpid,%eax<br />		jmp *%gs:0x18<br /><br />but if system calls clobber registers, the caller needs to be<br /><br />	getpid():<br />		pushl %ebx<br />		pushl %esi<br />		pushl %edi<br />		pushl %ebp<br />		movl $__NR_getpid,%eax<br />		call *%gs:0x18<br />		popl %ebp<br />		popl %edi<br />		popl %esi<br />		popl %ebx<br />		ret<br /><br />and notice how the _real_ code sequence actually got much _worse_ from the<br />fact that you tried to save time by not saving registers.<br /><br /><br />&gt; It is nice to be able to use the _exact_ same convention in glibc, for<br />&gt; getting a patch out of the door quickly.  But it is just as easy to do<br />&gt; that putting the pushes and pops into the library itself:<br />&gt;<br />&gt; Instead of<br />&gt;<br />&gt; 	int $0x80 -&gt;	call	*%gs:0x18<br />&gt;<br />&gt; Write<br />&gt;<br />&gt; 	int $0x80 -&gt;	pushl	%ebp<br />&gt; 			pushl	%ecx<br />&gt; 			pushl	%edx<br />&gt; 			call	*%gs:0x18<br />&gt; 			popl	%edx<br />&gt; 			popl	%ecx<br />&gt; 			popl	%ebp<br /><br />But where's the advantage then? You use the same number of instructions<br />dynamically, and you use _more_ icache space than if you have the pushes<br />and pops in just one place?<br /><br />&gt; It has exactly the same cost as the current patches, but provides<br />&gt; userspace with more optimisation flexibility, using an asm clobber<br />&gt; list instead of explicit instructions for inline syscalls, etc.<br /><br />In practice, there is nothing around the call. And you have to realize<br />that the pushes and pops you added in your version are _wasted_ for other<br />cases. If the system call ends up being int 0x80, you just wasted time. If<br />the system call ended up being AMD's x86-64 version of syscall, you just<br />wsted time.<br /><br />The advantage of putting all the register save in the trampoline is that<br />user mode literally doesn't have to _know_ what it is calling. It only<br />needs to know two simple rules:<br /><br /> - registers are preserved (except for %eax which is the return value, of<br />   course)<br /> - it should fill in arguments in %ebx, %ecx ... (but the things that<br />   aren't arguments can just be left untouched)<br /><br />And then depending on what the real low-level calling convention is, the<br />trampoline will save the _minimum_ number of registers (ie some calling<br />conventions might clobber different registers than %ecx/%edx - you have to<br />remember that "sysenter" is just _one_ out of at least three calling<br />conventions available).<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
