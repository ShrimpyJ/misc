    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/145">First message in thread</a></li><li><a href="/lkml/2002/12/19/145">(Grant Grundler)</a><ul><li><a href="/lkml/2002/12/20/6">(Grant Grundler)</a><ul><li><a href="/lkml/2002/12/20/68">"Richard B. Johnson"</a><ul><li><a href="/lkml/2002/12/20/134">(Grant Grundler)</a></li></ul></li><li><a href="/lkml/2002/12/20/69">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/20/90">(Grant Grundler)</a></li><li><a href="/lkml/2002/12/21/66">"Maciej W. Rozycki"</a></li></ul></li></ul></li><li><a href="/lkml/2002/12/19/12">David Mosberger</a></li><li><a href="/lkml/2002/12/19/101">Alan Cox</a></li><li><a href="/lkml/2002/12/20/52">(Linus Torvalds)</a></li><li><a href="/lkml/2002/12/20/91">David Mosberger</a><ul><li class="origin"><a href="/lkml/2002/12/20/43">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/20/43">Ivan Kokshaysky</a><ul><li><a href="/lkml/2002/12/20/150">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/20/106">David Mosberger</a><ul><li><a href="/lkml/2002/12/20/49">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/21/89">(Eric W. Biederman)</a><ul><li><a href="/lkml/2002/12/21/95">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2002/12/20/131">Ivan Kokshaysky</a></li></ul></li><li><a href="/lkml/2002/12/20/176">(Linus Torvalds)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Dec 2002 09:05:53 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: PATCH 2.5.x disable BAR when sizing</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br /><br />On Fri, 20 Dec 2002, David Mosberger wrote:<br />&gt;<br />&gt; Could you please stop this ia64 paranoia and instead explain to me why<br />&gt; it's OK to relocate a PCI device to (0x100000000-PCI_dev_size)<br />&gt; temporarily?  That just seems horribly unsafe to me.<br /><br />No. It's not horribly unsafe at all. It's very safe, for one simple<br />reason: it's how PCI probing has _always_ been done. Exactly because the<br />alternatives simply do not work.<br /><br />I can also tell you why it does work, and why it's supposed to work: by<br />writing 0xffffffff to the BAR register, you basically move the BAR to high<br />PCI memory - even if it was enabled before. Which is fine, as long as<br />nobody else is in that high memory. So the secondary rule to "don't turn<br />off MEM or IO accesses" is "never allocate real PCI BAR resources at the<br />top of memory".<br /><br />Think about it: if you move the BAR to high memory, you basically disable<br />only _that_ bar, and nothing else. You don't clobber any other associated<br />functions, or anything like that. It's clearly a _less_ disruptive thing<br />than disabling access to the whole device.<br /><br />Anyway, why do you really want to add the MEM/IO disable? Do you actually<br />have a device that wants it, or are you just blinded by documentation<br />written by somebody who had no idea about what real life is all about?<br /><br />&gt;							  The PCI spec<br />&gt; seems to say the same as it says pretty clearly that memory decoding<br />&gt; should be disabled during BAR-sizing.  If certain bridges cause<br />&gt; problems, perhaps those need to be special-cased?<br /><br />No. Do it the other way around: if there is some specific chipset that<br />actually _needs_ the disable, you do THAT special cased.<br /><br />Because the current code works on everything that we know about, and we<br />_know_ that the disable doesn't work. As Ivan already pointed out, it's<br />not just bridges. When you disable IO/MEM accesses, you often disable<br />_everything_, which can break pretty much anything.<br /><br />(I say "often", because it does actually depend on the chipset. Some chips<br />only seem to disable the BAR entries. Others disable all the "extended"<br />ports too, and leave only config space accessible after you've disable<br />IO/MEM)<br /><br />The cases I've seen are northbridges that stop forwarding DMA, and USB<br />controllers that are still in legacy mode (because the BAR probing happens<br />before the USB driver has had a chance to _change_ it), where disabling IO<br />and/or MEM will cause the SMM code that does the legacy handling to just<br />lock up, since suddenly the hardware they expect to be there doesn't<br />respond any more.<br /><br />Ivan pointed out that it also disables things like VGA legacy registers.<br /><br />It will disable IDE legacy registers too, btw. I'd also expect it to<br />disable IDE DMA access, so if you happen to be trying to probe the BAR's<br />after somebody started IO on the IDE, you just made that IO fail<br />spectacularly, and I'd not be surprised if the IDE controller just locked<br />up as a result.<br /><br />Let me re-iterate the "turn power off at the master switch in a house when<br />switching a light bulb" analogy. Yes, it's a good idea if you are nervous,<br />but you do that only when you _know_ who is in the house and you know what<br />they are doing and it's ok by them.<br /><br />For example, it would be fine for a low-level driver (who has already<br />taken control of the device) to turn the device off. But it is NOT fine to<br />do it in general.<br /><br />One solution in the long term may be to not even probe the BAR's at all in<br />generic code, and only do it in the pci_enable_dev() stuff. That way it<br />would literally only be done by the driver, who can hopefully make sure<br />that the device is ok with it.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
