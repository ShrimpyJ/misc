    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/54">First message in thread</a></li><li><a href="/lkml/2002/12/20/186">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/20/58">"H. Peter Anvin"</a></li><li><a href="/lkml/2002/12/20/133">Jamie Lokier</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2002/12/21/48">Jamie Lokier</a><ul><li><a href="/lkml/2002/12/21/76">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/21/107">Jamie Lokier</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 20 Dec 2002 16:09:50 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 20 Dec 2002, Jamie Lokier wrote:<br />&gt;<br />&gt; %ebx/%edi/%esi are preserved across sysenter/sysexit, whereas<br />&gt; %ecx/%edx are call-clobbered registers in the i386 function call ABI.<br />&gt;<br />&gt; This is not a coincidence.<br /><br />Yes, you can make the "clobbers %eax/%edx/%ecx" argument, but the fact is,<br />we quite fundamentally need to save %edx/%ecx _anyway_.<br /><br />The reason is system call restarting and signal handling. You don't see it<br />right now, because the system call restart mechanism doesn't actually use<br />"sysexit" at all, but that's because the current implementation is only<br />the minimal possible implementation.<br /><br />The way we do signal handling right now, we always punt to the "old" code,<br />ie the return path that will eventually return with an "iret".<br /><br />And that old code will restore _all_ registers, including %ecx and %edx.<br />So when we return after a restart to the restart handler, %ecx and %edx<br />will have their original values, which is why restarting works right now.<br /><br />The "iret" will trash "%ebp", simply because we fake out the whole %ebp<br />saving to get the six-argument case right. That's why we have to have that<br />extra complicated restart sequence:<br /><br />	0:<br />		movl %esp,%ebp<br />		syscall<br />	restart:<br />		jmp 0b<br /><br />but once we start using sysexit for the signal handler return path too, we<br />will need to restore %edx and %ecx too, otherwise our restarted system<br />call will have crap in the registers. I already wrote the code, but<br />decided that as long as we don't do that kind of restarting, we shouldn't<br />have the overhead in the trampoline. But basically the trampoline then<br />will become<br /><br />	system_call_trampoline:<br />		pushfl<br />		pushl %ecx<br />		pushl %edx<br />		pushl %ebp<br />		movl %esp,%ebp<br />		syscall<br />	0:<br />		movl %esp,%ebp<br />		movl 4(%ebp),%edx<br />		movl 8(%ebp),%ecx<br />		syscall<br /><br />	restart:<br />		jmp 0b<br />	sysenter_return_point:<br />		popl %ebp<br />		popl %edx<br />		popl %ecx<br />		popfl<br />		ret<br /><br />see? So you _have_ to really save the arguments anyway, because you cannot<br />do a sysexit-based system call restart otherwise. And once you save them,<br />you might as well restore them too.<br /><br />And since you have to restore them for system call restart anyway, you<br />might as well just make it part of the calling convention.<br /><br />Yes, I'm thinking ahead. Sue me.<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
