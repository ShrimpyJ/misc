    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/19/54">First message in thread</a></li><li><a href="/lkml/2002/12/21/109">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/22/15">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/22/45">Jamie Lokier</a></li><li><a href="/lkml/2002/12/22/62">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/22/123">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/23/16">Ulrich Drepper</a></li><li><a href="/lkml/2002/12/23/91">Petr Vandrovec</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2002/12/24/56">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/24/56">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/24/57">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/24/58">Ingo Molnar</a><ul><li><a href="/lkml/2002/12/24/60">Linus Torvalds</a></li><li><a href="/lkml/2002/12/27/116">"H. Peter Anvin"</a></li></ul></li><li><a href="/lkml/2002/12/26/63">Pavel Machek</a></li><li><a href="/lkml/2003/1/10/99">Gabriel Paubert</a><ul><li><a href="/lkml/2003/1/10/216">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/12/22/16">Ingo Molnar</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2002/12/24/55/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Dec 2002 11:36:55 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Ok, one final optimization.<br /><br />We have traditionally held ES/DS constant at __KERNEL_DS in the kernel,<br />and we've used that to avoid saving unnecessary segment registers over<br />context switches etc.<br /><br />I realized that there is really no reason to use __KERNEL_DS for this, and<br />that as far as the kernel is concerned, the only thing that matters is<br />that it's a flat 32-bit segment. So we might as well make the kernel<br />always load ES/DS with __USER_DS instead, which has the advantage that we<br />can avoid one set of segment loads for the "sysenter/sysexit" case.<br /><br />(We still need to load ES/DS at entry to the kernel, since we cannot rely<br />on user space not trying to do strange things. But once we load them with<br />__USER_DS, we at least don't need to restore them on return to user mode<br />any more, since "sysenter" only works in a flat 32-bit user mode anyway<br />(*)).<br /><br />This doesn't matter much for a P4 (surprisingly, a P4 does very well<br />indeed on segment loads), but it does make a difference on PIII-class<br />CPU's.<br /><br />This makes a PIII do a "getpid()" system call in something like 160<br />cycles (a P4 is at 430 cycles, oh well).<br /><br />Ingo, would you mind taking a look at the patch, to see if you see any<br />paths where we don't follow the new segment register rules. It looks like<br />swsuspend isn't properly saving and restoring segment register contents.<br />so that will need double-checking (it wasn't correct before either, so<br />this doesn't make it any worse, at least).<br /><br />			Linus<br /><br />(*) We could avoid even that initial load by instead _testing_ that the<br />values are the correct ones and jumping out if not, but I worry about vm86<br />mode being able to fool us with segments that have the right selectors but<br />the wrong segment caches. I disabled sysenter for vm86 mode, but it's so<br />subtle that I prefer just doing the segment loads rather than doing two<br />moves and comparisons.<br /><br />###########################################<br /># The following is the BitKeeper ChangeSet Log<br /># --------------------------------------------<br /># 02/12/24	torvalds&#64;home.transmeta.com	1.953<br /># Make the default values for DS/ES be the _user_ segment descriptors<br /># on x86 - the kernel doesn't really care (as long as it's all flat 32-bit),<br /># and it means that the return path for sysenter/sysexit can avoid re-loading<br /># the segment registers.<br />#<br /># NOTE! This means that _all_ kernel code (not just the sysenter path) must<br /># be appropriately changed, since the kernel knows the conventions and doesn't<br /># save/restore DS/ES internally on context switches etc.<br /># --------------------------------------------<br />#<br />diff -Nru a/arch/i386/kernel/entry.S b/arch/i386/kernel/entry.S<br />--- a/arch/i386/kernel/entry.S	Tue Dec 24 11:34:28 2002<br />+++ b/arch/i386/kernel/entry.S	Tue Dec 24 11:34:28 2002<br />&#64;&#64; -91,18 +91,21 &#64;&#64;<br /> 	pushl %edx; \<br /> 	pushl %ecx; \<br /> 	pushl %ebx; \<br />-	movl $(__KERNEL_DS), %edx; \<br />+	movl $(__USER_DS), %edx; \<br /> 	movl %edx, %ds; \<br /> 	movl %edx, %es;<br /><br />-#define RESTORE_REGS	\<br />+#define RESTORE_INT_REGS \<br /> 	popl %ebx;	\<br /> 	popl %ecx;	\<br /> 	popl %edx;	\<br /> 	popl %esi;	\<br /> 	popl %edi;	\<br /> 	popl %ebp;	\<br />-	popl %eax;	\<br />+	popl %eax<br />+<br />+#define RESTORE_REGS	\<br />+	RESTORE_INT_REGS; \<br /> 1:	popl %ds;	\<br /> 2:	popl %es;	\<br /> .section .fixup,"ax";	\<br />&#64;&#64; -271,9 +274,9 &#64;&#64;<br /> 	movl TI_FLAGS(%ebx), %ecx<br /> 	testw $_TIF_ALLWORK_MASK, %cx<br /> 	jne syscall_exit_work<br />-	RESTORE_REGS<br />-	movl 4(%esp),%edx<br />-	movl 16(%esp),%ecx<br />+	RESTORE_INT_REGS<br />+	movl 12(%esp),%edx<br />+	movl 24(%esp),%ecx<br /> 	sti<br /> 	sysexit<br /><br />&#64;&#64; -428,7 +431,7 &#64;&#64;<br /> 	movl %esp, %edx<br /> 	pushl %esi			# push the error code<br /> 	pushl %edx			# push the pt_regs pointer<br />-	movl $(__KERNEL_DS), %edx<br />+	movl $(__USER_DS), %edx<br /> 	movl %edx, %ds<br /> 	movl %edx, %es<br /> 	call *%edi<br />diff -Nru a/arch/i386/kernel/head.S b/arch/i386/kernel/head.S<br />--- a/arch/i386/kernel/head.S	Tue Dec 24 11:34:28 2002<br />+++ b/arch/i386/kernel/head.S	Tue Dec 24 11:34:28 2002<br />&#64;&#64; -235,12 +235,15 &#64;&#64;<br /> 	lidt idt_descr<br /> 	ljmp $(__KERNEL_CS),$1f<br /> 1:	movl $(__KERNEL_DS),%eax	# reload all the segment registers<br />-	movl %eax,%ds		# after changing gdt.<br />+	movl %eax,%ss			# after changing gdt.<br />+<br />+	movl $(__USER_DS),%eax		# DS/ES contains default USER segment<br />+	movl %eax,%ds<br /> 	movl %eax,%es<br />+<br />+	xorl %eax,%eax			# Clear FS/GS and LDT<br /> 	movl %eax,%fs<br /> 	movl %eax,%gs<br />-	movl %eax,%ss<br />-	xorl %eax,%eax<br /> 	lldt %ax<br /> 	cld			# gcc2 wants the direction flag cleared at all times<br /> #ifdef CONFIG_SMP<br />diff -Nru a/arch/i386/kernel/process.c b/arch/i386/kernel/process.c<br />--- a/arch/i386/kernel/process.c	Tue Dec 24 11:34:28 2002<br />+++ b/arch/i386/kernel/process.c	Tue Dec 24 11:34:28 2002<br />&#64;&#64; -219,8 +219,8 &#64;&#64;<br /> 	regs.ebx = (unsigned long) fn;<br /> 	regs.edx = (unsigned long) arg;<br /><br />-	regs.xds = __KERNEL_DS;<br />-	regs.xes = __KERNEL_DS;<br />+	regs.xds = __USER_DS;<br />+	regs.xes = __USER_DS;<br /> 	regs.orig_eax = -1;<br /> 	regs.eip = (unsigned long) kernel_thread_helper;<br /> 	regs.xcs = __KERNEL_CS;<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
