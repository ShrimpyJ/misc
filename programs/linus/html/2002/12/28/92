    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/28/37">First message in thread</a></li><li><a href="/lkml/2002/12/28/73">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/28/81">Jeff Dike</a><ul><li class="origin"><a href="/lkml/2002/12/28/124">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/28/124">Jeff Dike</a><ul><li><a href="/lkml/2002/12/28/145">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/12/28/133">Daniel Jacobowitz</a></li></ul></li><li><a href="/lkml/2002/12/28/144">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/2002/12/29/2">Jeff Dike</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 28 Dec 2002 12:50:53 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Allow UML kernel to run in a separate host address space</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Sat, 28 Dec 2002, Jeff Dike wrote:<br />&gt; <br />&gt; &gt; What are the semantics the host code wants/needs, <br />&gt; <br />&gt; 1 - Multiple address spaces per process<br />&gt; 2 - Ability to make a child switch between address spaces<br />&gt; 3 - Ability to manipulate a child's address space (i.e. mmap, munmap, mprotect<br />&gt;     on an address space which is not current-&gt;mm)<br /><br />Well, #3 falls under "ptrace()" as far as I'm concerned, I don't really <br />want to expose things through /proc (or /dev, which is even _worse_).<br /><br />We used to have things that could be done with /proc/&lt;pid&gt;/mem, and it was <br />a total security disaster. It was removed in the 2.3.x series because of <br />that.<br /><br />As to #1, that certainly shouldn't be a problem at all. We already do it<br />temporarily internally inside the kernel for execve() setup and for things<br />liek lazy TLB switching for kernel threads, and there's nothing keeping us<br />from having multiple "struct mm_struct" per process. The only issue is <br />what the interfaces should be to create one (/dev/mm is right _out_), and <br />how to switch them around sanely.<br /><br />Having a <br /><br />	int fd = create_mm();<br /><br />system call is certainly not wrong per se (but thinking that it should be<br />done using a special file is wrong - we don't have /dev/pipe either). And <br />creating that system call is trivial - but only worth it if there are good <br />sane interfaces to switch mm's around and do interesting things with them.<br /><br />Done right, it should be possible to have "posix_spawn()" etc done using <br />something like that, ie<br /><br />	/* Create new VM */<br />	int fd = create_mm();<br /><br />	/* populate the dang thing.. */<br />	mmap_mm(fd, .. );<br /><br />	/* start it up */<br />	clone_with_mm(fd, ...);<br /><br />and the internal implementation should be perfectly trivial, since the <br />kernel already largely works this way internally anyway (yeah, it is <br />likely to need some re-organization of clone() to handle pre-created VM's <br />etc, but that's nothing really fundamental).<br /><br />&gt; Beats me.  My first suggestion was to add another file descriptor argument<br />&gt; to mmap et al which would represent the address space to be modified.  Alan<br />&gt; didn't like that idea too much.<br /><br />I do believe that fd's are a natural way to handle it, since it needs <br />_some_ kind of handle, and the only generic handles the kernel has is a <br />file descriptor. We could create a new kind of handle, but it would be <br />likely to be just more complexity.<br /><br />HOWEVER, the part I worry about is creating tons of new system calls that <br />just duplicate existing ones by adding a "fd" argument. That part I really <br />don't much like. Because if this were to really be a generic feature, it <br />really wants pretty much _all_ system calls supported, ie things like<br /><br />	fd = open(&lt;mm,ptr&gt;, flags, ...);<br /><br />	retval = read(&lt;mm,ptr&gt;..<br /><br />to allow the user to not just mmap but generally "take the guise of" any <br />other mm for the duration of the system call.<br /><br />Which really means that I _think_ the right approach would be to literally <br />have a "indirect-system-call-using-this-mm" system call, which does <br />something like<br /><br />	asmlinkage sys_mm_indirect(int fd, struct syscall_descriptor_block *user_args)<br />	{<br />		struct mm_struct *old_mm;<br />		struct syscall_descriptor_block args;<br /><br />		if (memcpy_from_user(&amp;args, user_args, sizeof(args)))<br />			return -EFAULT;<br /><br />		mm = get_fd_mm(fd);<br />		old_mm = current-&gt;mm;<br />		current-&gt;mm = mm;<br />		switch_mm(mm);<br /><br />		arch_do_syscall(&amp;args);<br /><br />		current-&gt;mm = old_mm;<br />		switch_mm(old_mm);<br />		put_mm(mm);<br />	}<br /><br />which allows _any_ system call to be made for that mm.<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
