    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/29/70">First message in thread</a></li><li><a href="/lkml/2002/12/29/70">Ulrich Drepper</a><ul><li><a href="/lkml/2002/12/29/122">Linus Torvalds</a></li><li class="origin"><a href="/lkml/2002/12/30/233">Linus Torvalds</a><ul><li><a href="/lkml/2002/12/30/233">Ulrich Drepper</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Dec 2002 18:52:08 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: glibc binaries w/ sysenter support</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />Uli,<br /><br /> can you tell me what the new glibc does for different "clone()" system<br />calls? It turns out that some of the different process creation calls are<br />rather nasty to handle with the "call *syscallptr" approach. We have a few <br />differenct cases:<br /><br /> - vfork() is nasty, because it must not have a stack frame that the<br />   parent needs and that might get destroyed by the child.<br /><br /> - clone(.. newesp != 0 ..) is nasty, because the esp correction depends <br />   on just what kind of system call it was, and the current kernel doesn't <br />   know and really doesn't even _want_ to know.<br /><br />I know glibc does the inlined "int 0x80" for the vfork() case, but I<br />wonder if you saw the problem for thread creation? I think that one has to<br />use the old-style inlined "int 0x80" too in order to avoid stack<br />confusion.. And since the glibc "clone()" wrapper call gives the user the <br />option to set a non-zero ESP, that one has to do it too.<br /><br />(Both of these are really independent of "sysenter" itself, and will be<br />visible even on machines without any sysenter support, since they are both<br />stack offset issues caused simply by the fact that we use a trampoline to<br />jump to the system call).<br /><br />Comments? Can anybody find any other nasty cases where the stack pointer <br />matters for the system call (or an argument is used for a start ptr return <br />value)?<br /><br />			Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
