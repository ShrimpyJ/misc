    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/12/9/13">First message in thread</a></li><li><a href="/lkml/2002/12/28/140">Christian Leber</a><ul><li><a href="/lkml/2002/12/30/115">Christian Leber</a><ul><li class="origin"><a href="">(Linus Torvalds)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Intel P6 vs P7 system call performance</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 30 Dec 2002 21:22:14 +0000 (UTC)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;20021230182209.GA3981&#64;core.home&gt;,<br />Christian Leber  &lt;christian&#64;leber.de&gt; wrote:<br />&gt;<br />&gt;But now the right and interesting lines:<br />&gt;<br />&gt;2.5.53:<br />&gt;igor3:~# ./a.out<br />&gt;166.283549 cycles<br />&gt;278.461609 cycles<br />&gt;<br />&gt;2.5.53-bk5:<br />&gt;igor3:~# ./a.out<br />&gt;150.895348 cycles<br />&gt;279.441955 cycles<br />&gt;<br />&gt;The question is: are the numbers correct?<br /><br />Roughly. The program I posted has some overflow errors (which you will<br />hit if testing expensive system calls that take &gt;4000 cycles). They also<br /><br />do an average, which is "mostly correct", but not stable if there is<br />some load in the machine. The right way to do timings like this is<br />probably to do minimums for individual calls, and then subtract out the<br />TSC reading overhead. See attached silly program.<br /><br />&gt;And why have int 80 also gotten faster?<br /><br />Random luck. Sometimes you get cacheline alignment magic etc. Or just<br />because the timings aren't stable for other reasons (background<br />processes etc).<br /><br />&gt;Is this a valid testprogramm to find out how long a system call takes?<br /><br />Not really. The results won't be stable, since you might have cache<br />misses, page faults, other processes, whatever.<br /><br />So you'll get _somehat_ correct numbers, but they may be randomly off.<br /><br />		Linus<br /><br />---<br />#include &lt;sys/types.h&gt;<br />#include &lt;time.h&gt;<br />#include &lt;sys/time.h&gt;<br />#include &lt;sys/fcntl.h&gt;<br />#include &lt;asm/unistd.h&gt;<br />#include &lt;sys/stat.h&gt;<br />#include &lt;stdio.h&gt;<br /><br />#define rdtsc() ({ unsigned long a, d; asm volatile("rdtsc":"=a" (a), "=d" (d)); a; })<br /><br />// for testing _just_ system call overhead.<br />//#define __NR_syscall __NR_stat64<br />#define __NR_syscall __NR_getpid<br /><br />#define NR (100000)<br /><br />int main()<br />{<br />	int i, ret;<br />	unsigned long fast = ~0UL, slow = ~0UL, overhead = ~0UL;<br />	struct timeval x,y;<br />	char *filename = "test";<br />	struct stat st;<br />	int j;<br /><br />	for (i = 0; i &lt; NR; i++) {<br />		unsigned long cycles = rdtsc();<br />		asm volatile("");<br />		cycles = rdtsc() - cycles;<br />		if (cycles &lt; overhead)<br />			overhead = cycles;<br />	}<br /><br />	printf("overhead: %6d\n", overhead);<br /><br />	for (j = 0; j &lt; 10; j++)<br />	for (i = 0; i &lt; NR; i++) {<br />		unsigned long cycles = rdtsc();<br />		asm volatile("call 0xffffe000"<br />			:"=a" (ret)<br />			:"0" (__NR_syscall),<br />			 "b" (filename),<br />			 "c" (&amp;st));<br />		cycles = rdtsc() - cycles;<br />		if (cycles &lt; fast)<br />			fast = cycles;<br />	}<br /><br />	fast -= overhead;<br />	printf("sysenter: %6d cycles\n", fast);<br /><br />	for (i = 0; i &lt; NR; i++) {<br />		unsigned long cycles = rdtsc();<br />		asm volatile("int $0x80"<br />			:"=a" (ret)<br />			:"0" (__NR_syscall),<br />			 "b" (filename),<br />			 "c" (&amp;st));<br />		cycles = rdtsc() - cycles;<br />		if (cycles &lt; slow)<br />			slow = cycles;<br />	}<br /><br />	slow -= overhead;<br />	printf("int0x80:  %6d cycles\n", slow);<br />	printf("          %6d cycles difference\n", slow-fast);<br />	printf("factor %f\n", (double) slow / fast);<br />}<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
