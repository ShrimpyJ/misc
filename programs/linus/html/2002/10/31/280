    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/10/31/173">First message in thread</a></li><li><a href="/lkml/2002/10/31/173">"Nakajima, Jun"</a><ul><li><a href="/lkml/2002/10/31/268">Alan Cox</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 31 Oct 2002 11:04:43 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">RE: [PATCH] fixes for building kernel 2.5.45 using Intel compiler</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On 31 Oct 2002, Alan Cox wrote:<br />&gt; <br />&gt; The compiler at function entry cannot know anything about the scope of <br />&gt; objects above the return address. It could equally be a valid pointer to<br />&gt; data above the stack with a global context created by a thread library.<br />&gt; <br />&gt; I'm curious if the optimisation is actually legal<br /><br />The optimization is not legal or illegal per se, the only thing that can<br />make it legal or illegal is a defined calling convention. The calling<br />convention can say who the "owner" of the arguments is: the caller or the<br />callee.<br /><br />The kernel doesn't have a well-enough-defined calling convention to be<br />able to make a good judgement. We tend to use the same calling convention<br />as the native compiler in user space does, but even that's not always true<br />(ie it can be modified by things like -mregparm etc, on a per-architecture<br />basis).<br /><br />I don't think the original iBCS2 calling convention (that Linux uses on<br />x86) is specific on this issue. That would be the thing that would decide<br />the legality of the optimization, I think.<br /><br />Considering that Intel largely wrote iBCS2, I guess some Intel person can <br />know what the standard was ;)<br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
