    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/7/30/90">First message in thread</a></li><li><a href="/lkml/2002/7/30/267">Greg KH</a><ul><li><a href="/lkml/2002/7/30/208">Brad Hards</a><ul><li><a href="/lkml/2002/7/30/251">Linus Torvalds</a><ul><li><a href="/lkml/2002/7/30/223">Ben Pfaff</a><ul><li><a href="/lkml/2002/7/30/233">Alexander Viro</a></li></ul></li><li><a href="/lkml/2002/7/30/249">Alexander Viro</a><ul><li><a href="/lkml/2002/7/30/225">Brad Hards</a></li></ul></li><li><a href="/lkml/2002/7/31/27">Alan Cox</a><ul><li><a href="/lkml/2002/7/31/72">Andreas Schwab</a></li><li><a href="/lkml/2002/7/31/121">"Bill Rugolsky Jr."</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/7/30/213">Vojtech Pavlik</a><ul><li><a href="/lkml/2002/7/30/287">(Kai Henningsen)</a></li></ul></li><li><a href="/lkml/2002/7/30/219">Jeff Garzik</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2002/7/30/229">Linus Torvalds</a><ul><li><a href="/lkml/2002/7/30/256">Brad Hards</a></li></ul></li><li><a href="/lkml/2002/7/30/250">Vojtech Pavlik</a><ul><li><a href="/lkml/2002/7/30/216">Linus Torvalds</a></li><li><a href="/lkml/2002/7/30/232">Vojtech Pavlik</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 30 Jul 2002 14:59:45 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] Input cleanups for 2.5.29 [2/2]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On Tue, 30 Jul 2002, Jeff Garzik wrote:<br />&gt; <br />&gt; Agreed, but u16 is even better :)  Why use the '__' prefix when standard <br />&gt; kernel types do not need them?<br /><br />The __ thing is actually fairly useful, for a few reasons<br /><br /> - "u16" is namespace pollution and mustn't be exported by standard <br />   user-level header files, since a program might use it as a variable <br />   name.<br /><br /> - it shows which things are purely krnel internal (u16 is <br />   kernel-internal, but a structure with __u16 is in a structure exported<br />   to user space. Of course, some people seem to think that you should <br />   always use the __u16 form, which is wrong. The underscores have<br />   meaning, and the meaning is exactly that: exported to user space<br />   headers as a size)<br /><br /> - typedef's are nasty, in that you cannot mix them. With a #define, you <br />   can just have<br /><br />	#ifndef NULL<br />	#define NULL ((void *)0)<br />	#endif<br /><br />   and if everybody follows that convention, duplicating a few #defines <br />   isn't a problem.<br /><br />   The same is _not_ true of typedefs. With typedefs, there can be only <br />   one, and trying to avoid duplication with magic preprocessor rules <br />   easily gets nasty. Sure, you can make up a rule like<br /><br />	#ifndef __typedef_xxxx_t<br />	typedef ... xxxx_t;<br />	#endif<br /><br />   but it's nowhere near as convenient as for #defines, and there is no <br />   standard for this.<br /><br />   This nastiness is why everybody (including things like glibc) ends up <br />   having to have an internal type and an external type anyway. Have you<br />   ever wondered by the glibc header files internally use things like<br />   __off_t, __locale_t etc? This is why. To avoid duplicate defines, <br />   especially in the presense of complex #ifdef __BSD_SOURCE__ etc, the <br />   internal type is defined unconditionally. The externally visible type <br />   is only defined if it should be.<br /><br />See the crap in &lt;linux/types.h&gt; on how the linux headers define things<br />like u_int8_t int8_t uint8_t depending on different #defines. Which is why <br />it is so convenient to have _one_true_ internal type (__u8) which you can <br />always depend on, regardless of who compiles you and with what options. <br /><br />All the other types (inluding the "standard" uint8_t) simply cannot be <br />depended on. <br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
