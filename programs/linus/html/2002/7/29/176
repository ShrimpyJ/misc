    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/7/29/169">First message in thread</a></li><li><a href="/lkml/2002/7/29/169">Badari Pulavarty</a><ul><li class="origin"><a href="/lkml/2002/7/29/231">(Linus Torvalds)</a><ul><li><a href="/lkml/2002/7/29/231">Paul Larson</a><ul><li><a href="/lkml/2002/7/29/258">Linus Torvalds</a><ul><li><a href="/lkml/2002/7/29/227">Paul Larson</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2002/7/29/198">Paul Larson</a></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2002/7/29/176/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs_read/vfs_write small bug fix (2.5.29)</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 29 Jul 2002 20:11:03 +0000 (UTC)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;200207291825.g6TIPj026021&#64;eng2.beaverton.ibm.com&gt;,<br />Badari Pulavarty  &lt;pbadari&#64;us.ibm.com&gt; wrote:<br />&gt;<br />&gt;Here is a patch to fix small bug in for vfs_read/vfs_write.<br /><br />Hmm. The patch is bogus, but that's not your fault, looking at the code<br />the patch is no more bogus than the existing code already is.<br /><br />The fact is, the test for a negative "pos" should not be in<br />vfs_read/write at all, since it can only happen for pread/pwrite.<br /><br />And pread/pwrite do not even _take_ a "loff_t" argument, they take a<br />"off_t", and yet we've just happily claiming they do a loff_t, which<br />means that they shouldn't work at all unless by pure changce user space<br />happens to put a zero in memory in the right place.<br /><br />Cristoph, I think you're the one that did this re-org. I think the code<br />is wrong, and the right fix is something along these lines (untested,<br />you get brownie-points for testing against some standards test).<br /><br />		Linus<br /><br /><br />----<br />===== fs/read_write.c 1.12 vs edited =====<br />--- 1.12/fs/read_write.c	Sat Jul 27 08:21:19 2002<br />+++ edited/fs/read_write.c	Mon Jul 29 12:51:09 2002<br />&#64;&#64; -185,8 +185,6 &#64;&#64;<br /> 		return -EBADF;<br /> 	if (!file-&gt;f_op || !file-&gt;f_op-&gt;read)<br /> 		return -EINVAL;<br />-	if (pos &lt; 0)<br />-		return -EINVAL;<br /> <br /> 	ret = locks_verify_area(FLOCK_VERIFY_READ, inode, file, *pos, count);<br /> 	if (!ret) {<br />&#64;&#64; -210,8 +208,6 &#64;&#64;<br /> 		return -EBADF;<br /> 	if (!file-&gt;f_op || !file-&gt;f_op-&gt;write)<br /> 		return -EINVAL;<br />-	if (pos &lt; 0)<br />-		return -EINVAL;<br /> <br /> 	ret = locks_verify_area(FLOCK_VERIFY_WRITE, inode, file, *pos, count);<br /> 	if (!ret) {<br />&#64;&#64; -255,14 +251,18 &#64;&#64;<br /> }<br /> <br /> asmlinkage ssize_t sys_pread(unsigned int fd, char *buf,<br />-			     size_t count, loff_t pos)<br />+			     size_t count, off_t pos)<br /> {<br /> 	struct file *file;<br /> 	ssize_t ret = -EBADF;<br /> <br />+	if (pos &lt; 0)<br />+		return -EINVAL;<br />+<br /> 	file = fget(fd);<br /> 	if (file) {<br />-		ret = vfs_read(file, buf, count, &amp;pos);<br />+		loff_t lpos = pos;<br />+		ret = vfs_read(file, buf, count, &amp;lpos);<br /> 		fput(file);<br /> 	}<br /> <br />&#64;&#64; -270,14 +270,18 &#64;&#64;<br /> }<br /> <br /> asmlinkage ssize_t sys_pwrite(unsigned int fd, const char *buf,<br />-			      size_t count, loff_t pos)<br />+			      size_t count, off_t pos)<br /> {<br /> 	struct file *file;<br /> 	ssize_t ret = -EBADF;<br /> <br />+	if (pos &lt; 0)<br />+		return -EINVAL;<br />+<br /> 	file = fget(fd);<br /> 	if (file) {<br />-		ret = vfs_write(file, buf, count, &amp;pos);<br />+		loff_t lpos = pos;<br />+		ret = vfs_write(file, buf, count, &amp;lpos);<br /> 		fput(file);<br /> 	}<br /> <br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
