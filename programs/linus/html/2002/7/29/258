    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2002/7/29/169">First message in thread</a></li><li><a href="/lkml/2002/7/29/176">(Linus Torvalds)</a><ul><li><a href="/lkml/2002/7/29/231">Paul Larson</a><ul><li class="origin"><a href="/lkml/2002/7/29/227">Linus Torvalds</a><ul><li><a href="/lkml/2002/7/29/227">Paul Larson</a><ul><li><a href="/lkml/2002/7/29/233">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2002/7/29/258/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 29 Jul 2002 14:22:15 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] vfs_read/vfs_write small bug fix (2.5.29)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />On 29 Jul 2002, Paul Larson wrote:<br />&gt; <br />&gt; This passes all the LTP pread and pwrite tests.<br /><br />Christoph claims that the kernel pread/pwrite has never been a<br />32-bitinterface at all, but has always been really a pread64/pwrite64.<br /><br />Which would make my patch do the wrong thing on big-endian machines, and <br />would also break any apps that actually used it with loff_t.<br /><br />If so, the bug is actually in user space, and the real fix on a kernel <br />level is to _document_ the fact that "sys_pread()" isn't actually the same <br />as the regular pread() system call. Done by renaming it to "pread64()" <br />internally, like this..<br /><br />Does this work for you? If not, that implies that glibc may be missing a<br /><br />	if (pos &lt; 0) {<br />		errno = EINVAL;<br />		return -1;<br />	}<br /><br />in its implementation of the pread/pwrite shim layer.<br /><br />(Or maybe glibc doesn't know that the kernel pread/pwrite system calls <br />were always 64-bit clean, and it just happened to work).<br /><br />		Linus<br /><br />-----<br />===== arch/i386/kernel/entry.S 1.38 vs edited =====<br />--- 1.38/arch/i386/kernel/entry.S	Fri Jul 26 00:57:48 2002<br />+++ edited/arch/i386/kernel/entry.S	Mon Jul 29 14:09:51 2002<br />&#64;&#64; -689,8 +689,8 &#64;&#64;<br /> 	.long sys_rt_sigtimedwait<br /> 	.long sys_rt_sigqueueinfo<br /> 	.long sys_rt_sigsuspend<br />-	.long sys_pread		/* 180 */<br />-	.long sys_pwrite<br />+	.long sys_pread64	/* 180 */<br />+	.long sys_pwrite64<br /> 	.long sys_chown16<br /> 	.long sys_getcwd<br /> 	.long sys_capget<br />===== fs/read_write.c 1.12 vs edited =====<br />--- 1.12/fs/read_write.c	Sat Jul 27 08:21:19 2002<br />+++ edited/fs/read_write.c	Mon Jul 29 14:08:55 2002<br />&#64;&#64; -185,8 +185,6 &#64;&#64;<br /> 		return -EBADF;<br /> 	if (!file-&gt;f_op || !file-&gt;f_op-&gt;read)<br /> 		return -EINVAL;<br />-	if (pos &lt; 0)<br />-		return -EINVAL;<br /> <br /> 	ret = locks_verify_area(FLOCK_VERIFY_READ, inode, file, *pos, count);<br /> 	if (!ret) {<br />&#64;&#64; -210,8 +208,6 &#64;&#64;<br /> 		return -EBADF;<br /> 	if (!file-&gt;f_op || !file-&gt;f_op-&gt;write)<br /> 		return -EINVAL;<br />-	if (pos &lt; 0)<br />-		return -EINVAL;<br /> <br /> 	ret = locks_verify_area(FLOCK_VERIFY_WRITE, inode, file, *pos, count);<br /> 	if (!ret) {<br />&#64;&#64; -254,12 +250,15 &#64;&#64;<br /> 	return ret;<br /> }<br /> <br />-asmlinkage ssize_t sys_pread(unsigned int fd, char *buf,<br />+asmlinkage ssize_t sys_pread64(unsigned int fd, char *buf,<br /> 			     size_t count, loff_t pos)<br /> {<br /> 	struct file *file;<br /> 	ssize_t ret = -EBADF;<br /> <br />+	if (pos &lt; 0)<br />+		return -EINVAL;<br />+<br /> 	file = fget(fd);<br /> 	if (file) {<br /> 		ret = vfs_read(file, buf, count, &amp;pos);<br />&#64;&#64; -269,11 +268,14 &#64;&#64;<br /> 	return ret;<br /> }<br /> <br />-asmlinkage ssize_t sys_pwrite(unsigned int fd, const char *buf,<br />+asmlinkage ssize_t sys_pwrite64(unsigned int fd, const char *buf,<br /> 			      size_t count, loff_t pos)<br /> {<br /> 	struct file *file;<br /> 	ssize_t ret = -EBADF;<br />+<br />+	if (pos &lt; 0)<br />+		return -EINVAL;<br /> <br /> 	file = fget(fd);<br /> 	if (file) {<br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.kernel.org<br />More majordomo info at  <a href="http://vger.kernel.org/majordomo-info.html">http://vger.kernel.org/majordomo-info.html</a><br />Please read the FAQ at  <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
