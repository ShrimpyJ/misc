    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/26/124">First message in thread</a></li><li><a href="/lkml/1999/8/26/124">"Jeff Merkey"</a><ul><li class="origin"><a href="/lkml/1999/8/26/180">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/26/180">"Jeff Merkey"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 26 Aug 1999 12:54:02 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Fw: Locks used  in the FAT file system are non-atomic and in fact, don't work on SMP systems</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 26 Aug 1999, Jeff Merkey wrote:<br />&gt; <br />&gt; You are also doing this in locks.h and the functions lock_super() and<br />&gt; unlock_super().  Am I missing something here?  We used this same<br />&gt; method, and got corrupted data on SMP systems.  It is possible for two<br />&gt; processes to blow up here by entering the function at the same time if<br />&gt; the lock variable is zero.  It's hard to reproduce (we have to perform<br />&gt; cyclic copies with 8+ processes on a 4 processor system for over two<br />&gt; hours to reproduce, but there is a hole here if we use these locking<br />&gt; primitives the way you have defined them in locks.h.<br /><br />The locks.h code only works while holding the kernel lock.<br /><br />If you want a SMP-safe non-kernel-lock thing, you need to use the real<br />semaphores (which is usually simpler anyway, and faster than the locks.h<br />version: the only real reason to ever use the locks.h kind of lock is<br />purely historical in old code).<br /><br />Easiest way to use a semaphore:<br /><br />	DECLARE_MUTEX(random_semaphore);<br />	#define random_lock()	down(&amp;random_semaphore)<br />	#define random_unlock()	up(&amp;random_semaphore)<br /><br />and you're done.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
