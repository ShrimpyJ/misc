    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/16/67">First message in thread</a></li><li class="origin"><a href="/lkml/1999/8/16/69">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/69">Jeff Garzik</a><ul><li><a href="/lkml/1999/8/16/92">Linus Torvalds</a></li><li><a href="/lkml/1999/8/16/136">Martin Mares</a></li></ul></li><li><a href="/lkml/1999/8/16/71">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/16/73">Jeff Garzik</a></li><li><a href="/lkml/1999/8/16/90">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/129">(Rogier Wolff)</a></li><li><a href="/lkml/1999/8/16/130">Jakub Jelinek</a></li><li><a href="/lkml/1999/8/16/138">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/16/208">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/8/16/301">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/1999/8/16/281">Peter Desnoyers</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Aug 1999 10:43:42 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New resources - pls, explain :-(</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 14 Aug 1999, Pavel Machek wrote:<br />&gt; &gt; <br />&gt; &gt;  - writel() - strict ordering<br />&gt; &gt;  - __writel() - only to be used for people who REALLY know that they don't<br />&gt; &gt;    care about ordering.<br />&gt; <br />&gt; Please please, don't let '__' make the difference. writel_noorder<br />&gt; seems better.<br /><br />Note that the Linux internal convention has always been to have the __<br />mean that it's somehow a more "basic" function.<br /><br />For example, __writel() might mean more than "no re-ordering". It might<br />mean "naked IO access" - which would include the fact that it does not do<br />any byte swapping etc, for example (just to tie this in with the original<br />discussion). Think of it as the conceptual basis for the "real" writel(),<br />that people can use when they want to build up their own IO primitives<br />from the basic blocks.<br /><br />I don't mind giving people building blocks - I much _prefer_ letting<br />people access the infrastructure than trying to build up some magic "good<br />interface" thing, for example. Abstraction only gets you so far..<br /><br />So a __writel() thing would be equivalent to __put_user(): the same way<br />that __put_user() only does the actual physical user mode access,<br />__writel() would only do the actual physical PCI/MCA/whatever access.<br />Anybody who uses __put_user() needs to be extra careful and guarantee that<br />he has already done all the security checks - and anybody using __writel()<br />needs to make sure that he does the re-ordering and byte order stuff at a<br />higher level.<br /><br />The fundamental thing I dislike about "writel_be()" or something like that<br />is that I don't much see the point. "Bigendian" doesn't buy you anything<br />at all, and would always be conditionalized on what the CPU endianness is.<br />In contrast, I _do_ see the point in something like "raw access". It makes<br />sense on a conceptual level.<br /><br />It seems to me that at least the fbcon people want more than just to avoid<br />byte swapping: wat they fundamentally want is not non-byte-swapped data,<br />they really fundamentally want control at a very low level. I bet they'd<br />be happy with not just avoiding the byte swap, but also avoiding the<br />ordering constraints (or at least controlling them on a higher level).<br /><br />So __writel() would probably fit their needs better too than any<br />"big-endian" or "native-endian" thing - because it really fundamentally is<br />about direct access rather than about endianness.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
