    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/16/67">First message in thread</a></li><li><a href="/lkml/1999/8/16/90">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/129">(Rogier Wolff)</a></li><li><a href="/lkml/1999/8/16/130">Jakub Jelinek</a></li><li><a href="/lkml/1999/8/16/138">Jes Sorensen</a><ul><li class="origin"><a href="/lkml/1999/8/16/194">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/194">Paul Mackerras</a></li><li><a href="/lkml/1999/8/16/288">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/17/38">Paul Mackerras</a></li></ul></li><li><a href="/lkml/1999/8/16/347">Jes Sorensen</a></li></ul></li></ul></li><li><a href="/lkml/1999/8/16/301">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/1999/8/16/281">Peter Desnoyers</a><ul><li><a href="/lkml/1999/8/16/258">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/17/41">Peter Desnoyers</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 15 Aug 1999 11:42:42 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New resources - pls, explain :-(</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 15 Aug 1999, Jes Sorensen wrote:<br />&gt;<br />&gt; Sorry I do not get your point here, you are saying that if one wants<br />&gt; to use __writel() then he/she will have to handle byte swapping on big<br />&gt; endian architectures manually? That means if I say write a Gigabit<br />&gt; Ethernet driver and I want to optimize it maximally then I am going to<br />&gt; use __writel() on the x86 and Alphas because those are the machines I<br />&gt; have access to. Now someone wants to use the driver to Linux/PPC and<br />&gt; suddenly all hell breaks lose because __writel() doesn't byteswap so<br />&gt; this person will have to modify the driver in order to make it run at<br />&gt; all.<br /><br />Indeed. It's not the first time that would happen. <br /><br />&gt; Yes this will work, but it is going to make it impossible to use<br />&gt; __writel() for traditional PCI access as I described above unless I<br />&gt; define my own versions of writel in the driver to do<br />&gt;<br />&gt; #define __l_writel(x,y)   __writel(cpu_to_le32(x),y)<br /><br />Well, you could do that.<br /><br />A well-written driver would not. A well-written driver will usually have<br />something like<br /><br />	#define read_device(dev,offset) \<br />		readl((dev)-&gt;mapping+(offset))<br />	#define write_device(dev,offset,data) \<br />		__writel(cpu_to_le32(data), (dev)-&gt;mapping+(offset)<br /><br />but admittedly rather few of them are right now.<br /><br />&gt; If you read some of my previous postings then you'd remember that I<br />&gt; was arguing for a native byte order in the first place, you were the<br />&gt; one who brought the explicit big endian version into the discussion.<br /><br />I was wrong.<br /><br />But the whole discussion started as a _byte_ order discussion. And I still<br />do not agree with _any_ of those arguments. I will not call it<br />"writel_na()", because I still do not agree at all with the concept of<br />making the IO thing byte-order-dependent.<br /><br />What you and others have convinced me about is to have a "raw" interface.<br />That is actually very different from what the original discussion was<br />about. It is not really about "native" byte order at all: in fact the<br />native IO byte order might be different from the native CPU byteorder, so<br />we might need to use "io_to_le32()" instead of "cpu_to_le32()".<br /><br />So think of "__writel()" as something completely different than a<br />byte-order issue: think of it as a "raw access". The byte order it then<br />just a small subset of the bigger picture.<br /><br />Just as an extreme example: __writel() might not just re-order and buffer,<br />maybe the native IO interface needs explicit flushing to make it out to<br />the bus _at_all_, and might be delayed indefinitely if there isn't an<br />eventual accompanying flush operation. You might want to allow caching of<br />IO accesses - and with a write-back cache it might not be flushed out to<br />the bus at all if the cache is big enough. Until somebody does a "flush<br />this region out to the bus NOW" operation.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
