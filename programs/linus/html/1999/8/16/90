    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/16/67">First message in thread</a></li><li><a href="/lkml/1999/8/16/67">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/69">Jeff Garzik</a><ul><li><a href="/lkml/1999/8/16/92">Linus Torvalds</a></li><li><a href="/lkml/1999/8/16/136">Martin Mares</a></li></ul></li><li><a href="/lkml/1999/8/16/71">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/16/73">Jeff Garzik</a></li><li class="origin"><a href="/lkml/1999/8/16/129">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/129">(Rogier Wolff)</a></li><li><a href="/lkml/1999/8/16/130">Jakub Jelinek</a></li><li><a href="/lkml/1999/8/16/138">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/16/208">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/8/16/301">Benjamin Herrenschmidt</a><ul><li><a href="/lkml/1999/8/16/281">Peter Desnoyers</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 14 Aug 1999 16:24:15 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New resources - pls, explain :-(</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 14 Aug 1999, Jes Sorensen wrote:<br />&gt; <br />&gt; I think __writel() should expect little endian access as well, we need<br />&gt; both __writel() which doesn't do ordering _and_ writel_be() since it<br />&gt; will otherwise cause problems on big endian machines if you want to<br />&gt; write a portable device driver optimized with wmb()'s in the right<br />&gt; place if __writel() suddenly doesn't to byte swapping.<br /><br />Why?<br /><br />You can do byte-swapping by hand. <br /><br />I think it is really _stupid_ to do a writel_be(), and quite frankly, the<br />moew people whine about it the less likely I'm going to accept it. So far<br />all the arguments have just been _stupid_. They haven't had any reasoning.<br /><br />&gt; In fact we will need at least:<br />&gt; <br />&gt; writel()      - ordered, little endian<br />&gt; __writel()    - non ordered (and possibly other things) - little endian<br />&gt; writel_be()   - like writel() but big endian<br />&gt; __writel_be() - non ordered - big endian<br /><br />IN FACT we would be extremely stupid if we were to do the above. Why<br />export four interfaces when two would do?<br /><br />Why do you continue to think that endianness is an issue? You have<br />perfectly fine macros to handle endianness already, why mix that in with<br />the IO part?<br /><br />If you just say that "__writel()" does the native byte order, then you can<br />do cpu_to_be32() and get exactly the semantics that you seem to want. I<br />don't understand WHY you'd want them, but I can just tell you to do<br /><br />	__writel(cpu_to_be32(x),y)<br /><br />and it will be equivalent to your __writel_be(). I don't see why anybody<br />would ever use the above, as the only arguments for the _be version so far<br />have really been arguments for _native_ byte order on BE machines, but<br />that's all the more reason to not do something silly like export hundreds<br />of slightly different and useless versions of IO access.<br /><br />The UNIX philosophy is do ONE thing, and do it well. Don't mix up<br />endianness and IO. We have perfectly functional endianness functions, so<br />why would be try to make the IO functions do that too?<br /><br />We'll need to do a "io_[wr]mb()" macro too - because plain "mb()" is<br />conceptually very different from the issue of serialized IO. But then you<br />could conceptually think of<br /><br />	static inline void writel(u32 x, u32 addr)<br />	{<br />		__writel(cpu_to_le32(x), addr);<br />		io_wmb();<br />	}<br /><br />(even though on the x86, for example, the two would just be exactly the<br />same thing).<br /><br />Don't make this more complicated than it needs to be. We do _not_ need<br />four different macros.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
