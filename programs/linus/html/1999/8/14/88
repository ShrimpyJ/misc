    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/7/45">First message in thread</a></li><li><a href="/lkml/1999/8/14/42">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/13/125">Petr Vandrovec</a></li><li><a href="/lkml/1999/8/14/90">Jes Sorensen</a><ul><li class="origin"><a href="/lkml/1999/8/14/139">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/14/139">Paul Mackerras</a></li><li><a href="/lkml/1999/8/15/16">Jes Sorensen</a></li><li><a href="/lkml/1999/8/15/102">Peter Desnoyers</a><ul><li><a href="/lkml/1999/8/16/23">Jes Sorensen</a></li><li><a href="/lkml/1999/8/16/107">Ralf Baechle</a></li></ul></li></ul></li><li><a href="/lkml/1999/8/15/21">Mitchell Blank Jr</a><ul><li><a href="/lkml/1999/8/15/41">Jakub Jelinek</a><ul><li><a href="/lkml/1999/8/15/43">Jes Sorensen</a></li></ul></li><li><a href="/lkml/1999/8/15/101">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/1999/8/15/7">Paul Mackerras</a><ul><li><a href="/lkml/1999/8/15/33">Alan Cox</a></li><li><a href="/lkml/1999/8/15/38">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/15/49">Paul Mackerras</a><ul><li><a href="/lkml/1999/8/15/44">Alan Cox</a></li><li><a href="/lkml/1999/8/15/75">Jes Sorensen</a></li><li><a href="/lkml/1999/8/15/98">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/1999/8/15/105">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/16/191">Richard Henderson</a><ul><li><a href="/lkml/1999/8/17/245">(Linus Torvalds)</a></li></ul></li></ul></li><li><a href="/lkml/1999/8/15/112">"Mr. James W. Laferriere"</a><ul><li><a href="/lkml/1999/8/15/103">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/8/16/108">Ralf Baechle</a><ul><li><a href="/lkml/1999/8/16/124">Gerard Roudier</a><ul><li><a href="/lkml/1999/8/16/255">Benjamin Herrenschmidt</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 12 Aug 1999 14:18:31 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New resources - pls, explain :-(</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 12 Aug 1999, Jes Sorensen wrote:<br />&gt;<br />&gt; Having a readl_na() would make sense on big endian machines with PCI<br />&gt; busses since since some PCI cards (some gfx and network cards) will do<br />&gt; the translation for you in hardware making it look like the card is<br />&gt; native byte order. For 16 and 24 bit graphics for instance it is<br />&gt; absolutely not fun doing the byte swapping in software.<br /><br />But the point is _still_ that the driver needs to know. The driver needs<br />to know which area to select, and in some cases the driver needs to put<br />the card in the right endianness mode.<br /><br />In short, I have not heard a SINGLE argument for this being a generic<br />feature. I _have_ heard tons of valid argument for fixing on a known<br />byte-order, and I agree with them. And it's very obvious that little-<br />endian is THE byteorder, nobody really even argues about that.<br /><br />In short, I still don't see why not just have a "bigendian_writel()" is so<br />hard to accept for people. The the drivers that know about the issue might<br />do something like this:<br /><br />	/*<br />	 * On big-endian machines we map the byte-swapped data<br />	 * area in order to use native byte order for performance<br />	 */<br />	#ifdef BIG_ENDIAN<br />	 #define gfx_readl(x)	 bigendian_readl(x)<br />	 #define gfx_writel(x,y) bigendian_writel(x,y)<br />	#else<br />	 #define gfx_readl(x)	 readl(x)<br />	 #define gfx_writel(x,y) writel(x,y)<br />	#endif<br /><br />	...<br /><br />	init_card(...)<br />	{<br /><br />	/* memory map 3 is BE, memory map 2 is LE */<br />	#ifdef BIG_ENDIAN<br />		base = dev-&gt;resource[3].start;<br />		size = dev-&gt;resource[3].size;<br />	#else<br />		base = dev-&gt;resource[2].start;<br />		size = dev-&gt;resource[2].size;<br />	#endif<br />		baseptr = ioremap(base, size);<br />		...<br /><br />But note how it would NOT really have made any sense to have a "generic"<br />don't-swap, because that is not a generic problem.<br /><br />&gt; I do not disagree with your vme_readl() proposal. Well it would be<br />&gt; nice if one could have a readl() that works for everybody but if one<br />&gt; wants to support 256 PCI busses in a box it might be a little<br />&gt; problematic.<br /><br />Well, if it were just a case of the same type of bus, it probably wouldn't<br />be too bad. They'd be mapped at different offsets, but that can be handled<br />by ioremap() and friends. The trouble really starts when you have<br />different kinds of buses that have different rules for how they can be<br />accessed because of different coherency issues or similar (or different<br />ways to handle non-existent addresses - you may end up having to use<br />different address spaces for different buses).<br /><br />That's why it is so much easier if the programmer explicitly states some<br />extra information - on some hardware the things may end up being collapsed<br />to the same case, but on other hardware there may be special rules for one<br />of them.<br /><br />For example, I've considered maybe having two kinds of "writel()" - one<br />that does a synchronous write and does an implied write barrier, and one<br />that says "I don't care if this write gets re-ordered with respect to<br />other writes". On x86, the two are one and the same thing, because the<br />MTRR's (or the page table bits) handle the difference in hardware. On<br />other architectures they can end up being quite different, and have quite<br />different performance characteristics. And it would be bad if "writel()"<br />had to try to figure out the information by hand, when a programmer could<br />just tell it what kind of access he was thinking of..<br /><br />The same is true of other differences between accesses - it doesn't make<br />sense to try to have _one_ function that magically does the right thing<br />for all different buses, when the programmer is basically guaranteed to<br />trivially know which kind of bus he's accessing (and I'd like to make<br />clear that I consider PCI/ISA/MCA/HPPCI etc to be basically the same bus).<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
