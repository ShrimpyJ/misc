    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/19/50">First message in thread</a></li><li><a href="/lkml/1999/8/19/50">Petr Vandrovec</a><ul><li><a href="/lkml/1999/8/19/52">Jeff Garzik</a></li><li class="origin"><a href="/lkml/1999/8/20/137">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/20/137">Ralf Baechle</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 19 Aug 1999 11:12:12 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: What is the right type to store virtual address ?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 19 Aug 1999, Petr Vandrovec wrote:<br />&gt;<br />&gt;   if we are talking about endianess, I have one related small<br />&gt; question: in variable of which type I should store return <br />&gt; value from ioremap() ?<br /><br />It shouldn't much matter for the simple reason that the only thing you can<br />do with the return value from ioremap() is to pass it in to read[bwl]()<br />and friends, and they (for historical reasons) accept both a pointer and a<br />integer.<br /><br />So you might as well toss a coin - it has to be something you can do<br />arithmetic on because I want people to be able to just say "base+offset",<br />but again "unsigned long" and "void *" are equivalent on gcc in that<br />regard. If it wasn't for the arithmetic issue I'd just make it a special<br />type altogether to make the compiler warn about misuses.<br /><br />For _true_ cleanliness, it should probably be something like<br /><br />	typedef struct {<br />		unsigned long base;<br />	} io_base_t;<br /><br />	/*<br />	 * The ISA legacy region 640kB-1M is always mapped, <br />	 * here's the base<br />	 */<br />	extern io_base_t isa_io_base;<br /><br />	extern io_base_t ioremap(unsigned long addr, unsigned long len);<br />	extern unsigned char readb(io_base_t base, unsigned int offset);<br />	...<br /><br />but while I'd potentially like to see that I also wonder about just the<br />pain of doing the conversion.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
