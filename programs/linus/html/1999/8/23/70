    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/8/20/77">First message in thread</a></li><li><a href="/lkml/1999/8/22/21">Andrea Arcangeli</a><ul><li><a href="/lkml/1999/8/23/41">Andrea Arcangeli</a><ul><li class="origin"><a href="/lkml/1999/8/23/75">Linus Torvalds</a><ul><li><a href="/lkml/1999/8/23/75">Andrea Arcangeli</a><ul><li><a href="/lkml/1999/8/23/84">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 23 Aug 1999 10:08:30 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [patch] fix for pagecache fs corruption (2.3.15-pre2) [Re: [patch] ramdisk blocksize]</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 23 Aug 1999, Andrea Arcangeli wrote:<br />&gt; <br />&gt; Chih-Chung Chang pointed me out that in 2.3.x it's been added a test in<br />&gt; the CAN_UNUSE(inode) macro exactly to avoid freeing inodes with i_nrpages<br />&gt; != 0. I didn't noticed such change, sorry (so no FS corruption could<br />&gt; happen).<br />&gt; <br />&gt; But IMO such check is a dirty hack that can lead to a DoS. It seems to me<br />&gt; that it's possible to leak inodes by simply allocating lots of inodes with<br />&gt; only one page queued in them. The inode memory is not freeable.<br />&gt; <br />&gt; Now that truncate_inode_pages()/flushpage are capable of dealing with<br />&gt; dirty/protected data we don't need such hack anymore to avoid<br />&gt; fs-corruption. This patch goes on the top of my two previous<br />&gt; page-cache patches:<br /><br />You are wrong. This will cause "truncate_inode_pages()" to be called on<br />such an inode, which will in turn flush the dirty state without ever<br />writing it back to disk.<br /><br />In short, major filesystem corruption and general disaster. <br /><br />Please people DO NOT USE THIS PATCH. You will be sorry, and fsck will not<br />ever notice anything (you'll just have unexplicable data corruption in<br />your files that happens only very occasionally).<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
