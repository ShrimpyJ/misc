    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/11/8/72">First message in thread</a></li><li><a href="/lkml/1999/11/19/75">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/19/78">"Benjamin C.R. LaHaise"</a><ul><li><a href="/lkml/1999/11/19/83">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/19/95">Alexander Viro</a><ul><li><a href="/lkml/1999/11/20/8">Manfred Spraul</a></li></ul></li></ul></li><li><a href="/lkml/1999/11/19/91">Manfred Spraul</a></li><li><a href="/lkml/1999/11/20/71">Manfred Spraul</a><ul><li><a href="/lkml/1999/11/20/82">"Benjamin C.R. LaHaise"</a></li></ul></li></ul></li><li><a href="/lkml/1999/11/19/85">Alexander Viro</a><ul><li><a href="/lkml/1999/11/19/88">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/11/19/127">(Arjan van de Ven)</a><ul><li><a href="/lkml/1999/11/19/128">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/11/25/44">Andrea Arcangeli</a><ul><li class="origin"><a href="/lkml/1999/11/25/91">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/25/91">Andrea Arcangeli</a><ul><li><a href="/lkml/1999/11/25/89">Andrea Arcangeli</a></li><li><a href="/lkml/1999/11/25/98">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Nov 1999 09:20:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Patch] shm bug introduced with pagecache in 2.3.11</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 25 Nov 1999, Andrea Arcangeli wrote:<br />&gt; <br />&gt; If you allow more than one task to fault for example in the swapin path<br />&gt; you'll get in troubles as you can't solve this race cleanly with a<br />&gt; spinlock. That's why I added the semaphore to the shm segments in first<br />&gt; place.<br /><br />No, you can solve it cleanly by just changing the code: you only really<br />need to guarantee that the mapping doesn't change under you (that would be<br />disastrous and very hard to recover from). Somebody else filling in the<br />page before you is simple to check for.<br /><br />&gt; Only replacing the down() with a read_down() in do_page_fault is _not_<br />&gt; enough. The semaphore is not there only to protect from mmap and vma<br />&gt; changes under us, right now it's there mainly to protect other threads to<br />&gt; fault under us.<br /><br />"mainly" is incorrect. The main protection is to maintain the vma list<br />sanely, that was always the case (it used to be easy to crash the kernel<br />by using threads that pagefaulted and mmap'ed at the same time).<br /><br />Protecting against others paging in is trivial, and in fact we used to do<br />that as long ago as 1.2.x if I remember correctly (the mm code was very<br />different back then). The way we used to do that was to remember the<br />original pte value, and before updating it with the newpage that was just<br />paged in we just check that the pte value hasn't changed.<br /><br />In 1.2.x that protected us against threads that paged in simultaneously,<br />and the races introduced by the IO waiting. But it was not enough to<br />protect against mmap's changing the vma, so we introduced the semaphore in<br />1.3.x, and because we had the semaphore we could also remove the<br />optimistic checking.<br /><br />In 2.3.x, we can use the same trivial approach to protect against threads.<br />It adds basically no overhead at all - we have to get the spinlock anyway,<br />and the final check before changing the page tables is basically a single<br />load and compare.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
