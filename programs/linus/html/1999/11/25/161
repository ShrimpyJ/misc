    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/11/24/59">First message in thread</a></li><li><a href="/lkml/1999/11/25/104">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/25/109">Erich Boleyn</a></li><li><a href="/lkml/1999/11/25/155">Ingo Molnar</a><ul><li class="origin"><a href="/lkml/1999/11/25/164">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/25/164">Ingo Molnar</a><ul><li><a href="/lkml/1999/11/25/167">Ingo Molnar</a></li><li><a href="/lkml/1999/11/25/186">Andrea Arcangeli</a></li><li><a href="/lkml/1999/11/25/187">Erich Boleyn</a></li></ul></li><li><a href="/lkml/1999/11/26/62">Peter Steiner</a></li></ul></li></ul></li><li><a href="/lkml/1999/11/26/58">Horst von Brand</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Nov 1999 16:11:19 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: spin_unlock optimization(i386)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 26 Nov 1999, Ingo Molnar wrote:<br />&gt; <br />&gt; i believe the lack of symmetry is due to the unique assymetry of 'lock<br />&gt; aquire' operations vs. 'lock release'. lock-acquire has to be an atomic<br />&gt; test-and-set, and this can only be guaranteed via explicit MESI-helped<br />&gt; LOCK-prefix instructions. The 'lock release' operation on the other hand<br />&gt; can be executed without caring too much about the current state of the<br />&gt; lock, because we _know_ that we are holding the lock already. This unique<br />&gt; assymetry is true even in the Strongly Ordered memory model with no<br />&gt; speculative reads done at all.<br /><br />I disagree.<br /><br />Without any speculative reads, you don't need serialization. It would be<br />enough that "lock" just guaranteed that the operation was done atomically.<br /><br />But I bet that it's more than the atomicity. The serialization is actually<br />needed to make sure that no reads speculate "upwards" to before the locked<br />intruction.<br /><br />And the reason we don't need serialization on the unlock side (where<br />atomicity is simpleto guarantee, because it's a single operation) is<br />because Intel doesn't ever move reads "downwards" past a write, so the<br />single write basically does act as a complete ordering downwards.<br /><br />And THAT is the assymetry: intel can and will re-order<br /><br />	write A<br />	read B<br /><br />but intel will probably NOT ever re-order<br /><br />	read A<br />	write B<br /><br />(And everybody agrees that intel will never re-order two writes in any way<br />that can be detected)<br /><br />If Intel only needed to be atomic, doing the "lock btsl" would not need to<br />take 22 cycles. The cost comes from being a syncronization barrier, which<br />is needed to avoid the re-ordering that intel _will_ do.<br /><br />But note that a single write will NOT act as a "complete memory barrier"<br />as implied by the Linux "mb()" macro. The single write will make sure that<br />a read does now move downwards _outside_ the lock (which is all that a<br />spinlock cares about) - the single nonsynchronizing write does not<br />guarantee that reads won't move upwards _into_ the critical region.<br /><br />(moving reads _into_ the critical region is fine - it makes the critical<br />region "bigger", but as the reason for moving the reads up is to allow<br />more parallellism, it doesn't actually make the critical region any<br />slower, which is all that we care about - and it does speed up the exit<br />from the protected region).<br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
