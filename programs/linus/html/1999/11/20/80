    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/11/20/80">First message in thread</a></li><li class="origin"><a href="/lkml/1999/11/20/87">Linus Torvalds</a><ul><li><a href="/lkml/1999/11/20/87">Jeremy Fitzhardinge</a><ul><li><a href="/lkml/1999/11/21/8">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/11/21/13">Manfred Spraul</a></li><li><a href="/lkml/1999/11/23/61">Don Howard</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 20 Nov 1999 16:33:49 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [Patch] shm bug introduced with pagecache in 2.3.11</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 20 Nov 1999, Marcelo Tosatti wrote:<br />&gt;<br />&gt; <a href="http://bazar.conectiva.com.br/~marcelo/rwsem-2.3.18ac7.patch">http://bazar.conectiva.com.br/~marcelo/rwsem-2.3.18ac7.patch</a><br />&gt; This code is a Linux "port" of the psedo-code implementation found in the<br />&gt; "Unix Kernel Internals" book i wrote some time ago.<br /><br />Well, if it's a port of that, then it won't have the 2-instruction<br />fast-path that is pretty much required, imho.<br /><br />I'll see if I can get a free afternoon some day and try to port the<br />current x86 semaphore code over to a rw version too. The plan was<br />something like this:<br /><br /> - read_down():<br /><br />	lock ; incl mem<br />	js	contention_rw<br /><br /> - read_up():<br /><br />	lock ; decl mem<br />	js	wake_up_writer<br /><br /> - write_down():<br /><br />	lock ; btsl $31,mem<br />	jc	contention_ww<br />	testl $0x7fffffff,mem<br />	jne	contention_wr<br /><br /> - write_up():<br /><br />	lock ; andl $0x7fffffff,mem<br />	jne	wake_up_reader_or_writer<br /><br />where all the three contention cases grab a "contention spinlock" before<br />they then start sorting things out. The only interesting part is making<br />sure that the contention case gets the wakeups, and the above counts on:<br /><br /> - if a writer is waiting for readers (contention_wr), then the writer<br />   will have already set the high bit, and a reader will know to wake it<br />   up because the rw-semaphore value will be negative when it does<br />   read_up().<br /><br /> - if a reader is waiting for a writer, then the reader will have<br />   incremented the semaphore, and the writer will know to wake it up<br />   becasue the semaphore value won't be zero after the "write_up()".<br /><br /> - if a writer is waiting for another writer (contention_ww case), it will<br />   have to increment the "reader" part of the semaphore value, in order to<br />   get the other writer to wake it up on "write_up()".<br /><br />All other races should be trivially handled by just having the spinlock,<br />so the only really hard cases are the fast-path stuff where we cannot get<br />the semaphore because it is too expensive.<br /><br />Does anybody see any holes in the above pseudo-implementation? Please take<br />a look at the way the current x86 semaphores are implemented: they use<br />exactly the above kinds of single-atomic-instruction-plus-condition-codes<br />trickery to get the non-contention case without _any_ extra instructions.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
