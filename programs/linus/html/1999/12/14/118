    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/12/13/208">First message in thread</a></li><li><a href="/lkml/1999/12/14/4">(Linus Torvalds)</a><ul><li><a href="/lkml/1999/12/14/6">Larry McVoy</a></li><li><a href="/lkml/1999/12/14/106">James Simmons</a><ul><li class="origin"><a href="/lkml/1999/12/14/125">Linus Torvalds</a><ul><li><a href="/lkml/1999/12/14/125">James Simmons</a></li><li><a href="/lkml/1999/12/14/132">"David S. Miller"</a><ul><li><a href="/lkml/1999/12/15/18">James Simmons</a></li></ul></li></ul></li><li><a href="/lkml/1999/12/15/137">(Jim Gettys)</a><ul><li><a href="/lkml/1999/12/15/182">"Benjamin C.R. LaHaise"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Dec 1999 09:42:00 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Thread-private mappings and graphics (was Re: Per-Processor Data Page)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 14 Dec 1999, James Simmons wrote:<br />&gt; &gt; <br />&gt; &gt; I'm suprised an SGI person hasn't learnt from past mistakes. IRIX is<br />&gt; &gt; unstable, and unmaintainable, and please just face it - it's because SGI<br />&gt; &gt; had the "cool feature of the day" disease.<br />&gt; <br />&gt; Because IRIX has certain design flaws doesn't mean the entire OS is <br />&gt; crap. I have heard nothing but good things about XFS. <br /><br />I'm not claiming that Irix is _bad_. <br /><br />I _am_ claiming that it has had certain features, especially wrt graphics,<br />added without much thought for a "design".<br /><br />The thing that makes me admire UNIX is not that it's UNIX. The thing I<br />like about UNIX is that even after 30 years, the fundamentals stand out.<br />The basic notion of files as unstructured streams of data, and the UNIX<br />fork/exec way of doing things (most everybody else does a "spawn()", which<br />does not have the same philosophy at all).<br /><br />And quite frankly, especially when it comes to threads, Linux has a<br />DESIGN. It's not the hodge-podge of threading issues that we call<br />"pthreads" that came about from different vendors tryign to solve the same<br />problem in different ways (inluding user-mode only solutions). It's a<br />CONCEPT, the same way "fork()" is a concept.<br /><br />The difference between a "concept" and a "random collection of routines"<br />is that the concept will survive, and the routines won't.<br /><br />But that also requires that people don't mess up the concept by thinking<br />that it's "just an implementation". Because once lost, you won't be able<br />to undo the changes. You can fix bugs, but you can't easily remove the<br />"feature of the day".<br /><br />&gt;   I'm not talking about implementing Thread-private mappings for the<br />&gt; entire system. What I have done is when the process mmaps the accel region<br />&gt; set a flag. This way if the process creates new threads or forks it will<br />&gt; have a private mapping. The impact of private mapping is thus minimized.<br /><br />Wrong.<br /><br />Just because you think normal people won't use it desn't mean that the<br />impact is "minimized".<br /><br />You've broken the concept of shared TLB's. You've then superglued the<br />broken parts together and said "if you look at it from the right angle you<br />cannot SEE the cracks".<br /><br />But the cracks ARE THERE! They make the system more complex internally,<br />and even when you don't see the cracks you may notice that the thing<br />doesn't quite stand up straight.<br /><br />You broke the whole notion of interchangeable, anonymous, shared TLB<br />mappings.<br /><br />You broke the notion that when a thread is switched, no MM work needs to<br />be done.<br /><br />You broke the notion that you can simply look at "process-&gt;mm" and<br />determine whether it can share the TLB state with another thread (even if<br />that TLB state in between was used by an anonymous kernel thread).<br /><br />In short, you took a notion and dirtied it until it was just a random<br />collection of routines that superficially LOOK like it has a design.<br /><br />In short, you didn't care about the BEAUTY.<br /><br />&gt; threads use the accel region. I just don't see that happening. Also how<br />&gt; many threads will a well designed OpenGL library have. You don't want to<br />&gt; go crazy here creating a bunch of threads. <br /><br />Oh, no. I suspect most things that use OpenGL won't be all that much<br />threaded at all.<br /><br />&gt;   The question we have to ask why do we want private mapping.<br /><br />No. You're asking the WRONG question.<br /><br />There is no way in HELL we want private mappings. End of story.<br /><br />Use processes and SysV shared memory if that is what you're after.It works<br />today, and it gets you EXACTLY the same semantics that you are apparently<br />after. Sure, you have to think about the problem another way, but it's<br />just a mirror image.<br /><br />Instead of saying "ok, I want private mappings in a shared address space",<br />you say "ok, I want shared mappings in private address spaces".<br /><br />What's the difference? Doesn't soundlike much, no?<br /><br />But look at it from a NOTIONAL standpoint. You don't break anything by<br />taking a private address space and adding a shared object to it - we've<br />had that notion for a long time, and then you HAVE a private TLB and a<br />private page table to play with.<br /><br />In contrast, if you break the sharedness of a shared address space, YOU<br />DON'T HAVE ANYTHING LEFT! You just broke the bubble, and it popped. You<br />turned it into a private address space, for no gain (you already HAD<br />private address spaces, so you just degenerated the whole system).<br /><br />&gt;				 The reason <br />&gt; DRE (Direct Rendering Engine) needs this is to ensure a page fault<br />&gt; happens.<br /><br />No. Add a pointer to the mapping in the graphics context, and you can do<br />the same thing. Each graphics context gets associated with the particular<br />mapping you have.<br /><br />Or do graphics contexts by hand, without depending on page faults. Have a<br />lock.<br /><br />I'm not asking you. I'm TELLING you that your idea will not be accepted in<br />the standard kernel. I can go on explaining all day WHY, but you don't<br />seem to care. You're ignoring the bigger picture, and that's your right.<br />It's also your right to f*ck up your own version of Linux, but you're not<br />getting close to mine.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
