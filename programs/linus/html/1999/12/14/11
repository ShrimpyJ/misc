    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/12/13/208">First message in thread</a></li><li><a href="/lkml/1999/12/13/217">James Simmons</a><ul><li><a href="/lkml/1999/12/14/4">(Linus Torvalds)</a><ul><li><a href="/lkml/1999/12/14/6">Larry McVoy</a></li><li><a href="/lkml/1999/12/14/106">James Simmons</a><ul><li><a href="/lkml/1999/12/14/118">Linus Torvalds</a><ul><li><a href="/lkml/1999/12/14/125">James Simmons</a></li><li><a href="/lkml/1999/12/14/132">"David S. Miller"</a></li></ul></li><li><a href="/lkml/1999/12/15/137">(Jim Gettys)</a><ul><li><a href="/lkml/1999/12/15/182">"Benjamin C.R. LaHaise"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1999/12/14/8">Jon Leech</a><ul><li><a href="/lkml/1999/12/14/10">"David S. Miller"</a><ul><li><a href="/lkml/1999/12/14/117">James Simmons</a></li></ul></li><li class="origin"><a href="">(Linus Torvalds)</a></li><li><a href="/lkml/1999/12/14/26">Jason Gunthorpe</a><ul><li><a href="/lkml/1999/12/14/126">(Linus Torvalds)</a></li><li><a href="/lkml/1999/12/15/34">(H. Peter Anvin)</a></li></ul></li><li><a href="/lkml/1999/12/14/78">Manfred Spraul</a></li><li><a href="/lkml/1999/12/14/88">Alan Cox</a><ul><li><a href="/lkml/1999/12/14/107">Larry McVoy</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">(Linus Torvalds)</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Thread-private mappings and graphics (was Re: Per-Processor Data</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">14 Dec 1999 00:14:26 -0800</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">In article &lt;19991213235415.A80502&#64;oddhack.engr.sgi.com&gt;,<br />Jon Leech  &lt;ljp&#64;oddhack.engr.sgi.com&gt; wrote:<br />&gt;<br />&gt;    I assumed these points were both clear from my initial post, and not<br />&gt;really occasion for a rant about how "unstable and unmaintainable" IRIX<br />&gt;is, but whatever - so long as in the end Linux allows apps to issue<br />&gt;vertices at least as fast as other OSes on the same hardware.<br /><br />You know what? I don't much care.<br /><br />You can show me an OS that does it five percent faster and claim it is<br />because of Linux not supporting partial private mappings.  And I'll just<br />tell you to go play with NT or IRIX instead, because Linux WILL NOT DO<br />IT. <br /><br />It's not about performanceon any specific benchmark. It's about<br />_general_ performance of the system, and maintainability of the concepts<br />in the kernel. <br /><br />It's about being able to support 7 different CPU's with the same source<br />base.  Without having to worry about some design mistake that is going<br />to make it be a painful experience. <br /><br />I'll take portability, sanity and clean design before some "my dick is<br />bigger than your dick" direct rendering argument any day.<br /><br />By being clean and maintainable, Linux will get a 60% performance<br />improvement every year from processor technology alone. In 3D graphics,<br />that 60% seems to be closer to 300% right now. <br /><br />Trust me: a "private area" kind of thing may show localized advantages,<br />but in three to five years you'll end having to come up with the "New<br />Technology" kind of thing in order to get you out of the corner you<br />painted yourself into.<br /><br />It's the old C vs assembly war all over again: sure, you can always win<br />the performance war by writing perfect assembly code.  But you won't be<br />able to keep up with the hardware or the needs of the users, because you<br />will waste a lot of time just trying to get it to work and then<br />maintaining it in the face of changes - possibly rewriting it completely<br />when you notice that the original design was weak. <br /><br />		Linus<br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
