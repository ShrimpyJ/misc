    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/12/14/187">First message in thread</a></li><li><a href="/lkml/1999/12/19/81">Harald Koenig</a><ul><li><a href="/lkml/1999/12/19/92">"Benjamin C.R. LaHaise"</a><ul><li class="origin"><a href="/lkml/1999/12/20/62">Linus Torvalds</a><ul><li><a href="/lkml/1999/12/20/62">"Benjamin C.R. LaHaise"</a></li></ul></li></ul></li><li><a href="/lkml/1999/12/19/101">Alan Cox</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 19 Dec 1999 20:10:57 -0800 (PST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Ok, making ready for pre-2.4 and code-freeze..</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 19 Dec 1999, Benjamin C.R. LaHaise wrote:<br />&gt; <br />&gt; Well, here's one that affects &gt;32bit files on 32bit platforms...<br /><br />Ben, your patch does not help anything at all, in fact it makes things<br />worse. You use "loff_t" for b_off, but then the other things (notably<br />"offset") arestill done with 32-bit arithmetic, and that causes the whole<br />math to just go bad.<br /><br />For example, look at<br /><br />	b_off = iblock &lt;&lt; ISOFS_BUFFER_BITS(inode);<br /><br />which will do the shift in 32 bits, and then store that (potentially<br />truncated) value into a 64-bit entity. Useless - sure, you have the<br />storage, but you lost all the bits of precision anyway..<br /><br />Either it should _all_ be done in loff_t (ugly and unnecessary) or the<br />logic should just be changed to do the arithmetic in _blocks_. The logic<br />really is a block logic anyway, and it's fairly stupid and unnecessary to<br />convert it to byte offsets for the calculations.<br /><br />So what should happen in isofs is that we shift the size DOWN by<br />ISOFS_BUFFER_BITS instead of shifting the block UP. Sure, there's a<br />section size thing that is in bytes, but it could trivially be handled by<br />a "block + offset" calculation (although I personally suspect that the<br />section size is always block-aligned anyway, but who knows..)<br /><br />Anybody willing to fix this up properly? Ben?<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
