    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/7/17/1">First message in thread</a></li><li><a href="/lkml/1999/7/17/1">"Tom Leete"</a><ul><li class="origin"><a href="/lkml/1999/7/17/24">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/17/24">Simon Kenyon</a><ul><li><a href="/lkml/1999/7/17/25">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/17/29">Simon Kenyon</a></li></ul></li></ul></li><li><a href="/lkml/1999/7/17/43">Brendan Cully</a></li><li><a href="/lkml/1999/7/17/74">Alon Ziv</a><ul><li><a href="/lkml/1999/7/18/96">David Hinds</a><ul><li><a href="/lkml/1999/7/18/104">Linus Torvalds</a></li><li><a href="/lkml/1999/7/18/116">Alon Ziv</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 16 Jul 1999 22:56:33 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New kernel/resource.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 17 Jul 1999, Tom Leete wrote:<br />&gt; <br />&gt; I was thinking that kernel/resource.c was a general distributed allocator of<br />&gt; ports, addresses, etc. &amp; that it was also for USB, firewire, whoever needed<br />&gt; such things.<br /><br />The code in kernel/resource.c indeed _is_ meant to be used for anything.<br /><br />That obviously doesn't mean that it is necessarily _suitable_ for<br />everything out there - it's definitely aimed for "regions of space",<br />whether that space is IO port space, memory space, or IO-mapped memory<br />space. Or any other kind of one-dimensional "extent resource".<br /><br />The resource code itself is completely agnostic about what resource it<br />handles.<br /><br />However, there are then specific resources: the actual descriptors that<br />are manipulated by the generic resource functions. THOSE have specific<br />meaning. The two central ones are right now called "pci_io_resource" and<br />"pci_mem_resource", and they are "central" only in the sense that those<br />two resources are all that the old code ever handled at all.<br /><br />To the new code, they aren't really special at all. They just happen to be<br />two kinds of resources, and they are the ones that actually impact a lot<br />of people because they happen to be related to the most common IO bus out<br />there.<br /><br />But the whole argument has kind of derailed into two components, and now<br />people are just arguing about the naming of those two resources. The<br />naming is really largely irrelevant, except I want those two resource<br />types to have specific enough names that it _is_ clear exactly what kind<br />of resource they are. There can be tons of other resources, but those two<br />resources should be clearly defined.<br /><br />The naming I don't have all that strong an opinion of, except that it<br />should be specific enough. "PCI" may be _too_ specific, certainly the<br />feedback from people seems to imply that some people really hate that<br />part. But "bus" is not specific at all. Somebody suggested "ioport" and<br />"iomem", and that may be the way to go. I'd almost like a "pc" there too,<br />just to clarify that we're really talking about a PC-like IO region, not<br />about any random IO region.<br /><br />The argument actually started from a non-naming issue: the issue of using<br />two separate resource trees to describe the same resources (so with two<br />different PCI resources - memory-mapped and IO ports - you would actually<br />have _four_ different resource trees: memory would have two, and IO ports<br />would have another two resource trees).<br /><br />My personal (strong) opinion is that that does not make any sense,<br />although I can see how that temporarily might make it easier to maintain<br />old (and fairly crufty) interfaces.<br /><br />The reason for two resource trees for the same resource would be that one<br />would contain some kind of "static rules" resource description, and the<br />other one would contain the "current setup" resource description.<br />Everybody basically agrees that you _do_ need to have both.<br /><br />But I designed the whole resource tree very much so that _one_ tree can<br />actually contain the full information. That's what the "sub-resources" are<br />all about (although you can use them in other ways too). You can have the<br />"rules" as separate resource areas, and then the actual current resources<br />as "children" of the "rule resource".<br /><br />So by using the hierarchical nature of the resource trees, suddenly you<br />only need one tree, and you can also be assured that there can be no<br />inconsistency between the "rule" tree and the "real" tree - because the<br />resource allocator code can actually enforce the rules. If they are two<br />separate trees, the resource allocator cannot enforce anything, because as<br />far as the allocator is concerned they are two different resources.<br /><br />See?<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
