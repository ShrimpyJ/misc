    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/7/30/108">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Jul 1999 14:36:24 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: active_mm</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />Cc'd to linux-kernel, because I don't write explanations all that often,<br />and when I do I feel better about more people reading them.<br /><br />On Fri, 30 Jul 1999, David Mosberger wrote:<br />&gt; <br />&gt; Is there a brief description someplace on how "mm" vs. "active_mm" in<br />&gt; the task_struct are supposed to be used?  (My apologies if this was<br />&gt; discussed on the mailing lists---I just returned from vacation and<br />&gt; wasn't able to follow linux-kernel for a while).<br /><br />Basically, the new setup is:<br /><br /> - we have "real address spaces" and "anonymous address spaces". The<br />   difference is that an anonymous address space doesn't care about the<br />   user-level page tables at all, so when we do a context switch into an<br />   anonymous address space we just leave the previous address space<br />   active.<br /><br />   The obvious use for a "anonymous address space" is any thread that<br />   doesn't need any user mappings - all kernel threads basically fall into<br />   this category, but even "real" threads can temporarily say that for<br />   some amount of time they are not going to be interested in user space,<br />   and that the scheduler might as well try to avoid wasting time on<br />   switching the VM state around. Currently only the old-style bdflush<br />   sync does that.<br /><br /> - "tsk-&gt;mm" points to the "real address space". For an anonymous process,<br />   tsk-&gt;mm will be NULL, for the logical reason that an anonymous process<br />   really doesn't _have_ a real address space at all.<br /><br /> - however, we obviously need to keep track of which address space we<br />   "stole" for such an anonymous user. For that, we have "tsk-&gt;active_mm",<br />   which shows what the currently active address space is.<br /><br />   The rule is that for a process with a real address space (ie tsk-&gt;mm is<br />   non-NULL) the active_mm obviously always has to be the same as the real<br />   one.<br /><br />   For a anonymous process, tsk-&gt;mm == NULL, and tsk-&gt;active_mm is the<br />   "borrowed" mm while the anonymous process is running. When the<br />   anonymous process gets scheduled away, the borrowed address space is<br />   returned and cleared.<br /><br />To support all that, the "struct mm_struct" now has two counters: a<br />"mm_users" counter that is how many "real address space users" there are,<br />and a "mm_count" counter that is the number of "lazy" users (ie anonymous<br />users) plus one if there are any real users.<br /><br />Usually there is at least one real user, but it could be that the real<br />user exited on another CPU while a lazy user was still active, so you do<br />actually get cases where you have a address space that is _only_ used by<br />lazy users. That is often a short-lived state, because once that thread<br />gets scheduled away in favour of a real thread, the "zombie" mm gets<br />released because "mm_users" becomes zero.<br /><br />Also, a new rule is that _nobody_ ever has "init_mm" as a real MM any<br />more. "init_mm" should be considered just a "lazy context when no other<br />context is available", and in fact it is mainly used just at bootup when<br />no real VM has yet been created. So code that used to check<br /><br />	if (current-&gt;mm == &amp;init_mm)<br /><br />should generally just do<br /><br />	if (!current-&gt;mm)<br /><br />instead (which makes more sense anyway - the test is basically one of "do<br />we have a user context", and is generally done by the page fault handler <br />and things like that).<br /><br />Anyway, I put a pre-patch-2.3.13-1 on ftp.kernel.org just a moment ago,<br />because it slightly changes the interfaces to accomodate the alpha (who<br />would have thought it, but the alpha actually ends up having one of the<br />ugliest context switch codes - unlike the other architectures where the MM<br />and register state is separate, the alpha PALcode joins the two, and you<br />need to switch both together).<br /><br />&gt; Also, I saw reference to threads being "more soft".  I'm not sure what<br />&gt; this is referring to.  Perhaps it's related to the changes on how<br />&gt; segment registers are being managed on x86 now?<br /><br />It's more a reaction to a (temporary and already removed) naming issue.<br />Ingo got rid of the 1:1 mapping of "hard" thread structures on the x86<br />side, so now we only have one TSS per CPU, and all the kernel thread<br />structures are completely independent of the CPU-imposed thread structure<br />on x86. <br /><br />While Ingo was working on it, he called the kernel thread structure a<br />"soft_thread_struct", while the intel TSS structure was then called a<br />"hard_thread_struct". That was purely temporary and never saw the light of<br />day: the real names are "thread_struct" for the kernel thread structure,<br />and "tss_struct" for the intel TSS.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
