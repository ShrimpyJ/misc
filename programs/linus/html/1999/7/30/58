    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/7/9/133">First message in thread</a></li><li><a href="/lkml/1999/7/26/51">Martin Mares</a><ul><li><a href="/lkml/1999/7/30/48">Geert Uytterhoeven</a><ul><li class="origin"><a href="/lkml/1999/7/31/64">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/31/64">Geert Uytterhoeven</a><ul><li><a href="/lkml/1999/7/31/42">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1999/8/2/59">Jes Sorensen</a><ul><li><a href="/lkml/1999/8/2/70">Russell King</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 30 Jul 1999 08:57:11 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New kernel/resource.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 30 Jul 1999, Geert Uytterhoeven wrote:<br />&gt; <br />&gt;   - readb() and friends must be used on all kinds of memory mapped I/O, not<br />&gt;     only for PCI, and should follow the endianness of the accessed space<br />&gt;     (that's what I've been discussing about a lot with Davem).<br /><br />I disagree.<br /><br />readb() and friends should be used for AT LEAST PC-style memory mapped<br />accesses. Whether it should be used for anything else is not 100% clear.<br />If you have a different bus, you might decide that the readb/writeb<br />interface really isn't very good, and you want to do something else. You<br />may, quite validly, decide that you're better off having a "vme_readb()" <br />or similar interface that takes slightly different parameters. For all I<br />know, it might have different synchronization behaviour from a normal<br />PC-like memory-mapped area. <br /><br />Why do people think that everything has to be so damn generic? If<br />somethins is specific to some special kind of bus, then you SHOULD use a<br />specialized access. You shouldn't try to make everything look the same.<br />That just leads to cludges and backwards compatibility problems wen<br />something new comes along.<br /><br />The fact is, that these days the PCI-like derivatives (and predecessors) <br />are just so popular even among non-PC's that I consider PCI to be the<br />major interface. That does NOT mean that it should be the only interface,<br />and it does NOT mean that all other buses should use "iomem" and "ioport". <br /><br />&gt;     But now Linus claims all these things are for PCI only?? What should I use<br />&gt;     for other busses then?? Don't forget there are many drivers that work for<br />&gt;     the same device connected to different busses.<br /><br />When that happens, it is only the driver that can know what the<br />difference is. If there is a VME and PCI version of the same card, you<br />should make that explicit in the driver sources. Because there WILL be<br />other differences anyway - how you find the thing, how you initialize it,<br />etc etc. So then the driver should be ready and willing to do separate<br />initialization.<br /><br />&gt;   - Linus says I/O space has 64K entries, and memory space has 4GB entries.<br />&gt;     In the mean time 32 bit I/O space showed up in the thread. What about<br />&gt;     busses with a 64-bit memory space (64-bit PCI)?<br /><br />We'll expand things AS THE NEED ARISES.<br /><br />It's already been shown that the ioport limit is only 64k on a PC, but on<br />a PC that is a HARD limit right now.<br /><br />For 64-bit PCI we'll extend it as needed. Right now you cannot access &gt;32<br />bits on a 32-bit machine anyway with the current Linux setup. On an alpha,<br />you can, and the resource code is there already (we'll just up the limit<br />the same way as for ioports).<br /><br />The thing is: trying to be too generic is EVIL. It's stupid, it results in<br />slower code, and it results in more bugs. <br /><br />&gt;   - Instead of `peanuts', I'd vote for `io' and `memory' :-)<br />&gt;     Calling it `PCI' is confusing, since there are machines without PCI<br />&gt;     busses, and machines with PCI and other (SBUS, Zorro) busses in one box.<br /><br />And EXACTLY because there are machines with PCI and other buses, there<br />should be a CLEAR delineation of the two. They should NOT be the same<br />resource. If your SBUS subsystem tries to look too much like PCI, that's<br />probably a mistake in itself. <br /><br />And trying to impose any SBUS behaviour on the PCI resource allocation is<br />just NOT going to happen. Ever. Either you make it look exactly like PCI<br />from a device driver standpoint (at which point you might as well just<br />admit to the fact that it IS PCI as far as Linux is concerned, it just has<br />slightly different connectors - and you shouldn't complain about PCI-only<br />issues), OR you make it a primary bus in its own right, with its own<br />resource allocation and with its own access functions and with its own<br />identification functions. <br /><br />			Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
