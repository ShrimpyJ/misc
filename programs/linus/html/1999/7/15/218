    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/7/15/210">First message in thread</a></li><li><a href="/lkml/1999/7/15/210">(Kanoj Sarcar)</a><ul><li class="origin"><a href="/lkml/1999/7/16/83">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/16/83">(Kanoj Sarcar)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Jul 1999 18:09:56 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [RFC] [PATCH]kanoj-mm15-2.3.10 Fix ia32 SMP/clone pte races</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Jul 1999, Kanoj Sarcar wrote:<br />&gt; <br />&gt; Note that an alternate solution to the ia32 SMP pte race is to change <br />&gt; PAGE_SHARED in include/asm-i386/pgtable.h to not drop in _PAGE_RW.<br /><br />That is imho preferable to the "freeze_range" thing.<br /><br />However, the _most_ preferable solution is probably just to update the<br />page tables with locked read-modify-write operations. Not fun, but not<br />horrible either. We'll have to change some of the interfaces, but it's<br />probably not too bad.<br /><br />Note that for "unmap()" and for a lot of the special cases, I don't care<br />about the race at all. If some thread writes to the mapping at the same<br />time as it is being unmapped, tough luck. If we lose the dirty bit it's<br />not our problem: a program that races on unmap gets what it deserves, I<br />don't think there is any valid use of that race.<br /><br />It's not a security issue, it's more an issue of what to do in situations<br />that can not happen with well-behaved applications anyway. My opinion is<br />that if we screw badly behaved programs, that is not a problem (the same<br />way that anything that passes in a bad pointer to a system call is<br />immediately undefined behaviour: we return EFAULT just to be polite, that<br />does NOT imply that we actually do anything sane).<br /><br />So we do need to handle some of the cases, but others might as well just<br />be left racy.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
