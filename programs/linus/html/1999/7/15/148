    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1999/7/9/133">First message in thread</a></li><li><a href="/lkml/1999/7/15/110">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/15/124">David Hinds</a><ul><li class="origin"><a href="/lkml/1999/7/15/179">Linus Torvalds</a><ul><li><a href="/lkml/1999/7/15/179">David Hinds</a><ul><li><a href="/lkml/1999/7/15/184">Linus Torvalds</a></li><li><a href="/lkml/1999/7/16/33"> yodaiken&#64;chelm ...</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 15 Jul 1999 11:14:54 -0700 (PDT)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: New kernel/resource.c</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Thu, 15 Jul 1999, David Hinds wrote:<br />&gt; <br />&gt; My suggestion to have two resource trees requires no changes to your<br />&gt; resource allocator code.<br /><br />That's fine.<br /><br />You can have an arbitrary number of trees inside the PCMCIA code. One of<br />the goals I had was to never EVER care about what the resoruce allocators<br />were actually used for, and you can have "private" resources inside<br />PCMCIA.<br /><br />But the PCI subsystem is not going to know about them. Because, by<br />definition, they are private. If that's ok with you, then you're golden.<br /><br />My point is that there is one PCI resource, and that implies that there is<br />just one resource tree for PCI. Simple logic.<br /><br />If you want to pre-allocate, then just allocate the area. If you want to<br />further show in the /proc/iomem file what kind of allocation it is, that<br />can be done multiple ways. I can see the "flags" being used (or just<br />different names) - you have a flag that says "pre-allocated, not in use".<br /><br />That's all a syntactic issue, though, because the allocator won't really<br />care: the area is allocated, and won't be allowed to be used for anything<br />else as far as the allocator is concerned.<br /><br />The allocator considers the "flags" and the "name" field to be completely<br />under the control of the entity that actually controls the allocation, so<br />it doesn't preclude you changing the flags of the pre-allocated<br />allocation. Or the name.<br /><br />But by then it is no longer a resource allocation issue, and as such it's<br />not something that the resource allocator will (or SHOULD) care about. At<br />that point it is a simple "move the allocated resource from one bin<br />(pre-allocated) to another (in use)". But that's akin to passing the<br />pointer around, NOT actually changing the allocation tree itself.<br /><br />&gt; Maybe I'm confused, but wasn't the original motivation for updating<br />&gt; the resource code to make hot plug support easier, not harder??<br /><br />Maybe I'm confused, but I don't see the relevance of ANY of your<br />arguments.<br /><br />If you want to pre-allocate, you can do that TODAY. Just do it. It's as<br />simple as<br /><br />	region = request_region(start, n, "pre-alloc");<br /><br />and then you maintain your own list of pre-allocated (and not yet in-use)<br />regions for the hot-swap use or whatever.<br /><br />If you want to sub-allocate pre-allocations, you can do that too - so a<br />hot-swappable device can more cleanly actually tell what it is using in<br />the pre-allocated area.<br /><br />If you want to scan what has been allocated, you can go wild. All the<br />information is right there in the resource tree. <br /><br />NONE of this is hard. I don't see why you're trying to make it hard.<br /><br />If you want to change the serial driver to instead of allocating the<br />resources at open time, allocate them at load time, then just do it. Same<br />for parallel ports etc. You have to be more careful about the region<br />allocations as they become more long-lived, but that's really only a<br />problem for ISA cards where we sometimes just guess at the regions and say<br />that they only really take effect once really opened. And it's a problem<br />that you would have to have solved even with your two-tree approach.<br /><br />		Linus<br /><br /><br />-<br />To unsubscribe from this list: send the line "unsubscribe linux-kernel" in<br />the body of a message to majordomo&#64;vger.rutgers.edu<br />Please read the FAQ at <a href="http://www.tux.org/lkml/">http://www.tux.org/lkml/</a><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
