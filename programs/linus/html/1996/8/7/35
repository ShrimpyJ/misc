    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/8/6/11">First message in thread</a></li><li><a href="/lkml/1996/8/6/11">Linus Torvalds</a><ul><li><a href="/lkml/1996/8/6/19">Philippe Strauss</a><ul><li><a href="/lkml/1996/8/6/27">(Harald Koenig)</a><ul><li><a href="/lkml/1996/8/6/40">Philippe Strauss</a></li></ul></li></ul></li><li><a href="/lkml/1996/8/7/8">"Stephen C. Tweedie"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 7 Aug 1996 10:01:03 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: I/O request ordering</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Tue, 6 Aug 1996, Stephen C. Tweedie wrote:<br />&gt; <br />&gt; 5% seems an *awful* lot.  There is a major problem with this sort of<br />&gt; window, which is that fairness is sacrificed.  It's not uncommon to<br />&gt; have a lot of IO occurring at one part of the disk.  The sawtooth<br />&gt; guarantees that the request pointer will eventually move on to other<br />&gt; requests.  For example, take the case where there's a lot of syslog<br />&gt; activity; you'll have a file being constantly written to disk via<br />&gt; fsync, which can generate a lot of local write activity.  You may<br />&gt; starve the rest of the system if you don't limit the amount of<br />&gt; backtracking allowed.<br /><br />Yes. The problem is that we do need some kind of window, because I suspect<br />the current strict sawtooth algorithm is very bad indeed for demand-loading<br />executables. It's ok on an unloaded system, but executable loading time goes<br />_way_ up if you're doing anything else disk-intensive at the same time. <br />(Executable loading is hard, as the page-faults are totally synchronous.  It<br />may make sense to give priority to page-faulting or something like that)<br /><br />If somebody does test with new sorting algorithms, I'd suggest doing <br />something like<br /><br />	while true; do<br />	grep "not really found anywhere" `find /usr/src/linux -type f`<br /><br />in fact, do something like the above on _two_ separate Linux trees in<br />parallell, and then test how long it takes for programs to load etc "feel" of<br />the system. Make sure the source-tree (or whatever) you're grepping on is<br />larger than your physical memory, so that it doesn't work from the cache. <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
