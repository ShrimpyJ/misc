    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/4/7/42">First message in thread</a></li><li><a href="/lkml/1996/4/7/42">Morten Welinder</a><ul><li class="origin"><a href="/lkml/1996/4/10/88">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/10/88">(Mike Castle)</a><ul><li><a href="/lkml/1996/4/11/4">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1996/4/14/33">(Kai Henningsen)</a><ul><li><a href="/lkml/1996/4/14/75">(Mike Castle)</a></li><li><a href="/lkml/1996/4/15/104">(Kai Henningsen)</a></li></ul></li><li><a href="/lkml/1996/4/8/74">"Steven L. Baur"</a><ul><li><a href="/lkml/1996/4/9/7">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/9/22">Alan Cox</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 8 Apr 1996 09:20:21 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Crash report #1 with SADISTIC_KMALLOC/no modules</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 7 Apr 1996, Morten Welinder wrote:<br />&gt; <br />&gt; &gt; Ok, so far so good. HOWEVER, that instruction then traps with:<br />&gt; &gt;<br />&gt; &gt;        Unable to handle kernel paging request at virtual address 00000004<br />&gt; &gt;<br />&gt; &gt;even though virtual address 0x00000004 never even enters the picture. In <br />&gt; &gt;short, that particular instruction should under no circumstances be able <br />&gt; &gt;to trap with that address.<br />&gt; <br />&gt; This is not quite true.  I can see at least two possibilities where<br />&gt; the instruction could validly generate the page fault:<br />&gt; <br />&gt; 1. The page directory or some page table contains bogus information.<br />&gt;    This includes entries not flushed correctly.<br /><br />Not possible, unless the chip in question does other things wrong. The <br />%cr2 register contains the virtual faulting address, and all the page <br />table lookups on a x86 are physical (and thus the page table lookups can <br />never fault, like on some other architectures).<br /><br />&gt; 2. A non-sequential event (i.e., an interrupt) hides the real cause.<br /><br />I thought about this, but if the 00000004 value comes from an interrupt <br />also taking a page fault then that other fault information should _also_ <br />have come from that interrupt, but the stack dump gives us the rep movsl. <br /><br />Also, interrupts should never cause a page-fault in the first place - if <br />they did you'd see those page faults a lot more often than you see the <br />occasional incorrect fault (essentially, a page fault in an interrupt <br />should always result in some kernel message, and to get this kind of <br />corruption you'd have to have the interrupt at exactly the right place).<br /><br />Finally, if this was due to an interrupt or anything like that, it would <br />be less deterministic, I believe. But he had two faults (faulting in <br />completely different places) that showed the exact same behaviour. <br /><br />&gt; 3. Something trashes [part of] the register dump before it gets<br />&gt;    dumped.<br /><br />This is certainly possible, but rather unlikely: the dump information all <br />looked very sane other than the incorrect fault information. I find it <br />unlikely that we would get such localized corruption (and only very <br />occasionally: the fault handler has obviously worked correctly for probably <br />millions of page faults, or he would never had been able to get into user <br />land and X in the first place).<br /><br />&gt; If I remember things right then CR2 contains a physical address, not<br />&gt; a linear one.  Something could also have gone wrong with the<br />&gt; translation before the printing.<br /><br />No, cr2 is the faulting virtual address, so that's not it. I agree that <br />the weird behaviour could potentially be from something else than a buggy <br />CPU, but considering that the machine in question has been showing <br />symptoms that others don't see for the whole 1.3.x series, I'm now <br />strongly suspecting hardware (I'm always suspicious of hardware, but I <br />want to make sure a linux bug can't possibly be the more likely cause <br />_first_)<br /><br />Does soembody else with Cyrix CPU's see strange behaviour like this?<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
