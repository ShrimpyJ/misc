    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/4/15/114">First message in thread</a></li><li><a href="/lkml/1996/4/15/114">(Bob Felderman)</a><ul><li><a href="/lkml/1996/4/16/7">"David S. Miller"</a></li><li class="origin"><a href="/lkml/1996/4/17/82">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/17/82">Rogier Wolff</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 16 Apr 1996 09:27:20 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Caches and DMA with PPro</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 15 Apr 1996, Bob Felderman wrote:<br />&gt; <br />&gt; I'm running 1.3.88 on a Micron 180MHz PentiumPro machine.<br />&gt; It appears that our network board is DMAing stale data <br />&gt; when transmitting a packet and/or the host is reading stale <br />&gt; data after a pakcet is received.<br /><br />This _should_ be impossible. It sounds like maybe the motherboard doesn't <br />correctly keep the caches in sync, because even though the PPro does some <br />"flexible" memory accesses, they should never result in this kind of <br />behaviour (essentially, the hardware should make sure memory is coherent).<br /><br />&gt; I've looked at the flush_cache_xxx() code in pgtable.h and it <br />&gt; has the following code.<br />&gt; <br />&gt; /* Caches aren't brain-dead on the intel. */<br />&gt; #define flush_cache_all()                       do { } while (0)<br />&gt; #define flush_cache_mm(mm)                      do { } while (0)<br />&gt; #define flush_cache_range(mm, start, end)       do { } while (0)<br />&gt; #define flush_cache_page(vma, vmaddr)           do { } while (0)<br /><br />No, this is for the user-level memory management, not for device level <br />cache flushing. Essentially, it's for architectures that have virtual <br />caches and don't invalidate them correctly when the page translations <br />change.<br /><br />There is a "mb()" macro in the header files that stands for "memory <br />barrier", and which is used to make sure that CPU writes have actually gone <br />out to the memory subsystem. On the x86 this is an empty asm statement (set <br />up in a way that makes sure that gcc doesn't optimize things around it and <br />thus make the barrier useless).<br /><br />Not very many drivers use "mb()", because it's not usually needed even <br />on hardware that have write buffers and/or out-of-order reads (IO <br />operations are also written so that they do the same memory <br />synchronization).<br /><br />&gt; I've tried disabling the caches from the BIOS setup, but the<br />&gt; performance of the system and the behavior is unchanged, so I<br />&gt; suspect the BIOS isn't really turning off the caches.<br /><br />It may be that it disables any external caches, and with a PPro you <br />probably don't even have that (and even if you do, you probably wouldn't <br />notice the speed difference because the internal caches are good enough <br />for most things).<br /><br />Note that the intel architecture doesn't even _have_ any cache flush <br />operations for reads (well, it has a "wbinvalidate()" instruction, but <br />nobody uses it because it should never be needed and it's slow as h*ll, <br />epsecially in the unlikely situation that the external interfaces actually <br />honour it)<br /><br />Instead, the PPro has a few so-called "serializing instructions", and <br />any speculative reads (or delayed writes) will _not_ pass those <br />instructions. Which is why you should _not_ see the behaviour you see <br />unless the external hardware is broken wrt cache coherency. I quote:<br /><br /> The I/O instructions, locking instructions, the LOCK prefix, and <br /> serializing instructions force strong ordering on the processor.<br /><br />Note that the low-level interrupt code always does a few IO instructions, <br />so that the hardware interrupt action itself will always serialize the <br />pentium (I suspect the actual interrupt also serializes the CPU, but I <br />can't find that in the documentation). <br /><br />Now, if the hardware sends out the interrupt _before_ having completely <br />written the packet to memory, that might result in problems, but I assume <br />that goes without saying ;-)<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
