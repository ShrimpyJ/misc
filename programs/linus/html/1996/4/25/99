    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/4/23/52">First message in thread</a></li><li><a href="/lkml/1996/4/23/52">Andreas Kostyrka</a><ul><li><a href="/lkml/1996/4/25/40">(Ben Wing)</a><ul><li class="origin"><a href="/lkml/1996/4/26/48">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/26/48">root</a><ul><li><a href="/lkml/1996/4/26/70">root</a></li><li><a href="/lkml/1996/4/27/97">()</a></li></ul></li><li><a href="/lkml/1996/4/27/30">Robert Wuest</a></li><li><a href="/lkml/1996/4/27/88">Ben Wing</a><ul><li><a href="/lkml/1996/4/27/27">Linus Torvalds</a></li><li><a href="/lkml/1996/4/27/37">Ben Wing</a></li><li><a href="/lkml/1996/4/28/27">Gerard Roudier</a></li><li><a href="/lkml/1996/4/28/123">(Thomas Koenig)</a></li><li><a href="/lkml/1996/4/30/112">(Kai Henningsen)</a></li></ul></li><li><a href="/lkml/1996/4/28/90">(H. Peter Anvin)</a><ul><li><a href="/lkml/1996/4/27/92"> Andries.Brouwer&#64;cwi ...</a></li><li><a href="/lkml/1996/4/29/61">Matthew J Brown</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/4/27/102">(Kai Henningsen)</a></li><li><a href="/lkml/1996/4/28/89">David A Willmore</a></li><li><a href="/lkml/1996/4/24/11">Buddha Buck</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Apr 1996 08:13:40 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: signal(SIGFPE,SIG_IGN), possible solution?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 24 Apr 1996, Ben Wing wrote:<br />&gt; <br />&gt; The application in which this is happening is a renderer --<br />&gt; in other words, if the result is slightly wrong in this case,<br />&gt; a pixel will appear slightly different (no big deal) but if<br />&gt; a SIGFPE happens, the program dies, which is really bad.<br />&gt; As I said, checking for overflow is way time consuming.<br /><br />So, what you do is create a signal handler, and then YOU do the fixup if <br />you have problems. <br /><br />"longjump" is your friend - it is meant for problems _exactly_ like this. <br />What you do is you do a setjump before the whole calculation, and if you <br />get a SIGFPE you longjump out of the signal handler (better use <br />sigsetjump and siglongjmp, actually). <br /><br />Why the h*ll can't people understand?<br /><br />What is so horribly hard in understanding the fact that this is not a <br />kernel issue at all. Why do people insist that the added code should go <br />into the KERNEL, when the problem is in your broken programs?<br /><br />Am I your nanny? <br /><br />The kernel is there to support user programs, but it's a _resource_ <br />handler, not a baby feeder. Maybe you should use a real language that <br />supports exceptions instead of asking for broken kernels..<br /><br />&gt; BTW, the same problem on the same processor under MS Windows<br />&gt; does *NOT* happen -- apparently Windows has sensible<br />&gt; integer-divide-exception handling.<br /><br />Excellent example. MS Windows is well-known for it's stability and<br />predictability. So it happens to get the right asnwer FOR YOU. What if it<br />happens to get the wrong answer for somebody who _does_ depend on it? <br /><br />Did you work on the Pentium division stuff, by any chance?<br /><br />Really. This isn't even worth discussing. Returning some random number <br />for integer division by zero (and yes, 0 or -MAX_INT or whatever are <br />_also_ random numbers) is BROKEN BROKEN BROKEN.<br /><br />With floating point, and full IEEE semantics, the situation is different. <br />The Nan or +-Inf will not just magically go away in further calculations, <br />so if an error happened with some intermediate calculation then it will <br />show up in a sane form in the final answer.<br /><br />With integer arithmetic, there is no such guarantee.<br /><br />Trust me, the fact that you have _one_ program that does not care about <br />the result of the division is not an argument at all. Are you really <br />suggesting that we should make all _other_ programs unsafe too just <br />because you have a specific use for this braindamage?<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
