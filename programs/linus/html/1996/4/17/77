    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/4/17/67">First message in thread</a></li><li><a href="/lkml/1996/4/17/67">Hans Georg Zezschwitz</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Apr 1996 15:03:04 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux 1.3.90 vasts memory?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">&gt; <br />&gt; In 1.3.90 yet another element was introduced to the mem_map-structure:<br />&gt; <br />&gt; In mm.h:<br />&gt; <br />&gt; +     unsigned long     map_nr;          /* page-&gt;map_nr = page - mem_map<br />&gt; */ <br />&gt; <br />&gt; Well, isn't it like that, that in result for every 4k / 8k page another<br />&gt; 4 bytes are used? (-&gt; 0,1 % of RAM is lost?). Sounds less, but thats<br />&gt; 4 more pages on the average 16 MB system. <br />&gt; <br />&gt; What are the benefits of that? I took a quick look through the code<br />&gt; and my impression is, that it will mostly save a substraction and<br />&gt; division (integer) when <br />&gt; <br />&gt;  - finding a free page<br />&gt;  - allocating a block from a file<br />&gt; <br />&gt; Sure, that it is worth this? You could call it an optimization for<br />&gt; speed vs. memory, but every modern OS an optimization for memory<br />&gt; is a optimization for speed on the average system, too.<br /><br />Agreed. However, there are some reasons to keep the "map_nr" entry, even though<br />we can calculate it at run-time (with a constant division that gcc can optimize<br />to a multiplication + shift).<br /><br />I haven't decided which way to go, but having the "mem_map" entry is<br />potentially a win. Right now it's not used very much, although you didn't<br />notice that it's used by the "page_address()" inline function that _does_ show<br />up pretty often. There are some other places that may want to use it in the<br />future (that do things differently exactly because the field hasn't been<br />availble).<br /><br />You're quite right, though - it's a trade-off. I may end up removing the entry<br />if it turns out that the division is the better thing to do.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
