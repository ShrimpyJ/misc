    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/4/7/42">First message in thread</a></li><li><a href="/lkml/1996/4/8/2">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/10/88">(Mike Castle)</a><ul><li><a href="/lkml/1996/4/11/4">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1996/4/14/33">(Kai Henningsen)</a><ul><li><a href="/lkml/1996/4/14/75">(Mike Castle)</a></li><li><a href="/lkml/1996/4/15/104">(Kai Henningsen)</a></li></ul></li><li><a href="/lkml/1996/4/8/74">"Steven L. Baur"</a><ul><li class="origin"><a href="/lkml/1996/4/9/22">Linus Torvalds</a><ul><li><a href="/lkml/1996/4/9/22">Alan Cox</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 9 Apr 1996 09:32:44 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: 1.2.13 __generic_memcpy_tofs cures crashes</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On 8 Apr 1996, Steven L. Baur wrote:<br />&gt; <br />&gt; In an earlier message you suggested replacing __generic_memcpy_tofs<br />&gt; with the version from 1.2.13 and it worked.  By the time this message<br />&gt; makes it off this machine, I will have had 24 hours of continuous<br />&gt; error free (as reported in syslog) operation on my problem machine.<br />&gt; It passed its previous 1.3 record over twelve hours ago.  (Considering<br />&gt; how much useless legacy code is already in the kernel (xia fs, ext fs,<br />&gt; etc.), it would be nice to also include the slower memcpy routines as<br />&gt; a special option for people with braindamaged hardware.)<br /><br />Ok, thanks for the confirmation. At least we know it's a CPU problem, not <br />a linux problem..<br /><br />However, I'd really hate to have a config option for "broken CPUs". It <br />gets to be a maintainers nightmare, and I'd much rather see a generic <br />routine that is fast yet doesn't break on your cpu (if it was _just_ your <br />cpu I could just ignore it, but there is always the possibility that this <br />is a "normal" problem for some Cyrix chips).<br /><br />Could you test a slightly modified 1.3.x version of the memcpy routine? <br />If it's a hardware register interlock problem or something like that, it <br />might go away with a simple re-ordering of instructions (or even just <br />changing one instruction into another one).<br /><br />First, could you change the segment register move through %cx into a <br />push/pop pair instead? That would result in:<br /><br />static inline void __generic_memcpy_tofs(void * to, const void * from, unsigned long n)<br />{ <br />    __asm__ volatile<br />        ("      cld<br />                push %%es<br />                push %%fs     <br />                pop %%es      <br />                cmpl $3,%0<br />                jbe 1f<br />                movl %%edi,%%ecx<br />                negl %%ecx<br />                andl $3,%%ecx<br />                subl %%ecx,%0<br />                rep; movsb<br />                movl %0,%%ecx<br />                shrl $2,%%ecx<br />                rep; movsl<br />                andl $3,%0<br />        1:      movl %0,%%ecx<br />                rep; movsb<br />                pop %%es"<br />        :"=abd" (n)<br />        :"0" (n),"D" ((long) to),"S" ((long) from)<br />        :"cx","di","si");<br />}<br /><br />(this is on the assumption that the problem is due to the segment <br />register stuff: that's really the only thing that makes this particular <br />function special in the kernel - all other accesses to user mode use the <br />%fs register directly).<br /><br />The second thing you could try is to move the "cmpl $3,%0" one <br />instruction earlier (the flags will be unaffected by the "pop %es" <br />instruction). That would catch the case where the interlock problem is <br />due to back-to-back segment register accesses.<br /><br />The third thing you might try is to insert a "nop" before the "rep ; <br />movsl", on the assumption that the interlock problem is between the <br />shift/movsl instruction (but that's unlikely: that particular <br />combination shows up even in normal code). That would be:<br /><br />static inline void __generic_memcpy_tofs(void * to, const void * from, unsigned long n)<br />{ <br />    __asm__ volatile<br />        ("      cld<br />                push %%es<br />                push %%fs     <br />                cmpl $3,%0<br />                pop %%es      <br />                jbe 1f<br />                movl %%edi,%%ecx<br />                negl %%ecx<br />                andl $3,%%ecx<br />                subl %%ecx,%0<br />                rep; movsb<br />                movl %0,%%ecx<br />                shrl $2,%%ecx<br />		nop<br />                rep; movsl<br />                andl $3,%0<br />        1:      movl %0,%%ecx<br />                rep; movsb<br />                pop %%es"<br />        :"=abd" (n)<br />        :"0" (n),"D" ((long) to),"S" ((long) from)<br />        :"cx","di","si");<br />}<br /><br /><br />&gt; Just to be sure that it is indeed the Cyrix chip, I'm going to have it<br />&gt; replaced tomorrow.<br /><br />I'd ask you to try to keep that machine alive, if only to try if there is <br />any alternative way of fixing it (like above). Testing it is horrible, I <br />know (changing asm-i386/segment.h will result in almost everything <br />getting recompiled, and then it probably takes at least half a day to see <br />if the problem is still there..), but you're the only one that sees the <br />problem, so..<br /><br />Thanks for testing this all - I was ready to give up on that particular <br />machine already..<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
