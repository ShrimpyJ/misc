    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/9/30/42">First message in thread</a></li><li class="origin"><a href="/lkml/1996/9/30/83">Linus Torvalds</a><ul><li><a href="/lkml/1996/9/30/83">Linus Torvalds</a><ul><li><a href="/lkml/1996/10/1/63">george h byrkit</a></li><li><a href="/lkml/1996/9/30/121">Rodrigo Feher</a><ul><li><a href="/lkml/1996/10/1/71">"Adam D. Bradley"</a></li></ul></li></ul></li><li><a href="/lkml/1996/9/30/95">Steven L Baur</a><ul><li><a href="/lkml/1996/10/1/29">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 29 Sep 1996 14:27:58 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: ALERT! Stay away from patched gcc's (was Re: 2.0.22 will be the last version)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />As some people have asked me how the bad code actually looks like, I'm <br />posting a short description of what happe with the bad gcc version.<br /><br />The bad code happens with the new inline assembly code for semaphores (it<br />_probably_ happens with other inline assembly code too, though - the<br />semaphore code is in no way special among linux inline asm usage). The<br />"down()" operation is defined as: <br /><br />	extern inline void down(struct semaphore * sem)<br />	{<br />	        __asm__ __volatile__(<br />	                "# atomic down operation\n"<br />	                "1:\n\t"<br />	                "movl $1b,%%eax\n\t"<br />	#ifdef __SMP__<br />	                "lock ; "<br />	#endif<br />	                "decl %0\n\t"<br />	                "js " SYMBOL_NAME_STR(down_failed)<br />	                :/* no outputs */<br />	                :"m" (sem-&gt;count), "c" (sem)<br />	                :"ax","dx","memory");<br />	}<br /><br />Note especially the fact that the asm statement marks registers ax and dx as<br />being destroyed by the statement (%eax is used as a "return" address and is<br />loaded here, while %edx is potentially destroyed by the functions calls that<br />are called from "down_failed"). <br /><br />The problem is that this bad gcc doesn't take this into account, the code <br />produced in sd_init_onedisk looks like this:<br /><br />	...<br />	call   scsi_do_cmd<br />	addl   $0x1c,%esp<br />	movl   16(%esp),%ecx<br />	movl   16(%esp),%eax<br /><br />	/* down operation starts here */<br />	movl   $0x18d9dc,%eax<br />	decl   (%eax)<br />	js     0x19bfa0 &lt;down_failed&gt;<br />	/* end of down operations */<br /><br />	movl   0xf0(%edi),%esi<br />	incl   %ebx<br />	testl  %esi,%esi<br />	je     sd_init_onedisk+633<br />	movb   0x8a(%edi),%dl<br />	...<br /><br />Note the use of "decl (%eax)" - gcc is allocating %eax for the input of the<br />down operation, even though the asm has marked %eax clobbered. And I quote<br />from the gcc info pages: <br /><br /> "The input operands are guaranteed not to use any of the clobbered<br />  registers, and neither will the output operands' addresses, so you can read<br />  and write the clobbered registers as many times as you like" <br /><br />so this is definitely a buggy gcc that has produced the code above. But from<br />all reports it seems that gcc-2.7.2 and gcc-2.7.2.1 are ok, and there are<br />also version of the no-strength-reduce bugfix that are ok. Werner Fink is on<br />vacation right now, so I still don't know exactly what version of gcc he is<br />using (he did mention gnat, are there patches to the gcc back-end for ada<br />too?). <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
