    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/9/26/65">First message in thread</a></li><li><a href="/lkml/1996/9/26/65">(Malcolm Beattie)</a><ul><li><a href="/lkml/1996/9/27/9">(Joerg Pommnitz)</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1996/9/27/62">"David S. Miller"</a><ul><li><a href="/lkml/1996/9/28/16">Matthias Urlichs</a><ul><li><a href="/lkml/1996/9/28/57">"David S. Miller"</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 27 Sep 1996 10:19:52 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Possible improvement to pipe throughput</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 27 Sep 1996, Joerg Pommnitz wrote:<br />&gt; <br />&gt; Linus had done such an implementation. If I remeber correctly he thought<br />&gt; it was only good for high benchmark numbers without real world significance.<br /><br />Actually, if done well it would indeed be beneficial to use some memory<br />mapping primitives to handle pipes. However, the best implementation is<br />rather complex, and there are some non-obvious pitfalls when thinking about<br />page table modifications and read()/write(). <br /><br />The implementation I did was very aggressive in using page mapping to get<br />good performance, and it essentially gave "unlimited" bandwidth (ie no copies<br />at all if the source and destination was properly aligned and neither the<br />reader nor the writer actually changed the buffer). However, for normal<br />things it didn't seem to make much of a difference. <br /><br />Now, the _right_ solution is not to be all that aggressive, because the <br />optimal cases never happen in real life. I think the best performance can <br />be gotten by something like this:<br /><br /> - pipe_write():<br />	look up the memory area the user is writing from (this is "free", <br />	since we have to do it anyway for "verify_area()"). If it's a shared<br />	memory object or is a file mapping, just copy it the old way, because<br />	otherwise we can't guarantee that the data in the mapping doesn't<br />	change. <br /><br />	If it's a private page, look up the physical page. If it's swapped <br />	out, again do a normal copy (that will swap it in), because that case<br />	isn't performance-critical anyway so we do the "safe" thing. <br /><br />	Finally, if it's a private page and exists in memory, just remember <br />	the kernel address of the page and sleep.<br /><br /> - pipe_read():<br />	copy to the reading process either from the kernel buffer (that we <br />	copied from the user from) or from the original page that we looked<br />	up. <br /><br />Now, the above means that we always copy at least _once_ (in the pipe<br />reader), and if in doubt we copy twice (the same way we do now). But the<br />normal case now should be that we copy just once, so we have essentially<br />doubled pipe throughput performance. <br /><br />Note that this doesn't actually _change_ any page tables or anything like<br />that. Changing page tables is approaching being so expensive that it's<br />questionable whether it really helps in real life, especially on SMP etc.  So<br />we do use the memory mapping, but only to look things up on the writer side. <br /><br />(why writer, not reader? Partly because the writer doesn't have some <br />problems that the reader has (dirty bits on page tables when the page is <br />being modified by the read()). <br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
