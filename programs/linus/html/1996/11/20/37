    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/11/18/65">First message in thread</a></li><li><a href="/lkml/1996/11/19/8">"David S. Miller"</a><ul><li><a href="/lkml/1996/11/19/11">Ulrich Drepper</a><ul><li><a href="/lkml/1996/11/19/10">"David S. Miller"</a><ul><li><a href="/lkml/1996/11/19/6">Ulrich Drepper</a><ul><li><a href="/lkml/1996/11/19/5">"David S. Miller"</a></li><li><a href="/lkml/1996/11/19/63">(Alan Cox)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/11/19/19">Xavier Leroy</a><ul><li><a href="/lkml/1996/11/19/22">"David S. Miller"</a></li><li class="origin"><a href="/lkml/1996/11/20/64">Linus Torvalds</a><ul><li><a href="/lkml/1996/11/20/64">(Matthew S. Crocker)</a><ul><li><a href="/lkml/1996/11/20/82">(Alan Cox)</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 20 Nov 1996 15:26:07 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: CLONE_PID (was: POSIX.1b semaphores)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br /><br />On Tue, 19 Nov 1996, Xavier Leroy wrote:<br />&gt; <br />&gt; Well, it works but it's not usable in a thread library. What's missing<br />&gt; is the ability to send a signal to a particular "thread", i.e. one of<br />&gt; several processes having the same PID. LinuxThreads needs this feature<br />&gt; because it implements suspend thread/restart thread with signals.<br />&gt; <br />&gt; Linus proposed a scheme whereas the high bits of the pid argument to<br />&gt; kill(2) would encode the "thread" number.  That's all right, but still<br />&gt; needs to be implemented.<br />&gt; <br />&gt; But wait, there's a second half to the problem. What happens if we do<br />&gt; kill(p, sig) when p is a regular PID (high bits 0) and there are<br />&gt; several processes with PID p ? Which one(s) get the signal? <br />&gt; The first process with PID p encountered while searching the process<br />&gt; table? No, because that process may block the signal while others with<br />&gt; the same PID don't. The first process with PID p that does not block<br />&gt; the signal? All right, sounds reasonable.<br /><br />My theory was that this case (high bits zero) would mean that the signal<br />is sent to _all_ the processes. <br /><br />Now, the CLONE_PID stuff is not finalized, as you say, and in order to<br />make the "send-to-all" semantics efficient, we need to have a separate<br />pointer structure for "next process with same PID" (kind of like th thread<br />pointers that we now use for parent/child relationships). Because unless<br />we have something like that, we'd have to search through _all_ the<br />processes, even for the normal case when we aren't threading at all. <br /><br />The other possibility I see is to always think of the "high bits zero"<br />process as the parent process to all threads (it is), and not special-case<br />the zero at all. If you send a signal with high bits zero, it goes to the<br />"parent", and nobody else.<br /><br />I don't know what the exact POSIX requirements were for pthreads, and<br />that's probably what has to decide the issue. If POSIX allows the model<br />where only the "mother thread" gets the signals, use that. If POSIX<br />pthreads requires that _all_ threads get the signal some way, use the<br />"zero means all" algorithm and add the extra linked list of processes<br />stuff.<br /><br />Anyway, this is one area where the implementation is not something I feel<br />strongly about, and as such the deciding factor is what the standard says<br />and what makes it easiest for us. Feel free to send me patches..<br /><br />		Linus<br /><br />PS. Oh, and while I'm orating here, I might as well tell everybody that<br />I've been busy writing my masters thesis, and as a result I've moved all<br />the mailing lists to a low-priority channel. I'll try to concentrate on my<br />thesis for a while, so I'll be less active than usual. Don't worry, this<br />is all temporary.<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
