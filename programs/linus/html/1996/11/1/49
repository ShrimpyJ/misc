    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/10/30/49">First message in thread</a></li><li><a href="/lkml/1996/11/1/20">Linus Torvalds</a><ul><li><a href="/lkml/1996/11/1/41">Craig Milo Rogers</a><ul><li class="origin"><a href="/lkml/1996/11/1/62">Linus Torvalds</a><ul><li><a href="/lkml/1996/11/1/62">Craig Milo Rogers</a><ul><li><a href="/lkml/1996/11/1/79">"Theodore Y. Ts'o"</a></li><li><a href="/lkml/1996/11/2/12">Ingo Molnar</a></li><li><a href="/lkml/1996/11/6/22">"Mark H. Wood"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/11/1/53">(Alan Cox)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 1 Nov 1996 22:32:47 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: unusual startup messages</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 1 Nov 1996, Craig Milo Rogers wrote:<br />&gt; &gt;Yes, you can do it in user space, but your performance will suck unless you<br />&gt; &gt;ignore security issues or have special hardware (and the special hardware<br />&gt; &gt;would essentially have to do 90% of the stuff we do in kernel space now: I'm<br />&gt; &gt;talking _really_ special hardware). <br />&gt; <br />&gt; 	Actually, the hardware needn't be that special.  It mainly<br />&gt; needs to identify "normal" incoming TCP and UDP packets, and store<br />&gt; them (via DMA or shared memory) directly into buffers that are mapped<br />&gt; into the corresponding user processes; this may be done with a<br />&gt; high-speed state machine and socket lookup hash table.<br /><br />I disagree. <br /><br />Yes, you can get _some_ networking going that way, but you sure as hell<br />aren't going to get UNIX semantics. Another favourite pastime of<br />microkernels: "we can't do that efficiently, so let's change the rules and<br />_then_ we can show how much faster we really are". <br /><br />Think of this very simple program: <br /><br />	/* fd 0 is a TCP socket */<br />	read(0,buffer,1);<br />	if (buffer[0] == 'a')<br />		execve("/some/fine/program",..);<br /><br />/some/fine/program:<br /><br />	/* expect to be able to read the rest of the TCP stream */<br />	read(0, new_buffer, 100);<br /><br />Now, it doesn't _matter_ if the card knows TCP/IP and can demultiplex the<br />packets and in general be unbelievably clever. UNIX semantics require that<br />the first process read exactly _one_ byte, and the new process (that didn't<br />even exist when the TCP packet came in) will be able to read the rest. <br /><br />"Directly storing them into the user process" doesn't even come _close_ to<br />what the hardware has to know about. <br /><br />The card needs to buffer the packets indefinitely (maximum memory<br />requirements: max_nr_of_tcp_connections*TCP_WINDOW_SIZE - we're talking at<br />least hundreds of kB, probably a few MB here, and that's just for incoming<br />data), and it needs to be able to store partial packets too. <br /><br />&gt;						  It is also<br />&gt; desirable to have the hardware enforce certain security and sanity<br />&gt; checks on outgoing packets; this can be done with a template<br />&gt; mechanism.  Finally, it is desireable to have the hardware calculate<br />&gt; the TCP/UCP checksums, since there's no longer a kernel-level copy in<br />&gt; which to hide the calculation.<br /><br />The hardware also has to do retransmission and TCP sequence numbers, because<br />you also can have the case where you have multiple processes writing data to<br />the same TCP connection and the only common point is the hardware, then the<br />hardware has to do all the sequencing.. <br /><br />Of course, you can argue that you can have multiple processes sharing the<br />same "TCP description" in shared memory, and then they can argue over the<br />description among themselves and only give the hardware a "fait accompli".<br />But then all the user processes have to be nice about it, and you can't have<br />disagreements (or you'll end up with incorrect sequence numbers). And the<br />only way you can guarantee that processes are nice about it is by protecting<br />this shared memory region some way. Voila - you're back at a kernel. <br /><br />Of course, that's another thing some "research" projects do: they assume that<br />all user programs are nice and you don't need any kernel protection.  Yeah,<br />sure. <br /><br />&gt; 	The hardware functions correspond to part of the the "fast<br />&gt; path" of a high-performance Internet stack.  The rest of the Internet<br />&gt; stack can be implemented in user space.<br /><br />Nope.<br /><br />You can (reasonably) trivially implement a N:1 mapping of TCP streams to<br />processes.  That's not hard. But implementing a N:M mapping of TCP streams<br />that are used by multiple processes is not just a simple user space<br />implementation. All the user spaces have to know about _other_ user spaces<br />writing to the same stream (or reading from the same stream), and agree on<br />who uses what write sequences or who reads what packets. Otherwise you'll<br />have chaos. <br /><br />&gt; 	The Netstation and Atomic-2 projects at ISI believe it is<br />&gt; possible.  (Netstation is primarilly directed at Internet-adressible<br />&gt; peripherals; think of your processor, display adaptor, and disks<br />&gt; as each having their own IP addresses.  Atomic-2 has been investigating<br />&gt; user-level protocol APIs.)<br /><br />Do they also consider UNIX semantics? Or are they another of those<br />"specialized" systems that don't care about little things like that? <br /><br />(Yes, I despise research projects that show good numbers, and then it turns<br />out they show good numbers for doing something much more limited than the<br />real world. That's not science, that's just bad research and doctoring your<br />numbers). <br /><br />&gt; 	I'm not really up on the status of these projects, but I<br />&gt; believe that Atomic-2 has demonstrated (non-IP) user-level protocol<br />&gt; stacks operating in excess of 200 Mbps on Sun SPARC-20/71s.  It is<br />&gt; believed (but has not, to my knowledge, been demonstrated) that the<br />&gt; same performance can be obtained for TCP- and UDP-based stacks.<br /><br />Did you know that it's possible to travel faster than light?<br /><br />Take a (LARGE, POWERFUL) flashlight, turn around in circle real quick and<br />shine the flashlight outwards while turning. Wait a year, and take a look at<br />where the light is. It's out there, revolving around you at a distance of one<br />lightyear, and it's making a complete circle in less than a second (assumed<br />you turned around quickly enough). Wow! The lightspot is moving much faster<br />than light! <br /><br />Now, bring in a physicist, and he'll start crying when you tell him the<br />story. Yes, the lightfront is "kind of" moving at faster than lightspeed, but<br />no _information_ is moving that fast. <br /><br />Now, the same is true of some of these research projects: they "kind of"  do<br />the same thing as a real operating system, and they can even do it faster.<br />But in the end it's not really the same thing at all. <br /><br />(I agree, extremely bad analogy. Sorry about that. My point is just that<br />there is "networking" and there is "networking", and they don't necessarily<br />mean the same thing. I do not believe you can do UNIX networking in user<br />space without unrealistically clever hardware or some unrealistic definition<br />of "user space" ;)<br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
