    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/11/1/68">First message in thread</a></li><li><a href="/lkml/1996/11/2/29">(Alexander Sanda)</a><ul><li><a href="/lkml/1996/11/2/34">Chris Evans</a><ul><li class="origin"><a href="/lkml/1996/11/2/50">Linus Torvalds</a><ul><li><a href="/lkml/1996/11/2/50">Nuno Grilo</a><ul><li><a href="/lkml/1996/11/3/7">Nuno Grilo</a></li><li><a href="/lkml/1996/11/3/49">Steve VanDevender</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 2 Nov 1996 19:58:08 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: X much slower in 2.0.24 than in 1.2.13</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 2 Nov 1996, Chris Evans wrote:<br />&gt; <br />&gt; I can confirm that something 2.0.23-&gt;2.0.24 kills x performance...<br />&gt; <br />&gt; Not the world's most scientific test, but with<br />&gt; <br />&gt; time x11perf -all -time 1 -reps 1<br />&gt; <br />&gt; 2.0.23: 2.37 user, 2.14 system<br />&gt; 2.0.24: 3.73 user, 8.85 system<br />&gt;                    ^^^^^^^^^^^<br />&gt; Someone else commented on unreasonably long time spent in "system" rather <br />&gt; than "user".<br /><br />Ok, anybody want to profile their kernel? It's really pretty simple:<br /><br /> - boot the kernel with the "profile=2" kernel command line (you can use <br />   a line like<br />	append = "profile=2"<br />   in your lilo.conf if you use LILO).<br /><br /> - make sure you have the System.map file that corresponds to your kernel <br />   in your root directory (this should be done automatically for you if you<br />   use "make zlilo" to create the kernel)<br /><br /> - do a "echo &gt; /proc/profile" as root before starting x11perf to clear <br />   out any old profiling information<br /><br /> - run x11perf and afterwards parse the profile information with the supplied<br />   program. The output is very easy to decipher..<br /><br />I'd be interested to hear what the results are, and the anomaly _should_ <br />show up pretty clearly.<br /><br />		Linus<br /><br />---<br />/*<br /> * Original by Ramon Garcia Fernandez &lt;ramon&#64;juguete.quim.ucm.es&gt;<br /> * Hacked by linus<br /> */<br />#include &lt;unistd.h&gt;<br />#include &lt;stdlib.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;sys/fcntl.h&gt;<br />#include &lt;linux/autoconf.h&gt;<br /><br />#define prof_func "do_no_page"<br /><br />#define BUFSIZE 1024<br /><br />#ifndef CONFIG_PROFILE_SHIFT<br />#define CONFIG_PROFILE_SHIFT 2<br />#endif<br /><br />struct entry {<br />	struct entry * next;<br />	unsigned long time;<br />	unsigned long address;<br />	char name[1];<br />};<br /><br />struct entry * list = NULL;<br /><br />void do_symbol(int time, unsigned long address, char * name)<br />{<br />	struct entry * entry = malloc(sizeof(struct entry) + strlen(name));<br />	struct entry ** tmp;<br /><br />	entry-&gt;time = time;<br />	entry-&gt;address = address;<br />	strcpy(entry-&gt;name, name + (*name == '_'));<br />	tmp = &amp;list;<br />	while (*tmp) {<br />		if ((*tmp)-&gt;time &gt; entry-&gt;time)<br />			break;<br />		tmp = &amp;(*tmp)-&gt;next;<br />	}<br />	entry-&gt;next = *tmp;<br />	*tmp = entry;<br />}<br /><br />void show_symbols(unsigned long total)<br />{<br />	struct entry * entry = list;<br /><br />	while (entry) {<br />		printf("%10u %5d.%02d%% %08x %s\n" ,<br />			entry-&gt;time,<br />			(entry-&gt;time*10000/total) / 100,<br />			(entry-&gt;time*10000/total) % 100,<br />			entry-&gt;address, entry-&gt;name);<br />		entry = entry-&gt;next;<br />	}<br />}<br /><br />/* If you do not speak Spanish:<br /> * valor_simbolo_actual: current_symbol_value<br /> * valor_simbolo_siguiente: next_symbol_value<br /> * simbolo_actual: current_symbol<br /> * next_symbol: next_symbol<br /> * leidos: read (past participle)<br /> * total: total<br />*/<br /><br />int main(int argc, char ** argv)<br />{<br />	int fp;<br />	char * func = prof_func;<br />	FILE *kmap;<br />	int current_symbol_value , next_symbol_value;<br />	char current_symbol[80] , next_symbol[80];<br />	int has_read , total = 0, j;<br /><br />	if (argc == 2)<br />		func = argv[1];<br /><br />	fp = open("/proc/profile", O_RDONLY);<br />	if (fp &lt; 0) {<br />		perror("/proc/profile");<br />		exit(1);<br />	}<br />	kmap = fopen("/System.map","r");<br />	if (!kmap) {<br />		kmap = fopen("/usr/src/linux/System.map","r");<br />		if (!kmap) {<br />			perror("System.map");<br />			exit(1);<br />		}<br />	}<br />	fscanf(kmap , "%x %*s %s\n" , &amp;current_symbol_value , current_symbol );<br />	fscanf(kmap , "%x %*s %s\n" , &amp;next_symbol_value , next_symbol );<br />	puts(func);<br /><br />	for (;;) {<br />		unsigned int buffer[(next_symbol_value - current_symbol_value) &gt;&gt; CONFIG_PROFILE_SHIFT];<br />		unsigned int tiempo = 0;<br /><br />		if (next_symbol_value == current_symbol_value) {<br />			strcpy(current_symbol, next_symbol);<br />			fscanf(kmap, "%x %*s %s\n", &amp;next_symbol_value, next_symbol);<br />			continue;<br />		}<br />		lseek (fp , sizeof(unsigned int)+current_symbol_value-0xc0100000 , SEEK_SET);<br />		has_read = read (fp , buffer , sizeof(buffer) );<br />		for ( j = 0 ; j &lt; has_read/sizeof(unsigned int) ; j++) {<br />			if (!strcmp(func, current_symbol))<br />				printf("%08x %d\n", j*4+current_symbol_value, buffer[j]);<br />			tiempo += buffer[j];<br />		}<br />		if (tiempo != 0) {<br />			do_symbol(tiempo, current_symbol_value, current_symbol);<br />			total += tiempo;<br />		}<br />		if (has_read &lt; (next_symbol_value -current_symbol_value)<br />				&gt;&gt; CONFIG_PROFILE_SHIFT * sizeof(unsigned long) || <br />			next_symbol_value == current_symbol_value )<br />			break;<br />		strcpy ( current_symbol , next_symbol );<br />		current_symbol_value = next_symbol_value;<br />		fscanf(kmap , "%x %*s %s\n" , &amp;next_symbol_value , next_symbol );<br />	}<br />	do_symbol(total, 0, "total");<br />	show_symbols(total);<br />	return(0);<br />}<br /><br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
