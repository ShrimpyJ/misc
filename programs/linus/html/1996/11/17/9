    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/11/17/9">First message in thread</a></li><li class="origin"><a href="/lkml/1996/11/17/41">Linus Torvalds</a><ul><li><a href="/lkml/1996/11/17/41">Illuminati Primus</a><ul><li><a href="/lkml/1996/11/17/57">"Adam D. Bradley"</a><ul><li><a href="/lkml/1996/11/17/59">Illuminati Primus</a></li><li><a href="/lkml/1996/11/17/72">Neil Moore</a></li></ul></li></ul></li><li><a href="/lkml/1996/11/18/61">(Kristian =?ISO-8859-1?Q?K=F6hntopp?=)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Nov 1996 09:56:49 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Glitch in sys_chroot()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br /><br />On Fri, 15 Nov 1996, Alan Cox wrote:<br />&gt; <br />&gt; Changing chroot, and being able to discard all existing directory handles<br />&gt; is part of being able to build a secure subenvironment for users to play in.<br /><br />But security is only _one_ issue with "chroot()".<br /><br />There are actually other uses for chroot(), like just creating a temporary<br />environment that gives another view of the system. It doesn't have to be<br />security-oriented per se, it can be used more to just have two independent<br />environments for working.<br /><br />In some cases you'd _want_ to be able to move between environments. <br />Focusing on only security is silly: the whole basic design of UNIX is to<br />allow the user to do what he wants, not to make it harder to do "strange" <br />things. <br /><br />For example, when Linux/alpha got ELF libraries, the first test-<br />environment was done under chroot. Not due to security at all, but in<br />order to install a new set of binaries without having to throw the old<br />(stable) set away. For that kind of chroot() use it would have been<br />positively detrimental to make chroot() do anything more than it does now.<br /><br />Just as an example, with the current chroot() behaviour we can do stuff<br />like this:<br /><br /> - install a new test-gcc in a chroot environment<br /> - compile programs _outside_ the chroot-environment with<br /><br />	change_root /gcc /usr/bin/gcc file.c -o file.o<br /><br />and magically it all works correctly: the compiler (and all header files:<br />/usr/include etc) come from the chroot'ed environment, while the "file.c"<br />and "file.o" files are from _outside_ the chroot() environment exactly<br />because we do not change the current working directory.<br /><br />In short, if you look at chroot() as only a security feature, you're<br />missing a lot of the implications of chroot(). I'm not so stupid that I'd<br />limit a very useful system call only because there are stupid programs out<br />there that can't do a "chdir()" at the same time as chroot. <br /><br />So until somebody comes up with a GOOD argument for doing chdir() <br />automatically, this discussion is ended. Please think of ALL the<br />implications, and don't concentrate on just one small part of the system<br />(security). <br /><br />As I said, security isn't trivial, and anybody who thinks he can get rid<br />of security holes by trivial fixes is very naive indeed. Sure, you can<br />make any system secure by disabling useful features, but that's just plain<br />stupid. <br /><br />Just to show exactly HOW stupid this whole discussion is, here's inane<br />argument #1: "The suid/sgid bits are the main source of security holes, so<br />why don't we disable those altogether, and then we'll have a secure<br />system".<br /><br />I'm not that stupid, <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
