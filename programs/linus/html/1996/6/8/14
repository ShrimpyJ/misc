    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/6/7/97">First message in thread</a></li><li><a href="/lkml/1996/6/7/97">Jamie Lokier</a><ul><li class="origin"><a href="/lkml/1996/6/8/22">Linus Torvalds</a><ul><li><a href="/lkml/1996/6/8/22">Hans Lermen</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 8 Jun 1996 12:30:48 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Securely removing the LDT restrictions (was: DOS4WG under dosemu)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sat, 8 Jun 1996, Jamie Lokier wrote:<br />&gt; <br />&gt; Linus, a patch is enclosed preceded by plenty of explanation.<br />&gt; <br />&gt; The idea is to securely allow LDT entries that cover any address range,<br />&gt; which appears to be required by some software running under dosemu.<br />&gt; Notably, DOS4/GW which is used by many popular games, and some graphics<br />&gt; software using DJGPP.  Disregard or use as you wish.  Ta.<br /><br />Disregard.<br /><br />DEFINITELY.<br /><br />The page table changes are ok, and I'll probably do that for 2.1 <br />regardless for other reasons. The kernel page tables have the USER bit <br />set for purely historical reasons that aren't true any more.<br /><br />However, the idea to just get rid of the LDT sanity check is just silly. <br />Just make sure _before_ the system call that the application doesn't get <br />the full segment it's asking for: if it's not going to use the whole <br />segment anyway (like you claim), then there is no reason to give it the <br />segment in the first place.<br /><br />In short, the change to make the kernel accept bad segments simply <br />doesn't make sense. Rethink your needs.<br /><br />&gt; Note that without this, your emumodule hack to simply remove the LDT<br />&gt; restriction for root means that anyone can hack the kernel if they can<br />&gt; run dosemu.  They just run the kernel-scrubbing DPMI client of their<br />&gt; choice.<br /><br />Also, I'd suggest people re-think the whole emumodule stuff. It seems it's<br />all totally broken wrt LDT handling, and it's doing the wrong things with <br />no regard to security of good taste. <br /><br />If you want to emulate DOS so well that you have an insecure system, why <br />the hell do you want to have Linux in the first place? <br /><br />Ok, I've told some people about this already (Hi Hans), but let me spell <br />it out once more for those that haven't heard my position on it before.<br /><br />The emumodule does lots of things that are totally broken.<br /><br />This LDT stuff, for example, is so damn STUPID, that I can't really see <br />why you are doing it this way in the first place.<br /><br />Dosemu people GET YOUR ACT TOGETHER! Don't do something just because it <br />fixes some silly problem you have, THINK about it first! Are you all <br />microsoft programmers?<br /><br />For example, the mapping of the kernel LDT into user space with the <br />emumodule stuff. That is so stupid that it makes a grown man cry..<br /><br />The _real_ way to handle this is that your DPMI stuff does something like <br />this when a program asks for a new segment:<br /><br /> - cache the LDT in USER space. Don't ask the kernel to do it for you: <br />   you know what you want the LDT to contain, so _you_ should keep track <br />   of the read-only segment descriptor table. The kernel keeps track of <br />   it's own version of the LDT, and you shouldn't mess with that.  Judicious<br />   use of "mmap/mprotect/shmem" recommended to change your local cached <br />   copy while still make it read-only to the DPMI client.<br /><br /> - do the kernel "set_ldt()" system call, and modify the parameters to be <br />   safe _first_ so that it works with the kernel even though the kernel <br />   checks that your parameters make sense). If you want to, you can use <br />   the "unsafe" version in your local LDT cache (the one that the kernel <br />   doesn't need to know anything about), so if the program then checks <br />   what the LDT looks like it thinks it got the same segment it asked for <br />   (but in _real_ life the kernel has the "safe" version).<br /><br />Note, the above needs _no_ kernel support, and no emumodule braindamage.<br /><br />In short, if you want to map in the LDT into user space, do it by hand. <br />Don't go crying for the kernel to do it - you have complete control over <br />the LDT anyway, so it doesn't make sense to have the kernel map in the <br />LDT read-only into user space because that would be just telling you <br />something you know already. You can create the user mapping by hand in <br />the same routine that does the kernel system call.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
