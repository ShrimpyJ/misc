    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/7/23/37">First message in thread</a></li><li><a href="/lkml/1996/7/23/37">(Peeter Joot)</a><ul><li><a href="/lkml/1996/7/25/21">Alan Cox</a></li><li><a href="/lkml/1996/7/25/35">"Stephen C. Tweedie"</a></li><li><a href="/lkml/1996/7/24/21">Xavier Leroy</a><ul><li><a href="/lkml/1996/7/25/4">(Peeter Joot)</a></li><li><a href="/lkml/1996/7/24/24">Richard Gooch</a></li></ul></li><li class="origin"><a href="/lkml/1996/7/26/40">Linus Torvalds</a><ul><li><a href="/lkml/1996/7/26/40">"Y. Zhu"</a><ul><li><a href="/lkml/1996/7/26/28">"Y. Zhu"</a></li><li><a href="/lkml/1996/7/26/71">"William E. Roadcap"</a><ul><li><a href="/lkml/1996/7/27/5">Derrik Pates</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 24 Jul 1996 06:23:58 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: newly released clone() based pthreads package</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 22 Jul 1996 joot&#64;vnet.ibm.com wrote:<br />&gt; <br />&gt; I haven't really looked into the kernel scheduler code, but was<br />&gt; wondering about ways to get rid of some of the extra overhead<br />&gt; incurred context switching between two clone() based threads of the<br />&gt; same process.<br /><br />Already done, actually. The overhead for context switching between <br />threads is minimal: on the x86 this is handled by the hardware (no TLB <br />flush when the page table pointers match), on other architectures (alpha, <br />sparc), the context switch routines notice it automatically.<br /><br />The only thing that needs doing is to give some "bonus points" for the <br />scheduling code to threads that share the same mm space, in order for the <br />scheduler to know that it should prefer scheduling threads after each <br />other because the switch is low-overhead. This is trivial to do, look at <br />the "goodness()" function in kernel/sched.c, where it does something like <br />this:<br /><br />	/* .. and a slight advantage to the current process */<br />	if (p == prev)<br />		weight += 1;<br /><br />which should probably be<br /><br />	/* .. and a slight advantage to same VM setup */<br />	if (p-&gt;mm == prev-&gt;mm)<br />		weight += 1;<br /><br />but I haven't actually tried that out..<br /><br />&gt; There are probably some changes that could be made to the kernel to<br />&gt; lower the overhead of switching between two threads of the same<br />&gt; process.  The one that I can think of is sharing of all thread invariant<br />&gt; task_struct data.  When the clone() ( do_fork() ) routine is called<br />&gt; a new struct task_struct is allocated, and the clone()'ing process's<br />&gt; entire task_struct is copied.<br /><br />No. Only the per-thread data is copied, and the thread-invariant stuff is<br />already shared. Look at the "struct mm_struct", "struct files_struct" and<br />"struct signal_struct" etc pointers in the task structure. A clone() that<br />shares those structures just increments a usage pointer instead of copying<br />anything. <br /><br />In short, the kernel should do all of this correctly already, the only thing<br />lacking is the testing part (and as a part of testing people may find some<br />things that could be handled better, I hope the pthreads interface will allow<br />more people to test this all out). <br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
