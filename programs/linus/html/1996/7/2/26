    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/7/2/18">First message in thread</a></li><li><a href="/lkml/1996/7/2/18">"Leonard N. Zubkoff"</a><ul><li class="origin"><a href="/lkml/1996/7/2/25">Linus Torvalds</a><ul><li><a href="/lkml/1996/7/2/25">"Leonard N. Zubkoff"</a><ul><li><a href="/lkml/1996/7/2/24">Linus Torvalds</a><ul><li><a href="/lkml/1996/7/2/59">Chris Evans</a></li><li><a href="/lkml/1996/7/2/83">"Leonard N. Zubkoff"</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/7/2/75">"Jonathan H. Pickard"</a><ul><li><a href="/lkml/1996/7/2/86">"Leonard N. Zubkoff"</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 2 Jul 1996 10:33:47 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SCSI device numbering (was: Re: Ideas for v2.1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Mon, 1 Jul 1996, Leonard N. Zubkoff wrote:<br />&gt; <br />&gt;   So something like this:<br />&gt;    - one major number for each SCSI bus (= usually one controller)<br />&gt;    - 4 (8?) bits SCSI ID<br />&gt;    - 7 bits SCSI LUN<br />&gt;    - 4 bits partition information<br />&gt;    - ???<br />&gt; <br />&gt; Yuk.  Why should the dev_t need to encode these subsystem specific details?<br /><br />This wouldn't be a "dev_t" issue: as far as the _rest_ of the kernel is <br />concerned, dev_t is just a 32-bit number. That goes without saying: I <br />will totally ignore any patches that try to force any "regular" stuff on <br />the device numbers. <br /><br />What I mean above is just what the SCSI drivers would use _internally_. <br />External to the SCSI drivers, nothing even knows or cares..<br /><br />(We do want some kind of SCSI rules for the minor numbers, because we <br />want the device numbers to at least look _similar_ even if we change <br />controllers. But this is really internal to SCSI, not a "kernel" issue <br />per se).<br /><br />&gt; I'd much rather see:<br />&gt; <br />&gt;     - 12 bits for the major number of each device type pretty much as we<br />&gt;       have now.<br />&gt;       (device types are the things that have a common set of properties)<br />&gt;     - 16 bits for an index into a dynamically allocated dense array of<br />&gt;       pointers to objects of that type<br />&gt;     -  4 bits for partition information or other specialization<br /><br />NO! You seem to expect the kernel to actually care. The kernel should <br />_not_ care at all about the actual layout of the device numbers. If some <br />laser-guided-missile driver wants to use the 20 bit minor number for <br />targeting information, it can do so. The kernel doesn't care.<br /><br />We're discussing only how the _internals_ of the SCSI layer decode the <br />number it gets passed. For the rest of the kernel, there just needs to be <br />some simple interface to get some specific information, for example <br />something like:<br /><br />	unsigned long dev_size(kdev_t);	/* 512-byte sectors */<br />	int dev_readonly(kdev_t);	/* readonly: != 0 */<br />	int check_disk_change(kdev_t);	/* disk change info */<br /><br />and then how the actual device lookup is done should be done in the <br />driver (just add a few fields to the "struct device_struct", and let the <br />drivers fill them in at register time, the same way it fills in the <br />"struct file_operations *" fields).<br /><br />&gt; I think that it's the *devices* that are the central objects here, not their<br />&gt; implementation on specific SCSI channels.  I don't see any reason that a dev_t<br />&gt; needs to map directly to any SCSI details.  Each SCSI Device can refer to the<br />&gt; specific bus, the driver that handles that bus, and whatever details are<br />&gt; necessary to address that device.<br /><br />There is no need at all to even discuss internals of "dev_t" without <br />specifying a driver: "dev_t" _has_ no internals (apart from the number of <br />bits for major/minor numbers, and even that is mainly just a interface <br />issue) on it's own. Only when talking about a specific driver does it <br />make sense to try to specify what the numbers mean.<br /><br />And the numbers _will_ differ from driver to driver: IDE disks use 6 bits <br />for partition information, while the floppy driver uses no bits at all, <br />and instead uses 2 bits for specifying which floppy and 6 bits for <br />specifying floppy type. I'm not going to accept any patches that try to <br />"regularize" this - making up rules just for the fun of having rules <br />makes no sense.<br /><br />HOWEVER, within the SCSI subsystem we _do_ need to have some rules, <br />because a user that changes his SCSI controller from a NCR controller to <br />a BusLogic controller does _not_ want his /dev setup to change: his disks <br />didn't change. So for SCSI it makes sense to make some rules for how the <br />drivers should interpret the minor numbers.<br /><br />&gt; I think 65536 devices of each type is probably sufficient for the moment.  If<br />&gt; not, we can shrink the major number a bit more.  The reason 32 bits aren't<br />&gt; enough in most of the suggestions I've seen is that we're trying to encode<br />&gt; irrelevant and unnecessary information into the minor numbers.  dev_t does not<br />&gt; need to be the way of naming devices from the user's perspective.<br /><br />dev_t _IS_ the way of naming devices when it comes to the kernel. There <br />simply _is_ no other naming. The fact that you can then do stuff like<br /><br />	mknod b 256 0x010101 /dev/scsi/id1lun1part1<br /><br />or whatever is irrelevant (although that also needs to be standardized, <br />but that is no longer a kernel issue). The same goes for the names you <br />suggested (/dev/scsi/DEC_RRD4 or whatever) - those can be generated <br />on-the-fly at boot time. But when it comes to the kernel, all of this is <br />irrelevant, and the only thing that means anything is the device number.<br /><br />The current scheme works fine, where we give device numbers _completely_ <br />dynamically. There is nothing inherently wrong with this scheme together <br />with the scripts that Eric has written to create the user-level names for <br />the devices. The reason people want to change that scheme is that it's a <br />bit _too_ dynamic: the device numbers tend to change during the lifetime <br />of the machine, even if the hardware doesn't change (just unload the <br />driver, turn off one device, re-load the driver and voila, all the <br />device numbers have changed ;-). And some other trivial setup changes <br />also tend to result in more problems than they really should.<br /><br />But if anybody thought I have been advocating some kind of "global device <br />numbers" for everything (SCSI, laser pointers, network cards, robot arms, <br />keyboards..), think again. device numbers are supposed to be just ID's <br />for the hardware, and they shouldn't have any _inherent_ properties.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
