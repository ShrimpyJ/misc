    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/7/13/16">First message in thread</a></li><li><a href="/lkml/1996/7/13/16">Eric Benson</a><ul><li><a href="/lkml/1996/7/14/24">Systemkennung Linux</a></li><li><a href="/lkml/1996/7/14/34">Drew Eckhardt</a><ul><li><a href="/lkml/1996/7/15/37">Matthias Urlichs</a><ul><li><a href="/lkml/1996/7/17/23">(Robey Pointer)</a><ul><li><a href="/lkml/1996/7/17/50">Matthias Urlichs</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/7/14/35">Matthias Urlichs</a><ul><li><a href="/lkml/1996/7/19/14">Kevin M Bealer</a></li></ul></li><li class="origin"><a href="/lkml/1996/7/15/28">Linus Torvalds</a><ul><li><a href="/lkml/1996/7/15/28">Eric Benson</a><ul><li><a href="/lkml/1996/7/16/7">Bryn Paul Arnold Jones</a></li></ul></li><li><a href="/lkml/1996/7/16/15">Adam McKee</a><ul><li><a href="/lkml/1996/7/17/2">Linus Torvalds</a><ul><li><a href="/lkml/1996/7/16/52">Adam McKee</a></li></ul></li><li><a href="/lkml/1996/7/20/21">"Stephen C. Tweedie"</a><ul><li><a href="/lkml/1996/7/20/15">Linus Torvalds</a></li><li><a href="/lkml/1996/7/24/5">(Kai Henningsen)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/1996/7/16/4">(Alan Cox)</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 14 Jul 1996 12:35:33 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Is any file system on Linux appropriate for very large directories?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Fri, 12 Jul 1996, Eric Benson wrote:<br />&gt; <br />&gt; We have an application here that uses lots of files in a single<br />&gt; directory.  At the time it was set up, it didn't seem to be a problem. <br />&gt; However, due to Amazon.com's 30 percent per month growth rate, this is<br />&gt; now getting to be a serious problem due to the time (and kernel lockup)<br />&gt; required for linear searching of directories.  (By the way, this<br />&gt; application is currently running on Suns, not on Linux, but moving it to<br />&gt; Linux is an option we are considering.)<br /><br />Ok, may I just suggest you accept the fact that large directories are <br />going to result in slower lookups, and try to overcome that using some <br />simple change to your setup?<br /><br />Now, I admit that using a hashed directory lookup strategy (or even just <br />sorted directories and binary searches or whatever) is a reasonable thing <br />to do, but on the other hand I don't feel it is necessarily the _right_ <br />thing to do. I don't think the directory structure of a filesystem is <br />necessarily meant to be a database on any larger scale, and on a smaller <br />scale there are problems with the "faster" lookup strategies (more <br />complexity, more overhead for small directories).<br /><br />&gt;					 The "right" solution to this<br />&gt; problem is to reimplement our application using a "real" database, but<br />&gt; it is possible that it could be solved simply by using a file system<br />&gt; that uses some kind of hashing for name lookup!<br /><br />The best (in my opinion) way to do the hashing is actually to do it at <br />user level. It can often be trivial, especially if your "database" has <br />simple rules governing the filenames. The obvious approach is to use the <br />tree-like structure of the directory to good advantage. That actually <br />gives you a kind of "binary lookup" but done right you can actually do it <br />with a base other than 2, and get even _better_ performance.<br /><br />The obvious examples of this are home directories or even just the <br />terminfo "database". Instead of having one directory with lots of files:<br /><br />	aardvark<br />	boa<br />	cat<br />	..<br />	zebra<br /><br />you have a directory structure with<br /><br />	a/aardvark<br />	a/..<br />	b/boa<br />	...<br />	z/zebra<br /><br />and you can expand that to any number of levels you like (and you <br />obviously don't have to do it alphabetically: you can trivially hash the <br />lookup any way you want to that suits your particular file distribution). <br />The changes for any code doing the lookups is usually pretty trivial, and <br />it scales a lot better than having just one flat directory structure.<br /><br />There are other advantages to using sub-directories too: it's a lot <br />easier expanding the database to cover multiple disks using symlinks etc. <br />And the _really_ nice part about this kind of hashing is that because <br />it's done at user level, you can make the hash suit the _application_, <br />rather than trying to have some generic hash inside the filesystem that <br />would have to suit _everything_.<br /><br />Now, the obvious downside is that you would have to change your <br />application and re-order your current database, but that can often be <br />trivial (if you do it alphabetically like above, you can write a trivial <br />shell-script to create the new directory lay-out, and changing the <br />application to use that is not likely to be a problem either).<br /><br />Another nice thing about using filesystem subdirectories this way is that <br />it's portable. It works on just about anything, ranging from DOS/Win/NT <br />to every UNIX out there and stuff like VMS etc, and you don't have to <br />worry about how the OS does lookups. (Well, you have to assume that the <br />OS supports subdirectories, and that rules out DOS 1.0, but I don't think <br />that is likely to be a real portability problem ;-)<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
