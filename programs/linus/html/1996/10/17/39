    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/10/17/27">First message in thread</a></li><li><a href="/lkml/1996/10/17/34">Linus Torvalds</a><ul><li><a href="/lkml/1996/10/17/37">Ingo Molnar</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li><li><a href="/lkml/1996/10/18/22">"Mark H. Wood"</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Oct 1996 21:29:14 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: "raw" block devices?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br />[ Last message from me on this for a while: I'm going to zonk out. But <br />  it's an interesting topic ]<br /><br />On Thu, 17 Oct 1996, Ingo Molnar wrote:<br />&gt; <br />&gt; &gt; You can handle write ordering by using a log-based database (never overwrite<br />&gt; &gt; any old data, so write ordering doesn't matter), and do a "fsync()" on the<br />&gt; &gt; file when you commit. [...]<br />&gt; <br />&gt; [ i really dont want to flame ... IMHO it's a very interesting topic which<br />&gt;   should be cleared up ]<br />&gt; <br />&gt; This brings up problems like locality. A log-based RDBMS has to give up<br />&gt; locality only because the kernel cant guarantee ordering? Log based<br />&gt; filesytems and RDBMSs write fast and read slow. [this is an access pattern<br />&gt; thing. A typical RDMBS application does more reads than writes]<br /><br />Oh, see, I personally think that the _on_disk_ organization doesn't<br />necessarily have to reflect the actual organization of the data in the<br />application (in this case the database). <br /><br />Yes, with the log-based setup, the on-disk stuff is not "nicely"  organized.<br />However, how often do you actually need to worry about that?  Because the<br />database isn't centered around the physical location of the blocks of data<br />(that's why we did the log structure in the first place), the physical disk<br />location is much less of an issue. <br /><br />Instead of doing a raw disk access, you follow a pointer in your address<br />space. Yes, that's kind of oversimplified, but I wouldn't call it completely<br />unrealistic, especially on machines with more than 40 bits of virtual memory.<br />And we all have alphas, don't we? ;)<br /><br />(yes, it gets a lot more complex if you can't assume that all the <br />database can be mapped in at one time, but people know how to address <br />those kinds of limitations)<br /><br />With the above kind of mindset, the physical database file on disk is more<br />more like a "backup for memory" than a database. The _real_ information is in<br />memory, and the only worry we have about the database is that if the<br />application (or machine) crashes, we have to be able to reconstruct it from<br />the disk image. <br /><br />&gt; So we have two conflicting constraints [if we accept the current<br />&gt; non-ordered write-cache as our only cache]: locality and ordering. I would<br />&gt; say rather lets change the cache behaviour, and lets force ordering at<br />&gt; that level. And this is how Oracle works [i might be wrong: i have never<br />&gt; seen their code, i can only judge based on documented things].<br /><br />See, my opinion is that the caches handle the locality problem.  Locality is<br />what caches are good for, after all. In this context, think of the whole<br />physical memory as a "cache" for a database that is likely to be an order of<br />magitude or more larger than the physical memory and possibly (but hopefully<br />not) larger than the virtual memory, not just a few disk block caches. So the<br />"cache" for the file is really all of the physical pages that are currently<br />mapped in the process. <br /><br />And the ordering is obviously handled by the log file. <br /><br />Now, you obviously want to re-organize the log-file every once in a while, to<br />"defragment" it etc. But that's something you'd do anyway (it's called<br />"making backups" with traditional databases, you just make sure that the new<br />copy is written out in a saner manner than the original fragmented file ;)<br /><br />Again, I'd very much like to point out that datasbes is NOT my area of<br />expertise. I might have missed something fundamental, but I don't see the<br />error of my ways at least immediately. <br /><br />			Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
