    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/10/17/1">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Oct 1996 07:51:13 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Linux-2.1.4</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 16 Oct 1996, Theodore Y. Ts'o wrote:<br />&gt; <br />&gt;    Trust me, the new code still _is_ snappier than just about everything. In<br />&gt;    fact, I can more-or-less guarantee that it cannot be done faster than we do<br />&gt;    it now (modulus some localized optimizations).  But the new code is also<br />&gt;    _different_ than the old code, and doing loops a byte at a time<br />&gt;    degraded from just "stupid" (in 2.0.x) to outright "insane" (in 2.1.x). <br />&gt; <br />&gt; Well, the tty layer code does this all over, mostly to avoid the number<br />&gt; of copies that it needed to make --- remember, for the tty code a "byte"<br />&gt; is the natural size that you generally want to work with.  (For an i386<br />&gt; running at 40MHz, that is the fastest way to do things; I can understand<br />&gt; that on an Alpha w/o byte instructions, it might be much more painful.)<br />&gt;<br />&gt; So will it be faster now to copy everything from userspace into a kernel<br />&gt; "bounce buffer" first, instead of fetching things from user space one<br />&gt; byte at a time?   That seems counter-intuitive, since traditionally the<br />&gt; way you get speedups is to *reduce* the number of memory copies while<br />&gt; going through a network or tty layer....<br /><br />Don't worry. Byte sized accesses aren't really _that_ expensive. In places<br />where byte-sized copies are natural (and I'd agree that the tty layer<br />certainly counts as one) just continue to use them. After all, the tty layer<br />tends to do some operations on those bytes, so it's actually _logical_ to get<br />them as bytes rather than in larger blocks. <br /><br />The places I reacted against were not places like the tty layer, but places<br />that really don't do "byte" operations in the first place. The ELF loader<br />really does a "memset()", which is definitely not a byte-at-a-time operation<br />except for the most stupid implementation. Similarly, most fast "strncpy()"<br />implementations tend to do word copies and do various tricks to find the zero<br />in the word.  And I'm not talking about the kernel implementation here:  I'm<br />talking about optimized _libc_ implementations. <br /><br />Note that the overhead of "get_user()" is something like 10 assembler<br />instructions.  It's NOT a costly operation in itself, but the instructions do<br />add up if you keep on doing them ;)<br /><br />In short: if you actually do some _operation_ on the byte or word you're<br />fetching, the 10 instructions to fetch it are generally not the problem, and<br />doing double-buffering would only complicate the code more (certainly more<br />than 10 instructions). It's only if you're doing things like area copies or<br />clears that byte-wise operations are really silly, because there is obviously<br />a much better way to do them. <br /><br />(And I wouldn't worry about an alpha keeping up with the tty layer. Trust <br />me, most alpha's have no problem at all with keeping up ;)<br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
