    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/10/17/28">First message in thread</a></li><li class="origin"><a href="/lkml/1996/10/17/29">Linus Torvalds</a><ul><li><a href="/lkml/1996/10/17/29">Matti Aarnio</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 17 Oct 1996 19:00:06 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Could this become a race condition?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 16 Oct 1996, Matti Aarnio wrote:<br />&gt; <br />&gt; &gt; Hi,<br />&gt; &gt; <br />&gt; &gt; in /usr/src/linux/include/linux/locks.h of kernel 2.0.21, I can see :<br />&gt; &gt; <br />&gt; &gt; extern inline void lock_super(struct super_block * sb)<br />&gt; &gt; { <br />&gt; &gt;         if (sb-&gt;s_lock)<br />&gt; &gt;                 __wait_on_super(sb);<br />&gt; &gt;         sb-&gt;s_lock = 1;<br />&gt; &gt; }<br />&gt; ...<br />&gt; .. is there a deadlock ? ..<br />&gt; ...<br />&gt; &gt; Is there any way to avoid that?<br />&gt; <br />&gt; 	Yes. Yes:<br />&gt; <br />&gt; 		while (set_bit(1,&amp;sb-&gt;s_lock) != 0)<br />&gt; 			__wait_on_super(sb);<br />&gt; <br />&gt; 	While the old value of the s_lock is non-zero, call<br />&gt; 	__wait_on_super(), else leave with s_lock set.<br />&gt; 	See &lt;asm/bitops.h&gt; for the routines.<br /><br />Actually, the old code is not a race condition, because "sb_lock" is only <br />modified in a "process context" and never from interrupts. As such, the <br />general non-re-entrancy of the kernel will guarantee that you can do <br />"atomic" operations like the above without using the setbit() etc atomic <br />stuff<br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
