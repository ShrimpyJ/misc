    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/10/20/12">First message in thread</a></li><li><a href="/lkml/1996/10/20/12">Kai Schulte</a><ul><li><a href="/lkml/1996/10/20/17">(H. Peter Anvin)</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 28 Oct 1996 21:27:20 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: get_user()</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 20 Oct 1996, Kai Schulte wrote:<br />&gt; <br />&gt; Is getting rid of all the get_fs_...() macros really an improvement?<br /><br />Note that when it comes to the "get_fs_xxx()" and "put_fs_xxx()", the new<br />setup just changes the names of those to something saner. The old names were<br />really very implementation-specific, and only made sense on an x86 as long as<br />we really used the %fs segment register for user space access. <br /><br />So there is really two issues here:<br /> - changing the name to something saner<br /> - getting "automatic" validity checking (ie getting rid of "verify_area()")<br /><br />The name change actually started even before Linux-1.2, I just made it final<br />now (so that the old names don't exist any more: they used to exist in<br />parallell with the new ones). <br /><br />So don't think of the change as "getting rid of get_fs...()", think of it as<br />"renaming get_fs..() and getting rid of verify_area()". <br /><br />&gt; I don't know whether the get_user() macro really hides any ugliness, because<br />&gt; <br />&gt;  1. you have to be aware of the fact that it's a macro because it alters one <br />&gt;     of its parameters and<br /><br />Yes. I'd _love_ to have more of a function-call interface, but I didn't find<br />any way to do that efficiently. The problem withg get_user() is that it <br />really needs to return two values: the error return and the actual value <br />it got from user space. Now, the "normal" way to handle this in C is to <br />do something like<br /><br />	error = get_user(&amp;val, address);<br /><br />but sadly that is rather inefficient (it adds two memory accesses: the store<br />and the load to access the value, but more importantly it makes it much<br />harder for gcc to optimize due to the damn C pointer-aliasing problem). <br /><br />So I decided I had to make it a macro that returns a value and sets the first<br />argument, and no, I don't like it. It's ugly, and it also makes for a rather<br />complicated implementation of the macro (especially as we still want to allow<br />side effects in the address: stuff like "p++" etc). <br /><br />On x86, we could have returned two return variables in a structure, but on<br />other architectures the structure return approach will just result in<br />allocating memory on the stack. With this kind of macro the different<br />architectures can pretty much decide what they want to do about this all, and<br />it should map reasonably well into inline __asm__ which is what most (all?)<br />architectures will use. <br /><br />&gt;  2. you _should_ probably remain aware that performance may be<br />&gt;     type-dependent.<br />&gt;<br />&gt; Or are there other aspects that are more important?<br /><br />There is one all-important reason why we hide all the type information, and<br />let the macro take care of it automatically. <br /><br />Type portability. <br /><br />For example, "uid_t" is a "short" in x86, and a "int" on alpha. So when <br />there is something that wants to store a uid_t into user space, the old <br />code would have had to do something like this:<br /><br />	#ifdef uid_is_short<br />		put_fs_short(uid, uid_ptr);<br />	#else<br />		put_fs_int(uid, uid_ptr);<br />	#endif<br /><br />Contrast this to the current code:<br /><br />		put_user(uid, uid_ptr);<br /><br />which automatically does the right thing by looking at the "sizeof(*uid_ptr)". <br /><br />So the complexity in the access macros is certainly needed. The actual macro<br />definitions look ugly, and I can't say I enjoy writing them, but at least all<br />the complexity and ugliness is hidden in a few machine-specific header files,<br />and using the macros shouldn't be too hard. <br /><br />		Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
