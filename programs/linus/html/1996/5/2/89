    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/5/2/1">First message in thread</a></li><li><a href="/lkml/1996/5/2/1">(Thomas =?ISO-8859-1?Q?K=F6nig?=)</a><ul><li><a href="/lkml/1996/5/2/68">Andrew Tridgell</a><ul><li><a href="/lkml/1996/5/3/16">Alan Cox</a></li></ul></li><li class="origin"><a href="/lkml/1996/5/3/20">Linus Torvalds</a><ul><li><a href="/lkml/1996/5/3/20">Alan Cox</a></li><li><a href="/lkml/1996/5/3/57">(Wolfram Gloger)</a></li><li><a href="/lkml/1996/5/4/29">"Christopher J. Shaulis"</a><ul><li><a href="/lkml/1996/5/6/24">Linus Torvalds</a><ul><li><a href="/lkml/1996/5/11/17">Tom May</a></li></ul></li></ul></li><li><a href="/lkml/1996/5/5/1">"Patrick J. LoPresti"</a></li><li><a href="/lkml/1996/5/6/20">(Ben Wing)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 2 May 1996 08:41:14 +0300 (EET DST)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: clone() and pthreads?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 1 May 1996, Thomas =?ISO-8859-1?Q?K=F6nig?= wrote:<br />&gt; <br />&gt; what's clone() doing these days?  One guy claimed (via E-Mail) that<br />&gt; he'd written a clone()-based pthreads package, but didn't answer<br />&gt; when I asked him where I could get it for testing.<br />&gt; <br />&gt; Does anybody know anything about this?  Is clone() stable enough<br />&gt; for this kind of thing?<br /><br />Essentially, development on clone() stopped, because nobody was using it <br />and I couldn't get people to even try, and send me reports. I sent out a <br />silly test-program (which has shown up a couple times since then) that <br />should give technical people a starting point - certainly if somebody <br />would know enough to implement pthreads some other way they should have <br />no problem understanding that small code-fragment.<br /><br />Essentially, the current status of clone() is that the code does work, <br />and it's used extensively inside the kernel itself, both for kernel <br />threads and for the normal "fork()" system call. As such, it should be <br />stable enough to do some real work on.<br /><br />HOWEVER, it's not 100% completed, and I won't really be working on it <br />unless somebody actually starts to use it for some real project. There <br />are two notable problems with the current implementation:<br /><br /> - file descriptor locking. Currently, if you share file descriptors <br />   among multiple processes (CLONE_FILES), and one process does a close() <br />   on a file descriptor while another process is using that descriptor <br />   for a read(), for example, the kernel can get rather upset.<br /><br />   Fixing this is trivial - the file descriptors already have the usage <br />   counters required to keep track of this, it's just that they aren't <br />   used for this kind of thing yet because with the traditional fork()<br />   semantics this case can't happen.  The patches would be scattered over <br />   a number of files, but they would be otherwise pretty trivial.<br /><br /> - VM area locking.  This is essentially the same as above, except it's a <br />   case of one process unmapping a vm area while it's being used by <br />   another process. Again the kernel doesn't test for that, and doesn't <br />   like it.<br /><br />   Fixing this is not as trivial: there are many ways to handle this, and <br />   there is no clear-cut "best way". It's not fundamentally hard, but it <br />   requires some thought.<br /><br />Anyway, both the problems are of the type "test for things that a <br />well-behaved program shouldn't be doing", so they should not impact good <br />processes, and as such the current implementation of clone() should be <br />good enough for testing. That's why I haven't bothered about it lately: <br />the fact that nobody has shown more than a lukewarm theoretical interest <br />means that I haven't felt that there was any reason to concentrate on <br />something that people don't really seem to be interested in.<br /><br />I still feel that "clone()" is the correct interface to use, and while a <br />full pthreads library would require user support _too_, clone() would <br />give the possibility to run the program on multiple CPU's in a SMP <br />environment, and also allows the pthreads library to do truly <br />asynchronous operations (instead of using a select() loop). But I'll <br />readily admit that using clone() is not trivial, partly because threaded <br />programs (with "real" asynchronous threading) are not simple to write.<br /><br />I'd be more than happy if somebody comes up with a real use for clone(), <br />and starts sending me problem reports.<br /><br />		Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
