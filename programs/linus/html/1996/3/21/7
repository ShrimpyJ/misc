    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/3/20/75">First message in thread</a></li><li><a href="/lkml/1996/3/20/75">Aaron Crane</a><ul><li class="origin"><a href="/lkml/1996/3/21/12">Linus Torvalds</a><ul><li><a href="/lkml/1996/3/21/12">"Leonard N. Zubkoff"</a></li><li><a href="/lkml/1996/3/24/17">(Kai Henningsen)</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 21 Mar 1996 08:35:10 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: rmdir system call</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Wed, 20 Mar 1996, Aaron Crane wrote:<br />&gt; <br />&gt; Ulrich Windl &lt;Ulrich.Windl&#64;rz.uni-regensburg.de&gt; wrote:<br />&gt; <br />&gt; &gt; &gt; Should you be able to call rmdir with a trailing '/'?<br />&gt; &gt; <br />&gt; &gt; Traditionally its invalid, but I think POSIX allows it to support <br />&gt; &gt; more stupid programs; therefore "//bin", "/usr//bin", and "/etc/" <br />&gt; &gt; should all be valid directory names; maybe even combinations of <br />&gt; &gt; these.<br /><br />I don't think POSIX allows it at all. What POSIX says (this is from <br />memory) is roughly that a empty filename component is to be interpreted <br />as a ".", with the exception of empty components at the start of a path <br />which are system-dependent.<br /><br />What that means is that<br /><br />	//ftp/tsx-11.mit.edu/pub/xx<br /><br />is not necessarily the same as<br /><br />	/ftp/tsx-11.mit.edu/pub/xx<br /><br />but two slashes anywhere else are ok (/tmp////x == /tmp/x)<br /><br />This is traditional UNIX behaviour, and the reason for the special case <br />for the start of the path was that some UNIX implementations have used a <br />initial "//" to mean that we move to another name space (for example, for <br />network names).<br /><br />Personally, I think that the initial // behaviour is totally broken, <br />because it's against the whole unix philosophy of having a unified file <br />system name space, but we don't really need to care about it, and linux <br />handles that the "correct" way (as do just about all the other "normal" <br />unixes out there).<br /><br />Anyway, to finally get to the point, POSIX doesn't specify much about <br />trailing slashes, and leaves that question open. Linux considers such <br />a pathname (eg "/tmp/") to have an implicit "." at the end, so when you <br />do a "mkdir("/tmp/")" linux thinks you try to create a zero-length <br />filename in the "tmp" directory, and a zero-length filename is the same <br />as ".", so it doesn't work. <br /><br />The linux interpretation is legal as far as I know (I think there are <br />other unixes that do it the same way), and it also has the added bonus of <br />being the logical thing to do. Because a rmdir("/tmp/") system call <br />really _does_ ask the kernel to remove the zero-length filename "" from <br />the /tmp directory. It does _not_ ask to remove the tmp directory itself.<br /><br />&gt; Yeah, point taken, but if we put that code into the kernel, then it only <br />&gt; has to exist in one place.  If we require it to be done by user code then <br />&gt; every user program has to check (for example) paths supplied by the user <br />&gt; for extra occurrences of /.  Anyway, if Posix says so, it *must* be a good <br />&gt; idea ;).  Alternatively, perhaps /- stripping could go into libc instead.  <br />&gt; Opinions, anyone?<br /><br />I'll never do slash stripping in the kernel, and that's pretty final <br />(but see later about standards). The library is another matter, but whether <br />it's a good diea is debatable. I personally don't think it's a good idea, at <br />least until some standard _requires_ us to do it (and then I might as well <br />do it in the kernel, but I don't have to like it).<br /><br />			Linus<br /><br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
