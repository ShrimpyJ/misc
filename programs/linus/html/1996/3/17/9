    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/1996/3/17/9">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/1996/3/17/9/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1305798" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 17 Mar 1996 09:10:04 +0200 (EET)</td></tr><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Math Coprocessor !</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody"><br /><br />On Sun, 17 Mar 1996, Amitay B Isaacs wrote:<br />&gt;<br />&gt;    After applying the patches 74 and 75 the kernel does not set the math<br />&gt; coprocessor properly. It gives following message.<br />&gt; <br />&gt; Checking 386/387 coupling... 387 failed: trying to reset<br />&gt; <br />&gt;   While 1.3.72 does not give any problem, report normal ! (no info on 73)<br />&gt; <br />&gt; Checking 386/387 coupling... Ok, fpu using old IRQ13 error reporting<br /><br />Thanks, this was a silly thinko on my part. Surprising that it worked at <br />all - here is a patch that hopefully fixes it (untested, please do tell <br />if it works for you)<br /><br />		Linus<br />-----<br />diff -u --recursive --new-file v1.3.75/linux/arch/i386/kernel/irq.c linux/arch/i386/kernel/irq.c<br />--- v1.3.75/linux/arch/i386/kernel/irq.c	Sun Mar 17 09:04:04 1996<br />+++ linux/arch/i386/kernel/irq.c	Sun Mar 17 09:01:02 1996<br />&#64;&#64; -212,16 +212,15 &#64;&#64;<br /> #endif<br /> <br /> /*<br />- * IRQ0 is timer, IRQ2 is cascade interrupt to second interrupt controller<br />+ * IRQ2 is cascade interrupt to second interrupt controller<br />  */<br />-extern struct irqaction irq0;<br /> static struct irqaction irq2  = { no_action, 0, 0, "cascade", NULL, NULL};<br /> <br /> static struct irqaction *irq_action[16] = {<br />-	&amp;irq0, NULL, &amp;irq2, NULL,<br /> 	NULL, NULL, NULL, NULL,<br /> 	NULL, NULL, NULL, NULL,<br />-	NULL, &amp;irq13 , NULL, NULL<br />+	NULL, NULL, NULL, NULL,<br />+	NULL, NULL, NULL, NULL<br /> };<br /> <br /> int get_irq_list(char *buf)<br />&#64;&#64; -385,59 +384,39 &#64;&#64;<br /> 	}<br /> }<br /> <br />-int request_irq(unsigned int irq, <br />-		void (*handler)(int, void *, struct pt_regs *),<br />-		unsigned long irqflags, <br />-		const char * devname,<br />-		void *dev_id)<br />+int setup_x86_irq(int irq, struct irqaction * new)<br /> {<br /> 	int shared = 0;<br />-	struct irqaction * action, **p;<br />+	struct irqaction *old, **p;<br /> 	unsigned long flags;<br /> <br />-	if (irq &gt; 15)<br />-		return -EINVAL;<br />-	if (!handler)<br />-		return -EINVAL;<br /> 	p = irq_action + irq;<br />-	action = *p;<br />-	if (action) {<br />+	if ((old = *p) != NULL) {<br /> 		/* Can't share interrupts unless both agree to */<br />-		if (!(action-&gt;flags &amp; irqflags &amp; SA_SHIRQ))<br />+		if (!(old-&gt;flags &amp; new-&gt;flags &amp; SA_SHIRQ))<br /> 			return -EBUSY;<br /> <br /> 		/* Can't share interrupts unless both are same type */<br />-		if ((action-&gt;flags ^ irqflags) &amp; SA_INTERRUPT)<br />+		if ((old-&gt;flags ^ new-&gt;flags) &amp; SA_INTERRUPT)<br /> 			return -EBUSY;<br /> <br /> 		/* add new interrupt at end of irq queue */<br /> 		do {<br />-			p = &amp;action-&gt;next;<br />-			action = *p;<br />-		} while (action);<br />+			p = &amp;old-&gt;next;<br />+			old = *p;<br />+		} while (old);<br /> 		shared = 1;<br /> 	}<br /> <br />-	action = (struct irqaction *)kmalloc(sizeof(struct irqaction), GFP_KERNEL);<br />-	if (!action)<br />-		return -ENOMEM;<br />-<br />-	if (irqflags &amp; SA_SAMPLE_RANDOM)<br />+	if (new-&gt;flags &amp; SA_SAMPLE_RANDOM)<br /> 		rand_initialize_irq(irq);<br /> <br />-	action-&gt;handler = handler;<br />-	action-&gt;flags = irqflags;<br />-	action-&gt;mask = 0;<br />-	action-&gt;name = devname;<br />-	action-&gt;next = NULL;<br />-	action-&gt;dev_id = dev_id;<br />-<br /> 	save_flags(flags);<br /> 	cli();<br />-	*p = action;<br />+	*p = new;<br /> <br /> 	if (!shared) {<br />-		if (action-&gt;flags &amp; SA_INTERRUPT)<br />+		if (new-&gt;flags &amp; SA_INTERRUPT)<br /> 			set_intr_gate(0x20+irq,fast_interrupt[irq]);<br /> 		else<br /> 			set_intr_gate(0x20+irq,interrupt[irq]);<br />&#64;&#64; -446,6 +425,38 &#64;&#64;<br /> 	restore_flags(flags);<br /> 	return 0;<br /> }<br />+<br />+int request_irq(unsigned int irq, <br />+		void (*handler)(int, void *, struct pt_regs *),<br />+		unsigned long irqflags, <br />+		const char * devname,<br />+		void *dev_id)<br />+{<br />+	int retval;<br />+	struct irqaction * action;<br />+<br />+	if (irq &gt; 15)<br />+		return -EINVAL;<br />+	if (!handler)<br />+		return -EINVAL;<br />+<br />+	action = (struct irqaction *)kmalloc(sizeof(struct irqaction), GFP_KERNEL);<br />+	if (!action)<br />+		return -ENOMEM;<br />+<br />+	action-&gt;handler = handler;<br />+	action-&gt;flags = irqflags;<br />+	action-&gt;mask = 0;<br />+	action-&gt;name = devname;<br />+	action-&gt;next = NULL;<br />+	action-&gt;dev_id = dev_id;<br />+<br />+	retval = setup_x86_irq(irq, action);<br />+<br />+	if (retval)<br />+		kfree(action);<br />+	return retval;<br />+}<br /> 		<br /> void free_irq(unsigned int irq, void *dev_id)<br /> {<br />&#64;&#64; -535,6 +546,6 &#64;&#64;<br /> #endif	<br /> 	request_region(0x20,0x20,"pic1");<br /> 	request_region(0xa0,0x20,"pic2");<br />-	enable_irq(2);<br />-	enable_irq(13);<br />+	setup_x86_irq(2, &amp;irq2);<br />+	setup_x86_irq(13, &amp;irq13);<br /> } <br />diff -u --recursive --new-file v1.3.75/linux/arch/i386/kernel/time.c linux/arch/i386/kernel/time.c<br />--- v1.3.75/linux/arch/i386/kernel/time.c	Wed Mar 13 10:09:12 1996<br />+++ linux/arch/i386/kernel/time.c	Sun Mar 17 08:54:33 1996<br />&#64;&#64; -27,6 +27,8 &#64;&#64;<br /> #include &lt;linux/timex.h&gt;<br /> #include &lt;linux/config.h&gt;<br /> <br />+extern int setup_x86_irq(int, struct irqaction *);<br />+<br /> /* Cycle counter value at the previous timer interrupt.. */<br /> static unsigned long long last_timer_cc = 0;<br /> static unsigned long long init_timer_cc = 0;<br />&#64;&#64; -353,7 +355,7 &#64;&#64;<br /> 	return mktime(year, mon, day, hour, min, sec);<br /> }<br /> <br />-struct irqaction irq0  = { timer_interrupt, 0, 0, "timer", NULL, NULL};<br />+static struct irqaction irq0  = { timer_interrupt, 0, 0, "timer", NULL, NULL};<br /> <br /> void time_init(void)<br /> {<br />&#64;&#64; -374,5 +376,5 &#64;&#64;<br /> 		irq0.handler = pentium_timer_interrupt;<br /> 	}<br /> #endif<br />-	enable_irq(0);<br />+	setup_x86_irq(0, &amp;irq0);<br /> }<br />diff -u --recursive --new-file v1.3.75/linux/drivers/block/floppy.c linux/drivers/block/floppy.c<br />--- v1.3.75/linux/drivers/block/floppy.c	Fri Mar 15 16:03:10 1996<br />+++ linux/drivers/block/floppy.c	Sat Mar 16 23:13:55 1996<br />&#64;&#64; -175,7 +175,7 &#64;&#64;<br /> {<br /> 	int order;<br /> <br />-	size &gt;&gt;= (PAGE_SHIFT-1);<br />+	size = (size-1) &gt;&gt; (PAGE_SHIFT-1);<br /> 	order = -1;<br /> 	do {<br /> 		size &gt;&gt;= 1;<br />diff -u --recursive --new-file v1.3.75/linux/drivers/char/ftape/kernel-interface.c linux/drivers/char/ftape/kernel-interface.c<br />--- v1.3.75/linux/drivers/char/ftape/kernel-interface.c	Sun Mar 17 09:04:06 1996<br />+++ linux/drivers/char/ftape/kernel-interface.c	Sat Mar 16 23:13:55 1996<br />&#64;&#64; -89,7 +89,7 &#64;&#64;<br /> {<br /> 	int order;<br /> <br />-	size &gt;&gt;= (PAGE_SHIFT-1);<br />+	size = (size-1) &gt;&gt; (PAGE_SHIFT-1);<br /> 	order = -1;<br /> 	do {<br /> 		size &gt;&gt;= 1;<br />----------<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
