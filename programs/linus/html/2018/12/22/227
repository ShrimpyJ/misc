    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/11/2/106">First message in thread</a></li><li><a href="/lkml/2018/12/21/610">Linus Torvalds</a><ul><li><a href="/lkml/2018/12/22/218">"Theodore Y. Ts'o"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li><li><a href="/lkml/2019/1/4/532">Daniel Colascione</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 22 Dec 2018 14:47:22 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 01/12] fs-verity: add a documentation file</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Dec 21, 2018 at 8:20 PM Theodore Y. Ts'o &lt;tytso&#64;mit.edu&gt; wrote:<br />&gt;<br />&gt; On Fri, Dec 21, 2018 at 11:13:07AM -0800, Linus Torvalds wrote:<br />&gt; &gt;<br />&gt; &gt; In other words: either the model is that the file *itself* contains<br />&gt; &gt; its own merkle tree that validates the file, or it isn't. You can't<br />&gt; &gt; have it two ways. No silly "layout changes when you apply the hash"<br />&gt; &gt; garbage. That's just crazy talk and invalidates the whole model.<br />&gt;<br />&gt; Userspace applications which are reading the file aren't going to be<br />&gt; expecting Merkle tree.  For example, one of the use cases is Android<br />&gt; APK files, which are essentially ZIP files.  ZIP files can be parsed<br />&gt; both from the front-end (streaming), or by looking for the complete<br />&gt; directory of all of the files in the ZIP file by starting at the end<br />&gt; of the file and moving backwards.  If the Merkle tree was visible to<br />&gt; userspace programs that are opening and reading the file, it would<br />&gt; confuse them mightily.<br />&gt;<br />&gt; So what we do for ext4 and f2fs is make the Merkle tree invisible<br /><br />Again, this has nothing that is per-filesystem in it.<br /><br />If we were to decide to support the notion of "append merkle hashes to<br />the file for validation" at the vfs layer, the same logic would apply:<br />obviously the merkle data shouldn't be visible to user space.<br /><br />But that's not a reason to do it at a filesystem layer, quite the<br />reverse: exactly like you say, as far as the *filesystem* is<br />concerned, the data is there in the file. It's literally about the<br />*view* of the file, ie the system call interface:<br /><br />&gt;    From the *file system's* perspective,<br />&gt; though, the metadata blocks are part of the file.<br /><br />To me that only argues that this all should be at the vfs layer, and<br />that it shouldn't be the filesystem that hides it. Exactly because as<br />far as the filesystem is concerned, the merkle data is there, it's<br />just that we hide it at read (and stat) time.<br /><br />Preferably some way where it's namespace-dependent or whatever, so<br />that you could still access the original file data from user space if<br />you want to (eg some backup purpose or other).<br /><br />What I'm missing is any kind of sane explanation for why it was done<br />so badly, and why it should be upstreamed despite the apparent bad<br />implementation.<br /><br />It sounds like a complete hack.<br /><br />Again, to me either the point is that it's a generic extension of the<br />file data, _or_ it's some filesystem-specific hidden data. The way<br />you've done it and written the documentation, it's clearly a generic<br />extension of normal file data, and I don't see what's fs-specific to<br />it.<br /><br />&gt; The problem is that xattrs are designed to be accessed via a set/get<br />&gt; interface, are currently limited, IIRC at 32k.  The max size of an APK<br />&gt; is 300 megabytes; and the Merkle tree for a file that size will be<br />&gt; about 2.3 megabytes.  That's way too big to store as an xattr;<br />&gt; certainly using the existing xattr interfaces.  And it's also bigger<br />&gt; than most file systems can handle as xattrs today --- because they've<br />&gt; been optimzied for relatively small sizes, for things like SELinux<br />&gt; labels and ACL structures.<br /><br />So *this* kind of argument is what I'm looking for.<br /><br />That at least explains why it's not an xattr. Ugly, but understandable.<br /><br />&gt; &gt; So why is this sold as some unholy mess of "filesystem-specific" and<br />&gt; &gt; "generic"? That part just annoys the hell out of me. Why isn't this<br />&gt; &gt; sold as an *actual* generic model, where you just say "append the<br />&gt; &gt; merkle tree to the file, then enable verity testing of the end result<br />&gt; &gt; and validate the top-level hash".<br />&gt;<br />&gt; That was the original way it was sold, but Cristoph and Dave have<br />&gt; NACK'ed it in that form.<br /><br />That seems entirely irrelevant. What do Christoph and Dave have to do<br />with it once it's generic? It would have _zero_ filesystem component<br />if it's actually done in a generic manner. It would be a total no-op<br />to XFS.<br /><br />Which makes me think "it wasn't actually sold as being<br />filesystem-independent" at all.<br /><br />So I want to understand why this was made a filesystem operation in<br />the first place. What's fs-specific about this implementation?<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
