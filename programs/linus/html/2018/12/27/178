    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/12/26/541">First message in thread</a></li><li><a href="/lkml/2018/12/27/144">Sargun Dhillon</a><ul><li><a href="/lkml/2018/12/27/149">Vincent Guittot</a><ul><li class="origin"><a href="/lkml/2018/12/27/230">Linus Torvalds</a><ul><li><a href="/lkml/2018/12/27/230">Sargun Dhillon</a><ul><li><a href="/lkml/2018/12/27/241">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2018/12/27/305">Tejun Heo</a><ul><li><a href="/lkml/2018/12/27/310">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 27 Dec 2018 10:15:17 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] sched: fix infinity loop in update_blocked_averages</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 27, 2018 at 9:02 AM Vincent Guittot<br />&lt;vincent.guittot&#64;linaro.org&gt; wrote:<br />&gt;<br />&gt; In the original behavior, the cs_rq was removed from the list only<br />&gt; when the cgroup was removed.<br />&gt; patch a9e7f6544b9c (sched/fair: Fix O(nr_cgroups) in load balance<br />&gt; path) has added an optimization which remove the cfs_rq when there<br />&gt; were no blocked load to update in order to optimize the loop but it<br />&gt; has introduced a race condition that create this infinite loop. The<br />&gt; patch fixes the problem by removing the optimization.<br />&gt; I will look at re-adding the optimization once i will have afix for<br />&gt; the race condition<br /><br />Hmm. What's the race? We seem to take the rq lock for all the cases,<br />but maybe I'm missing something?<br /><br />That commit a9e7f6544b9c is a year and a half old, why did this start<br />being reported now?<br /><br />[ goes off and looks ]<br /><br />Oh. unthrottle_cfs_rq -&gt; enqueue_entity -&gt; list_add_leaf_cfs_rq()<br />doesn't actually seem to hold the rq lock at all. It's just called<br />under a rcu read lock.<br /><br />So it all seems to depend on that "on_list" flag for exclusion. Which<br />seems fundamentally racy, since it's not protected by a lock.<br /><br />So yeah, the whole logic seems to depend on "on_list is sticky and<br />stays set until the whole task group is destroyed".<br /><br />So commit a9e7f6544b9c ("sched/fair: Fix O(nr_cgroups) in load balance<br />path") would appear to be entirely wrong, because on_list isn't<br />actually protected by a lock, and that can confuse things.<br /><br />But that still makes me go "how come is this only noticed 18 months<br />after the fact"?<br /><br />So I'm probably still missing something.<br /><br />Tejun? PeterZ? Tell my why I'm being dense.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
