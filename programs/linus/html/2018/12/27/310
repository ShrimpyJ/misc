    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/12/26/541">First message in thread</a></li><li><a href="/lkml/2018/12/27/178">Linus Torvalds</a><ul><li><a href="/lkml/2018/12/27/230">Sargun Dhillon</a><ul><li><a href="/lkml/2018/12/27/241">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2018/12/27/305">Tejun Heo</a><ul><li class="origin"><a href="/lkml/2018/12/27/318">Linus Torvalds</a><ul><li><a href="/lkml/2018/12/27/318">Tejun Heo</a><ul><li><a href="/lkml/2018/12/27/319">Tejun Heo</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 27 Dec 2018 17:36:47 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] sched: fix infinity loop in update_blocked_averages</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Dec 27, 2018 at 5:15 PM Tejun Heo &lt;tj&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; I'm pretty sure enqueue_entity() *has* to be called with rq lock.<br />&gt; unthrottle_cfs_rq() is called from tg_set_cfs_bandwidth(),<br />&gt; distribute_cfs_runtime() and unthrottle_offline_cfs_rqs.  The first<br />&gt; two grabs the rq_lock just around the calls and the last one has a<br />&gt; lockdep assert on the rq_lock.  What am I missing?<br /><br />No, I think you're right, and I just didn't follow things deep enough,<br />didn't see any rq locking in the loop in unthrottle_offline_cfs_rqs(),<br />and didn't realize that the rq is locked by the caller.<br /><br />&gt; &gt; But that still makes me go "how come is this only noticed 18 months<br />&gt; &gt; after the fact"?<br />&gt;<br />&gt; Unless I'm totally confused, which is definitely possible, I don't<br />&gt; think there's a race condition and the only bug is the<br />&gt; tmp_alone_branch pointer getting dangled, which maybe doesn't happen<br />&gt; all that much?<br /><br />Ahh. That would explain the list corruption. The next<br />list_add_leaf_cfs_rq() could try to add to a removed entry.<br /><br />How would you reset it? Do something like<br /><br />       rq-&gt;tmp_alone_branch = &amp;rq-&gt;leaf_cfs_rq_list;<br /><br />for every removal, or make it conditional on it matching the removed entry?<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
