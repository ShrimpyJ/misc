    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/7/9/979">First message in thread</a></li><li><a href="/lkml/2018/7/13/530">Peter Zijlstra</a><ul><li><a href="/lkml/2018/7/13/634">Andrea Parri</a></li><li><a href="/lkml/2018/7/16/683">Michael Ellerman</a><ul><li><a href="/lkml/2018/7/16/964">Peter Zijlstra</a></li><li class="origin"><a href="/lkml/2018/7/17/716">Linus Torvalds</a><ul><li><a href="/lkml/2018/7/17/716">Michael Ellerman</a><ul><li><a href="/lkml/2018/7/17/878">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2018/7/18/473">Michael Ellerman</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 16 Jul 2018 12:30:07 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] tools/memory-model: Add extra ordering for locks and remove it for ordinary release/acquire</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Jul 16, 2018 at 7:40 AM Michael Ellerman &lt;mpe&#64;ellerman.id.au&gt; wrote:<br />&gt;<br />&gt; If the numbers can be trusted it is actually slower to put the sync in<br />&gt; lock, at least on one of the machines:<br />&gt;<br />&gt;               Time<br />&gt; lwsync_sync   84,932,987,977<br />&gt; sync_lwsync   93,185,930,333<br /><br />Very funky.<br /><br />&gt; I guess arguably it's not a very macro benchmark, but we have a<br />&gt; context_switch benchmark in the tree[1] which we often use to tune<br />&gt; things, and it degrades badly. It just spins up two threads and has them<br />&gt; ping-pong using yield.<br /><br />I hacked that up to run on x86, and it only is about 5% locking<br />overhead in my profiles. It's about 18% __switch_to, and a lot of<br />system call entry/exit, but not a lot of locking.<br /><br />I'm actually surprised it is even that much locking, since it seems to<br />be single-cpu, so there should be no contention and the lock (which<br />seems to be<br /><br />        rq = this_rq();<br />        rq_lock(rq, &amp;rf);<br /><br />in do_sched_yield()) should stay local to the cpu.<br /><br />And for you the locking is apparently even _more_ noticeable.<br /><br />But yes, a 10% regression on that context switch thing is huge. You<br />shouldn't do ping-pong stuff, but people kind of do.<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
