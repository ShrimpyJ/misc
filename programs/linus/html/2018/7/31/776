    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/7/31/690">First message in thread</a></li><li><a href="/lkml/2018/7/31/728">Christopher Lameter</a><ul><li><a href="/lkml/2018/7/31/731">Eric Dumazet</a><ul><li><a href="/lkml/2018/7/31/748">Dmitry Vyukov</a><ul><li><a href="/lkml/2018/7/31/755">Eric Dumazet</a></li></ul></li></ul></li><li><a href="/lkml/2018/7/31/745">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2018/8/1/216">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/1/216">Dmitry Vyukov</a><ul><li><a href="/lkml/2018/8/1/253">Dmitry Vyukov</a></li><li><a href="/lkml/2018/8/6/758">Jan Kara</a></li></ul></li><li><a href="/lkml/2018/8/1/246">Andrey Ryabinin</a><ul><li><a href="/lkml/2018/8/1/329">Eric Dumazet</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 31 Jul 2018 11:51:59 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: SLAB_TYPESAFE_BY_RCU without constructors (was Re: [PATCH v4 13/17] khwasan: add hooks implementation)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 31, 2018 at 10:49 AM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So the re-use might initialize the fields lazily, not necessarily using a ctor.<br /><br />In particular, the pattern that nf_conntrack uses looks like it is safe.<br /><br />If you have a well-defined refcount, and use "atomic_inc_not_zero()"<br />to guard the speculative RCU access section, and use<br />"atomic_dec_and_test()" in the freeing section, then you should be<br />safe wrt new allocations.<br /><br />If you have a completely new allocation that has "random stale<br />content", you know that it cannot be on the RCU list, so there is no<br />speculative access that can ever see that random content.<br /><br />So the only case you need to worry about is a re-use allocation, and<br />you know that the refcount will start out as zero even if you don't<br />have a constructor.<br /><br />So you can think of the refcount itself as always having a zero<br />constructor, *BUT* you need to be careful with ordering.<br /><br />In particular, whoever does the allocation needs to then set the<br />refcount to a non-zero value *after* it has initialized all the other<br />fields. And in particular, it needs to make sure that it uses the<br />proper memory ordering to do so.<br /><br />And in this case, we have<br /><br />  static struct nf_conn *<br />  __nf_conntrack_alloc(struct net *net,<br />  {<br />        ...<br />        atomic_set(&amp;ct-&gt;ct_general.use, 0);<br /><br />which is a no-op for the re-use case (whether racing or not, since any<br />"inc_not_zero" users won't touch it), but initializes it to zero for<br />the "completely new object" case.<br /><br />And then, the thing that actually exposes it to the speculative walkers does:<br /><br />  int<br />  nf_conntrack_hash_check_insert(struct nf_conn *ct)<br />  {<br />        ...<br />        smp_wmb();<br />        /* The caller holds a reference to this object */<br />        atomic_set(&amp;ct-&gt;ct_general.use, 2);<br /><br />which means that it stays as zero until everything is actually set up,<br />and then the optimistic walker can use the other fields (including<br />spinlocks etc) to verify that it's actually the right thing. The<br />smp_wmb() means that the previous initialization really will be<br />visible before the object is visible.<br /><br />Side note: on some architectures it might help to make that "smp_wmb<br />-&gt; atomic_set()" sequence be am "smp_store_release()" instead. Doesn't<br />matter on x86, but might matter on arm64.<br /><br />NOTE! One thing to be very worried about is that re-initializing<br />whatever RCU lists means that now the RCU walker may be walking on the<br />wrong list so the walker may do the right thing for this particular<br />entry, but it may miss walking *other* entries. So then you can get<br />spurious lookup failures, because the RCU walker never walked all the<br />way to the end of the right list. That ends up being a much more<br />subtle bug.<br /><br />But the nf_conntrack case seems to get that right too, see the restart<br />in ____nf_conntrack_find().<br /><br />So I don't see anything wrong in nf_conntrack.<br /><br />But yes, using SLAB_TYPESAFE_BY_RCU is very very subtle. But most of<br />the subtleties have nothing to do with having a constructor, they are<br />about those "make sure memory ordering wrt refcount is right" and<br />"restart speculative RCU walk" issues that actually happen regardless<br />of having a constructor or not.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
