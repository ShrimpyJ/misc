    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/7/9/979">First message in thread</a></li><li><a href="/lkml/2018/7/16/992">Linus Torvalds</a><ul><li><a href="/lkml/2018/7/17/716">Michael Ellerman</a><ul><li class="origin"><a href="/lkml/2018/7/17/974">Linus Torvalds</a><ul><li><a href="/lkml/2018/7/17/974">"Paul E. McKenney"</a><ul><li><a href="/lkml/2018/7/17/982">Peter Zijlstra</a></li><li><a href="/lkml/2018/7/17/983">Linus Torvalds</a></li><li><a href="/lkml/2018/7/17/1013">Andrea Parri</a></li></ul></li><li><a href="/lkml/2018/7/18/439">Michael Ellerman</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 17 Jul 2018 09:19:15 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] tools/memory-model: Add extra ordering for locks and remove it for ordinary release/acquire</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Jul 17, 2018 at 7:45 AM Michael Ellerman &lt;mpe&#64;ellerman.id.au&gt; wrote:<br />&gt;<br />&gt;<br />&gt; Interesting. I don't see anything as high as 18%, it's more spread out:<br />&gt;<br />&gt;      7.81%  context_switch  [kernel.kallsyms]  [k] cgroup_rstat_updated<br /><br />Oh, see that's the difference.<br /><br />You're running in a non-root cgroup, I think.<br /><br />That also means that your scheduler overhead has way more spinlocks,<br />and in particular, you have that<br /><br />        raw_spinlock_t *cpu_lock = per_cpu_ptr(&amp;cgroup_rstat_cpu_lock, cpu);<br />        ..<br />        raw_spin_lock_irqsave(cpu_lock, flags);<br /><br />there too.<br /><br />So you have at least twice the spinlocks that my case had, and yes,<br />the costs are way more spread out because your case has all that<br />cgroup accounting too.<br /><br />That said, I don't understand the powerpc memory ordering. I thought<br />the rules were "isync on lock, lwsync on unlock".<br /><br />That's what the AIX docs imply, at least.<br /><br />In particular, I find:<br /><br />  "isync is not a memory barrier instruction, but the<br />load-compare-conditional branch-isync sequence can provide this<br />ordering property"<br /><br />so why are you doing "sync/lwsync", when it sounds like "isync/lwsync"<br />(for lock/unlock) is the right thing and would already give memory<br />barrier semantics?<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
