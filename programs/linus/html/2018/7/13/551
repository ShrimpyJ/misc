    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/7/9/979">First message in thread</a></li><li><a href="/lkml/2018/7/13/162">Andrea Parri</a><ul><li><a href="/lkml/2018/7/13/192">Will Deacon</a><ul><li class="origin"><a href="/lkml/2018/7/13/619">Linus Torvalds</a><ul><li><a href="/lkml/2018/7/13/619">Andrea Parri</a><ul><li><a href="/lkml/2018/7/13/754">Alan Stern</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 13 Jul 2018 10:16:48 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2] tools/memory-model: Add extra ordering for locks and remove it for ordinary release/acquire</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 13, 2018 at 2:34 AM Will Deacon &lt;will.deacon&#64;arm.com&gt; wrote:<br />&gt;<br />&gt; And, since we're stating preferences, I'll reiterate my preference towards:<br />&gt;<br />&gt;         * RCsc unlock/lock<br />&gt;         * RCpc release/acquire<br /><br />Yes, I think this would be best. We *used* to have pretty heavy-weight<br />locking rules for various reasons, and we relaxed them for reasons<br />that weren't perhaps always the right ones.<br /><br />Locking is pretty heavy-weight in general, and meant to be the "I<br />don't really have to think about this very much" option. Then not<br />being serializing enough to confuse people when it allows odd behavior<br />(on _some_ architectures) does not sound like a great idea.<br /><br />In contrast, when you do release/acquire or any of the other "I know<br />what I'm doing" things, I think we want the minimal serialization<br />implied by the very specialized op.<br /><br />&gt;         * Not fussed about atomic rmws, but having them closer to RCsc would<br />&gt;           make it easier to implement and reason about generic locking<br />&gt;           implementations<br /><br />I would prefer that rmw's be RCsc by default, but that there are then<br />"relaxed" versions of it that aren't.<br /><br />For example, one common case of rmw has nothing to do with any<br />ordering at all: statistics gathering. It usually has absolutely zero<br />need for any ordering per se, and all it wants is cache coherence.<br /><br />Yes, yes, the really crticial stuff we then use percpu counters for<br />and a lot of clever software, but there's a lot of cases where that<br />isn't practical or isn't _quite_ important enough.<br /><br />So "atomic_add()" being RCsc sounds like a nice tight requirement, but<br />then architectures who can do it cheaper could have<br />"atomic_add_relaxed()" that has no inherent ordering at all.<br /><br />But let's see what the powerpc people find about the actual<br />performance impact of being RCsc on locking. Real numbers for real<br />loads would be nice.<br /><br />               Linus<br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
