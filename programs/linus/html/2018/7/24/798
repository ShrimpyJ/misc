    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/7/10/1227">First message in thread</a></li><li><a href="/lkml/2018/7/24/4">(Eric W. Biederman)</a><ul><li><a href="/lkml/2018/7/24/5">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/6">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/7">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/8">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/9">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/10">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/11">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/12">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/13">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/14">"Eric W. Biederman"</a><ul><li><a href="/lkml/2018/8/16/47">(Eric W. Biederman)</a><ul><li><a href="/lkml/2018/8/17/458">Dmitry Vyukov</a><ul><li><a href="/lkml/2018/8/17/490">(Eric W. Biederman)</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2018/7/24/15">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/16">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/17">"Eric W. Biederman"</a><ul><li><a href="/lkml/2018/7/26/471">Oleg Nesterov</a><ul><li><a href="/lkml/2018/7/26/566">(Eric W. Biederman)</a><ul><li><a href="/lkml/2018/7/26/618">Oleg Nesterov</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2018/7/24/18">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/19">"Eric W. Biederman"</a><ul><li class="origin"><a href="/lkml/2018/7/24/841">Linus Torvalds</a><ul><li><a href="/lkml/2018/7/24/841">(Eric W. Biederman)</a><ul><li><a href="/lkml/2018/7/24/860">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2018/7/24/20">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/21">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/22">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/23">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/24">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/7/24/801">Linus Torvalds</a></li><li><a href="/lkml/2018/7/25/562">Oleg Nesterov</a><ul><li><a href="/lkml/2018/7/25/646">(Eric W. Biederman)</a></li></ul></li><li><a href="/lkml/2018/8/9/160">(Eric W. Biederman)</a><ul><li><a href="/lkml/2018/8/9/161">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/8/9/163">"Eric W. Biederman"</a><ul><li><a href="/lkml/2018/8/9/679">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/9/697">(Eric W. Biederman)</a></li><li><a href="/lkml/2018/8/9/727">(Eric W. Biederman)</a></li></ul></li></ul></li><li><a href="/lkml/2018/8/9/164">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/8/9/165">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/8/9/166">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/8/9/167">"Eric W. Biederman"</a></li><li><a href="/lkml/2018/8/9/680">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 24 Jul 2018 10:27:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 20/20] signal: Don't restart fork when signals come in.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">This is completely broken.<br /><br />On Mon, Jul 23, 2018 at 8:27 PM Eric W. Biederman &lt;ebiederm&#64;xmission.com&gt; wrote:<br />&gt;<br />&gt; diff --git a/kernel/fork.c b/kernel/fork.c<br />&gt; index 6c358846a8b8..6ee5822f0085 100644<br />&gt; --- a/kernel/fork.c<br />&gt; +++ b/kernel/fork.c<br />&gt; &#64;&#64; -1602,6 +1603,24 &#64;&#64; static __latent_entropy struct task_struct *copy_process(<br />&gt;  {<br />&gt;         int retval;<br />&gt;         struct task_struct *p;<br />&gt; +       struct multiprocess_signals delayed;<br />&gt; +<br />&gt; +       /*<br />&gt; +        * Force any signals received before this point to be delivered<br />&gt; +        * before the fork happens.  Collect up signals sent to multiple<br />&gt; +        * processes that happen during the fork and delay them so that<br />&gt; +        * they appear to happen after the fork.<br />&gt; +        */<br />&gt; +       sigemptyset(&amp;delayed.signal);<br />&gt; +       INIT_HLIST_NODE(&amp;delayed.node);<br />&gt; +<br />&gt; +       spin_lock_irq(&amp;current-&gt;sighand-&gt;siglock);<br />&gt; +       if (!(clone_flags &amp; CLONE_THREAD))<br />&gt; +               hlist_add_head(&amp;delayed.node, &amp;current-&gt;signal-&gt;multiprocess);<br /><br />Here you add the entry to the multiprocess list.<br /><br />&gt; +       recalc_sigpending();<br />&gt; +       spin_unlock_irq(&amp;current-&gt;sighand-&gt;siglock);<br />&gt; +       if (signal_pending(current))<br />&gt; +               return ERR_PTR(restart_syscall());<br /><br />.. and here you return with the list entry still there, pointing to<br />the stack that you now no longer use.<br /><br />The same is true of *all* the error cases, because the only point you<br />remove it is for the success case:<br /><br />&gt; &#64;&#64; -1979,6 +1982,8 &#64;&#64; static __latent_entropy struct task_struct *copy_process(<br />&gt;                         attach_pid(p, PIDTYPE_TGID);<br />&gt;                         attach_pid(p, PIDTYPE_PGID);<br />&gt;                         attach_pid(p, PIDTYPE_SID);<br />&gt; +                       p-&gt;signal-&gt;shared_pending.signal = delayed.signal;<br />&gt; +                       hlist_del(&amp;delayed.node);<br /><br />So for all the error cases, you leave a dangling pointer to the<br />current stack in that signal handler, and then return an error.<br /><br />Guaranteed stack and list corruption.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
