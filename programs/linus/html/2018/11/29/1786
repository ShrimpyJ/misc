    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/11/26/951">First message in thread</a></li><li><a href="/lkml/2018/11/29/1709">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/29/1717">Steven Rostedt</a></li><li><a href="/lkml/2018/11/29/1734">Andy Lutomirski</a><ul><li><a href="/lkml/2018/11/29/1746">Peter Zijlstra</a><ul><li><a href="/lkml/2018/11/29/1781">Andy Lutomirski</a><ul><li><a href="/lkml/2018/11/29/1787">Jiri Kosina</a></li></ul></li></ul></li><li><a href="/lkml/2018/11/29/1756">Steven Rostedt</a><ul><li><a href="/lkml/2018/11/29/1788">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/29/1796">Steven Rostedt</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2018/11/29/1789">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/29/1789">Andy Lutomirski</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Nov 2018 09:29:49 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 4/4] x86/static_call: Add inline static call implementation for x86-64</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 29, 2018 at 9:02 AM Andy Lutomirski &lt;luto&#64;amacapital.net&gt; wrote:<br />&gt; &gt;<br />&gt; &gt; - just restart the instruction (with the suggested "ptregs-&gt;rip --")<br />&gt; &gt;<br />&gt; &gt; - to avoid any "oh, we're not making progress" issues, just fix the<br />&gt; &gt; instruction yourself to be the right call, by looking it up in the<br />&gt; &gt; "what needs to be fixed" tables.<br />&gt;<br />&gt; I thought that too.  I think it deadlocks. CPU A does text_poke_bp().  CPU B is waiting for a spinlock with IRQs off.  CPU C holds the spinlock and hits the int3.  The int3 never goes away because CPU A is waiting for CPU B to handle the sync_core IPI.<br />&gt;<br />&gt; Or do you think we can avoid the IPI while the int3 is there?<br /><br />I'm handwaving and thinking that CPU C that hits the int3 can just fix<br />up the instruction directly in its own caches, and return.<br /><br />Yes, it does what he "text_poke" *will* do (so now the instruction<br />gets rewritten _twice_), but who cares? It's idempotent.<br /><br />And no, I don't have code, just "maybe some handwaving like this"<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
