    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/11/21/378">First message in thread</a></li><li><a href="/lkml/2018/11/22/1285">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/22/1294">Andy Lutomirski</a><ul><li class="origin"><a href="/lkml/2018/11/23/464">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/23/464">David Laight</a><ul><li><a href="/lkml/2018/11/23/504">David Laight</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 22 Nov 2018 10:58:10 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] x86: only use ERMS for user copies for larger sizes</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 22, 2018 at 10:07 AM Andy Lutomirski &lt;luto&#64;kernel.org&gt; wrote:<br />&gt;<br />&gt; I'm not personally volunteering, but I suspect we can do much better<br />&gt; than we do now:<br />&gt;<br />&gt;  - The new MOVDIRI and MOVDIR64B instructions can do big writes to WC<br />&gt; and UC memory.<br />&gt;<br />&gt;  - MOVNTDQA can, I think, do 64-byte loads, but only from WC memory.<br /><br />No, performance isn't the _primary_ issue. Nobody uses MMIO and<br />expects high performance from the generic functions (but people may<br />then tweak individual drivers to do tricks).<br /><br />And we've historically had various broken hardware that cares deeply<br />about access size. Trying to be clever and do big accesses could<br />easily break something.<br /><br />The fact that nobody has complained about the generic memcpy routines<br />probably means that the broken hardware isn't in use any more, or it<br />just works anyway. And nobody has complained about performance either,<br />so it's clearly not a huge issue. "rep movs" probably works ok on WC<br />memory writes anyway, it's the UC case that is bad, but I don't think<br />anybody uses UC and then does the "memcp_to/fromio()" things. If you<br />have UC memory, you tend to do the accesses properly.<br /><br />So I suspect we should just write memcpy_{to,from}io() in terms of writel/readl.<br /><br />Oh, and I just noticed that on x86 we expressly use our old "safe and<br />sane" functions: see __inline_memcpy(), and its use in<br />__memcpy_{from,to}io().<br /><br />So the "falls back to memcpy" was always a red herring. We don't<br />actually do that.<br /><br />Which explains why things work.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
