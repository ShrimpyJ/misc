    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/11/26/951">First message in thread</a></li><li><a href="/lkml/2018/11/30/28">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/30/52">Steven Rostedt</a><ul><li class="origin"><a href="/lkml/2018/11/30/85">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/30/85">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/30/86">Linus Torvalds</a></li><li><a href="/lkml/2018/11/30/87">Steven Rostedt</a></li><li><a href="/lkml/2018/11/30/99">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2018/11/30/89">Steven Rostedt</a><ul><li><a href="/lkml/2018/11/30/94">Josh Poimboeuf</a></li><li><a href="/lkml/2018/11/30/97">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2018/11/30/133">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Nov 2018 10:58:40 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 4/4] x86/static_call: Add inline static call implementation for x86-64</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 29, 2018 at 10:47 AM Steven Rostedt &lt;rostedt&#64;goodmis.org&gt; wrote:<br />&gt;<br />&gt; Note, we do have a bit of control at what is getting called. The patch<br />&gt; set requires that the callers are wrapped in macros. We should not<br />&gt; allow just any random callers (like from asm).<br /><br />Actually, I'd argue that asm is often more controlled than C code.<br /><br />Right now you can do odd things if you really want to, and have the<br />compiler generate indirect calls to those wrapper functions.<br /><br />For example, I can easily imagine a pre-retpoline compiler turning<br /><br />     if (cond)<br />        fn1(a,b)<br />     else<br />       fn2(a,b);<br /><br />into a function pointer conditional<br /><br />    (cond ? fn1 : fn2)(a,b);<br /><br />and honestly, the way "static_call()" works now, can you guarantee<br />that the call-site doesn't end up doing that, and calling the<br />trampoline function for two different static calls from one indirect<br />call?<br /><br />See what I'm talking about? Saying "callers are wrapped in macros"<br />doesn't actually protect you from the compiler doing things like that.<br /><br />In contrast, if the call was wrapped in an inline asm, we'd *know* the<br />compiler couldn't turn a "call wrapper(%rip)" into anything else.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
