    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/11/26/951">First message in thread</a></li><li><a href="/lkml/2018/11/30/99">Andy Lutomirski</a><ul><li><a href="/lkml/2018/11/30/135">Josh Poimboeuf</a><ul><li><a href="/lkml/2018/11/30/221">Josh Poimboeuf</a></li><li class="origin"><a href="/lkml/2018/11/30/1108">Linus Torvalds</a><ul><li><a href="/lkml/2018/11/30/1108">Josh Poimboeuf</a><ul><li><a href="/lkml/2018/12/11/179">David Laight</a></li></ul></li><li><a href="/lkml/2018/12/12/732">Josh Poimboeuf</a></li></ul></li><li><a href="/lkml/2018/11/30/1126">Andy Lutomirski</a><ul><li><a href="/lkml/2018/12/1/65">Josh Poimboeuf</a><ul><li><a href="/lkml/2018/12/1/131">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 29 Nov 2018 15:04:20 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v2 4/4] x86/static_call: Add inline static call implementation for x86-64</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 29, 2018 at 12:25 PM Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; On Thu, Nov 29, 2018 at 11:27:00AM -0800, Andy Lutomirski wrote:<br />&gt; &gt;<br />&gt; &gt; I propose a different solution:<br />&gt; &gt;<br />&gt; &gt; As in this patch set, we have a direct and an indirect version.  The<br />&gt; &gt; indirect version remains exactly the same as in this patch set.  The<br />&gt; &gt; direct version just only does the patching when all seems well: the<br />&gt; &gt; call instruction needs to be 0xe8, and we only do it when the thing<br />&gt; &gt; doesn't cross a cache line.  Does that work?  In the rare case where<br />&gt; &gt; the compiler generates something other than 0xe8 or crosses a cache<br />&gt; &gt; line, then the thing just remains as a call to the out of line jmp<br />&gt; &gt; trampoline.  Does that seem reasonable?  It's a very minor change to<br />&gt; &gt; the patch set.<br />&gt;<br />&gt; Maybe that would be ok.  If my math is right, we would use the<br />&gt; out-of-line version almost 5% of the time due to cache misalignment of<br />&gt; the address.<br /><br />Note that I don't think cache-line alignment is necessarily sufficient.<br /><br />The I$ fetch from the cacheline can happen in smaller chunks, because<br />the bus between the I$ and the instruction decode isn't a full<br />cacheline (well, it is _now_ in modern big cores, but it hasn't always<br />been).<br /><br />So even if the cacheline is updated atomically, I could imagine seeing<br />a partial fetch from the I$ (old values) and then a second partial<br />fetch (new values).<br /><br />It would be interesting to know what the exact fetch rules are.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
