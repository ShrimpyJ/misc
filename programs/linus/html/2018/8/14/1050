    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/8/14/1031">First message in thread</a></li><li><a href="/lkml/2018/8/14/1031">Michal Wnukowski</a><ul><li><a href="/lkml/2018/8/14/1042">Keith Busch</a><ul><li class="origin"><a href="/lkml/2018/8/14/1065">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/14/1065">Keith Busch</a></li><li><a href="/lkml/2018/8/15/13">Michal Wnukowski</a><ul><li><a href="/lkml/2018/8/15/28">Linus Torvalds</a></li><li><a href="/lkml/2018/8/17/83">Christoph Hellwig</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Aug 2018 16:16:41 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Bugfix for handling of shadow doorbell buffer.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Guys, you're both wrong.<br /><br />On Tue, Aug 14, 2018 at 03:17:35PM -0700, Michal Wnukowski wrote:<br />&gt;<br />&gt; With memory barrier in place, the volatile keyword around *dbbuf_ei is<br />&gt; redundant.<br /><br />No. The memory barrier enforces _ordering_, but it doesn't enforce<br />that the accesses are only done once. So when you do<br /><br />&gt;              *dbbuf_db = value;<br /><br />to write to dbbuf_db, and<br /><br />&gt;    *dbbuf_ei<br /><br />to read from dbbuf_ei, without the volatile the write (or the read)<br />could be done multiple times, which can cause serious confusion.<br /><br />So the "mb()" enforces ordering, and the volatile means that the<br />accesses will each be done as one single access.<br /><br />Two different issues entirely.<br /><br />However, there's a more serious problem with your patch:<br /><br />&gt; +             /*<br />&gt; +              * Ensure that the doorbell is updated before reading<br />&gt; +              * the EventIdx from memory<br />&gt; +              */<br />&gt; +             mb();<br /><br />Good comment. Except what about the other side?<br /><br />When you use memory ordering rules, as opposed to locking, there's<br />always *two* sides to any access order. There's this "write dbbuf_db"<br />vs "read dbbuf_ei" ordering.<br /><br />But there's the other side: what about the side that writes dbbuf_ei,<br />and reads dbbuf_db?<br /><br />I'm assuming that's the actual controller hardware, but it needs a<br />comment about *that* access being ordered too, because if it isn't,<br />then ordering this side is pointless.<br /><br />On Tue, Aug 14, 2018 at 3:56 PM Keith Busch &lt;keith.busch&#64;linux.intel.com&gt; wrote:<br />&gt;<br />&gt; You just want to ensure the '*dbbuf_db = value' isn't reordered, right?<br />&gt; The order dependency might be more obvious if done as:<br />&gt;<br />&gt;         WRITE_ONCE(*dbbuf_db, value);<br />&gt;<br />&gt;         if (!nvme_dbbuf_need_event(READ_ONCE(*dbbuf_ei), value, old_value))<br />&gt;                 return false;<br />&gt;<br />&gt; And 'volatile' is again redundant.<br /><br />Yes, using READ_ONCE/WRITE_ONCE obviates the need for volatile, but it<br />does *not* impose a memory ordering.<br /><br />It imposes an ordering on the compiler, but not on the CPU, so you<br />still want the "mb()" there (or the accesses need to be to uncached<br />memory or something, but then you should be using "readl()/writel()",<br />so that's not the case here).<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
