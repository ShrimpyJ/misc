    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/8/14/1031">First message in thread</a></li><li><a href="/lkml/2018/8/14/1050">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/14/1065">Keith Busch</a></li><li><a href="/lkml/2018/8/15/13">Michal Wnukowski</a><ul><li class="origin"><a href="/lkml/2018/8/15/546">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/15/546">Michal Wnukowski</a><ul><li><a href="/lkml/2018/8/16/314">Keith Busch</a></li><li><a href="/lkml/2018/8/16/708">Sagi Grimberg</a></li><li><a href="/lkml/2018/8/17/82">Christoph Hellwig</a></li></ul></li></ul></li><li><a href="/lkml/2018/8/17/83">Christoph Hellwig</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 14 Aug 2018 19:02:27 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Bugfix for handling of shadow doorbell buffer.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Aug 14, 2018 at 6:35 PM Michal Wnukowski &lt;wnukowski&#64;google.com&gt; wrote:<br />&gt;<br />&gt; I got confused after comaring disassembly of this code with and<br />&gt; without volatile keyword. Thanks for the correction.<br /><br />Note that _usually_, the "volatile" has absolutely no impact. When<br />there is one read in the source code, it's almost always one access in<br />the generated code too.<br /><br />That's particularly true if the read like this access do dbbuf_ei:<br /><br />                if (!nvme_dbbuf_need_event(*dbbuf_ei, value, old_value))<br /><br />is only used as an argument to a real function call.<br /><br />But if that function is an inline function (which it is), and the<br />argument ends up getting used multiple times (which in this case it is<br />not), then it is possible in theory that gcc ends up saying "instead<br />of reading the value once, and keep it in a register, I'll just read<br />it again for the second time".<br /><br />That happens rarely, but it _can_ happen without the volatile (or the<br />READ_ONCE()).<br /><br />The advantage of READ_ONCE() over using "volatile" in a data structure<br />tends to be that you explicitly mark the memory accesses that you care<br />about. That's nice documentation for whoever reads the code (and it's<br />not unheard of that the _same_ data structure is sometimes volatile,<br />and sometimes not - for example, the data structure might be protected<br />by a lock - not volatile - but people might use an optimistic lockless<br />access to the value too - when it ends up being volatile. So then it's<br />really good to explicitly use READ_ONCE() for the volatile cases where<br />you show that you know that you're now doing something special that<br />really depends on memory ordering or other magic "access exactly once"<br />behavior.<br /><br /><br />&gt; &gt; I'm assuming that's the actual controller hardware, but it needs a<br />&gt; &gt; comment about *that* access being ordered too, because if it isn't,<br />&gt; &gt; then ordering this side is pointless.<br />&gt;<br />&gt; The other side in this case is not actual controller hardware, but<br />&gt; virtual one (the regular hardware should rely on normal MMIO<br />&gt; doorbells).<br /><br />Ok, Maybe worth adding a one-line note about the ordering guarantees<br />by the virtual controller accesses.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
