    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/8/13/555">First message in thread</a></li><li><a href="/lkml/2018/8/15/404">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/15/432">Alexander Popov</a></li><li><a href="/lkml/2018/8/15/433">Kees Cook</a><ul><li class="origin"><a href="/lkml/2018/8/15/492">Linus Torvalds</a><ul><li><a href="/lkml/2018/8/15/492">Kees Cook</a><ul><li><a href="/lkml/2018/8/15/504">Alexander Popov</a></li><li><a href="/lkml/2018/8/16/722">Alexander Popov</a></li></ul></li><li><a href="/lkml/2018/8/16/201">David Laight</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 15 Aug 2018 13:18:57 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [GIT PULL] gcc-plugin updates for v4.19-rc1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 15, 2018 at 12:45 PM Kees Cook &lt;keescook&#64;chromium.org&gt; wrote:<br />&gt;<br />&gt; I feel like we're talking cross purposes. The BUG() cases were for<br />&gt; places where we detect that we're executing with an impossible stack<br />&gt; pointer. It seems like trying to recover from that would just hide the<br />&gt; corruption for a later time that would be much harder to debug. These<br />&gt; weren't left in here to upset you. :) I have tried to take your "make<br />&gt; it debuggable" declaration to heart.<br /><br />The thing is, BUG() is not debuggable.<br /><br />I absolutely refuse to take any hardening patches at all that have<br />BUG() or panic() or similar machine-killing in it.<br /><br />I care not one whit about the reason for them. In fact, if the reason<br />is stated as "it makes debugging easiler", then I fart in your general<br />direction and call your mother a hamster.<br /><br />Dammit, I suspect you guys are "testing" this by running things in a<br />VM, and then a BUG() looks like a good thing to do.<br /><br />But if people run things on real machines, then BUG() is absolutely<br />the last thing you EVER want to do for "debugging".<br /><br />This is why I scanned your pull request for BUG() and similar. Because<br />I simply will not take "hardening" that kills the machine. That's a<br />hard requirement. No excuses, and absolutely zero exceptions.<br /><br />After a year or two, when the hardening has actually been in place,<br />and you can say "hey, look, none of the warnings happened", I may be<br />ok with turning them into BUG() calls.<br /><br />&gt; It also handles VLA abuse, since those could (and have in past<br />&gt; exploits) been used to jump over guard pages.<br /><br />I really don't think that's a valid model at all. We need to get rid<br />of the VLA abuse, not make complex compiler plugins for it.<br /><br />I thought VLA's were mostly gone. I think we can at this point almost<br />just mark them broken, or disable any code that uses them when people<br />enable the stack options.<br /><br />Adding a few<br /><br />        depends on !SAFE_STACK<br /><br />to the drivers or code that still uses VLA's and then making the stack plugin do<br /><br />        select SAFE_STACK<br /><br />and simply refuse to compile alloca sounds reasonable to me.<br /><br />People who then want some stack validation or clearing can either<br />decide they don't care about those pieces, or fix them one by one.<br /><br />               Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
