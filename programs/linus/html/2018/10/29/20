    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2018/10/28/211">First message in thread</a></li><li><a href="/lkml/2018/10/28/211">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2018/10/30/742">Linus Torvalds</a><ul><li><a href="/lkml/2018/10/30/742">Mauro Carvalho Chehab</a></li></ul></li><li><a href="/lkml/2018/10/29/414">Jiri Kosina</a><ul><li><a href="/lkml/2018/10/29/496">Linus Torvalds</a><ul><li><a href="/lkml/2018/10/29/680">Linus Torvalds</a><ul><li><a href="/lkml/2018/10/30/1">Harry Cutts</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 28 Oct 2018 14:08:31 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: Logitech high-resolution scrolling..</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Oct 28, 2018 at 12:13 PM Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; So the recent change to enable the high-res scrolling really seems a<br />&gt; bit *too* extreme.<br />&gt;<br />&gt; Is there some middle ground that turns the mouse from "look at it<br />&gt; sideways and it starts scrolling" to something slightly more<br />&gt; reasonable?<br /><br />Actually, I think the bug may be in the generic HID high-resolution<br />scrolling code, and I only notice because the Logitech support means<br />that now I see it.<br /><br />In particular, if you look at hid_scroll_counter_handle_scroll(),<br />you'll notice that it tries to turn a high-res scroll event into a<br />regular wheel event by using the resolution_multiplier.<br /><br />But that code looks really broken. It tries to react to a "half<br />multiplier" thing:<br /><br />        int threshold = counter-&gt;resolution_multiplier / 2;<br />   ..<br />        counter-&gt;remainder += hi_res_value;<br />        if (abs(counter-&gt;remainder) &gt;= threshold) {<br /><br />and that's absolutely and entirely wrong.<br /><br />Imagine that the high-res wheel counter has just moved a bit up (by<br />one high-res) tick, so now it's at the half-way mark to the<br />resolution_multiplier, and we scroll up by one:<br /><br />                low_res_scroll_amount =<br />                        counter-&gt;remainder / counter-&gt;resolution_multiplier<br />                        + (hi_res_value &gt; 0 ? 1 : -1);<br />                input_report_rel(counter-&gt;dev, REL_WHEEL,<br />                                 low_res_scroll_amount);<br /><br />and then correct for it:<br /><br />                counter-&gt;remainder -=<br />                        low_res_scroll_amount * counter-&gt;resolution_multiplier;<br /><br />now we went from "half resolution multiplier positive" to "half negative".<br /><br />Which means that next time that the high-res event happens by even<br />just one high-resolution tick in the other direction, we'll now<br />generate a low-resolution scroll event in the other direction.<br /><br />In other words, that function results in unstable behavior. Tiny tiny<br />movements back-and-forth in the high-res wheel events (which could be<br />just because either the sensor is unstable, or the wheel is wiggling<br />imperceptibly) can result in visible movement in the low-res<br />("regular") wheel reporting.<br /><br />There is no "damping" function, in other words. Noise in the high<br />resolution reading can result in noise in the regular wheel reporting.<br /><br />So that threshold handling needs to be fixed, I feel. Either get rid<br />of it entirely (you need to scroll a *full* resolution_multiplier to<br />get a regular wheel event), or the counter-&gt;remainder needs to be<br />*cleared* when a wheel event has been sent so that you don't get into<br />the whole "back-and-forth" mode.<br /><br />Or some other damping model. I suspect there are people who have<br />researched what the right answer is, but I guarantee that the current<br />code is not the right answer.<br /><br />I suspect this also explains why I *sometimes* see that "just moving<br />the mouse sends wheel events", and at other times don't. It needs to<br />get close to that "half a resolution multiplier" stage to get into the<br />bad cases, but then tiny tiny perturbations can cause unstable<br />behavior.<br /><br />I can't be the only person seeing this, but I guess the Logitech mouse<br />is right now the only one that uses the new generic HID code, and I<br />guess not a lot of people have been *using* it.<br /><br />Harry?<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
