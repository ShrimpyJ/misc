    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/10/29/29">First message in thread</a></li><li><a href="/lkml/2016/10/29/136">Al Viro</a><ul><li><a href="/lkml/2016/10/29/319">Christoph Hellwig</a><ul><li><a href="/lkml/2016/10/29/328">Al Viro</a><ul><li><a href="/lkml/2016/10/29/332">Al Viro</a></li><li><a href="/lkml/2016/10/30/13">Christoph Hellwig</a></li></ul></li><li class="origin"><a href="/lkml/2016/10/29/357">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/29/357">Al Viro</a><ul><li><a href="/lkml/2016/10/29/360">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2016/10/30/12">Christoph Hellwig</a></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/10/29/345/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 29 Oct 2016 10:47:58 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] aio: fix a user triggered use after free (and fix freeze protection of aio writes)</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Oct 29, 2016 at 8:20 AM, Christoph Hellwig &lt;hch&#64;lst.de&gt; wrote:<br />&gt;<br />&gt; We can't as that would not fix the use after free (at least for the lockdep<br />&gt; case - otherwise the call is a no-op).  Once iter_op returns aio_complete<br />&gt; might have dropped our reference to the file, and another thread might<br />&gt; have closed the fd so that the fput from aio_complete was the last one.<br /><br />I don't concpetually mind the patch per se, but the repeated<br /><br />             if (rw == WRITE) {<br />                   ..<br />             }<br /><br />             if (rw == WRITE) {<br />                   ..<br />             }<br /><br />is just insane and makes the code less legible than it should be.<br /><br />Also, honestly, make it use a helper: "aio_file_start_write()" and<br />"aio_file_end_write()" that has the comments and the lockdep games.<br /><br />Because that patch is just too effing ugly.<br /><br />Does something like the attached work for you guys?<br /><br />                Linus<br /> fs/aio.c           | 33 +++++++++++++++++++++++++++++----<br /> include/linux/fs.h |  1 +<br /> 2 files changed, 30 insertions(+), 4 deletions(-)<br /><br />diff --git a/fs/aio.c b/fs/aio.c<br />index 1157e13a36d6..3f66331ef90c 100644<br />--- a/fs/aio.c<br />+++ b/fs/aio.c<br />&#64;&#64; -1066,6 +1066,27 &#64;&#64; static struct kioctx *lookup_ioctx(unsigned long ctx_id)<br /> 	return ret;<br /> }<br /> <br />+/*<br />+ * We do file_start_write/file_end_write() to make sure<br />+ * we have filesystem freeze protection over the whole<br />+ * AIO write sequence, but to make sure that lockdep does<br />+ * not complain about the held lock when we return to<br />+ * userspace, we tell it that we release and reaquire the<br />+ * lock.<br />+ */<br />+static void aio_file_start_write(struct file *file)<br />+{<br />+	file_start_write(file);<br />+	__sb_writers_release(file_inode(file)-&gt;i_sb, SB_FREEZE_WRITE);<br />+}<br />+<br />+static void aio_file_end_write(struct file *file)<br />+{<br />+	__sb_writers_acquired(file_inode(file)-&gt;i_sb, SB_FREEZE_WRITE);<br />+	file_end_write(file);<br />+}<br />+<br />+<br /> /* aio_complete<br />  *	Called when the io request on the given iocb is complete.<br />  */<br />&#64;&#64; -1078,6 +1099,9 &#64;&#64; static void aio_complete(struct kiocb *kiocb, long res, long res2)<br /> 	unsigned tail, pos, head;<br /> 	unsigned long	flags;<br /> <br />+	if (kiocb-&gt;ki_flags &amp; IOCB_WRITE)<br />+		aio_file_end_write(kiocb-&gt;ki_filp);<br />+<br /> 	/*<br /> 	 * Special case handling for sync iocbs:<br /> 	 *  - events go directly into the iocb for fast handling<br />&#64;&#64; -1460,13 +1484,14 &#64;&#64; static ssize_t aio_run_iocb(struct kiocb *req, unsigned opcode,<br /> 			return ret;<br /> 		}<br /> <br />-		if (rw == WRITE)<br />-			file_start_write(file);<br />+		if (rw == WRITE) {<br />+			/* aio_complete() will end the write */<br />+			req-&gt;ki_flags |= IOCB_WRITE;<br />+			aio_file_start_write(file);<br />+		}<br /> <br /> 		ret = iter_op(req, &amp;iter);<br /> <br />-		if (rw == WRITE)<br />-			file_end_write(file);<br /> 		kfree(iovec);<br /> 		break;<br /> <br />diff --git a/include/linux/fs.h b/include/linux/fs.h<br />index 16d2b6e874d6..db600e9bb1b4 100644<br />--- a/include/linux/fs.h<br />+++ b/include/linux/fs.h<br />&#64;&#64; -321,6 +321,7 &#64;&#64; struct writeback_control;<br /> #define IOCB_HIPRI		(1 &lt;&lt; 3)<br /> #define IOCB_DSYNC		(1 &lt;&lt; 4)<br /> #define IOCB_SYNC		(1 &lt;&lt; 5)<br />+#define IOCB_WRITE		(1 &lt;&lt; 6)<br /> <br /> struct kiocb {<br /> 	struct file		*ki_filp;</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
