    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/10/11/389">First message in thread</a></li><li><a href="/lkml/2016/10/24/362">Chris Mason</a><ul><li><a href="/lkml/2016/10/25/822">Dave Jones</a><ul><li class="origin"><a href="/lkml/2016/10/25/847">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/25/847">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/26/831">Dave Jones</a></li></ul></li></ul></li><li><a href="/lkml/2016/10/27/15">Dave Chinner</a><ul><li><a href="/lkml/2016/10/27/483">Dave Jones</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 25 Oct 2016 18:33:26 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: bio linked list corruption.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Oct 25, 2016 at 5:27 PM, Dave Jones &lt;davej&#64;codemonkey.org.uk&gt; wrote:<br />&gt;<br />&gt; DaveC: Do these look like real problems, or is this more "looks like<br />&gt; random memory corruption" ?  It's been a while since I did some stress<br />&gt; testing on XFS, so these might not be new..<br /><br />Andy, do you think we could just do some poisoning of the stack as we<br />free it, to see if that catches anything?<br /><br />Something truly stupid like just<br /><br />    --- a/kernel/fork.c<br />    +++ b/kernel/fork.c<br />    &#64;&#64; -218,6 +218,7 &#64;&#64; static inline void free_thread_stack(struct<br />task_struct *tsk)<br />                    unsigned long flags;<br />                    int i;<br /><br />    +               memset(tsk-&gt;stack_vm_area-&gt;addr, 0xd0, THREAD_SIZE);<br />                    local_irq_save(flags);<br />                    for (i = 0; i &lt; NR_CACHED_STACKS; i++) {<br />                            if (this_cpu_read(cached_stacks[i]))<br /><br />or similar?<br /><br />It seems like DaveJ had an easier time triggering these problems with<br />the stack cache, but they clearly didn't go away when the stack cache<br />was disabled. So maybe the stack cache just made the reuse more likely<br />and faster, making the problem show up faster too. But if we actively<br />poison things, we'll corrupt the free'd stack *immediately* if there<br />is some stale use..<br /><br />Completely untested. Maybe there's some reason we can't write to the<br />whole thing like that?<br /><br />                 Linus<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
