    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/10/26/1175">First message in thread</a></li><li><a href="/lkml/2016/10/26/1175">Laura Abbott</a><ul><li class="origin"><a href="/lkml/2016/10/26/1238">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/26/1238">Laura Abbott</a></li></ul></li><li><a href="/lkml/2016/10/27/168">Petr Mladek</a><ul><li><a href="/lkml/2016/10/27/299">Sergey Senozhatsky</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 26 Oct 2016 16:34:35 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: printk badness with VMAP_STACK</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 26, 2016 at 3:55 PM, Laura Abbott &lt;labbott&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; I was playing around with overflowing stacks and I managed to generate a<br />&gt; test<br />&gt; case that hung the kernel with vmapped stacks. The test case is just<br />&gt;<br />&gt; static void noinline foo1(void)<br />&gt; {<br />&gt;        pr_info("%p\n", (void *)current_stack_pointer());<br />&gt;        foo2();<br />&gt; }<br />&gt;<br />&gt; where foo$n is the same function with the name changed. I'm super<br />&gt; creative. I have a couple thousand of these for testing with the final<br />&gt; one doing a WARN. The kernel eventually hangs in printk on logbuf_lock<br /><br />So just to get this right - your test-case is intentionally doing that<br />mutually recursive thing with foo1/foo2 calling each other until they<br />run out of stack?<br /><br />And yes, occasionally the stack will run out while in the middle of<br />"printk()", and then when we take a fault, we'll be screwed.<br /><br />Note that we do *not* guarantee that "printk()" works in all contexts,<br />so it might not really be considered a bug. It's very much a "best<br />effort", but the scheduler and timekeeping, for example, uses<br />"printk_deferred()" exactly because one of the contexts where printk()<br />does *not* work is when you hold the rq lock.<br /><br />And the reason for *that* is that printk() ends up relying on a few<br />different locks:<br /><br /> - logbuf_lock, obviously.<br /> - console_sem for actual output<br /> - cond_resched() requires rq-&gt;lock<br /><br />And we do have some hacks on place - the recursive printk test<br />(logbuf_cpu, as you note) and oops_in_progress and that "zap_locks()".<br /><br />But zap_locks only zaps logbuf_lock and console_sem, for example.<br /><br />If you run out of stack somewhere in the middle of the scheduler when<br />the "cond_resched()" case of printk triggers, and we hold "rq-&gt;lock"<br />when the double fault occurs, the machine *will* be dead. It will<br />still try to print things out (thanks to that zap_locks thing), but<br />rq-&gt;lock will be wrong, and nothing will ever recover.<br /><br />And it _sounds_ like that's the case you hit.<br /><br />Basically, zap_locks and the other printk "try to at least print<br />things out" can only handle so much.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
