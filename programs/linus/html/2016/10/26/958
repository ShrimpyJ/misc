    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/10/11/389">First message in thread</a></li><li><a href="/lkml/2016/10/26/845">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/26/935">Dave Jones</a></li><li><a href="/lkml/2016/10/26/946">Dave Jones</a><ul><li class="origin"><a href="/lkml/2016/10/26/1025">Linus Torvalds</a><ul><li><a href="/lkml/2016/10/26/1025">Chris Mason</a><ul><li><a href="/lkml/2016/10/26/1135">Chris Mason</a></li><li><a href="/lkml/2016/10/26/1144">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 26 Oct 2016 12:06:21 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: bio linked list corruption.</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Oct 26, 2016 at 11:42 AM, Dave Jones &lt;davej&#64;codemonkey.org.uk&gt; wrote:<br />&gt;<br />&gt; The stacks show nearly all of them are stuck in sync_inodes_sb<br /><br />That's just wb_wait_for_completion(), and it means that some IO isn't<br />completing.<br /><br />There's also a lot of processes waiting for inode_lock(), and a few<br />waiting for mnt_want_write()<br /><br />Ignoring those, we have<br /><br />&gt; [&lt;ffffffffa009554f&gt;] btrfs_wait_ordered_roots+0x3f/0x200 [btrfs]<br />&gt; [&lt;ffffffffa00470d1&gt;] btrfs_sync_fs+0x31/0xc0 [btrfs]<br />&gt; [&lt;ffffffff811fbd4e&gt;] sync_filesystem+0x6e/0xa0<br />&gt; [&lt;ffffffff811fbebc&gt;] SyS_syncfs+0x3c/0x70<br />&gt; [&lt;ffffffff8100255c&gt;] do_syscall_64+0x5c/0x170<br />&gt; [&lt;ffffffff817908cb&gt;] entry_SYSCALL64_slow_path+0x25/0x25<br />&gt; [&lt;ffffffffffffffff&gt;] 0xffffffffffffffff<br /><br />Don't know this one. There's a couple of them. Could there be some<br />ABBA deadlock on the ordered roots waiting?<br /><br />&gt; [&lt;ffffffff8131ae87&gt;] call_rwsem_down_write_failed+0x17/0x30<br />&gt; [&lt;ffffffffa008ed32&gt;] btrfs_fallocate+0xb2/0xfd0 [btrfs]<br />&gt; [&lt;ffffffff811c6c3e&gt;] vfs_fallocate+0x13e/0x220<br />&gt; [&lt;ffffffff811c79f3&gt;] SyS_fallocate+0x43/0x80<br />&gt; [&lt;ffffffff8100255c&gt;] do_syscall_64+0x5c/0x170<br />&gt; [&lt;ffffffff817908cb&gt;] entry_SYSCALL64_slow_path+0x25/0x25<br />&gt; [&lt;ffffffffffffffff&gt;] 0xffffffffffffffff<br /><br />This one is also inode_lock(), and is interesting only because it's<br />fallocate(), which has shown up so many times before..<br /><br />But there are other threads blocked on do_truncate, or<br />btrfs_file_write_iter instead, or on lseek, so this is not different<br />for any other reason.<br /><br />&gt; [&lt;ffffffff81149fbf&gt;] wait_on_page_bit+0xaf/0xc0<br />&gt; [&lt;ffffffff8114a121&gt;] __filemap_fdatawait_range+0x151/0x170<br />&gt; [&lt;ffffffff8114d79c&gt;] filemap_fdatawait_keep_errors+0x1c/0x20<br />&gt; [&lt;ffffffff811f59b3&gt;] sync_inodes_sb+0x273/0x300<br />&gt; [&lt;ffffffff811fbd37&gt;] sync_filesystem+0x57/0xa0<br />&gt; [&lt;ffffffff811fbebc&gt;] SyS_syncfs+0x3c/0x70<br />&gt; [&lt;ffffffff8100255c&gt;] do_syscall_64+0x5c/0x170<br />&gt; [&lt;ffffffff817908cb&gt;] entry_SYSCALL64_slow_path+0x25/0x25<br />&gt; [&lt;ffffffffffffffff&gt;] 0xffffffffffffffff<br /><br />This is actually waiting on the page. Possibly this is the IO that is<br />never completing, and keeps the inode lock.<br /><br />&gt; [&lt;ffffffffa009576b&gt;] btrfs_start_ordered_extent+0x5b/0xb0 [btrfs]<br />&gt; [&lt;ffffffffa008bf5d&gt;] lock_and_cleanup_extent_if_need+0x22d/0x290 [btrfs]<br />&gt; [&lt;ffffffffa008d1e8&gt;] __btrfs_buffered_write+0x1b8/0x6e0 [btrfs]<br />&gt; [&lt;ffffffffa0090e60&gt;] btrfs_file_write_iter+0x170/0x550 [btrfs]<br />&gt; [&lt;ffffffff811c97d8&gt;] do_iter_readv_writev+0xa8/0x100<br />&gt; [&lt;ffffffff811ca162&gt;] do_readv_writev+0x172/0x210<br />&gt; [&lt;ffffffff811ca42a&gt;] vfs_writev+0x3a/0x50<br />&gt; [&lt;ffffffff811ca5c0&gt;] do_pwritev+0xb0/0xd0<br />&gt; [&lt;ffffffff811cb57c&gt;] SyS_pwritev+0xc/0x10<br />&gt; [&lt;ffffffff8100255c&gt;] do_syscall_64+0x5c/0x170<br />&gt; [&lt;ffffffff817908cb&gt;] entry_SYSCALL64_slow_path+0x25/0x25<br /><br />Hmm. This is the one that *started* the ordered extents (as opposed to<br />the ones waiting for it)<br /><br />I dunno. There might be a lost IO. More likely it's the same<br />corruption that causes it, it just didn't result in an oops this time.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
