    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/11/19/308">First message in thread</a></li><li><a href="/lkml/2016/11/21/14">   hpa&#64;zytor ...</a><ul><li><a href="/lkml/2016/11/21/519">"H. Peter Anvin"</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Nov 2016 10:20:17 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: What exactly do 32-bit x86 exceptions push on the stack in the CS slot?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 21, 2016 at 7:58 AM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt; On 11/20/16 20:54, hpa&#64;zytor.com wrote:<br />&gt;&gt;<br />&gt;&gt; I believe i686+ writes zero, older CPUs leave unchanged.<br />&gt;<br />&gt; I should point out that, at least from my memory, the same applies to<br />&gt; instructions like "movl &lt;seg&gt;".  I can't even remember for sure how the<br />&gt; behavior differs between "movl &lt;seg&gt;,&lt;reg32&gt;" and "movl &lt;seg&gt;,&lt;mem&gt;";<br />&gt; I'd have to do some digging.<br /><br />I have this distinct feeling that there issues with *both* the<br />register and memory versions.<br /><br />Because I have this dim memory that on early microarchitectures, even<br />"mov segment to register" would always only do a 16-bit move, even if<br />it was encoded as a 32-bit "movl". Although that may be partly because<br />I know "gas" had some confusion about operand sizes and segment<br />register instructions, so there might have been toolchain issues too.<br /><br />I just dug out my old 486 manual on _paper_ (Christ, I still had it):<br />"Intel486(tm) Microprocessor Family Programmer's Reference Manual".<br />The "mov" instruction is only documented for r/m16, and it has a<br />footnote saying "In protected mode, use 16-bit operand size prefix".<br /><br />I definitely know that the "only write 16 bits" was the case for<br />memory accesses, but I think it might have been the case even for<br />register moves. After all, "mov segment register" is actually a<br />completely different instruction from the normal "mov" instructions,<br />even if it often shows up together with them in the instruction<br />descriptions.<br /><br />The i686 cleaned up a lot of things, but I think this might be an area<br />where there were differences between i486 and Pentium and all the<br />clone chips too.<br /><br />                    Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
