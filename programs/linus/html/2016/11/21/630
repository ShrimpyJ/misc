    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/11/21/23">First message in thread</a></li><li><a href="/lkml/2016/11/21/41">Binoy Jayan</a><ul><li><a href="/lkml/2016/11/21/582">Arnd Bergmann</a><ul><li><a href="/lkml/2016/11/21/592">Christoph Hellwig</a></li><li class="origin"><a href="/lkml/2016/11/21/790">Linus Torvalds</a><ul><li><a href="/lkml/2016/11/21/790">Arnd Bergmann</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Nov 2016 09:57:51 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v5 2/9] IB/core: Replace semaphore sm_sem with an atomic wait</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 21, 2016 at 8:52 AM, Arnd Bergmann &lt;arnd&#64;arndb.de&gt; wrote:<br />&gt;<br />&gt; Version of the series had replaced the semaphore with a completion<br />&gt; here, which worked correctly, but one reviewer suggested using<br />&gt; the wait_event() instead since it's confusing to have a completion<br />&gt; starting out in 'completed' state.<br /><br />Quite frankly, in that case just keep it as a semaphore.<br /><br />So we have a few cases:<br /><br /> - completions are *slow*.<br /><br />   They are designed to be entirely synchronous, exactly so that you<br />can wait for a completion to finish, and then immediately free the<br />memory that the completion is in.<br /><br /> - completions used fro mutual exclusion are *confusing*.<br /><br />   Yes, they end up working as a counting semaphore, and yes, that's<br />by design, but at the same time, they are not _meant_ to be used as a<br />semaphore. The name matters. They are meant to be used the way they<br />are named: to be a "I'm done now" event. Don't use them for anything<br />else, because you *will* be confusing everybody else.<br /><br /> - open-coding wait-queues are really fragile and are *not* meant for exclusion.<br /><br />   They don't have lockdep checking, but more importantly, people<br />always invariably get the memory ordering wrong. And by "wrong" I mean<br />both "doesn't work" (because of insufficient memory ordering) and<br />"slow" (due to excessive memory ordering).<br /><br /> - mutexes are good for exclusion.<br /><br />   mutexes are both high-performance and non-confusing. Yes, they get<br />lockdep warnings, but that's usually a *good* thing. If you get<br />lockdep warnings from mutex use, you're almost certainly doing<br />something iffy.<br /><br />   mutexes do have a subtle downside: exactly because they are fast,<br />they are not entirely synchronous. You can't use them for completion<br />style notifications if you are going to release the memory they are<br />allocated in.<br /><br />   So mutexes need to be either statically allocated, or in<br />reference-counted allocations. That's so that the lifetime of the<br />memory is guaranteed to be cover all the users (including the wakers).<br /><br /> - semaphores are "old-fashioned mutexes". A mutex is better than a<br />semaphore, but a semaphore is better than just about all the other<br />alternatives. There's nothing _wrong_ with using a semaphore per se.<br /><br />In this case, either use a semaphore or a mutex. If you are doing<br />mutual exclusion, those are really the only two acceptable sleeping<br />models.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
