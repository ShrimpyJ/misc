    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/11/19/308">First message in thread</a></li><li><a href="/lkml/2016/11/21/632">Linus Torvalds</a><ul><li><a href="/lkml/2016/11/21/645">"H. Peter Anvin"</a><ul><li class="origin"><a href="/lkml/2016/11/21/765">Linus Torvalds</a><ul><li><a href="/lkml/2016/11/21/765">   hpa&#64;zytor ...</a><ul><li><a href="/lkml/2016/11/21/768">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2016/11/24/625">Andy Lutomirski</a></li></ul></li></ul></li><li><a href="/lkml/2016/11/22/82">Ingo Molnar</a><ul><li><a href="/lkml/2016/11/22/541">Andy Lutomirski</a><ul><li><a href="/lkml/2016/11/23/86">Ingo Molnar</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Mon, 21 Nov 2016 13:21:35 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: What exactly do 32-bit x86 exceptions push on the stack in the CS slot?</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Mon, Nov 21, 2016 at 10:26 AM, H. Peter Anvin &lt;hpa&#64;zytor.com&gt; wrote:<br />&gt; On 11/21/16 10:00, Linus Torvalds wrote:<br />&gt;&gt;<br />&gt;&gt; I'd much rather we go back to just making the "cs" entry explicitly<br />&gt;&gt; 16-bit, and have a separate padding entry, the way we used to long<br />&gt;&gt; long ago.<br />&gt;&gt;<br />&gt;<br />&gt; I would agree 100% with this.<br /><br />We _used_ to do it like this in some places (signal stack, other places):<br /><br />    unsigned short  cs, __csh;<br /><br />and<br /><br />    int xcs;<br /><br />in others (pt_regs, for example).<br /><br />You still see that "xcs" thing in the x86 uapi/asm/ptrace.h file, but<br />that's what our native pt_regs used to look like). And we still have<br />that "cs+__cs" thing in at least 'struct user_regs_struct32'. But our<br />"struct pt_regs" gas lost it.<br /><br />I wonder why we broke that. I suspect it happened when we merged the<br />64-bit and 32-bit files, but I was too lazy to try to pinpoint it.<br /><br />And I do think the original i386 model was better - exactly because it<br />didn't access undefined state when you just accessed "cs". Either you<br />had to know about it and it wasn't called 'cs' ("xcs") or you had that<br />high/low separation.<br /><br />Of course, what might be better yet is to use an anonymous union, so<br />that you can do both of the above for all the cases (ie access it both<br />as a trustworthy low 16 bits, _and_ as a single 32-bit piece of<br />information).<br /><br />We use anonymous unions all over now, we used to not do it because of<br />compiler limitations.<br /><br />With an anonymous union, we could do soemthing like<br /><br />    union {<br />        unsigned int xcs;<br />        unsigned short cs;<br />    }<br /><br />and so easily access either the reliable part (cs) or the full word<br />(xcs) without masking or having to play games.<br /><br />[ In fact, I think we could try to make the "cs" member in that union<br />be marked "const", which should mean that we'd get warnings if<br />somebody were to try to assign just the half-word (so you'd always<br />have to *assign* to "xcs", but you'd be able to read "cs").<br /><br />  I think that has made it from C++ to C. I'm not sure that's<br />somethign we can/should use, but it sounds potentially useful for<br />these kinds of cases ]<br /><br />              Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
