    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/11/23/585">First message in thread</a></li><li><a href="/lkml/2016/11/25/42">Dave Chinner</a><ul><li><a href="/lkml/2016/11/25/47">Al Viro</a><ul><li class="origin"><a href="/lkml/2016/11/25/743">Linus Torvalds</a><ul><li><a href="/lkml/2016/11/25/743">Mike Marshall</a></li><li><a href="/lkml/2016/11/25/780">Theodore Ts'o</a><ul><li><a href="/lkml/2016/11/25/799">Linus Torvalds</a></li><li><a href="/lkml/2016/11/28/85">Jan Kara</a></li></ul></li><li><a href="/lkml/2016/11/27/130">Dave Chinner</a><ul><li><a href="/lkml/2016/11/27/154">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 25 Nov 2016 11:51:26 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/6] dax: add tracepoint infrastructure, PMD tracing</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Nov 24, 2016 at 11:37 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; My impression is that nobody (at least kernel-side) wants them to be<br />&gt; a stable ABI, so long as nobody in userland screams about their code<br />&gt; being broken, everything is fine.  As usual, if nobody notices an ABI<br />&gt; change, it hasn't happened.  The question is what happens when somebody<br />&gt; does.<br /><br />Right. There is basically _no_ "stable API" for the kernel anywhere,<br />it's just an issue of "you can't break workflow for normal people".<br /><br />And if somebody writes his own trace scripts, and some random trace<br />point goes away (or changes semantics), that's easy: he can just fix<br />his script. Tracepoints aren't ever going to be stable in that sense.<br /><br />But when then somebody writes a trace script that is so useful that<br />distros pick it up, and people start using it and depending on it,<br />then _that_ trace point may well have become effectively locked in<br />stone.<br /><br />That's happened once already with the whole powertop thing. It didn't<br />get all that widely spread, and the fix was largely to improve on<br />powertop to the point where it wasn't a problem any more, but we've<br />clearly had one case of this happening.<br /><br />But I suspect that something like powertop is fairly unusual. There is<br />certainly room for similar things in the VFS layer (think "better<br />vmstat that uses tracepoints"), but I suspect the bulk of tracepoints<br />are going to be for random debugging (so that developers can say<br />"please run this script") rather than for an actual user application<br />kind of situation.<br /><br />So I don't think we should be _too_ afraid of tracepoints either. When<br />being too anti-tracepoint is a bigger practical problem than the<br />possible problems down the line, the balance is wrong.<br /><br />As long as tracepoints make sense from a higher standpoint (ie not<br />just random implementation detail of the day), and they aren't<br />everywhere, they are unlikely to cause much problem.<br /><br />We do have filesystem code that is just disgusting. As an example:<br />fs/afs/ tends to have these crazy "_enter()/_exit()" macros in every<br />single function. If you want that, use the function tracer. That seems<br />to be just debugging code that has been left around for others to<br />stumble over. I do *not* believe that we should encourage that kind of<br />"machine gun spray" use of tracepoints.<br /><br />But tracing actual high-level things like IO and faults? I think that<br />makes perfect sense, as long as the data that is collected is also the<br />actual event data, and not so much a random implementation issue of<br />the day.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
