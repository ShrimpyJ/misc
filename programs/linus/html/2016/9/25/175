    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/9/22/597">First message in thread</a></li><li><a href="/lkml/2016/9/24/238">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/25/163">Cedric Blancher</a><ul><li class="origin"><a href="/lkml/2016/9/25/180">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/25/180">Cedric Blancher</a></li><li><a href="/lkml/2016/9/25/182">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/26/504">Matthew Wilcox</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/9/25/175/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 25 Sep 2016 12:04:33 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] radix-tree: Fix optimisation problem</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 25, 2016 at 11:04 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; The more I look at that particular piece of code, the less I like it. It's<br />&gt; buggy shit. It needs to be rewritten entirely too actually check for sibling<br />&gt; entries, not that ad-hoc arithmetic crap.<br /><br />Here's my attempt at cleaning the mess up.<br /><br />I'm not claiming it's perfect, but I think it's better. It gets rid of<br />the ad-hoc arithmetic in radix_tree_descend(), and just makes all that<br />be inside the is_sibling_entry() logic instead. Which got renamed and<br />made to actually return the main sibling. So now there is at least<br />only *one* piece of code that does that range comparison, and I don't<br />think there is any huge need to explain what's going on, because the<br />"magic" is unconditional.<br /><br />Willy?<br /><br />                 Linus<br /> lib/radix-tree.c | 22 ++++++++++++----------<br /> 1 file changed, 12 insertions(+), 10 deletions(-)<br /><br />diff --git a/lib/radix-tree.c b/lib/radix-tree.c<br />index 1b7bf7314141..210709b07759 100644<br />--- a/lib/radix-tree.c<br />+++ b/lib/radix-tree.c<br />&#64;&#64; -78,18 +78,20 &#64;&#64; static inline void *node_to_entry(void *ptr)<br /> <br /> #ifdef CONFIG_RADIX_TREE_MULTIORDER<br /> /* Sibling slots point directly to another slot in the same node */<br />-static inline bool is_sibling_entry(struct radix_tree_node *parent, void *node)<br />+static inline void **get_sibling_entry(struct radix_tree_node *parent, void *node)<br /> {<br />-	void **ptr = node;<br />-	return (parent-&gt;slots &lt;= ptr) &amp;&amp;<br />-			(ptr &lt; parent-&gt;slots + RADIX_TREE_MAP_SIZE);<br />+	void **ptr = (void **) entry_to_node(node);<br />+	if ((parent-&gt;slots &lt;= ptr) &amp;&amp; (ptr &lt; parent-&gt;slots + RADIX_TREE_MAP_SIZE))<br />+		return ptr;<br />+	return NULL;<br /> }<br /> #else<br />-static inline bool is_sibling_entry(struct radix_tree_node *parent, void *node)<br />+static inline void **get_sibling_entry(struct radix_tree_node *parent, void *node)<br /> {<br />-	return false;<br />+	return NULL;<br /> }<br /> #endif<br />+#define is_sibling_entry(parent, node) (get_sibling_entry(parent,node) != NULL)<br /> <br /> static inline unsigned long get_slot_offset(struct radix_tree_node *parent,<br /> 						 void **slot)<br />&#64;&#64; -105,10 +107,10 &#64;&#64; static unsigned int radix_tree_descend(struct radix_tree_node *parent,<br /> <br /> #ifdef CONFIG_RADIX_TREE_MULTIORDER<br /> 	if (radix_tree_is_internal_node(entry)) {<br />-		unsigned long siboff = get_slot_offset(parent, entry);<br />-		if (siboff &lt; RADIX_TREE_MAP_SIZE) {<br />-			offset = siboff;<br />-			entry = rcu_dereference_raw(parent-&gt;slots[offset]);<br />+		void **sibentry = get_sibling_entry(parent, entry);<br />+		if (sibentry) {<br />+			offset = get_slot_offset(parent, sibentry);<br />+			entry = rcu_dereference_raw(*sibentry);<br /> 		}<br /> 	}<br /> #endif</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
