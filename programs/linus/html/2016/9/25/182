    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/9/22/597">First message in thread</a></li><li><a href="/lkml/2016/9/25/163">Cedric Blancher</a><ul><li><a href="/lkml/2016/9/25/175">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/25/180">Cedric Blancher</a></li><li class="origin"><a href="/lkml/2016/9/26/504">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/26/504">Matthew Wilcox</a><ul><li><a href="/lkml/2016/9/26/516">Cedric Blancher</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/9/25/182/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 25 Sep 2016 12:56:17 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] radix-tree: Fix optimisation problem</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sun, Sep 25, 2016 at 12:04 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;        It gets rid of<br />&gt; the ad-hoc arithmetic in radix_tree_descend(), and just makes all that<br />&gt; be inside the is_sibling_entry() logic instead. Which got renamed and<br />&gt; made to actually return the main sibling.<br /><br />Sadly, it looks like gcc generates bad code for this approach. Looks<br />like it ends up testing the resulting sibling pointer twice (because<br />we explicitly disable -fno-delete-null-pointer-checks in the kernel,<br />and we have no way to say "look, I know this pointer I'm returning is<br />non-null").<br /><br />So a smaller patch that keeps the old boolean "is_sibling_entry()" but<br />then actually *uses* that inside radix_tree_descend() and then tries<br />to make the nasty cast to "void **" more legible by making it use a<br />temporary variable seems to be a reasonable balance.<br /><br />At least I feel like I can still read the code, but admittedly by now<br />that may be because I've stared at those few lines so much that I feel<br />like I know what's going on. So maybe the code isn't actually any more<br />legible after all.<br /><br />.. and unlike my previous patch, it actually generates better code<br />than the original (while still passing the fixed test-suite, of<br />course). The reason seems to be exactly that temporary variable,<br />allowing us to just do<br /><br />        entry = rcu_dereference_raw(*sibentry);<br /><br />rather than doing<br /><br />        entry = rcu_dereference_raw(parent-&gt;slots[offset]);<br /><br />with the re-computed offset.<br /><br />So I think I'll commit this unless somebody screams.<br /><br />                     Linus<br /> lib/radix-tree.c | 8 ++++----<br /> 1 file changed, 4 insertions(+), 4 deletions(-)<br /><br />diff --git a/lib/radix-tree.c b/lib/radix-tree.c<br />index 1b7bf7314141..91f0727e3cad 100644<br />--- a/lib/radix-tree.c<br />+++ b/lib/radix-tree.c<br />&#64;&#64; -105,10 +105,10 &#64;&#64; static unsigned int radix_tree_descend(struct radix_tree_node *parent,<br /> <br /> #ifdef CONFIG_RADIX_TREE_MULTIORDER<br /> 	if (radix_tree_is_internal_node(entry)) {<br />-		unsigned long siboff = get_slot_offset(parent, entry);<br />-		if (siboff &lt; RADIX_TREE_MAP_SIZE) {<br />-			offset = siboff;<br />-			entry = rcu_dereference_raw(parent-&gt;slots[offset]);<br />+		if (is_sibling_entry(parent, entry)) {<br />+			void **sibentry = (void **) entry_to_node(entry);<br />+			offset = get_slot_offset(parent, sibentry);<br />+			entry = rcu_dereference_raw(*sibentry);<br /> 		}<br /> 	}<br /> #endif</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
