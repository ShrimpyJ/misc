    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/24/103">First message in thread</a></li><li><a href="/lkml/2016/12/27/242">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/250">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/251">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/254">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/265">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/12/27/348">Nicholas Piggin</a><ul><li class="origin"><a href="/lkml/2016/12/28/312">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/28/312">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/28/314">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 28 Dec 2016 11:17:00 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm: add PageWaiters indicating tasks are waiting for a page bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 27, 2016 at 7:53 PM, Nicholas Piggin &lt;npiggin&#64;gmail.com&gt; wrote:<br />&gt;&gt;<br />&gt;&gt; Yeah, that patch is disgusting, and doesn't even help x86.<br />&gt;<br />&gt; No, although it would help some cases (but granted the bitops tend to<br />&gt; be problematic in this regard). To be clear I'm not asking to merge it,<br />&gt; just wondered your opinion. (We need something more for unlock_page<br />&gt; anyway because the memory barrier in the way).<br /><br />The thing is, the patch seems pointless anyway. The "add_return()"<br />kind of cases already return the value, so any code that cares can<br />just use that. And the other cases are downright incorrect, like the<br />removal of "volatile" from the bit test ops.<br /><br />&gt;&gt; It also<br />&gt;&gt; depends on the compiler doing the right thing in ways that are not<br />&gt;&gt; obviously true.<br />&gt;<br />&gt; Can you elaborate on this? GCC will do the optimization (modulo a<br />&gt; regression <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77647">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77647</a>)<br /><br />So the removal of volatile is just one example of that. You're<br />basically forcing magical side effects. I've never seen this trick<br />_documented_, and quite frankly, the gcc people have had a history of<br />changing their own documentation when it came to their own extensions<br />(ie they've changed how inline functions work etc).<br /><br />But I also worry about interactions with different gcc versions, or<br />with the LLVM people who try to build the kernel with non-gcc<br />compilers.<br /><br />Finally, it fundamentally can't work on x86 anyway, except for the<br />add-return type of operations, which by definitions are pointless (see<br />above).<br /><br />So everything just screams "this is a horrible approach" to me.<br /><br />&gt; Patch seems okay, but it's kind of a horrible primitive. What if you<br />&gt; did clear_bit_unlock_and_test_bit, which does a __builtin_constant_p<br />&gt; test on the bit numbers and if they are &lt; 7 and == 7, then do the<br />&gt; fastpath?<br /><br />So the problem with that is that it makes no sense *except* in the<br />case where the bit is 7. So why add a "generic" function for something<br />that really isn't generic?<br /><br />I agree that it's a hacky interface, but I also happen to believe that<br />being explicit about what you are actually doing causes less pain.<br />It's not magical, and it's not subtle. There's no question about what<br />it does behind your back, and people won't use it by mistake in the<br />wrong context where it doesn't actually work any better than just<br />doing the obvious thing.<br /><br />                         Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
