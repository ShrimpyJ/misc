    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/24/103">First message in thread</a></li><li><a href="/lkml/2016/12/27/242">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/250">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2016/12/27/254">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/254">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/265">Linus Torvalds</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/12/27/348">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/28/210">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/28/312">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/28/314">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/12/27/251/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Dec 2016 11:24:16 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm: add PageWaiters indicating tasks are waiting for a page bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 27, 2016 at 11:23 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Of course, none of this is *tested*, but it looks superficially<br />&gt; correct, and allows other architectures to do the same optimization if<br />&gt; they want.<br /><br />Oops. I should include the actual patch I was talking about too, shouldn't I?<br /><br />              Linus<br /> arch/x86/include/asm/bitops.h | 13 +++++++++++++<br /> include/linux/page-flags.h    |  2 +-<br /> mm/filemap.c                  | 24 +++++++++++++++++++++---<br /> 3 files changed, 35 insertions(+), 4 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/bitops.h b/arch/x86/include/asm/bitops.h<br />index 68557f52b961..34eae484a173 100644<br />--- a/arch/x86/include/asm/bitops.h<br />+++ b/arch/x86/include/asm/bitops.h<br />&#64;&#64; -139,6 +139,19 &#64;&#64; static __always_inline void __clear_bit(long nr, volatile unsigned long *addr)<br /> 	asm volatile("btr %1,%0" : ADDR : "Ir" (nr));<br /> }<br /> <br />+static __always_inline bool clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)<br />+{<br />+	bool negative;<br />+	asm volatile(LOCK_PREFIX "andb %2,%1\n\t"<br />+		CC_SET(s)<br />+		: CC_OUT(s) (negative), ADDR<br />+		: "Ir" (1 &lt;&lt; nr) : "memory");<br />+	return negative;<br />+}<br />+<br />+// Let everybody know we have it<br />+#define clear_bit_unlock_is_negative_byte clear_bit_unlock_is_negative_byte<br />+<br /> /*<br />  * __clear_bit_unlock - Clears a bit in memory<br />  * &#64;nr: Bit to clear<br />diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h<br />index c56b39890a41..6b5818d6de32 100644<br />--- a/include/linux/page-flags.h<br />+++ b/include/linux/page-flags.h<br />&#64;&#64; -73,13 +73,13 &#64;&#64;<br />  */<br /> enum pageflags {<br /> 	PG_locked,		/* Page is locked. Don't touch. */<br />-	PG_waiters,		/* Page has waiters, check its waitqueue */<br /> 	PG_error,<br /> 	PG_referenced,<br /> 	PG_uptodate,<br /> 	PG_dirty,<br /> 	PG_lru,<br /> 	PG_active,<br />+	PG_waiters,		/* Page has waiters, check its waitqueue. Must be bit #7 and in the same byte as "PG_locked" */<br /> 	PG_slab,<br /> 	PG_owner_priv_1,	/* Owner use. If pagecache, fs may use*/<br /> 	PG_arch_1,<br />diff --git a/mm/filemap.c b/mm/filemap.c<br />index 82f26cde830c..01a2d4a6571c 100644<br />--- a/mm/filemap.c<br />+++ b/mm/filemap.c<br />&#64;&#64; -912,6 +912,25 &#64;&#64; void add_page_wait_queue(struct page *page, wait_queue_t *waiter)<br /> }<br /> EXPORT_SYMBOL_GPL(add_page_wait_queue);<br /> <br />+#ifndef clear_bit_unlock_is_negative_byte<br />+<br />+/*<br />+ * PG_waiters is the high bit in the same byte as PG_lock.<br />+ *<br />+ * On x86 (and on many other architectures), we can clear PG_lock and<br />+ * test the sign bit at the same time. But if the architecture does<br />+ * not support that special operation, we just do this all by hand<br />+ * instead.<br />+ */<br />+static inline bool clear_bit_unlock_is_negative_byte(long nr, volatile void *mem)<br />+{<br />+	clear_bit_unlock(PG_locked, mem);<br />+	smp_mb__after_atomic();<br />+	return test_bit(PG_waiters);<br />+}<br />+<br />+#endif<br />+<br /> /**<br />  * unlock_page - unlock a locked page<br />  * &#64;page: the page<br />&#64;&#64; -928,9 +947,8 &#64;&#64; void unlock_page(struct page *page)<br /> {<br /> 	page = compound_head(page);<br /> 	VM_BUG_ON_PAGE(!PageLocked(page), page);<br />-	clear_bit_unlock(PG_locked, &amp;page-&gt;flags);<br />-	smp_mb__after_atomic();<br />-	wake_up_page(page, PG_locked);<br />+	if (clear_bit_unlock_is_negative_byte(PG_locked, &amp;page-&gt;flags))<br />+		wake_up_page_bit(page, PG_locked);<br /> }<br /> EXPORT_SYMBOL(unlock_page);<br /> </pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
