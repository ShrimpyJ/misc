    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/24/103">First message in thread</a></li><li><a href="/lkml/2016/12/26/128">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/84">Nicholas Piggin</a><ul><li class="origin"><a href="/lkml/2016/12/27/250">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/250">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/251">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2016/12/27/348">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/28/210">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Dec 2016 10:58:59 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm: add PageWaiters indicating tasks are waiting for a page bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 27, 2016 at 3:19 AM, Nicholas Piggin &lt;npiggin&#64;gmail.com&gt; wrote:<br />&gt;<br />&gt; Attached is part of a patch I've been mulling over for a while. I<br />&gt; expect you to hate it, and it does not solve this problem for x86,<br />&gt; but I like being able to propagate values from atomic ops back<br />&gt; to the compiler. Of course, volatile then can't be used either which<br />&gt; is another spanner...<br /><br />Yeah, that patch is disgusting, and doesn't even help x86. It also<br />depends on the compiler doing the right thing in ways that are not<br />obviously true.<br /><br />I'd much rather just add the "xyz_return()" primitives for and/or, the<br />way we already have atomic_add_return() and friends.<br /><br />In fact, we could probably play games with bit numbering, and actually<br />use the atomic ops we already have. For example, if the lock bit was<br />the top bit, we could unlock by doing "atomic_add_return()" with that<br />bit, and look at the remaining bits that way.<br /><br />That would actually work really well on x86, since there we have<br />"xadd", but we do *not* have "set/clear bit and return old word".<br /><br />We could make a special case for just the page lock bit, make it bit #7, and use<br /><br />   movb $128,%al<br />   lock xaddb %al,flags<br /><br />and then test the bits in %al.<br /><br />And all the RISC architectures would be ok with that too, because they<br />can just use ll/sc and test the bits with that. So for them, adding a<br />"atomic_long_and_return()" would be very natural in the general case.<br /><br />Hmm?<br /><br />The other alternative is to keep the lock bit as bit #0, and just make<br />the contention bit be the high bit. Then, on x86, you can do<br /><br />    lock andb $0xfe,flags<br />    js contention<br /><br />which might be even better. Again, it would be a very special<br />operation just for unlock. Something like<br /><br />   bit_clear_and_branch_if_negative_byte(mem, label);<br /><br />and again, it would be trivial to do on most architectures.<br /><br />Let me try to write a patch or two for testing.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
