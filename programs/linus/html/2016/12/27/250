    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/24/103">First message in thread</a></li><li><a href="/lkml/2016/12/27/84">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/27/242">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2016/12/27/251">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/251">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/254">Linus Torvalds</a></li></ul></li></ul></li><li><a href="/lkml/2016/12/27/348">Nicholas Piggin</a><ul><li><a href="/lkml/2016/12/28/210">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/28/312">Nicholas Piggin</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Dec 2016 11:23:19 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm: add PageWaiters indicating tasks are waiting for a page bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 27, 2016 at 10:58 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; The other alternative is to keep the lock bit as bit #0, and just make<br />&gt; the contention bit be the high bit. Then, on x86, you can do<br />&gt;<br />&gt;     lock andb $0xfe,flags<br />&gt;     js contention<br />&gt;<br />&gt; which might be even better. Again, it would be a very special<br />&gt; operation just for unlock. Something like<br />&gt;<br />&gt;    bit_clear_and_branch_if_negative_byte(mem, label);<br />&gt;<br />&gt; and again, it would be trivial to do on most architectures.<br />&gt;<br />&gt; Let me try to write a patch or two for testing.<br /><br />Ok, that was easy.<br /><br />Of course, none of this is *tested*, but it looks superficially<br />correct, and allows other architectures to do the same optimization if<br />they want.<br /><br />On x86, the unlock_page() code now generates<br /><br />        lock; andb $1,(%rdi)    #, MEM[(volatile long int *)_7]<br />        js      .L114   #,<br />        popq    %rbp    #<br />        ret<br /><br />for the actual unlock itself.<br /><br />Now to actually compile the whole thing and see if it boots..<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
