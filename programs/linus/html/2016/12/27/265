    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/24/103">First message in thread</a></li><li><a href="/lkml/2016/12/27/251">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/27/254">Linus Torvalds</a><ul><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Tue, 27 Dec 2016 12:17:34 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm: add PageWaiters indicating tasks are waiting for a page bit</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Tue, Dec 27, 2016 at 11:40 AM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; This patch at least might have a chance in hell of working. Let's see..<br /><br />Ok, with that fixed, things do indeed seem to work.<br /><br />And things also look fairly good on my "lots of nasty little<br />shortlived scripts" benchmark ("make -j32 test" for git, in case<br />people care).<br /><br />That benchmark used to have "unlock_page()" and "__wake_up_bit()"<br />together using about 3% of all CPU time.<br /><br />Now __wake_up_bit() doesn't show up at all (ok, it's something like<br />0.02%, so it's technically still there, but..) and "unlock_page()" is<br />at 0.66% of CPU time. So it's about a quarter of where it used to be.<br />And now it's about the same cost as the "try_lock_page() that is<br />inlined into filemap_map_pages() - it used to be that unlocking the<br />page was much more expensive than locking it because of all the<br />unnecessary waitqueue games.<br /><br />So the benchmark still does a ton of page lock/unlock action, but it<br />doesn't stand out in the profiles as some kind of WTF thing any more.<br />And the profiles really show that the cost is the atomic op itself<br />rather than bad effects from bad code generation, which is what you<br />want to see.<br /><br />Would I love to fix this all by not taking the page lock at all? Yes I<br />would. I suspect we should be able to do something clever and lockless<br />at least in theory.<br /><br />But in the meantime, I'm happy with where our page locking overhead<br />is. And while I haven't seen the NUMA numbers from Dave Hansen with<br />this all, the early testing from Dave was that the original patch from<br />Nick already fixed the regression and was the fastest one anyway. And<br />this optimization will only have improved on things further, although<br />it might not be as noticeable on NUMA as it is on just a regular<br />single socket system.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
