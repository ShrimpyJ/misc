    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/12/13/893">First message in thread</a></li><li><a href="/lkml/2016/12/14/549">Tom Herbert</a><ul><li><a href="/lkml/2016/12/14/646">"Jason A. Donenfeld"</a><ul><li><a href="/lkml/2016/12/14/663">Tom Herbert</a><ul><li><a href="/lkml/2016/12/14/668">"Jason A. Donenfeld"</a><ul><li><a href="/lkml/2016/12/17/138">Christian Kujau</a></li></ul></li></ul></li><li class="origin"><a href="/lkml/2016/12/14/677">Linus Torvalds</a><ul><li><a href="/lkml/2016/12/14/677">"Jason A. Donenfeld"</a><ul><li><a href="/lkml/2016/12/14/734">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 14 Dec 2016 15:30:55 -0800</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH v3 1/3] siphash: add cryptographically secure hashtable function</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Dec 14, 2016 at 2:56 PM, Jason A. Donenfeld &lt;Jason&#64;zx2c4.com&gt; wrote:<br />&gt;<br />&gt; So actually jhash_Nwords makes no sense, since it takes dwords<br />&gt; (32-bits) not words (16-bits). The siphash analog should be called<br />&gt; siphash24_Nqwords.<br /><br />No. The bug is talking about "words" in the first place.<br /><br />Depending on your background, a "word" can be generally be either 16<br />bits or 32 bits (or, in some cases, 18 bits).<br /><br />In theory, a 64-bit entity can be a "word" too, but pretty much nobody<br />uses that. Even architectures that started out with a 64-bit register<br />size and never had any smaller historical baggage (eg alpha) tend to<br />call 32-bit entities "words".<br /><br />So 16 bits can be a word, but some people/architectures will call it a<br />"half-word".<br /><br />To make matters even more confusing, a "quadword" is generally always<br />64 bits, regardless of the size of "word".<br /><br />So please try to avoid the use of "word" entirely. It's too ambiguous,<br />and it's not even helpful as a "size of the native register". It's<br />almost purely random.<br /><br />For the kernel, we tend use<br /><br /> - uX for types that have specific sizes (X being the number of bits)<br /><br /> - "[unsigned] long" for native register size<br /><br />But never "word".<br /><br />           Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
