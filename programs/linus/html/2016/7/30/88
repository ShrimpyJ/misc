    </div></td><td width="32"> </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/7/30/88">First message in thread</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 30 Jul 2016 12:33:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">sfi_core warnings - and a pointer arithmetic bug</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">Len,<br /> right now my tree finally contains only a couple of remaining<br />warnings, thanks to some objtool fixes and previous warning removal.<br /><br />The two remaining warnings are both from SFI:<br /><br />  drivers/sfi/sfi_core.c: In function ‘sfi_map_table’:<br />  drivers/sfi/sfi_core.c:175:53: warning: self-comparison always<br />evaluates to true [-Wtautological-compare]<br />    if (TABLE_ON_PAGE(th, th, th-&gt;len))<br />                                                       ^<br />  drivers/sfi/sfi_core.c: In function ‘sfi_unmap_table’:<br />  drivers/sfi/sfi_core.c:195:71: warning: self-comparison always<br />evaluates to true [-Wtautological-compare]<br />     sfi_unmap_memory(th, TABLE_ON_PAGE(th, th, th-&gt;len) ?<br />                                                                         ^<br /><br />and my initial reaction was that those warnings are bogus, because<br />they simply come about from the SFI code using the same generic macro<br />to test whether a table is entirely contained on the same page as<br />another variable.<br /><br />And yes, they really *are* bogus. The compiler is warning about<br />entirely immateral problems.<br /><br />But the SFI code does have another macro that it could have used and<br />that would avoid the warning, so I decided that rather than disable<br />the warning, I'd just use that other helper macro that TABLE_ON_PAGE()<br />already expands to, and apply this:<br /><br />-       if (TABLE_ON_PAGE(th, th, th-&gt;len))<br />+       if (ON_SAME_PAGE(th, th + th-&gt;len))<br />                return th;<br /><br />-               sfi_unmap_memory(th, TABLE_ON_PAGE(th, th, th-&gt;len) ?<br />+               sfi_unmap_memory(th, ON_SAME_PAGE(th, th + th-&gt;len) ?<br />                                        sizeof(*th) : th-&gt;len);<br /><br />and be done with it and have a clean build.<br /><br />However, when I did that, the warnings do go away, but I refuse to<br />actually commit it, because the code _around_ that patch is entirely<br />and utterly buggy, and the warnings are the least of the problem with<br />it.<br /><br />No, the real problem is that the is very very confused about what<br />"th-&gt;len" actually means!<br /><br />Is "th-&gt;len" the size of the table in bytes? That's what it looks<br />like, and that's what all the mapping code basically assumes (ie<br />sfi_unmap_memory() takes a byte count, and we pass in th-&gt;len to it).<br /><br />But that's not what the TABLE_ON_PAGE or ON_SAME_PAGE tests actually check!<br /><br />They both just do pointer arithmetic: that whole "th + th-&gt;len" is not<br />adding "th-&gt;len" _bytes_ to the pointer, it's adding "th-&gt;len"<br />_entries_ to the pointer. That's true whether done internally in the<br />TABLE_ON_PAGE() expansion, or done explicitly when rewriting it to use<br />"ON_SAME_PAGE(th, th + th-&gt;len)" to avoid the self-comparison.<br /><br />So I removed my patch to fix the warning, because there is a much more<br />important fix that needs to be done to that code.<br /><br />Maybe "ON_SAME_PAGE()" should take an offset as a third argument, and<br />add that offset to the pointer _after_ having cast the pointer into an<br />"unsigned long". Then the "is it on the same page" test would become<br /><br />   ON_SAME_PAGE(th, th, th-&gt;len)<br /><br />and you'd make<br /><br />  #define TABLE_ON_PAGE(page, table, size) \<br />     (ON_SAME_PAGE(page, table, 0) &amp;&amp; \<br />      ON_SAME_PAGE(page, table, size))<br /><br />or something.<br /><br />But this needs actual testing, and somebody who cares about SFI. It's<br />a bigger change than just fixing a warning, since it actually fixes<br />the code to do something different.<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
