    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2014/6/16/305">First message in thread</a></li><li><a href="/lkml/2016/7/29/135">Arnd Bergmann</a><ul><li><a href="/lkml/2016/7/29/140">Borislav Petkov</a><ul><li><a href="/lkml/2016/7/29/142">Arnd Bergmann</a></li><li class="origin"><a href="">Linus Torvalds</a></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 29 Jul 2016 11:26:16 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] Kbuild: Move -Wmaybe-uninitialized to W=1</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 29, 2016 at 3:19 AM, Borislav Petkov &lt;bp&#64;alien8.de&gt; wrote:<br />&gt;<br />&gt; So this is exactly the problem: we should not fix perfectly fine code<br />&gt; just so that gcc remains quiet. So when you say "fixed false positives"<br />&gt; you actually mean, "changed it so that gcc -Wmaybe-u... doesn't fire"<br />&gt; right?<br />&gt;<br />&gt; And we should not do that.<br /><br />It's perfectly fine to do that when it makes sense and doesn't make<br />the code worse. Adding a few unnecessary initializations to make the<br />compiler shut up is not a problem.<br /><br />But in the cases I looked at, that *really* didn't make sense. The<br />pattern was along the lines of<br /><br />  struct something var;<br /><br />  if (initialize_var(&amp;var) &lt; 0)<br />     return error;<br /><br />  .. use "var.xyz" .. - gcc complains that "var.xyz" may be uninitialized<br /><br />and quite frankly,. the code made sense, and adding crazy<br />initializations for the fact that gcc has a shit-for-brains warning<br />didn't work well seemed to just make the code worse.<br /><br />And there was no sane *pattern* to why some cases warned. We have<br />things like the above in many places. The issue seems to be that<br />"initialize_var()" needs to be inlined (automatically or explicitly<br />asked for), and then the error flow in the init function is just<br />complex enough.<br /><br />At the point where it doesn't make sense when to initialize things<br />explicitly, and it changes randomly depending on compiler version and<br />compiler command line flags, there is *no* sane way to work around it.<br /><br />We could do whack-a-mole with random code cases, but I really feel<br />that when the warning is that unreliable and the changes to the source<br />code to make the broken compiler warning shut up are completely<br />arbitrary and random, it's worse than useless.<br /><br />                Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
