    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/7/21/596">First message in thread</a></li><li><a href="/lkml/2016/7/21/596">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/574">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/612">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2016/7/21/575">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/576">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/640">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/21/765">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/22/27">Andy Lutomirski</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/7/21/577">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/578">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/579">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/639">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2016/7/21/581">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/582">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/583">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/610">Byungchul Park</a><ul><li><a href="/lkml/2016/7/21/708">Josh Poimboeuf</a></li></ul></li></ul></li><li><a href="/lkml/2016/7/21/584">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/585">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/586">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/587">Josh Poimboeuf</a></li><li><a href="/lkml/2016/7/21/588">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/22/477">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/22/493">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/23/78">Josh Poimboeuf</a></li></ul></li><li><a href="/lkml/2016/7/22/494">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/22/500">Andy Lutomirski</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/7/21/589">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/622">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2016/7/21/590">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/619">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/21/713">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/22/94">Ingo Molnar</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/7/21/592">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/613">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/21/710">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/725">Andy Lutomirski</a></li><li><a href="/lkml/2016/7/21/746">Brian Gerst</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/7/21/593">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/21/607">Andy Lutomirski</a></li></ul></li><li><a href="/lkml/2016/7/21/594">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/29/393">Steven Rostedt</a><ul><li><a href="/lkml/2016/7/29/405">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/29/415">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2016/8/1/365">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/1/384">Steven Rostedt</a></li></ul></li><li><a href="/lkml/2016/8/1/370">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/1/355">Steven Rostedt</a></li><li><a href="/lkml/2016/8/1/358">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li><li class="origin"><a href="/lkml/2016/7/22/504">Linus Torvalds</a><ul><li><a href="/lkml/2016/7/22/504">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/23/7">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/7/23/8">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 23 Jul 2016 09:22:25 +0900</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 00/19] x86/dumpstack: rewrite x86 stack dump code</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Jul 22, 2016 at 6:21 AM, Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Some if its advantages:<br />&gt;<br />&gt; - simplicity: no more callback sprawl and less code duplication.<br />&gt;<br />&gt; - flexibility: allows the caller to stop and inspect the stack state at<br />&gt;   each step in the unwinding process.<br />&gt;<br />&gt; - modularity: the unwinder code, console stack dump code, and stack<br />&gt;   metadata analysis code are all better separated so that changing one<br />&gt;   of them shouldn't have much of an impact on any of the others.<br /><br />I've been without internet for the last week, so I have a ton pending,<br />and not good enough internet even now to take a good look.<br /><br />However, I want to make one thing really really clear: the absolute<br />NUMBER ONE requirement for the stack tracing code is none of the<br />above.<br /><br />The #1 requirement is that it works, and not have a chance in hell of<br />ever breaking. We had that happen once before when people wanted to<br />make it fancy and add Dwarf info, and it was such a f*cking disaster<br />that I am not sure I ever want to do that again. Seriously.<br /><br />It does not matter if the stack tracing gives the wrong answers.<br /><br />It does not matter if the stack tracing is complicated and odd old code.<br /><br />It does not matter one whit if some new user is inconvenienced, and in<br />fact it is possible that new users should write their *own* stack<br />tracer code.<br /><br />The ONLY thing that matters (to a very high degree) is that the code<br />is stable, and if an Oops happens, the stack tracer never *ever*<br />cause even more problems than we already have.<br /><br />If the stack tracer *ever* takes a recursive fault and kills the<br />machine, the stack tracer is worse than bad - we'd be better off<br />*without* a stack tracer at all.<br /><br />And yes, we had exactly that situation, where bugs in the stack tracer<br />meant that other bugs ended up being much harder to debug, because<br />instead of a nice logged oops message that would have been trivial to<br />figure out, we very occasionally ended up with a dead machine instead.<br /><br />So without having yet looked at the code, I want people to understand<br />that to a very real degree, the stack tracer that the *oopsing* code<br />(ie what all the usual kernel fault handlers use) is very very special<br />code and needs to be handled very carefully, and needs to be extra<br />robust, even in the presence of stack corruption, and even in the<br />presence of the dwarf info being totally corrupted. Because we've very<br />much had both things happen.<br /><br />It is very possible that we should have two different stack tracers -<br />the stupid "for oopses only" code that doesn't necessarily give the<br />perfect trace, but is very anal and happily gives old stale addresses<br />(which can be very useful for seeing what happened just before the<br />"real" stack trace), and then a separate stack trace engine that is<br />clever and gets things right, and if that one faults it can depend on<br />the normal kernel fault handling picking up the pieces.<br /><br />Yes, the current stack tracer is  crufty. No, it's not perfect. But it<br />is very well tested, and has held up. That should not be dismissed.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
