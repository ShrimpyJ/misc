    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/7/21/596">First message in thread</a></li><li><a href="/lkml/2016/7/22/504">Andy Lutomirski</a><ul><li><a href="/lkml/2016/7/23/7">Josh Poimboeuf</a><ul><li class="origin"><a href="/lkml/2016/7/23/76">Linus Torvalds</a><ul><li><a href="/lkml/2016/7/23/76">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sat, 23 Jul 2016 14:39:52 +0900</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 00/19] x86/dumpstack: rewrite x86 stack dump code</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Jul 23, 2016 at 2:35 PM, Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; While doing the scanning and printing, it does call the frame pointer<br />&gt; unwinder in parallel, but like before, that's *only* used to determine<br />&gt; whether a found address should be printed without a question mark.  If<br />&gt; the unwinder goes off the rails, the scanning and printing of text<br />&gt; addresses goes on, undisturbed.<br />&gt;<br />&gt; The frame pointer unwinder code itself is quite careful not to<br />&gt; dereference anything it shouldn't (though of course I welcome any review<br />&gt; comments that find otherwise).<br /><br />So this was the bug the last time around we did unwinders - the code<br />would dereference the unwind tables, and the tables would be<br />corrupted. End result: recursive oops.<br /><br />And they were corrupted not even because of memory corruption, but<br />simply because they contained incorrect data, due to compiler bugs and<br />other issues.<br /><br />I have really bad memories from that time. Several years after the<br />fact. It took months to finally revert the crap, because the author<br />continued to insist that "this was the last bug" for several passes<br />through that thing.<br /><br />As they say, "Once burned, twice shy". But in this case, it's more<br />like "Four times burned, sixteen times as shy".<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
