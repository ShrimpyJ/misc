    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/18/393">First message in thread</a></li><li><a href="/lkml/2016/8/26/210">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/26/479">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/26/477">Josh Poimboeuf</a></li><li class="origin"><a href="/lkml/2016/8/29/377">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/29/377">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/29/413">Linus Torvalds</a></li><li><a href="/lkml/2016/8/30/564">Kees Cook</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/8/26/549/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Fri, 26 Aug 2016 17:37:20 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 2/2] mm/usercopy: enable usercopy size checking for modern versions of gcc</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Fri, Aug 26, 2016 at 1:56 PM, Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; There's one problem with that though.  It's going to annoy a lot of<br />&gt; people who do allyesconfig/allmodconfig builds because<br />&gt; DEBUG_STRICT_USER_COPY_CHECKS adds several fake warnings.<br /><br />How bad is it?<br /><br />In particular, we've definitely had issues with the "warning"<br />attribute before. Because as you pointed out somewhere elsewhere, the<br />warrning can happen before the call is actually optimized away by a<br />later compiler phase.<br /><br />In particular, we _have_ occasionally fixed this by turning it into a<br />link-time error instead (that's in fact the really traditional model).<br />That makes the errior happen much later, and the error message isn't<br />nearly as nice (you get something like "undefined reference to unknown<br />symbol '__copy_to_user_failed' in function xyz" without line numbers<br />etc nice things). But it cuts down on the false positives that come<br />from warnings triggering before the final code has actually been<br />generated.<br /><br />So one option *might* be to make the copy_to_user checks do an<br />explicitly constant and static check like<br /><br /><br />     if (__builtin_constant_p(n) &amp;&amp; sz &gt;= 0 &amp;&amp; n &gt; sz)<br />          __copy_to_user_failed();<br /><br />with the "__copy_to_user_failed()" function declared but never<br />defined. That way, at link time, if something still references it, you<br />get a link error and you'll know it's bad.<br /><br />So something like the attached patch *might* work. As mentioned, it<br />makes the error messages much less legible if they happen, and it<br />delays them to link time, so it's not perfect. But it certainly has<br />the potential of avoiding bogus warnings.<br /><br />It *seemed* to work in my quick allmodconfig build test, but that may<br />be because I screwed something up. So take that with a large pinch of<br />salt.<br /><br />What do people think? The static built-time errors - if they happen -<br />really should be pretty exceptional and unusual. So maybe it's ok that<br />they then would be somewhat cryptic, and you'd have to maybe hunt<br />(possibly through several layers of inline functions) where the actual<br />offending user copy then ends up being..<br /><br />So I'm not happy with this patch, but I also think that the false<br />positives make the *current* code simply unworkable with current gcc<br />versions.<br /><br />Of course, somebody might be able to come up with a better approach<br />that still gets the nice error messages and avoids the false<br />positives.<br /><br />                          Linus<br /> arch/x86/include/asm/uaccess.h | 99 ++++++++++++------------------------------<br /> include/linux/compiler-gcc.h   |  2 +-<br /> 2 files changed, 28 insertions(+), 73 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/uaccess.h b/arch/x86/include/asm/uaccess.h<br />index a0ae610b9280..f1fe3740b46b 100644<br />--- a/arch/x86/include/asm/uaccess.h<br />+++ b/arch/x86/include/asm/uaccess.h<br />&#64;&#64; -697,105 +697,60 &#64;&#64; unsigned long __must_check _copy_from_user(void *to, const void __user *from,<br /> unsigned long __must_check _copy_to_user(void __user *to, const void *from,<br /> 					 unsigned n);<br /> <br />-#ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS<br />-# define copy_user_diag __compiletime_error<br />-#else<br />-# define copy_user_diag __compiletime_warning<br />-#endif<br />-<br />-extern void copy_user_diag("copy_from_user() buffer size is too small")<br />-copy_from_user_overflow(void);<br />-extern void copy_user_diag("copy_to_user() buffer size is too small")<br />-copy_to_user_overflow(void) __asm__("copy_from_user_overflow");<br />-<br />-#undef copy_user_diag<br />-<br />-#ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS<br />-<br />-extern void<br />-__compiletime_warning("copy_from_user() buffer size is not provably correct")<br />-__copy_from_user_overflow(void) __asm__("copy_from_user_overflow");<br />-#define __copy_from_user_overflow(size, count) __copy_from_user_overflow()<br />-<br />-extern void<br />-__compiletime_warning("copy_to_user() buffer size is not provably correct")<br />-__copy_to_user_overflow(void) __asm__("copy_from_user_overflow");<br />-#define __copy_to_user_overflow(size, count) __copy_to_user_overflow()<br />-<br />-#else<br />-<br /> static inline void<br />-__copy_from_user_overflow(int size, unsigned long count)<br />+copy_user_overflow(int size, unsigned long count)<br /> {<br /> 	WARN(1, "Buffer overflow detected (%d &lt; %lu)!\n", size, count);<br /> }<br /> <br />-#define __copy_to_user_overflow __copy_from_user_overflow<br />-<br />-#endif<br />+extern unsigned long copy_user_bad(void);<br />+extern unsigned long copy_user_bad(void);<br /> <br /> static inline unsigned long __must_check<br /> copy_from_user(void *to, const void __user *from, unsigned long n)<br /> {<br /> 	int sz = __compiletime_object_size(to);<br /> <br />+	if (sz &gt;= 0 &amp;&amp; n &gt; sz) {<br />+		if (__builtin_constant_p(n))<br />+			return copy_user_bad();<br />+#ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS<br />+		copy_user_overflow(sz, n);<br />+		memset(to, 0, n);<br />+		return n;<br />+#endif<br />+	}<br />+<br /> 	might_fault();<br /> <br /> 	kasan_check_write(to, n);<br /> <br />-	/*<br />-	 * While we would like to have the compiler do the checking for us<br />-	 * even in the non-constant size case, any false positives there are<br />-	 * a problem (especially when DEBUG_STRICT_USER_COPY_CHECKS, but even<br />-	 * without - the [hopefully] dangerous looking nature of the warning<br />-	 * would make people go look at the respecitive call sites over and<br />-	 * over again just to find that there's no problem).<br />-	 *<br />-	 * And there are cases where it's just not realistic for the compiler<br />-	 * to prove the count to be in range. For example when multiple call<br />-	 * sites of a helper function - perhaps in different source files -<br />-	 * all doing proper range checking, yet the helper function not doing<br />-	 * so again.<br />-	 *<br />-	 * Therefore limit the compile time checking to the constant size<br />-	 * case, and do only runtime checking for non-constant sizes.<br />-	 */<br />-<br />-	if (likely(sz &lt; 0 || sz &gt;= n)) {<br />-		check_object_size(to, n, false);<br />-		n = _copy_from_user(to, from, n);<br />-	} else if (__builtin_constant_p(n))<br />-		copy_from_user_overflow();<br />-	else<br />-		__copy_from_user_overflow(sz, n);<br />-<br />-	return n;<br />+	check_object_size(to, n, false);<br />+	return copy_from_user(to, from, n);<br /> }<br /> <br /> static inline unsigned long __must_check<br /> copy_to_user(void __user *to, const void *from, unsigned long n)<br /> {<br />-	int sz = __compiletime_object_size(from);<br />+	int sz = __compiletime_object_size(to);<br />+<br />+	if (sz &gt;= 0 &amp;&amp; n &gt; sz) {<br />+		if (__builtin_constant_p(n))<br />+			return copy_user_bad();<br />+#ifdef CONFIG_DEBUG_STRICT_USER_COPY_CHECKS<br />+		copy_user_overflow(sz, n);<br />+		return n;<br />+#endif<br />+	}<br /> <br /> 	kasan_check_read(from, n);<br /> <br /> 	might_fault();<br /> <br />-	/* See the comment in copy_from_user() above. */<br />-	if (likely(sz &lt; 0 || sz &gt;= n)) {<br />-		check_object_size(from, n, true);<br />-		n = _copy_to_user(to, from, n);<br />-	} else if (__builtin_constant_p(n))<br />-		copy_to_user_overflow();<br />-	else<br />-		__copy_to_user_overflow(sz, n);<br />-<br />-	return n;<br />+	check_object_size(from, n, true);<br />+	return _copy_to_user(to, from, n);<br /> }<br /> <br />-#undef __copy_from_user_overflow<br />-#undef __copy_to_user_overflow<br />-<br /> /*<br />  * We rely on the nested NMI work to allow atomic faults from the NMI path; the<br />  * nested NMI paths are careful to preserve CR2.<br />diff --git a/include/linux/compiler-gcc.h b/include/linux/compiler-gcc.h<br />index e2949397c19b..e7f7a689ef09 100644<br />--- a/include/linux/compiler-gcc.h<br />+++ b/include/linux/compiler-gcc.h<br />&#64;&#64; -158,7 +158,7 &#64;&#64;<br /> #define __compiler_offsetof(a, b)					\<br /> 	__builtin_offsetof(a, b)<br /> <br />-#if GCC_VERSION &gt;= 40100 &amp;&amp; GCC_VERSION &lt; 40600<br />+#if GCC_VERSION &gt;= 40100<br /> # define __compiletime_object_size(obj) __builtin_object_size(obj, 0)<br /> #endif<br /> </pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
