    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/24/540">First message in thread</a></li><li><a href="/lkml/2016/8/25/676">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/25/771">Kees Cook</a></li><li><a href="/lkml/2016/8/25/798">Josh Poimboeuf</a><ul><li class="origin"><a href="/lkml/2016/8/26/22">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/26/22">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/26/200">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 25 Aug 2016 21:40:12 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/6] x86/dumpstack: make printk_stack_address() more generally useful</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 25, 2016 at 8:19 PM, Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt; For an oops, there are other opportunities for address leakage besides<br />&gt; the stack trace function addresses.  There's the raw stack dump which<br />&gt; dumps the first 12 stack entries.  And there's the register dump.  I'm<br />&gt; pretty sure we don't want to get rid of those.<br /><br />We actually probably *do* want to get rid of the stack dump. It's<br />likely not really useful any more, and more legacy noise.<br /><br />The register contents we definitely don't want to remove, obviously.<br />But apart from EIP itself (and LR etc on other architectures), those<br />actually rather seldom contain code addresses, so that kind of data is<br />rather harder to misuse.<br /><br />That said, if you can trigger an oops, you do quite likely have a<br />security problem already.<br /><br />So oopses aren't necessarily the first thing to worry about. I'd worry<br />more about things like WARN_ON_ONCE() that are much more likely things<br />that might be triggerable (ie we do occasionally have things like<br />warning for legacy system calls that shouldn't be used any more)<br /><br />&gt; I suppose we could come up with some innovative way to filter or<br />&gt; sanitize kernel addresses from the stack dump and the registers.  But<br />&gt; that probably hurts usability for kernel developers.<br /><br />Yeah, but see above: an oops really does tend to often be a security<br />issue on its own, especially if it can be triggered arbitrarily by an<br />attacker.<br /><br />&gt; Another issue is that there are a lot of duplicate symbol names in the<br />&gt; kernel.  So the symbol name alone might not be enough to disambiguate<br />&gt; the function address.<br /><br />That is true. It's seldom a big issue, though. Nobody actually uses<br />the address for anything _anyway_, so people end up disambiguating<br />those things based on context regardless.<br /><br />Again, something like addr2line could be an exception, but (a) that<br />thing is useless in most situations due to randomization and (b) if<br />you don't randomize then the whole discussion is moot.<br /><br />Plus add2line could just show all options, and then you end up doing<br />human disambiguation anyway.<br /><br />&gt; Not to mention the fact that today there are a gazillion uses of<br />&gt; printk() with '%p' in the kernel.<br /><br />Yes. And some of them have been stupiud security issues on their own,<br />and have nothing to do with symbol names. See for example commit<br />31b0b385f69d ("nf_conntrack: avoid kernel pointer value leak in slab<br />name")<br /><br />&gt; So yes, dmesg_restrict sounds useful to me.  It's a way to prevent users<br />&gt; from seeing kernel addresses without affecting my ability to debug<br />&gt; issues.  For a locked down system, why would non-root users need to<br />&gt; access dmesg anyway?<br /><br />That's the point. It is only useful for locked-down systems.<br /><br />But that also means that IT IS NOT USEFUL AS A SECURITY ARGUMENT -<br />since it's simply not relevant to most systems out there.<br /><br />Most systems aren't locked down.<br /><br />&gt; How exactly does removing data from the stack dump make it more useful?<br /><br />I actually spend time cleaning up commit messages in logs, because<br />useless data that isn't actually information (random hex numbers) is<br />actively detrimental.<br /><br />It makes commit logs less legible.<br /><br />It also makes it harder to parse dumps.<br /><br />It's not useful. That makes it actively bad.<br /><br />I probably look at more oops reports than most people. I have not<br />found the hex numbers useful for the last five years, because they are<br />just randomized crap.<br /><br />The stack content thing just makes code scroll off the screen etc, for example.<br /><br />So in order for data to be useful, it has to be more than "data". It<br />has to be "information". More random useless hex noise is not good.<br /><br />                   Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
