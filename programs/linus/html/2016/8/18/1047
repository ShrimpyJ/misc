    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/17/583">First message in thread</a></li><li><a href="/lkml/2016/8/17/583">Kees Cook</a><ul><li><a href="/lkml/2016/8/18/597">Rik van Riel</a><ul><li class="origin"><a href="/lkml/2016/8/18/849">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/18/849">Rik van Riel</a><ul><li><a href="/lkml/2016/8/19/644">Kees Cook</a></li></ul></li></ul></li><li><a href="/lkml/2016/8/19/314">Michal Hocko</a></li></ul></li><li><a href="/lkml/2016/8/19/681">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/19/696">Kees Cook</a><ul><li><a href="/lkml/2016/8/19/698">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><script type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js"></script><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 18 Aug 2016 10:42:09 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] usercopy: Skip multi-page bounds checking on SLOB</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 18, 2016 at 7:21 AM, Rik van Riel &lt;riel&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; One big question I have for Linus is, do we want<br />&gt; to allow code that does a higher order allocation,<br />&gt; and then frees part of it in smaller orders, or<br />&gt; individual pages, and keeps using the remainder?<br /><br />Yes. We've even had people do that, afaik. IOW, if you know you're<br />going to allocate 16 pages, you can try to do an order-4 allocation<br />and just use the 16 pages directly (but still as individual pages),<br />and avoid extra allocation costs (and to perhaps get better access<br />patterns if the allocation succeeds etc etc).<br /><br />That sounds odd, but it actually makes sense when you have the order-4<br />allocation as a optimistic path (and fall back to doing smaller orders<br />when a big-order allocation fails). To make that *purely* just an<br />optimization, you need to let the user then treat that order-4<br />allocation as individual pages, and free them one by one etc.<br /><br />So I'm not sure anybody actually does that, but the buddy allocator<br />was partly designed for that case.<br /><br />&gt; From both a hardening and a simple stability<br />&gt; point of view, allowing memory to be allocated<br />&gt; in one size, and freed in another, seems like<br />&gt; it could be asking for bugs.<br /><br />Quite frankly, I'd much rather instead make a hard rule that "user<br />copies can never be more than one page".<br /><br />There are *very* few things that actually have bigger user copies, and<br />we could make those explicitly loop, or mark them as such.<br /><br />The single-page size limit is fairly natural because of how both our<br />page cache and our pathname limiting is limited to single pages.<br /><br />The only thing that generally isn't a single page tends to be:<br /><br /> - module loading code with vmalloc destination<br /><br />   We *already* chunk that for other reasons, although we ended up<br />making the chunk size be 16 pages. Making it a single page wouldn't<br />really hurt anything.<br /><br /> - we probably have networking cases that might have big socket buffer<br />allocations etc.<br /><br /> - there could be some very strange driver, but we'd find them fairly<br />quickly if we just start out with making th ecopy_from/to_user()<br />callers just unconditionally have a<br /><br />     WARN_ON_ONCE((len) &gt; PAGE_SIZE);<br /><br />  and not making it fatal, but making it easy to find.<br /><br />Anyway, I think *that* would be a much easier rule to start with than<br />worrying about page crossing.<br /><br />Yes, page crossing can be nasty, and maybe we can try to aim for that<br />in the future (and mark things that the FPU saving special, because it<br />really is very very unusual), but I'd actually prefer the 4kB rule<br />first because that would also allow us to just get rid of the odd<br />vmalloc special cases etc in the checking.<br /><br />            Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
