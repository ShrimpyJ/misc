    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/9/440">First message in thread</a></li><li><a href="/lkml/2016/8/18/998">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/19/4">Dave Chinner</a><ul><li class="origin"><a href="/lkml/2016/8/19/273">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/19/273">Michal Hocko</a></li><li><a href="/lkml/2016/8/19/318">Mel Gorman</a><ul><li><a href="/lkml/2016/8/19/788">Dave Chinner</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Thu, 18 Aug 2016 15:25:40 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [LKP] [lkp] [xfs] 68a9f5e700: aim7.jobs-per-min -13.6% regression</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Thu, Aug 18, 2016 at 2:19 PM, Dave Chinner &lt;david&#64;fromorbit.com&gt; wrote:<br />&gt;<br />&gt; For streaming or use-once IO it makes a lot of sense to restrict the<br />&gt; locality of the page cache. The faster the IO device, the less dirty<br />&gt; page buffering we need to maintain full device bandwidth. And the<br />&gt; larger the machine the greater the effect of global page cache<br />&gt; pollution on the other appplications is.<br /><br />Yes. But I agree with you that it might be very hard to actually get<br />something that does a good job automagically.<br /><br />&gt;&gt; In fact, looking at the __page_cache_alloc(), we already have that<br />&gt;&gt; "spread pages out" logic. I'm assuming Dave doesn't actually have that<br />&gt;&gt; bit set (I don't think it's the default), but I'm also envisioning<br />&gt;&gt; that maybe we could extend on that notion, and try to spread out<br />&gt;&gt; allocations in general, but keep page allocations from one particular<br />&gt;&gt; mapping within one node.<br />&gt;<br />&gt; CONFIG_CPUSETS=y<br />&gt;<br />&gt; But I don't have any cpusets configured (unless systemd is doing<br />&gt; something wacky under the covers) so the page spread bit should not<br />&gt; be set.<br /><br />Yeah, but even when it's not set we just do a generic alloc_pages(),<br />which is just going to fill up all nodes. Not perhaps quite as "spread<br />out", but there's obviously no attempt to try to be node-aware either.<br /><br />So _if_ we come up with some reasonable way to say "let's keep the<br />pages of this mapping together", we could try to do it in that<br />numa-aware __page_cache_alloc().<br /><br />It *could* be as simple/stupid as just saying "let's allocate the page<br />cache for new pages from the current node" - and if the process that<br />dirties pages just stays around on one single node, that might already<br />be sufficient.<br /><br />So just for testing purposes, you could try changing that<br /><br />        return alloc_pages(gfp, 0);<br /><br />in __page_cache_alloc() into something like<br /><br />        return alloc_pages_node(cpu_to_node(raw_smp_processor_id())), gfp, 0);<br /><br />or something.<br /><br />&gt;&gt; The fact that zone_reclaim_mode really improves on Dave's numbers<br />&gt;&gt; *that* dramatically does seem to imply that there is something to be<br />&gt;&gt; said for this.<br />&gt;&gt;<br />&gt;&gt; We do *not* want to limit the whole page cache to a particular node -<br />&gt;&gt; that sounds very unreasonable in general. But limiting any particular<br />&gt;&gt; file mapping (by default - I'm sure there are things like databases<br />&gt;&gt; that just want their one DB file to take over all of memory) to a<br />&gt;&gt; single node sounds much less unreasonable.<br />&gt;&gt;<br />&gt;&gt; What do you guys think? Worth exploring?<br />&gt;<br />&gt; The problem is that whenever we turn this sort of behaviour on, some<br />&gt; benchmark regresses because it no longer holds it's working set in<br />&gt; the page cache, leading to the change being immediately reverted.<br />&gt; Enterprise java benchmarks ring a bell, for some reason.<br /><br />Yeah. It might be ok if we limit the new behavior to just new pages<br />that get allocated for writing, which is where we want to limit the<br />page cache more anyway (we already have all those dirty limits etc).<br /><br />But from a testing standpoint, you can probably try the above<br />"alloc_pages_node()" hack and see if it even makes a difference. It<br />might not work, and the dirtier might be moving around too much etc.<br /><br />             Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
