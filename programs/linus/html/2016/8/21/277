    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/19/671">First message in thread</a></li><li><a href="/lkml/2016/8/21/3">Jakub Jelinek</a><ul><li><a href="/lkml/2016/8/21/9">Al Viro</a><ul><li class="origin"><a href="/lkml/2016/8/22/828">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/22/828">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/22/881">"H. Peter Anvin"</a></li><li><a href="/lkml/2016/8/22/888">"H. Peter Anvin"</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Sun, 21 Aug 2016 10:52:14 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH] ARC: uaccess: get_user to zero out dest in cause of fault</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Sat, Aug 20, 2016 at 11:42 PM, Al Viro &lt;viro&#64;zeniv.linux.org.uk&gt; wrote:<br />&gt;<br />&gt; It's not exactly setjmp/longjmp; what I had in mind was along the lines of<br /><br />That ends up having all the exact same issues as setjmp, and generally<br />you *do* want the compiler to know about it.<br /><br />For example, let's say that you have something like<br /><br />    if (start())<br />        return -EFAULT;<br /><br />    ... do things that can fault and trigger an exception ..<br /><br />    stop();<br />    return 0;<br /><br />then it doesn't matter that "start" clobbers all memory and registers,<br />if it returns twice the code generation by a compiler that doesn't<br />know about the magical setjmp-like behavior can trigger bugs.<br /><br />For example, the most common case is that lots of compilers try to<br />share the final return-point - sometimes because of instrumentation,<br />sometimes just because there's a big stack frame and the return is a<br />lot of pop instructions and stack undo code.<br /><br />And *particularly* if your magical 'start()' function has an inline<br />asm that clobbers memory and registers, the compiler will have to<br />spill state to stack around it - but part of the spill might be the<br />return value that it had in a register.<br /><br />So the compiler might end up generating code like this:<br /><br />         movl $-EFAULT,8(%rbp)    # retval<br />         call start<br />         testl %eax,%eax<br />         jne return_point;<br /><br />         ...<br /><br />         movl $0,8(%rbp)    # retval<br /><br />         ....<br /><br />    return_point:<br />        .. pop-pop-pop-whatever ..<br />        movl 4(%rbp),%eax<br />        .. more stack frame cleanup ..<br />        ret<br /><br />and notice how if "start()" returns a second time - even if it<br />restored all registers including the stack pointer - the function<br />might return the wrong error value if the exception that caused<br />longjmp happened after the code that had updated the return.<br /><br />There are lots of other ways a setjmp() point is special. Some<br />compilers might push/pop values just temporarily around a call, so you<br />might have sequences like<br /><br />     pushq %rdx<br />     call fn<br />     popq %rdx<br /><br />where the compiler wanted to save register %rdx around the call (I've<br />never actually seen gcc generate that code, the exact same thing may<br />happen with just random register spills).<br /><br />Again, that fails completely in the presence of a function that<br />returns twice - even it the stack pointer itself gets reset, the stack<br />*contents* that the code pops the saved value of %rdx might have been<br />re-used for something else (and for a register spill, the frame slot<br />might have been re-used). So now you're restoring garbage.<br /><br />So the interface you propose is in fact *exactly* the same as setjmp,<br />and we'd need to make sure that the compiler knows that.<br /><br />                       Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
