    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/16/518">First message in thread</a></li><li><a href="/lkml/2016/8/16/517">Jakub Kicinski</a><ul><li><a href="/lkml/2016/8/17/193">Kalle Valo</a><ul><li class="origin"><a href="/lkml/2016/8/17/398">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/17/398">Jakub Kicinski</a><ul><li><a href="/lkml/2016/8/17/403">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Aug 2016 09:33:26 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCHv6 1/2] add basic register-field manipulation macros</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 17, 2016 at 3:31 AM, Kalle Valo &lt;kvalo&#64;codeaurora.org&gt; wrote:<br />&gt;<br />&gt; Are people ok with this? I think they are useful and I can take these<br />&gt; through my tree, but I would prefer to get an ack from other maintainers<br />&gt; first. Dave? Andrew?<br /><br />I'm not a huge fan, since the interface fundamentally seems to be<br />oddly designed (why pass in the mask rather than "start bit +<br />length"?).<br /><br />I also don't like how this very much would match the GENMASK() macros<br />we have, but then it clashes with them in other ways<br /><br /> - it's in a different header file<br /><br /> - it has completely different naming (GENMASK_ULL vs FIELD_GET64}.<br /><br />I actually think the naming could/should be fixed by just<br />automatically doing the right thing based on sizes.  For example,<br />GENMASK could just have something like<br /><br />  #define GENMASK(end,start) __builtin_choose_expr((end)&gt;31,<br />__GENMASK_64(end,start), __GENMASK_32(end,start))<br /><br />and doing similar things with the FIELD_GET/SET ops.<br /><br />So I'm not entirely happy about this all.<br /><br />But if people love the interface, and think the above kind of cleanups<br />might be possible, I'd just want to make sure that there is also a<br /><br />       BUILD_BUG_ON(!__builtin_constant_p(_mask));<br /><br />because if the mask isn't a build-time constant, the code ends up<br />being *complete* shit. Also preferably something like<br /><br />       BUILD_BUG_ON((_mask) &gt; (typeof(_val)~0ull);<br /><br />to make sure you can't try to mask bits that don't exist in the value.<br /><br />Or something like that to make mis-uses *really* obvious.<br /><br />The FIELD_PUT macro also seems misnamed. It doesn't "put" anything<br />(unlike the GET macro). It just prepares the field for inserting<br />later. As exemplified by how you actually have to put things:<br /><br />First, "GET" - yeah, that looks like a "get" operation:<br /><br /> * Get:<br /> *  a = FIELD_GET(REG_FIELD_A, reg);<br /><br />But then "PUT" isn't actually a PUT operation at all, but the comments<br />kind of gloss over it by talking about "Modify" instead:<br /><br /> * Modify:<br /> *  reg &amp;= ~REG_FIELD_C;<br /> *  reg |= FIELD_PUT(REG_FIELD_C, c);<br /><br />so I'm not entirely sure about the naming.<br /><br />I can live with the FIELD_PUT naming, because I see how it comes<br />about, even if I think it's a bit odd. I might have called it<br />"FIELD_PREP" instead, but I'm not really sure that's all that much<br />better.<br /><br />Am I being a bit anal? Yeah. But when we add whole new abstractions<br />that we haven't used historically, I'd really like those to be obvious<br />and easy to use (or rather, really _hard_ to get wrong by mistake).<br /><br />Hmm?<br /><br />                  Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
