    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/17/407">First message in thread</a></li><li><a href="/lkml/2016/8/17/488">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/17/481">Denys Vlasenko</a><ul><li><a href="/lkml/2016/8/17/491">Linus Torvalds</a></li></ul></li><li><a href="/lkml/2016/8/17/482">Linus Torvalds</a><ul><li class="origin"><a href="/lkml/2016/8/17/556">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/17/556">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/17/566">Andy Lutomirski</a></li><li><a href="/lkml/2016/8/18/132">Denys Vlasenko</a></li></ul></li></ul></li></ul></li></ul></li></ul><div class="threadlist">Patch in this message</div><ul class="threadlist"><li><a href="/lkml/diff/2016/8/17/552/1">Get diff 1</a></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 17 Aug 2016 14:26:51 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: RFC: Petition Intel/AMD to add POPF_IF insn</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 17, 2016 at 12:37 PM, Linus Torvalds<br />&lt;torvalds&#64;linux-foundation.org&gt; wrote:<br />&gt;<br />&gt; Replace the "popf" with "if (val &amp; X86_EFLAGS_IF) local_irq_enable();"<br />&gt; and see how that works out. Play with inlining it or not, and see if<br />&gt; the branch predictor matters.<br /><br />.. actually, thinking a bit more about it, I really don't think the<br />branch predictor will even matter.<br /><br />We sure as hell shouldn't have nested irq-safe interrupts in paths<br />that matter from a performance angle, so the normal case for<br />spin_unlock_irqrestore() should be to enable interrupts again.<br /><br />And if interrupts are disabled because the caller is actually in<br />interrupt context, I don't think the branch prediction is going to<br />matter, compared to the irq overhead.<br /><br />So test this trivial patch. It's ENTIRELY UNTESTED. It may be complete<br />crap and not even compile. But I did test it on<br />kernel/locking/spinlock.c, and the generated code is beautiful:<br /><br />  _raw_spin_unlock_irqrestore:<br />        testl   $512, %esi      #, flags<br />        movb    $0, (%rdi)      #, MEM[(volatile __u8 *)lock_2(D)]<br />        je      .L2<br />        sti<br />  .L2:<br />        ret<br /><br />so maybe the silly popf has always just been stupid.<br /><br />Of course, if somebody uses native_restore_fl() to actually *disable*<br />interrupts (when they weren't already disabled), then this untested<br />patch will just not work. But why would you do somethign so stupid?<br />Famous last words...<br /><br />                 Linus<br /> arch/x86/include/asm/irqflags.h | 26 ++++++++++++--------------<br /> 1 file changed, 12 insertions(+), 14 deletions(-)<br /><br />diff --git a/arch/x86/include/asm/irqflags.h b/arch/x86/include/asm/irqflags.h<br />index b77f5edb03b0..76c4ebfab0be 100644<br />--- a/arch/x86/include/asm/irqflags.h<br />+++ b/arch/x86/include/asm/irqflags.h<br />&#64;&#64; -8,6 +8,16 &#64;&#64;<br />  * Interrupt control:<br />  */<br /> <br />+static inline void native_irq_disable(void)<br />+{<br />+	asm volatile("cli": : :"memory");<br />+}<br />+<br />+static inline void native_irq_enable(void)<br />+{<br />+	asm volatile("sti": : :"memory");<br />+}<br />+<br /> static inline unsigned long native_save_fl(void)<br /> {<br /> 	unsigned long flags;<br />&#64;&#64; -28,20 +38,8 &#64;&#64; static inline unsigned long native_save_fl(void)<br /> <br /> static inline void native_restore_fl(unsigned long flags)<br /> {<br />-	asm volatile("push %0 ; popf"<br />-		     : /* no output */<br />-		     :"g" (flags)<br />-		     :"memory", "cc");<br />-}<br />-<br />-static inline void native_irq_disable(void)<br />-{<br />-	asm volatile("cli": : :"memory");<br />-}<br />-<br />-static inline void native_irq_enable(void)<br />-{<br />-	asm volatile("sti": : :"memory");<br />+	if (flags &amp; X86_EFLAGS_IF)<br />+		native_irq_enable();<br /> }<br /> <br /> static inline void native_safe_halt(void)</pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
