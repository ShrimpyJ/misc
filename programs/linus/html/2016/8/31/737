    </div></td><td width="32">Â </td></tr><tr><td valign="top"><div class="es-jasper-simpleCalendar" baseurl="/lkml/"></div><div class="threadlist">Messages in this thread</div><ul class="threadlist"><li class="root"><a href="/lkml/2016/8/24/540">First message in thread</a></li><li><a href="/lkml/2016/8/24/610">Linus Torvalds</a><ul><li><a href="/lkml/2016/8/24/643">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/25/556">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/8/25/669">Kees Cook</a><ul><li><a href="/lkml/2016/8/25/676">Josh Poimboeuf</a></li></ul></li></ul></li></ul></li><li><a href="/lkml/2016/8/31/706">Josh Poimboeuf</a><ul><li class="origin"><a href="/lkml/2016/9/1/364">Linus Torvalds</a><ul><li><a href="/lkml/2016/9/1/364">Josh Poimboeuf</a><ul><li><a href="/lkml/2016/9/1/497">Linus Torvalds</a></li></ul></li></ul></li></ul></li></ul></li></ul></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerl.gif" width="32" height="32" alt="/" /></td><td class="c" rowspan="2" valign="top" style="padding-top: 1em"><table><tr><td colspan="2"><!--BuySellAds Zone Code--><div id="bsap_1297613" class="bsarocks bsap_5aa49c00cc06c882289a1dd6a5e50b62"></div><!--End BuySellAds Zone Code--></td></tr><tr><td><table><tr><td class="lp">From</td><td class="rp" itemprop="author">Linus Torvalds &lt;&gt;</td></tr><tr><td class="lp">Date</td><td class="rp" itemprop="datePublished">Wed, 31 Aug 2016 10:15:19 -0700</td></tr><tr><td class="lp">Subject</td><td class="rp" itemprop="name">Re: [PATCH 3/6] x86/dumpstack: make printk_stack_address() more generally useful</td></tr></table></td><td><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></td></tr></table><pre itemprop="articleBody">On Wed, Aug 31, 2016 at 9:53 AM, Josh Poimboeuf &lt;jpoimboe&#64;redhat.com&gt; wrote:<br />&gt;<br />&gt; Here's an example of what a stack dump looks like after this change:<br /><br />Looks good, but it also shows:<br /><br />&gt;   RSP: 0018:ffffc900008f3a68  EFLAGS: 00010246<br /><br />Ok, we know the stack pointer now...<br /><br />&gt;   RBP: ffffc900008f3a80 R08: 00000002a014a073 R09: ffffc900008f3aa0<br /><br />.. and it looks like we have a frame pointer too, which is pretty<br />close to the stack pointer. So let's look at the stack dump:<br /><br />&gt;   Stack:<br />&gt;    ffff880079af7350 ffff880079905400 0000000000000000 ffffc900008f3ae0<br />&gt;    ffffffffa0196610 0000000000000001 00010000ffffffff 0000000087654321<br /><br />Yeah, counting down, the frame pointer points to the next frame, and<br />right after that you see the return address: 0xffffffffa0196610.<br /><br />So let's look at the call trace:<br /><br />&gt;   Call Trace:<br />&gt;    __send_control_msg+0x80/0xf0 [virtio_console]<br /><br />Ok, so now we can match up that value to a symbol.<br /><br />And that means that now we can match up *all* symbols in that module.<br />Even if the module isn't readable on that machine, you can just look<br />it up by checking the distro modules on another machine.<br /><br />And if it had been core kernel code, you'd haev had the whole core<br />kernel ofdfsets.<br /><br />So I think the patch is good, and I think the oops looks great, but I<br />think we should also just remove the stack dump. Sure, the register<br />state *can* contain these things too, but almost never do (and didn't,<br />in this example).<br /><br />The stack dump actually goes back to forever, and it used to be useful<br />back in 1992 or so. But it used to be useful mainly because stacks<br />were simpler and we didn't have very good call traces anyway. I<br />definitely remember having used them - I just do not remember having<br />used them in the last ten+ years.<br /><br />Of course, it's still true that if you can trigger an oops, you've<br />likely already lost the security game, but since the stack dump is so<br />useless, let's aim to just remove it and make games like the above<br />harder.<br /><br />I'm also sure that we probably have a lot of other addresses in dmesg<br />that we should make sure aren't leaked. I did a quick grep and found<br /><br /> Base memory trampoline at [ffff8f5e00097000] 97000 size 24576<br /> percpu: Embedded 35 pages/cpu &#64;ffff8f6236c00000 s103640 r8192 d31528 u262144<br /> Freeing SMP alternatives memory: 32K (ffffffffaaec1000 - ffffffffaaec9000)<br /><br />and a few more, and didn't check if those might give load addresses<br />away, but it would be good to check.<br /><br />                 Linus<br /><br /></pre><div align="center"><div class="shariff" data-services="[&quot;reddit&quot;]" data-theme="grey" data-lang="en" data-backend-url="//shariff.lkml.org/index.php"></div></div></td><td width="32" rowspan="2" class="c" valign="top"><img src="/images/icornerr.gif" width="32" height="32" alt="\" /></td></tr><tr><td align="right" valign="bottom">
